
REF-LAB-CCD_00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002950  0800b220  0800b220  0001b220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db70  0800db70  0001db70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db78  0800db78  0001db78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800db7c  0800db7c  0001db7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00012168  20000000  0800db80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009670  20012168  0801fce8  00032168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2001b7d8  0801fce8  0003b7d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00032168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ab75  00000000  00000000  00032196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005e53  00000000  00000000  0006cd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000132aa  00000000  00000000  00072b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001088  00000000  00000000  00085e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000022b0  00000000  00000000  00086e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038b37  00000000  00000000  00089140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000255c0  00000000  00000000  000c1c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00156143  00000000  00000000  000e7237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0023d37a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004de0  00000000  00000000  0023d3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  002421b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  0024227c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20012168 	.word	0x20012168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b208 	.word	0x0800b208

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2001216c 	.word	0x2001216c
 80002dc:	0800b208 	.word	0x0800b208

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068a:	4d0d      	ldr	r5, [pc, #52]	; (80006c0 <HAL_InitTick+0x38>)
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <HAL_InitTick+0x3c>)
{
 8000692:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	7829      	ldrb	r1, [r5, #0]
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	fbb3 f3f1 	udiv	r3, r3, r1
 800069c:	fbb2 f0f3 	udiv	r0, r2, r3
 80006a0:	f000 fe94 	bl	80013cc <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a4:	b908      	cbnz	r0, 80006aa <HAL_InitTick+0x22>
 80006a6:	2c0f      	cmp	r4, #15
 80006a8:	d901      	bls.n	80006ae <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80006ac:	bd38      	pop	{r3, r4, r5, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ae:	2200      	movs	r2, #0
 80006b0:	4621      	mov	r1, r4
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295
 80006b6:	f000 fe41 	bl	800133c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ba:	2000      	movs	r0, #0
 80006bc:	606c      	str	r4, [r5, #4]
}
 80006be:	bd38      	pop	{r3, r4, r5, pc}
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20011f8c 	.word	0x20011f8c

080006c8 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
{
 80006ca:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	f000 fe22 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ffd9 	bl	8000688 <HAL_InitTick>
 80006d6:	b110      	cbz	r0, 80006de <HAL_Init+0x16>
    return HAL_ERROR;
 80006d8:	2401      	movs	r4, #1
}
 80006da:	4620      	mov	r0, r4
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	4604      	mov	r4, r0
  HAL_MspInit();
 80006e0:	f006 f9e2 	bl	8006aa8 <HAL_MspInit>
}
 80006e4:	4620      	mov	r0, r4
 80006e6:	bd10      	pop	{r4, pc}

080006e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x10>)
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_IncTick+0x14>)
 80006ec:	6811      	ldr	r1, [r2, #0]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	440b      	add	r3, r1
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20012184 	.word	0x20012184
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000700:	4b01      	ldr	r3, [pc, #4]	; (8000708 <HAL_GetTick+0x8>)
 8000702:	6818      	ldr	r0, [r3, #0]
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20012184 	.word	0x20012184

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b538      	push	{r3, r4, r5, lr}
 800070e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000710:	f7ff fff6 	bl	8000700 <HAL_GetTick>
 8000714:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000716:	1c63      	adds	r3, r4, #1
 8000718:	d002      	beq.n	8000720 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <HAL_Delay+0x20>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000720:	f7ff ffee 	bl	8000700 <HAL_GetTick>
 8000724:	1b43      	subs	r3, r0, r5
 8000726:	42a3      	cmp	r3, r4
 8000728:	d3fa      	bcc.n	8000720 <HAL_Delay+0x14>
  {
  }
}
 800072a:	bd38      	pop	{r3, r4, r5, pc}
 800072c:	20000000 	.word	0x20000000

08000730 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 8000732:	2300      	movs	r3, #0
{
 8000734:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8000736:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if(hadc == NULL)
 8000738:	2800      	cmp	r0, #0
 800073a:	f000 80f7 	beq.w	800092c <HAL_ADC_Init+0x1fc>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));


  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800073e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000740:	4604      	mov	r4, r0
 8000742:	2d00      	cmp	r5, #0
 8000744:	f000 80d6 	beq.w	80008f4 <HAL_ADC_Init+0x1c4>
  }


  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state                        */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 8000748:	6822      	ldr	r2, [r4, #0]
 800074a:	6893      	ldr	r3, [r2, #8]
 800074c:	009e      	lsls	r6, r3, #2
 800074e:	d503      	bpl.n	8000758 <HAL_ADC_Init+0x28>
  {
    /* Exit deep power down mode */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8000750:	6893      	ldr	r3, [r2, #8]
 8000752:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000756:	6093      	str	r3, [r2, #8]
       be relaunched or a previously saved calibration factor
       re-applied once the ADC voltage regulator is enabled   */
  }


  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000758:	6893      	ldr	r3, [r2, #8]
 800075a:	00dd      	lsls	r5, r3, #3
 800075c:	d415      	bmi.n	800078a <HAL_ADC_Init+0x5a>
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
    /* Delay for ADC stabilization time                                       */
    /* Wait loop initialization and execution                                 */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800075e:	4ba2      	ldr	r3, [pc, #648]	; (80009e8 <HAL_ADC_Init+0x2b8>)
 8000760:	48a2      	ldr	r0, [pc, #648]	; (80009ec <HAL_ADC_Init+0x2bc>)
 8000762:	681b      	ldr	r3, [r3, #0]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8000764:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000766:	fba0 0303 	umull	r0, r3, r0, r3
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 800076a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800076e:	0cdb      	lsrs	r3, r3, #19
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8000770:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800077a:	9b01      	ldr	r3, [sp, #4]
 800077c:	b12b      	cbz	r3, 800078a <HAL_ADC_Init+0x5a>
    {
      wait_loop_index--;
 800077e:	9b01      	ldr	r3, [sp, #4]
 8000780:	3b01      	subs	r3, #1
 8000782:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000784:	9b01      	ldr	r3, [sp, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f9      	bne.n	800077e <HAL_ADC_Init+0x4e>


  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800078a:	6893      	ldr	r3, [r2, #8]
 800078c:	00d8      	lsls	r0, r3, #3
 800078e:	f140 809e 	bpl.w	80008ce <HAL_ADC_Init+0x19e>

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000792:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000794:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000796:	06d9      	lsls	r1, r3, #27
 8000798:	f100 80a5 	bmi.w	80008e6 <HAL_ADC_Init+0x1b6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 800079c:	6893      	ldr	r3, [r2, #8]
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800079e:	075b      	lsls	r3, r3, #29
 80007a0:	f100 80a1 	bmi.w	80008e6 <HAL_ADC_Init+0x1b6>
  {

    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80007a4:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Configuration of common ADC parameters                                 */

    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80007a6:	4992      	ldr	r1, [pc, #584]	; (80009f0 <HAL_ADC_Init+0x2c0>)
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80007a8:	f043 0302 	orr.w	r3, r3, #2
    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80007ac:	428a      	cmp	r2, r1
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80007ae:	6563      	str	r3, [r4, #84]	; 0x54
    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 80007b0:	f000 80a6 	beq.w	8000900 <HAL_ADC_Init+0x1d0>
 80007b4:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <HAL_ADC_Init+0x2c4>)
 80007b6:	429a      	cmp	r2, r3
 80007b8:	f000 80a2 	beq.w	8000900 <HAL_ADC_Init+0x1d0>
    }

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80007bc:	6893      	ldr	r3, [r2, #8]
 80007be:	f003 0303 	and.w	r3, r3, #3
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	f000 80da 	beq.w	800097c <HAL_ADC_Init+0x24c>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80007c8:	4989      	ldr	r1, [pc, #548]	; (80009f0 <HAL_ADC_Init+0x2c0>)
 80007ca:	688b      	ldr	r3, [r1, #8]
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	f000 80e8 	beq.w	80009a6 <HAL_ADC_Init+0x276>
 80007d6:	4988      	ldr	r1, [pc, #544]	; (80009f8 <HAL_ADC_Init+0x2c8>)
 80007d8:	4d86      	ldr	r5, [pc, #536]	; (80009f4 <HAL_ADC_Init+0x2c4>)
 80007da:	68ab      	ldr	r3, [r5, #8]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	f000 80ae 	beq.w	8000942 <HAL_ADC_Init+0x212>
      /*     HAL_ADCEx_MultiModeConfigChannel())                              */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */

      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 80007e6:	688b      	ldr	r3, [r1, #8]
 80007e8:	6865      	ldr	r5, [r4, #4]
 80007ea:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80007ee:	432b      	orrs	r3, r5
 80007f0:	608b      	str	r3, [r1, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 80007f6:	fa95 f5a5 	rbit	r5, r5
 80007fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 80007fe:	fab5 f585 	clz	r5, r5
                 hadc->Init.Overrun                                          |
                 hadc->Init.Resolution                                       |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000802:	7f27      	ldrb	r7, [r4, #28]
 8000804:	fa93 f3a3 	rbit	r3, r3
 8000808:	fab3 f383 	clz	r3, r3
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 800080c:	f894 c015 	ldrb.w	ip, [r4, #21]
                 hadc->Init.Overrun                                          |
 8000810:	6b21      	ldr	r1, [r4, #48]	; 0x30

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000812:	2f01      	cmp	r7, #1
                 hadc->Init.Overrun                                          |
 8000814:	68a6      	ldr	r6, [r4, #8]
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8000816:	fa0c fc05 	lsl.w	ip, ip, r5
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800081a:	fa07 f503 	lsl.w	r5, r7, r3
                 hadc->Init.Overrun                                          |
 800081e:	ea41 0306 	orr.w	r3, r1, r6
 8000822:	ea43 030c 	orr.w	r3, r3, ip
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8000826:	ea43 0305 	orr.w	r3, r3, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800082a:	d109      	bne.n	8000840 <HAL_ADC_Init+0x110>
 800082c:	f44f 2560 	mov.w	r5, #917504	; 0xe0000
 8000830:	fa95 f5a5 	rbit	r5, r5
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000834:	6a21      	ldr	r1, [r4, #32]
 8000836:	fab5 f585 	clz	r5, r5
 800083a:	3901      	subs	r1, #1
 800083c:	40a9      	lsls	r1, r5
 800083e:	430b      	orrs	r3, r1
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000840:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000842:	2901      	cmp	r1, #1
 8000844:	d003      	beq.n	800084e <HAL_ADC_Init+0x11e>
        && (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 8000846:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000848:	b10d      	cbz	r5, 800084e <HAL_ADC_Init+0x11e>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 800084a:	4329      	orrs	r1, r5
 800084c:	430b      	orrs	r3, r1
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800084e:	68d5      	ldr	r5, [r2, #12]
 8000850:	496a      	ldr	r1, [pc, #424]	; (80009fc <HAL_ADC_Init+0x2cc>)
 8000852:	4029      	ands	r1, r5
 8000854:	430b      	orrs	r3, r1
 8000856:	60d3      	str	r3, [r2, #12]
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    /*  - Boost Mode                      BoostMode                           */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000858:	6893      	ldr	r3, [r2, #8]
 800085a:	f013 0f0c 	tst.w	r3, #12
 800085e:	d127      	bne.n	80008b0 <HAL_ADC_Init+0x180>
 8000860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000864:	fa91 f1a1 	rbit	r1, r1
    {
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.ConversionDataManagement) );

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000868:	4b65      	ldr	r3, [pc, #404]	; (8000a00 <HAL_ADC_Init+0x2d0>)
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800086a:	fab1 f181 	clz	r1, r1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800086e:	68d6      	ldr	r6, [r2, #12]
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000870:	7d25      	ldrb	r5, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000872:	4033      	ands	r3, r6
 8000874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000876:	fa05 f101 	lsl.w	r1, r5, r1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800087a:	4333      	orrs	r3, r6
 800087c:	430b      	orrs	r3, r1
 800087e:	60d3      	str	r3, [r2, #12]


      if (hadc->Init.OversamplingMode == ENABLE)
 8000880:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8000884:	2b01      	cmp	r3, #1
 8000886:	d07e      	beq.n	8000986 <HAL_ADC_Init+0x256>
                                         hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000888:	6913      	ldr	r3, [r2, #16]
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6113      	str	r3, [r2, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000890:	6913      	ldr	r3, [r2, #16]
 8000892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000894:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000898:	430b      	orrs	r3, r1
 800089a:	6113      	str	r3, [r2, #16]

      /* Configure the BOOST Mode */
      if(hadc->Init.BoostMode == ENABLE)
 800089c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80008a0:	2b01      	cmp	r3, #1
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 80008a2:	6893      	ldr	r3, [r2, #8]
 80008a4:	bf0c      	ite	eq
 80008a6:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 80008aa:	f423 7380 	bicne.w	r3, r3, #256	; 0x100
 80008ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80008b0:	68e3      	ldr	r3, [r4, #12]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d03d      	beq.n	8000932 <HAL_ADC_Init+0x202>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80008b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80008b8:	f023 030f 	bic.w	r3, r3, #15
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
    }


    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80008be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008c0:	f023 0303 	bic.w	r3, r3, #3
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6563      	str	r3, [r4, #84]	; 0x54


  /* Return function status */
  return tmp_hal_status;

}
 80008ca:	b003      	add	sp, #12
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80008d0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008da:	4303      	orrs	r3, r0
 80008dc:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008e0:	06d9      	lsls	r1, r3, #27
 80008e2:	f57f af5b 	bpl.w	800079c <HAL_ADC_Init+0x6c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80008e8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6563      	str	r3, [r4, #84]	; 0x54
}
 80008f0:	b003      	add	sp, #12
 80008f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80008f4:	f004 ff02 	bl	80056fc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80008f8:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80008fa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80008fe:	e723      	b.n	8000748 <HAL_ADC_Init+0x18>
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000900:	6893      	ldr	r3, [r2, #8]
 8000902:	f003 0303 	and.w	r3, r3, #3
 8000906:	2b01      	cmp	r3, #1
 8000908:	d033      	beq.n	8000972 <HAL_ADC_Init+0x242>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 800090a:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <HAL_ADC_Init+0x2c0>)
 800090c:	429a      	cmp	r2, r3
 800090e:	d122      	bne.n	8000956 <HAL_ADC_Init+0x226>
 8000910:	4938      	ldr	r1, [pc, #224]	; (80009f4 <HAL_ADC_Init+0x2c4>)
 8000912:	688b      	ldr	r3, [r1, #8]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d017      	beq.n	800094c <HAL_ADC_Init+0x21c>
 800091c:	4939      	ldr	r1, [pc, #228]	; (8000a04 <HAL_ADC_Init+0x2d4>)
 800091e:	688b      	ldr	r3, [r1, #8]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	2b01      	cmp	r3, #1
 8000926:	d047      	beq.n	80009b8 <HAL_ADC_Init+0x288>
 8000928:	4937      	ldr	r1, [pc, #220]	; (8000a08 <HAL_ADC_Init+0x2d8>)
 800092a:	e75c      	b.n	80007e6 <HAL_ADC_Init+0xb6>
    return HAL_ERROR;
 800092c:	2001      	movs	r0, #1
}
 800092e:	b003      	add	sp, #12
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000932:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000934:	69a3      	ldr	r3, [r4, #24]
 8000936:	f021 010f 	bic.w	r1, r1, #15
 800093a:	3b01      	subs	r3, #1
 800093c:	430b      	orrs	r3, r1
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	e7bd      	b.n	80008be <HAL_ADC_Init+0x18e>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000942:	682b      	ldr	r3, [r5, #0]
 8000944:	07dd      	lsls	r5, r3, #31
 8000946:	f53f af54 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 800094a:	e74c      	b.n	80007e6 <HAL_ADC_Init+0xb6>
 800094c:	680b      	ldr	r3, [r1, #0]
 800094e:	07de      	lsls	r6, r3, #31
 8000950:	f53f af4f 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 8000954:	e7e2      	b.n	800091c <HAL_ADC_Init+0x1ec>
 8000956:	4926      	ldr	r1, [pc, #152]	; (80009f0 <HAL_ADC_Init+0x2c0>)
 8000958:	688b      	ldr	r3, [r1, #8]
 800095a:	f003 0303 	and.w	r3, r3, #3
 800095e:	2b01      	cmp	r3, #1
 8000960:	d033      	beq.n	80009ca <HAL_ADC_Init+0x29a>
 8000962:	4928      	ldr	r1, [pc, #160]	; (8000a04 <HAL_ADC_Init+0x2d4>)
 8000964:	688b      	ldr	r3, [r1, #8]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b01      	cmp	r3, #1
 800096c:	d032      	beq.n	80009d4 <HAL_ADC_Init+0x2a4>
 800096e:	4926      	ldr	r1, [pc, #152]	; (8000a08 <HAL_ADC_Init+0x2d8>)
 8000970:	e732      	b.n	80007d8 <HAL_ADC_Init+0xa8>
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000972:	6813      	ldr	r3, [r2, #0]
 8000974:	07df      	lsls	r7, r3, #31
 8000976:	f53f af3c 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 800097a:	e7c6      	b.n	800090a <HAL_ADC_Init+0x1da>
 800097c:	6813      	ldr	r3, [r2, #0]
 800097e:	07db      	lsls	r3, r3, #31
 8000980:	f53f af37 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 8000984:	e720      	b.n	80007c8 <HAL_ADC_Init+0x98>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000986:	6915      	ldr	r5, [r2, #16]
 8000988:	4e20      	ldr	r6, [pc, #128]	; (8000a0c <HAL_ADC_Init+0x2dc>)
 800098a:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
 800098e:	402e      	ands	r6, r5
 8000990:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000992:	430b      	orrs	r3, r1
 8000994:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000996:	4333      	orrs	r3, r6
 8000998:	432b      	orrs	r3, r5
 800099a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6113      	str	r3, [r2, #16]
 80009a4:	e774      	b.n	8000890 <HAL_ADC_Init+0x160>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80009a6:	680b      	ldr	r3, [r1, #0]
 80009a8:	07de      	lsls	r6, r3, #31
 80009aa:	f53f af22 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 80009ae:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 80009b2:	f501 4186 	add.w	r1, r1, #17152	; 0x4300
 80009b6:	e70f      	b.n	80007d8 <HAL_ADC_Init+0xa8>
 80009b8:	680b      	ldr	r3, [r1, #0]
 80009ba:	07dd      	lsls	r5, r3, #31
 80009bc:	f53f af19 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 80009c0:	f101 4168 	add.w	r1, r1, #3892314112	; 0xe8000000
 80009c4:	f5a1 5174 	sub.w	r1, r1, #15616	; 0x3d00
 80009c8:	e70d      	b.n	80007e6 <HAL_ADC_Init+0xb6>
 80009ca:	680b      	ldr	r3, [r1, #0]
 80009cc:	07db      	lsls	r3, r3, #31
 80009ce:	f53f af10 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 80009d2:	e7c6      	b.n	8000962 <HAL_ADC_Init+0x232>
 80009d4:	680b      	ldr	r3, [r1, #0]
 80009d6:	07df      	lsls	r7, r3, #31
 80009d8:	f53f af0b 	bmi.w	80007f2 <HAL_ADC_Init+0xc2>
 80009dc:	f101 4168 	add.w	r1, r1, #3892314112	; 0xe8000000
 80009e0:	f5a1 5174 	sub.w	r1, r1, #15616	; 0x3d00
 80009e4:	e6f8      	b.n	80007d8 <HAL_ADC_Init+0xa8>
 80009e6:	bf00      	nop
 80009e8:	20011f8c 	.word	0x20011f8c
 80009ec:	431bde83 	.word	0x431bde83
 80009f0:	40022000 	.word	0x40022000
 80009f4:	40022100 	.word	0x40022100
 80009f8:	58026300 	.word	0x58026300
 80009fc:	fff0c003 	.word	0xfff0c003
 8000a00:	ffffbffc 	.word	0xffffbffc
 8000a04:	58026000 	.word	0x58026000
 8000a08:	40022300 	.word	0x40022300
 8000a0c:	fc00f81e 	.word	0xfc00f81e

08000a10 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000a10:	6803      	ldr	r3, [r0, #0]
 8000a12:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8000a1c:	2300      	movs	r3, #0
{
 8000a1e:	b084      	sub	sp, #16
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
  }

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a20:	68cf      	ldr	r7, [r1, #12]
  __IO uint32_t wait_loop_index = 0;
 8000a22:	9303      	str	r3, [sp, #12]
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a24:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	f000 814a 	beq.w	8000cc2 <HAL_ADC_ConfigChannel+0x2aa>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	2001      	movs	r0, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  /*  - Preselection of ADC inputs                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a32:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8000a34:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a38:	689c      	ldr	r4, [r3, #8]
 8000a3a:	0765      	lsls	r5, r4, #29
 8000a3c:	d459      	bmi.n	8000af2 <HAL_ADC_ConfigChannel+0xda>
  {
    /* ADC channels preselction */
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8000a3e:	680e      	ldr	r6, [r1, #0]
 8000a40:	69dd      	ldr	r5, [r3, #28]

    /* Regular sequence configuration */
    /* Clear the old SQx bits then set the new ones for the selected rank */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 8000a42:	684c      	ldr	r4, [r1, #4]
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8000a44:	40b0      	lsls	r0, r6
    if (sConfig->Rank < 5)
 8000a46:	2c04      	cmp	r4, #4
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8000a48:	ea45 0500 	orr.w	r5, r5, r0
 8000a4c:	61dd      	str	r5, [r3, #28]
    if (sConfig->Rank < 5)
 8000a4e:	f200 80cb 	bhi.w	8000be8 <HAL_ADC_ConfigChannel+0x1d0>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000a52:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000a56:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8000a5a:	fa95 fea5 	rbit	lr, r5
 8000a5e:	fabe fe8e 	clz	lr, lr
 8000a62:	fa95 f5a5 	rbit	r5, r5
 8000a66:	f04f 081f 	mov.w	r8, #31
 8000a6a:	fab5 f585 	clz	r5, r5
 8000a6e:	fb04 fe0e 	mul.w	lr, r4, lr
 8000a72:	fb04 f405 	mul.w	r4, r4, r5
 8000a76:	fa08 f50e 	lsl.w	r5, r8, lr
 8000a7a:	fa06 f404 	lsl.w	r4, r6, r4
 8000a7e:	ea2c 0505 	bic.w	r5, ip, r5
 8000a82:	432c      	orrs	r4, r5
 8000a84:	631c      	str	r4, [r3, #48]	; 0x30
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a86:	689c      	ldr	r4, [r3, #8]
 8000a88:	f014 0f0c 	tst.w	r4, #12
 8000a8c:	d158      	bne.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
    {

      /* Channel sampling time configuration */
      /* Clear the old sample time then set the new one for the selected channel */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a8e:	2e09      	cmp	r6, #9
 8000a90:	f200 80d0 	bhi.w	8000c34 <HAL_ADC_ConfigChannel+0x21c>
                  ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
                  ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel));
      }
      else /* For channels 0 to 9 */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000a94:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8000a98:	2438      	movs	r4, #56	; 0x38
 8000a9a:	fa94 fea4 	rbit	lr, r4
 8000a9e:	fabe fe8e 	clz	lr, lr
 8000aa2:	fa94 f4a4 	rbit	r4, r4
 8000aa6:	f04f 0807 	mov.w	r8, #7
 8000aaa:	fab4 f484 	clz	r4, r4
 8000aae:	fb06 fe0e 	mul.w	lr, r6, lr
 8000ab2:	688d      	ldr	r5, [r1, #8]
 8000ab4:	fb06 f404 	mul.w	r4, r6, r4
 8000ab8:	fa08 fe0e 	lsl.w	lr, r8, lr
 8000abc:	40a5      	lsls	r5, r4
 8000abe:	ea2c 040e 	bic.w	r4, ip, lr
 8000ac2:	432c      	orrs	r4, r5
 8000ac4:	615c      	str	r4, [r3, #20]

      /* Configure the offset: offset enable/disable, channel, offset value, Signed saturation feature */
     
      /* Shift the offset in function of the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000ac6:	694d      	ldr	r5, [r1, #20]
 8000ac8:	68dc      	ldr	r4, [r3, #12]
 8000aca:	9501      	str	r5, [sp, #4]
 8000acc:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000ad0:	690d      	ldr	r5, [r1, #16]
 8000ad2:	0064      	lsls	r4, r4, #1
 8000ad4:	f105 3cff 	add.w	ip, r5, #4294967295
 8000ad8:	9d01      	ldr	r5, [sp, #4]
 8000ada:	40a5      	lsls	r5, r4
 8000adc:	462c      	mov	r4, r5
     
      switch (sConfig->OffsetNumber)
 8000ade:	f1bc 0f03 	cmp.w	ip, #3
 8000ae2:	f200 81e6 	bhi.w	8000eb2 <HAL_ADC_ConfigChannel+0x49a>
 8000ae6:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8000aea:	000e      	.short	0x000e
 8000aec:	016e018c 	.word	0x016e018c
 8000af0:	014f      	.short	0x014f
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000af2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	6553      	str	r3, [r2, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000afa:	2300      	movs	r3, #0
 8000afc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8000b00:	b004      	add	sp, #16
 8000b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           MODIFY_REG(hadc->Instance->OFR1,
 8000b06:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8000b08:	f04f 4cf8 	mov.w	ip, #2080374784	; 0x7c000000
 8000b0c:	fa9c fcac 	rbit	ip, ip
 8000b10:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8000b14:	fabc fc8c 	clz	ip, ip
 8000b18:	432c      	orrs	r4, r5
 8000b1a:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000b1e:	ea44 040c 	orr.w	r4, r4, ip
 8000b22:	661c      	str	r4, [r3, #96]	; 0x60
           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT1, sConfig->OffsetRightShift);
 8000b24:	691c      	ldr	r4, [r3, #16]
 8000b26:	7e0d      	ldrb	r5, [r1, #24]
 8000b28:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8000b2c:	432c      	orrs	r4, r5
 8000b2e:	611c      	str	r4, [r3, #16]
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8000b30:	7e4c      	ldrb	r4, [r1, #25]
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	f000 8203 	beq.w	8000f3e <HAL_ADC_ConfigChannel+0x526>
              SET_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000b38:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000b3a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8000b3e:	661c      	str	r4, [r3, #96]	; 0x60
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b40:	689c      	ldr	r4, [r3, #8]
 8000b42:	f004 0403 	and.w	r4, r4, #3
 8000b46:	2c01      	cmp	r4, #1
 8000b48:	f000 80b6 	beq.w	8000cb8 <HAL_ADC_ConfigChannel+0x2a0>
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b4c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8000b50:	f000 80bb 	beq.w	8000cca <HAL_ADC_ConfigChannel+0x2b2>
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000b58:	ea21 0000 	bic.w	r0, r1, r0
 8000b5c:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8000b60:	49c0      	ldr	r1, [pc, #768]	; (8000e64 <HAL_ADC_ConfigChannel+0x44c>)
 8000b62:	48c1      	ldr	r0, [pc, #772]	; (8000e68 <HAL_ADC_ConfigChannel+0x450>)
 8000b64:	1a59      	subs	r1, r3, r1
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8000b66:	4cc1      	ldr	r4, [pc, #772]	; (8000e6c <HAL_ADC_ConfigChannel+0x454>)
 8000b68:	4dc1      	ldr	r5, [pc, #772]	; (8000e70 <HAL_ADC_ConfigChannel+0x458>)
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8000b6a:	fab1 f181 	clz	r1, r1
 8000b6e:	0949      	lsrs	r1, r1, #5
 8000b70:	4283      	cmp	r3, r0
 8000b72:	bf14      	ite	ne
 8000b74:	4608      	movne	r0, r1
 8000b76:	f041 0001 	orreq.w	r0, r1, #1
        tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2100      	moveq	r1, #0
 8000b80:	4625      	movne	r5, r4
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000b82:	2e12      	cmp	r6, #18
 8000b84:	d051      	beq.n	8000c2a <HAL_ADC_ConfigChannel+0x212>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000b86:	2e11      	cmp	r6, #17
 8000b88:	f040 80c2 	bne.w	8000d10 <HAL_ADC_ConfigChannel+0x2f8>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000b8c:	68ac      	ldr	r4, [r5, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 8000b8e:	01e4      	lsls	r4, r4, #7
 8000b90:	d44e      	bmi.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000b92:	689c      	ldr	r4, [r3, #8]
 8000b94:	f004 0403 	and.w	r4, r4, #3
 8000b98:	2c01      	cmp	r4, #1
 8000b9a:	f000 8083 	beq.w	8000ca4 <HAL_ADC_ConfigChannel+0x28c>
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	f040 816a 	bne.w	8000e78 <HAL_ADC_ConfigChannel+0x460>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	f040 814a 	bne.w	8000e3e <HAL_ADC_ConfigChannel+0x426>
 8000baa:	48ae      	ldr	r0, [pc, #696]	; (8000e64 <HAL_ADC_ConfigChannel+0x44c>)
 8000bac:	6881      	ldr	r1, [r0, #8]
 8000bae:	f001 0103 	and.w	r1, r1, #3
 8000bb2:	2901      	cmp	r1, #1
 8000bb4:	f000 8151 	beq.w	8000e5a <HAL_ADC_ConfigChannel+0x442>
 8000bb8:	48ab      	ldr	r0, [pc, #684]	; (8000e68 <HAL_ADC_ConfigChannel+0x450>)
 8000bba:	6881      	ldr	r1, [r0, #8]
 8000bbc:	f001 0103 	and.w	r1, r1, #3
 8000bc0:	2901      	cmp	r1, #1
 8000bc2:	f000 8167 	beq.w	8000e94 <HAL_ADC_ConfigChannel+0x47c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8000bc6:	2e12      	cmp	r6, #18
 8000bc8:	49aa      	ldr	r1, [pc, #680]	; (8000e74 <HAL_ADC_ConfigChannel+0x45c>)
 8000bca:	f000 81bd 	beq.w	8000f48 <HAL_ADC_ConfigChannel+0x530>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 8000bce:	2e11      	cmp	r6, #17
 8000bd0:	f000 81d6 	beq.w	8000f80 <HAL_ADC_ConfigChannel+0x568>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d12b      	bne.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
 8000bd8:	2e13      	cmp	r6, #19
 8000bda:	d129      	bne.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000bdc:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bde:	2000      	movs	r0, #0
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be4:	60ab      	str	r3, [r5, #8]
 8000be6:	e788      	b.n	8000afa <HAL_ADC_ConfigChannel+0xe2>
    else if (sConfig->Rank < 10)
 8000be8:	2c09      	cmp	r4, #9
 8000bea:	d93f      	bls.n	8000c6c <HAL_ADC_ConfigChannel+0x254>
    else if (sConfig->Rank < 15)
 8000bec:	2c0e      	cmp	r4, #14
 8000bee:	f200 80af 	bhi.w	8000d50 <HAL_ADC_ConfigChannel+0x338>
      MODIFY_REG(hadc->Instance->SQR3,
 8000bf2:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 8000bf6:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8000bfa:	fa95 fea5 	rbit	lr, r5
 8000bfe:	fabe fe8e 	clz	lr, lr
 8000c02:	3c0a      	subs	r4, #10
 8000c04:	fa95 f5a5 	rbit	r5, r5
 8000c08:	f04f 081f 	mov.w	r8, #31
 8000c0c:	fab5 f585 	clz	r5, r5
 8000c10:	fb04 fe0e 	mul.w	lr, r4, lr
 8000c14:	fb04 f405 	mul.w	r4, r4, r5
 8000c18:	fa08 f50e 	lsl.w	r5, r8, lr
 8000c1c:	fa06 f404 	lsl.w	r4, r6, r4
 8000c20:	ea2c 0505 	bic.w	r5, ip, r5
 8000c24:	432c      	orrs	r4, r5
 8000c26:	639c      	str	r4, [r3, #56]	; 0x38
 8000c28:	e72d      	b.n	8000a86 <HAL_ADC_ConfigChannel+0x6e>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c2a:	68ac      	ldr	r4, [r5, #8]
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c2c:	0227      	lsls	r7, r4, #8
 8000c2e:	d5b0      	bpl.n	8000b92 <HAL_ADC_ConfigChannel+0x17a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c30:	2000      	movs	r0, #0
 8000c32:	e762      	b.n	8000afa <HAL_ADC_ConfigChannel+0xe2>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000c34:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8000c38:	2538      	movs	r5, #56	; 0x38
 8000c3a:	fa95 fea5 	rbit	lr, r5
 8000c3e:	fabe fe8e 	clz	lr, lr
 8000c42:	f1a6 040a 	sub.w	r4, r6, #10
 8000c46:	fa95 f5a5 	rbit	r5, r5
 8000c4a:	f04f 0807 	mov.w	r8, #7
 8000c4e:	fab5 f585 	clz	r5, r5
 8000c52:	fb04 fe0e 	mul.w	lr, r4, lr
 8000c56:	fb04 f405 	mul.w	r4, r4, r5
 8000c5a:	688d      	ldr	r5, [r1, #8]
 8000c5c:	fa08 fe0e 	lsl.w	lr, r8, lr
 8000c60:	40a5      	lsls	r5, r4
 8000c62:	ea2c 040e 	bic.w	r4, ip, lr
 8000c66:	432c      	orrs	r4, r5
 8000c68:	619c      	str	r4, [r3, #24]
 8000c6a:	e72c      	b.n	8000ac6 <HAL_ADC_ConfigChannel+0xae>
      MODIFY_REG(hadc->Instance->SQR2,
 8000c6c:	f8d3 c034 	ldr.w	ip, [r3, #52]	; 0x34
 8000c70:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8000c74:	fa95 fea5 	rbit	lr, r5
 8000c78:	fabe fe8e 	clz	lr, lr
 8000c7c:	3c05      	subs	r4, #5
 8000c7e:	fa95 f5a5 	rbit	r5, r5
 8000c82:	f04f 081f 	mov.w	r8, #31
 8000c86:	fab5 f585 	clz	r5, r5
 8000c8a:	fb04 fe0e 	mul.w	lr, r4, lr
 8000c8e:	fb04 f405 	mul.w	r4, r4, r5
 8000c92:	fa08 f50e 	lsl.w	r5, r8, lr
 8000c96:	fa06 f404 	lsl.w	r4, r6, r4
 8000c9a:	ea2c 0505 	bic.w	r5, ip, r5
 8000c9e:	432c      	orrs	r4, r5
 8000ca0:	635c      	str	r4, [r3, #52]	; 0x34
 8000ca2:	e6f0      	b.n	8000a86 <HAL_ADC_ConfigChannel+0x6e>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000ca4:	681c      	ldr	r4, [r3, #0]
 8000ca6:	07e4      	lsls	r4, r4, #31
 8000ca8:	f57f af79 	bpl.w	8000b9e <HAL_ADC_ConfigChannel+0x186>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cac:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000cae:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	6553      	str	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000cb6:	e720      	b.n	8000afa <HAL_ADC_ConfigChannel+0xe2>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cb8:	681c      	ldr	r4, [r3, #0]
 8000cba:	07e4      	lsls	r4, r4, #31
 8000cbc:	f57f af46 	bpl.w	8000b4c <HAL_ADC_ConfigChannel+0x134>
 8000cc0:	e7b6      	b.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
  __HAL_LOCK(hadc);
 8000cc2:	2002      	movs	r0, #2
}
 8000cc4:	b004      	add	sp, #16
 8000cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000cca:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8000cce:	2e08      	cmp	r6, #8
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000cd0:	ea40 0004 	orr.w	r0, r0, r4
 8000cd4:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8000cd8:	d920      	bls.n	8000d1c <HAL_ADC_ConfigChannel+0x304>
          MODIFY_REG(hadc->Instance->SMPR2,
 8000cda:	699d      	ldr	r5, [r3, #24]
 8000cdc:	2438      	movs	r4, #56	; 0x38
 8000cde:	fa94 f7a4 	rbit	r7, r4
 8000ce2:	fab7 f787 	clz	r7, r7
 8000ce6:	f1a6 0009 	sub.w	r0, r6, #9
 8000cea:	fa94 f4a4 	rbit	r4, r4
 8000cee:	f04f 0c07 	mov.w	ip, #7
 8000cf2:	fb00 f707 	mul.w	r7, r0, r7
 8000cf6:	fab4 f484 	clz	r4, r4
 8000cfa:	6889      	ldr	r1, [r1, #8]
 8000cfc:	fa0c f707 	lsl.w	r7, ip, r7
 8000d00:	fb00 f004 	mul.w	r0, r0, r4
 8000d04:	4081      	lsls	r1, r0
 8000d06:	ea25 0007 	bic.w	r0, r5, r7
 8000d0a:	4308      	orrs	r0, r1
 8000d0c:	6198      	str	r0, [r3, #24]
 8000d0e:	e727      	b.n	8000b60 <HAL_ADC_ConfigChannel+0x148>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d10:	2e13      	cmp	r6, #19
 8000d12:	d18d      	bne.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000d14:	68ac      	ldr	r4, [r5, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d16:	0267      	lsls	r7, r4, #9
 8000d18:	d48a      	bmi.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
 8000d1a:	e73a      	b.n	8000b92 <HAL_ADC_ConfigChannel+0x17a>
          MODIFY_REG(hadc->Instance->SMPR1,
 8000d1c:	695c      	ldr	r4, [r3, #20]
 8000d1e:	2038      	movs	r0, #56	; 0x38
 8000d20:	fa90 f5a0 	rbit	r5, r0
 8000d24:	fab5 f585 	clz	r5, r5
 8000d28:	3601      	adds	r6, #1
 8000d2a:	fa90 f0a0 	rbit	r0, r0
 8000d2e:	2707      	movs	r7, #7
 8000d30:	fb06 f505 	mul.w	r5, r6, r5
 8000d34:	fab0 f080 	clz	r0, r0
 8000d38:	6889      	ldr	r1, [r1, #8]
 8000d3a:	fa07 f505 	lsl.w	r5, r7, r5
 8000d3e:	fb06 f600 	mul.w	r6, r6, r0
 8000d42:	fa01 f606 	lsl.w	r6, r1, r6
 8000d46:	ea24 0105 	bic.w	r1, r4, r5
 8000d4a:	4331      	orrs	r1, r6
 8000d4c:	6159      	str	r1, [r3, #20]
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8000d4e:	e76f      	b.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
      MODIFY_REG(hadc->Instance->SQR4,
 8000d50:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
 8000d54:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8000d58:	fa95 fea5 	rbit	lr, r5
 8000d5c:	fabe fe8e 	clz	lr, lr
 8000d60:	3c0f      	subs	r4, #15
 8000d62:	fa95 f5a5 	rbit	r5, r5
 8000d66:	f04f 081f 	mov.w	r8, #31
 8000d6a:	fab5 f585 	clz	r5, r5
 8000d6e:	fb04 fe0e 	mul.w	lr, r4, lr
 8000d72:	fb04 f405 	mul.w	r4, r4, r5
 8000d76:	fa08 f50e 	lsl.w	r5, r8, lr
 8000d7a:	fa06 f404 	lsl.w	r4, r6, r4
 8000d7e:	ea2c 0505 	bic.w	r5, ip, r5
 8000d82:	432c      	orrs	r4, r5
 8000d84:	63dc      	str	r4, [r3, #60]	; 0x3c
 8000d86:	e67e      	b.n	8000a86 <HAL_ADC_ConfigChannel+0x6e>
          MODIFY_REG(hadc->Instance->OFR4,
 8000d88:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8000d8a:	f04f 4cf8 	mov.w	ip, #2080374784	; 0x7c000000
 8000d8e:	fa9c fcac 	rbit	ip, ip
 8000d92:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8000d96:	fabc fc8c 	clz	ip, ip
 8000d9a:	432c      	orrs	r4, r5
 8000d9c:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000da0:	ea44 040c 	orr.w	r4, r4, ip
 8000da4:	66dc      	str	r4, [r3, #108]	; 0x6c
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT4, (sConfig->OffsetRightShift)<<3);
 8000da6:	691c      	ldr	r4, [r3, #16]
 8000da8:	7e0d      	ldrb	r5, [r1, #24]
 8000daa:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8000dae:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 8000db2:	611c      	str	r4, [r3, #16]
          if(sConfig->OffsetSignedSaturation != DISABLE)
 8000db4:	7e4c      	ldrb	r4, [r1, #25]
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	f000 80bc 	beq.w	8000f34 <HAL_ADC_ConfigChannel+0x51c>
            SET_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000dbc:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8000dbe:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8000dc2:	66dc      	str	r4, [r3, #108]	; 0x6c
 8000dc4:	e6bc      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
          MODIFY_REG(hadc->Instance->OFR3,
 8000dc6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8000dc8:	f04f 4cf8 	mov.w	ip, #2080374784	; 0x7c000000
 8000dcc:	fa9c fcac 	rbit	ip, ip
 8000dd0:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8000dd4:	fabc fc8c 	clz	ip, ip
 8000dd8:	432c      	orrs	r4, r5
 8000dda:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000dde:	ea44 040c 	orr.w	r4, r4, ip
 8000de2:	669c      	str	r4, [r3, #104]	; 0x68
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT3, (sConfig->OffsetRightShift)<<2);
 8000de4:	691c      	ldr	r4, [r3, #16]
 8000de6:	7e0d      	ldrb	r5, [r1, #24]
 8000de8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8000dec:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8000df0:	611c      	str	r4, [r3, #16]
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8000df2:	7e4c      	ldrb	r4, [r1, #25]
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d052      	beq.n	8000e9e <HAL_ADC_ConfigChannel+0x486>
              SET_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000df8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8000dfa:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8000dfe:	669c      	str	r4, [r3, #104]	; 0x68
 8000e00:	e69e      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
          MODIFY_REG(hadc->Instance->OFR2,
 8000e02:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8000e04:	f04f 4cf8 	mov.w	ip, #2080374784	; 0x7c000000
 8000e08:	fa9c fcac 	rbit	ip, ip
 8000e0c:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8000e10:	fabc fc8c 	clz	ip, ip
 8000e14:	432c      	orrs	r4, r5
 8000e16:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000e1a:	ea44 040c 	orr.w	r4, r4, ip
 8000e1e:	665c      	str	r4, [r3, #100]	; 0x64
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT2, (sConfig->OffsetRightShift)<<1);
 8000e20:	691c      	ldr	r4, [r3, #16]
 8000e22:	7e0d      	ldrb	r5, [r1, #24]
 8000e24:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000e28:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8000e2c:	611c      	str	r4, [r3, #16]
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8000e2e:	7e4c      	ldrb	r4, [r1, #25]
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d039      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x490>
              SET_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000e34:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8000e36:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8000e3a:	665c      	str	r4, [r3, #100]	; 0x64
 8000e3c:	e680      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <HAL_ADC_ConfigChannel+0x44c>)
 8000e40:	6881      	ldr	r1, [r0, #8]
 8000e42:	f001 0103 	and.w	r1, r1, #3
 8000e46:	2901      	cmp	r1, #1
 8000e48:	f000 80a8 	beq.w	8000f9c <HAL_ADC_ConfigChannel+0x584>
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <HAL_ADC_ConfigChannel+0x45c>)
 8000e4e:	6881      	ldr	r1, [r0, #8]
 8000e50:	f001 0103 	and.w	r1, r1, #3
 8000e54:	2901      	cmp	r1, #1
 8000e56:	f47f aeaf 	bne.w	8000bb8 <HAL_ADC_ConfigChannel+0x1a0>
 8000e5a:	6801      	ldr	r1, [r0, #0]
 8000e5c:	07c8      	lsls	r0, r1, #31
 8000e5e:	f53f af25 	bmi.w	8000cac <HAL_ADC_ConfigChannel+0x294>
 8000e62:	e6a9      	b.n	8000bb8 <HAL_ADC_ConfigChannel+0x1a0>
 8000e64:	40022000 	.word	0x40022000
 8000e68:	40022100 	.word	0x40022100
 8000e6c:	40022300 	.word	0x40022300
 8000e70:	58026300 	.word	0x58026300
 8000e74:	58026000 	.word	0x58026000
 8000e78:	484b      	ldr	r0, [pc, #300]	; (8000fa8 <HAL_ADC_ConfigChannel+0x590>)
 8000e7a:	6881      	ldr	r1, [r0, #8]
 8000e7c:	f001 0103 	and.w	r1, r1, #3
 8000e80:	2901      	cmp	r1, #1
 8000e82:	f000 8086 	beq.w	8000f92 <HAL_ADC_ConfigChannel+0x57a>
 8000e86:	4849      	ldr	r0, [pc, #292]	; (8000fac <HAL_ADC_ConfigChannel+0x594>)
 8000e88:	6881      	ldr	r1, [r0, #8]
 8000e8a:	f001 0103 	and.w	r1, r1, #3
 8000e8e:	2901      	cmp	r1, #1
 8000e90:	f47f ae99 	bne.w	8000bc6 <HAL_ADC_ConfigChannel+0x1ae>
 8000e94:	6801      	ldr	r1, [r0, #0]
 8000e96:	07c9      	lsls	r1, r1, #31
 8000e98:	f53f af08 	bmi.w	8000cac <HAL_ADC_ConfigChannel+0x294>
 8000e9c:	e693      	b.n	8000bc6 <HAL_ADC_ConfigChannel+0x1ae>
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000e9e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8000ea0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000ea4:	669c      	str	r4, [r3, #104]	; 0x68
 8000ea6:	e64b      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000ea8:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8000eaa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000eae:	665c      	str	r4, [r3, #100]	; 0x64
 8000eb0:	e646      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eb2:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8000eb4:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 8000eb8:	fa94 f4a4 	rbit	r4, r4
 8000ebc:	fab4 f484 	clz	r4, r4
 8000ec0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000ec4:	fa06 f404 	lsl.w	r4, r6, r4
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	d103      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x4bc>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000ecc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000ece:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000ed2:	661c      	str	r4, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ed4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8000ed6:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 8000eda:	fa94 f4a4 	rbit	r4, r4
 8000ede:	fab4 f484 	clz	r4, r4
 8000ee2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000ee6:	fa06 f404 	lsl.w	r4, r6, r4
 8000eea:	42a5      	cmp	r5, r4
 8000eec:	d103      	bne.n	8000ef6 <HAL_ADC_ConfigChannel+0x4de>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000eee:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8000ef0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000ef4:	665c      	str	r4, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ef6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8000ef8:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 8000efc:	fa94 f4a4 	rbit	r4, r4
 8000f00:	fab4 f484 	clz	r4, r4
 8000f04:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000f08:	fa06 f404 	lsl.w	r4, r6, r4
 8000f0c:	42a5      	cmp	r5, r4
 8000f0e:	d103      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x500>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000f10:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8000f12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000f16:	669c      	str	r4, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f18:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8000f1a:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 8000f1e:	fa94 f4a4 	rbit	r4, r4
 8000f22:	fab4 f484 	clz	r4, r4
 8000f26:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000f2a:	fa06 f404 	lsl.w	r4, r6, r4
 8000f2e:	42a5      	cmp	r5, r4
 8000f30:	f47f ae06 	bne.w	8000b40 <HAL_ADC_ConfigChannel+0x128>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000f34:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8000f36:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000f3a:	66dc      	str	r4, [r3, #108]	; 0x6c
 8000f3c:	e600      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000f3e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000f40:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000f44:	661c      	str	r4, [r3, #96]	; 0x60
 8000f46:	e5fb      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x128>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	f47f ae71 	bne.w	8000c30 <HAL_ADC_ConfigChannel+0x218>
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_ADC_ConfigChannel+0x598>)
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <HAL_ADC_ConfigChannel+0x59c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000f54:	68a9      	ldr	r1, [r5, #8]
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000f56:	fba0 0303 	umull	r0, r3, r0, r3
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000f5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000f5e:	0cdb      	lsrs	r3, r3, #19
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000f60:	60a9      	str	r1, [r5, #8]
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000f62:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	9303      	str	r3, [sp, #12]
            while(wait_loop_index != 0)
 8000f6a:	9b03      	ldr	r3, [sp, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f43f ae5f 	beq.w	8000c30 <HAL_ADC_ConfigChannel+0x218>
              wait_loop_index--;
 8000f72:	9b03      	ldr	r3, [sp, #12]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	9303      	str	r3, [sp, #12]
            while(wait_loop_index != 0)
 8000f78:	9b03      	ldr	r3, [sp, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f9      	bne.n	8000f72 <HAL_ADC_ConfigChannel+0x55a>
 8000f7e:	e657      	b.n	8000c30 <HAL_ADC_ConfigChannel+0x218>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 8000f80:	428b      	cmp	r3, r1
 8000f82:	f47f ae55 	bne.w	8000c30 <HAL_ADC_ConfigChannel+0x218>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000f86:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f88:	2000      	movs	r0, #0
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f8e:	60ab      	str	r3, [r5, #8]
 8000f90:	e5b3      	b.n	8000afa <HAL_ADC_ConfigChannel+0xe2>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000f92:	6801      	ldr	r1, [r0, #0]
 8000f94:	07cf      	lsls	r7, r1, #31
 8000f96:	f53f ae89 	bmi.w	8000cac <HAL_ADC_ConfigChannel+0x294>
 8000f9a:	e774      	b.n	8000e86 <HAL_ADC_ConfigChannel+0x46e>
 8000f9c:	6801      	ldr	r1, [r0, #0]
 8000f9e:	07cc      	lsls	r4, r1, #31
 8000fa0:	f53f ae84 	bmi.w	8000cac <HAL_ADC_ConfigChannel+0x294>
 8000fa4:	e752      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x434>
 8000fa6:	bf00      	nop
 8000fa8:	40022100 	.word	0x40022100
 8000fac:	58026000 	.word	0x58026000
 8000fb0:	20011f8c 	.word	0x20011f8c
 8000fb4:	431bde83 	.word	0x431bde83

08000fb8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fb8:	6802      	ldr	r2, [r0, #0]
{
 8000fba:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fbc:	6893      	ldr	r3, [r2, #8]
{
 8000fbe:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d023      	beq.n	8001010 <ADC_Enable+0x58>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fc8:	6891      	ldr	r1, [r2, #8]
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <ADC_Enable+0x64>)
 8000fcc:	4219      	tst	r1, r3
 8000fce:	d008      	beq.n	8000fe2 <ADC_Enable+0x2a>
      ADC_ENABLE(hadc);

      if((HAL_GetTick()-tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd0:	6d63      	ldr	r3, [r4, #84]	; 0x54

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

        return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fdc:	4303      	orrs	r3, r0
 8000fde:	65a3      	str	r3, [r4, #88]	; 0x58
    }
  }

  /* Return HAL status */
  return HAL_OK;
}
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
    ADC_ENABLE(hadc);
 8000fe2:	6893      	ldr	r3, [r2, #8]
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8000fea:	f7ff fb89 	bl	8000700 <HAL_GetTick>
 8000fee:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <ADC_Enable+0x4c>
      ADC_ENABLE(hadc);
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	609a      	str	r2, [r3, #8]
      if((HAL_GetTick()-tickstart) > ADC_ENABLE_TIMEOUT)
 8000ffa:	f7ff fb81 	bl	8000700 <HAL_GetTick>
 8000ffe:	1b43      	subs	r3, r0, r5
 8001000:	2b02      	cmp	r3, #2
 8001002:	d8e5      	bhi.n	8000fd0 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	07d2      	lsls	r2, r2, #31
 800100a:	d5f2      	bpl.n	8000ff2 <ADC_Enable+0x3a>
  return HAL_OK;
 800100c:	2000      	movs	r0, #0
}
 800100e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	07d9      	lsls	r1, r3, #31
 8001014:	d5d8      	bpl.n	8000fc8 <ADC_Enable+0x10>
  return HAL_OK;
 8001016:	2000      	movs	r0, #0
 8001018:	e7f9      	b.n	800100e <ADC_Enable+0x56>
 800101a:	bf00      	nop
 800101c:	8000003f 	.word	0x8000003f

08001020 <HAL_ADC_Start>:
{
 8001020:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001022:	6803      	ldr	r3, [r0, #0]
 8001024:	689d      	ldr	r5, [r3, #8]
 8001026:	f015 0504 	ands.w	r5, r5, #4
 800102a:	d154      	bne.n	80010d6 <HAL_ADC_Start+0xb6>
    __HAL_LOCK(hadc);
 800102c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001030:	4604      	mov	r4, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d04f      	beq.n	80010d6 <HAL_ADC_Start+0xb6>
 8001036:	2301      	movs	r3, #1
 8001038:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800103c:	f7ff ffbc 	bl	8000fb8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001040:	2800      	cmp	r0, #0
 8001042:	d145      	bne.n	80010d0 <HAL_ADC_Start+0xb0>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001044:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001046:	04db      	lsls	r3, r3, #19
 8001048:	d447      	bmi.n	80010da <HAL_ADC_Start+0xba>
        ADC_CLEAR_ERRORCODE(hadc);
 800104a:	65a0      	str	r0, [r4, #88]	; 0x58
      ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_READY|HAL_ADC_STATE_REG_EOC|HAL_ADC_STATE_REG_OVR|HAL_ADC_STATE_REG_EOSMP), HAL_ADC_STATE_REG_BUSY);
 800104c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <HAL_ADC_Start+0xe8>)
      if (ADC12_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001050:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_READY|HAL_ADC_STATE_REG_EOC|HAL_ADC_STATE_REG_OVR|HAL_ADC_STATE_REG_EOSMP), HAL_ADC_STATE_REG_BUSY);
 8001052:	400a      	ands	r2, r1
      if (ADC12_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001054:	492d      	ldr	r1, [pc, #180]	; (800110c <HAL_ADC_Start+0xec>)
 8001056:	4d2e      	ldr	r5, [pc, #184]	; (8001110 <HAL_ADC_Start+0xf0>)
 8001058:	1a59      	subs	r1, r3, r1
      ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_READY|HAL_ADC_STATE_REG_EOC|HAL_ADC_STATE_REG_OVR|HAL_ADC_STATE_REG_EOSMP), HAL_ADC_STATE_REG_BUSY);
 800105a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC12_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800105e:	42ab      	cmp	r3, r5
 8001060:	fab1 f181 	clz	r1, r1
      ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_READY|HAL_ADC_STATE_REG_EOC|HAL_ADC_STATE_REG_OVR|HAL_ADC_STATE_REG_EOSMP), HAL_ADC_STATE_REG_BUSY);
 8001064:	6562      	str	r2, [r4, #84]	; 0x54
      if (ADC12_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001066:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800106a:	d004      	beq.n	8001076 <HAL_ADC_Start+0x56>
 800106c:	b919      	cbnz	r1, 8001076 <HAL_ADC_Start+0x56>
 800106e:	4a29      	ldr	r2, [pc, #164]	; (8001114 <HAL_ADC_Start+0xf4>)
 8001070:	6892      	ldr	r2, [r2, #8]
 8001072:	06d5      	lsls	r5, r2, #27
 8001074:	d103      	bne.n	800107e <HAL_ADC_Start+0x5e>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001076:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001078:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800107c:	6562      	str	r2, [r4, #84]	; 0x54
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
 800107e:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_ADC_Start+0xf8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001080:	251c      	movs	r5, #28
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
 8001082:	4293      	cmp	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001084:	601d      	str	r5, [r3, #0]
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
 8001086:	d02d      	beq.n	80010e4 <HAL_ADC_Start+0xc4>
 8001088:	bb61      	cbnz	r1, 80010e4 <HAL_ADC_Start+0xc4>
 800108a:	f102 4268 	add.w	r2, r2, #3892314112	; 0xe8000000
 800108e:	f5a2 5274 	sub.w	r2, r2, #15616	; 0x3d00
 8001092:	6891      	ldr	r1, [r2, #8]
 8001094:	06c9      	lsls	r1, r1, #27
 8001096:	d025      	beq.n	80010e4 <HAL_ADC_Start+0xc4>
 8001098:	6891      	ldr	r1, [r2, #8]
 800109a:	f001 011f 	and.w	r1, r1, #31
 800109e:	2905      	cmp	r1, #5
 80010a0:	d020      	beq.n	80010e4 <HAL_ADC_Start+0xc4>
 80010a2:	6892      	ldr	r2, [r2, #8]
 80010a4:	f002 021f 	and.w	r2, r2, #31
 80010a8:	2a09      	cmp	r2, #9
 80010aa:	d01b      	beq.n	80010e4 <HAL_ADC_Start+0xc4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_ADC_Start+0xec>)
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010b4:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010b6:	68d3      	ldr	r3, [r2, #12]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	d505      	bpl.n	80010c8 <HAL_ADC_Start+0xa8>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c6:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80010c8:	2300      	movs	r3, #0
 80010ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80010d0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 80010d4:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80010d6:	2002      	movs	r0, #2
}
 80010d8:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR|HAL_ADC_ERROR_DMA));
 80010da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010dc:	f023 0306 	bic.w	r3, r3, #6
 80010e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80010e2:	e7b3      	b.n	800104c <HAL_ADC_Start+0x2c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	0192      	lsls	r2, r2, #6
 80010e8:	d505      	bpl.n	80010f6 <HAL_ADC_Start+0xd6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80010ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010f4:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	f042 0204 	orr.w	r2, r2, #4
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bd38      	pop	{r3, r4, r5, pc}
 8001106:	bf00      	nop
 8001108:	fffff0fe 	.word	0xfffff0fe
 800110c:	40022000 	.word	0x40022000
 8001110:	40022100 	.word	0x40022100
 8001114:	40022300 	.word	0x40022300
 8001118:	58026000 	.word	0x58026000

0800111c <ADC_Disable>:
  uint32_t tickstart = 0;

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800111c:	6802      	ldr	r2, [r0, #0]
{
 800111e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001120:	6893      	ldr	r3, [r2, #8]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <ADC_Disable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800112a:	2000      	movs	r0, #0
}
 800112c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800112e:	6811      	ldr	r1, [r2, #0]
 8001130:	07c9      	lsls	r1, r1, #31
 8001132:	d5fa      	bpl.n	800112a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001134:	6891      	ldr	r1, [r2, #8]
 8001136:	4604      	mov	r4, r0
 8001138:	f001 010d 	and.w	r1, r1, #13
 800113c:	2901      	cmp	r1, #1
 800113e:	d009      	beq.n	8001154 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001140:	6d42      	ldr	r2, [r0, #84]	; 0x54
      return HAL_ERROR;
 8001142:	4618      	mov	r0, r3
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001144:	f042 0210 	orr.w	r2, r2, #16
 8001148:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8001152:	bd38      	pop	{r3, r4, r5, pc}
      ADC_DISABLE(hadc);
 8001154:	6893      	ldr	r3, [r2, #8]
 8001156:	2103      	movs	r1, #3
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6093      	str	r3, [r2, #8]
 800115e:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8001160:	f7ff face 	bl	8000700 <HAL_GetTick>
 8001164:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	07db      	lsls	r3, r3, #31
 800116c:	d5dd      	bpl.n	800112a <ADC_Disable+0xe>
      if((HAL_GetTick()-tickstart) > ADC_DISABLE_TIMEOUT)
 800116e:	f7ff fac7 	bl	8000700 <HAL_GetTick>
 8001172:	1b40      	subs	r0, r0, r5
 8001174:	2802      	cmp	r0, #2
 8001176:	d9f6      	bls.n	8001166 <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001178:	6d63      	ldr	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001184:	4303      	orrs	r3, r0
 8001186:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800118e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001192:	2b01      	cmp	r3, #1
 8001194:	d037      	beq.n	8001206 <HAL_ADCEx_Calibration_Start+0x7a>
 8001196:	2301      	movs	r3, #1
 8001198:	4605      	mov	r5, r0
 800119a:	460e      	mov	r6, r1
 800119c:	4617      	mov	r7, r2
 800119e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status  = ADC_Disable(hadc);
 80011a2:	f7ff ffbb 	bl	800111c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status  == HAL_OK)
 80011a6:	bb30      	cbnz	r0, 80011f6 <HAL_ADCEx_Calibration_Start+0x6a>
  {
    /* Change ADC state */
    /* Clear HAL_ADC_STATE_REG_BUSY and HAL_ADC_STATE_INJ_BUSY bits, set HAL_ADC_STATE_BUSY_INTERNAL bit */
    ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_REG_BUSY|HAL_ADC_STATE_INJ_BUSY), HAL_ADC_STATE_BUSY_INTERNAL);
 80011a8:	6d69      	ldr	r1, [r5, #84]	; 0x54
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);


    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80011aa:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
    ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_REG_BUSY|HAL_ADC_STATE_INJ_BUSY), HAL_ADC_STATE_BUSY_INTERNAL);
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_ADCEx_Calibration_Start+0x94>)
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 80011b0:	682c      	ldr	r4, [r5, #0]
    ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_REG_BUSY|HAL_ADC_STATE_INJ_BUSY), HAL_ADC_STATE_BUSY_INTERNAL);
 80011b2:	400a      	ands	r2, r1
 80011b4:	f042 0202 	orr.w	r2, r2, #2
 80011b8:	656a      	str	r2, [r5, #84]	; 0x54
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 80011ba:	68a2      	ldr	r2, [r4, #8]
 80011bc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80011c0:	4317      	orrs	r7, r2
 80011c2:	60a7      	str	r7, [r4, #8]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN, CalibrationMode);
 80011c4:	68a1      	ldr	r1, [r4, #8]
 80011c6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80011ca:	430e      	orrs	r6, r1
 80011cc:	60a6      	str	r6, [r4, #8]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80011ce:	68a2      	ldr	r2, [r4, #8]
 80011d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011d4:	60a2      	str	r2, [r4, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80011d6:	e001      	b.n	80011dc <HAL_ADCEx_Calibration_Start+0x50>
    {
      WaitLoopIndex++;
      if (WaitLoopIndex >= ADC_CALIBRATION_TIMEOUT)
 80011d8:	3b01      	subs	r3, #1
 80011da:	d016      	beq.n	800120a <HAL_ADCEx_Calibration_Start+0x7e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80011dc:	68a2      	ldr	r2, [r4, #8]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	dbfa      	blt.n	80011d8 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011e2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80011e4:	f023 0303 	bic.w	r3, r3, #3
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	656b      	str	r3, [r5, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ee:	2300      	movs	r3, #0
 80011f0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status ;
}
 80011f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	656b      	str	r3, [r5, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80011fe:	2300      	movs	r3, #0
 8001200:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8001206:	2002      	movs	r0, #2
}
 8001208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
        return HAL_ERROR;
 800120c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hadc);
 800120e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001212:	f022 0312 	bic.w	r3, r2, #18
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	656b      	str	r3, [r5, #84]	; 0x54
}
 800121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121e:	bf00      	nop
 8001220:	ffffeefd 	.word	0xffffeefd

08001224 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: Master ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001224:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001226:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800122a:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800122c:	2a01      	cmp	r2, #1
 800122e:	d03e      	beq.n	80012ae <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8001230:	4603      	mov	r3, r0

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001232:	4c34      	ldr	r4, [pc, #208]	; (8001304 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
  __HAL_LOCK(hadc);
 8001234:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001236:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001238:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800123c:	42a2      	cmp	r2, r4
 800123e:	d008      	beq.n	8001252 <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001242:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001244:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8001248:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status ;
}
 800124e:	bc70      	pop	{r4, r5, r6}
 8001250:	4770      	bx	lr
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001252:	6890      	ldr	r0, [r2, #8]
 8001254:	0740      	lsls	r0, r0, #29
 8001256:	d509      	bpl.n	800126c <HAL_ADCEx_MultiModeConfigChannel+0x48>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status  = HAL_ERROR;
 800125a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125c:	f042 0220 	orr.w	r2, r2, #32
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8001268:	bc70      	pop	{r4, r5, r6}
 800126a:	4770      	bx	lr
      && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 800126c:	4826      	ldr	r0, [pc, #152]	; (8001308 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800126e:	6880      	ldr	r0, [r0, #8]
 8001270:	0740      	lsls	r0, r0, #29
 8001272:	d4f1      	bmi.n	8001258 <HAL_ADCEx_MultiModeConfigChannel+0x34>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001274:	b1f5      	cbz	r5, 80012b4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001276:	4c25      	ldr	r4, [pc, #148]	; (800130c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8001278:	684e      	ldr	r6, [r1, #4]
 800127a:	68a0      	ldr	r0, [r4, #8]
 800127c:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 8001280:	4330      	orrs	r0, r6
 8001282:	60a0      	str	r0, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001284:	6890      	ldr	r0, [r2, #8]
 8001286:	f000 0003 	and.w	r0, r0, #3
 800128a:	2801      	cmp	r0, #1
 800128c:	d036      	beq.n	80012fc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 800128e:	481e      	ldr	r0, [pc, #120]	; (8001308 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8001290:	6882      	ldr	r2, [r0, #8]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	2a01      	cmp	r2, #1
 8001298:	d028      	beq.n	80012ec <HAL_ADCEx_MultiModeConfigChannel+0xc8>
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 800129a:	688a      	ldr	r2, [r1, #8]
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 800129c:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 800129e:	4c1b      	ldr	r4, [pc, #108]	; (800130c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80012a0:	4315      	orrs	r5, r2
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80012a4:	68a1      	ldr	r1, [r4, #8]
 80012a6:	400a      	ands	r2, r1
 80012a8:	4315      	orrs	r5, r2
 80012aa:	60a5      	str	r5, [r4, #8]
 80012ac:	e7d9      	b.n	8001262 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80012ae:	2002      	movs	r0, #2
}
 80012b0:	bc70      	pop	{r4, r5, r6}
 80012b2:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80012b4:	4815      	ldr	r0, [pc, #84]	; (800130c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80012b6:	6881      	ldr	r1, [r0, #8]
 80012b8:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80012bc:	6081      	str	r1, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80012be:	6891      	ldr	r1, [r2, #8]
 80012c0:	f001 0103 	and.w	r1, r1, #3
 80012c4:	2901      	cmp	r1, #1
 80012c6:	d015      	beq.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80012c8:	490f      	ldr	r1, [pc, #60]	; (8001308 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80012ca:	688a      	ldr	r2, [r1, #8]
 80012cc:	f002 0203 	and.w	r2, r2, #3
 80012d0:	2a01      	cmp	r2, #1
 80012d2:	d006      	beq.n	80012e2 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80012d4:	490d      	ldr	r1, [pc, #52]	; (800130c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 80012d6:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80012da:	688c      	ldr	r4, [r1, #8]
 80012dc:	4022      	ands	r2, r4
 80012de:	608a      	str	r2, [r1, #8]
 80012e0:	e7bf      	b.n	8001262 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80012e2:	680a      	ldr	r2, [r1, #0]
 80012e4:	07d4      	lsls	r4, r2, #31
 80012e6:	d5f5      	bpl.n	80012d4 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 80012e8:	2000      	movs	r0, #0
 80012ea:	e7ba      	b.n	8001262 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80012ec:	6802      	ldr	r2, [r0, #0]
 80012ee:	07d6      	lsls	r6, r2, #31
 80012f0:	d4fa      	bmi.n	80012e8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80012f2:	e7d2      	b.n	800129a <HAL_ADCEx_MultiModeConfigChannel+0x76>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	07d5      	lsls	r5, r2, #31
 80012f8:	d4f6      	bmi.n	80012e8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80012fa:	e7e5      	b.n	80012c8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	07d2      	lsls	r2, r2, #31
 8001300:	d5c5      	bpl.n	800128e <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8001302:	e7f1      	b.n	80012e8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8001304:	40022000 	.word	0x40022000
 8001308:	40022100 	.word	0x40022100
 800130c:	40022300 	.word	0x40022300
 8001310:	fffff0e0 	.word	0xfffff0e0

08001314 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001316:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800131c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001326:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001328:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800132e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001330:	60cb      	str	r3, [r1, #12]
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00
 8001338:	05fa0000 	.word	0x05fa0000

0800133c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_NVIC_SetPriority+0x68>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001346:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	2d04      	cmp	r5, #4
 800134e:	bf28      	it	cs
 8001350:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	2c06      	cmp	r4, #6
 8001354:	d919      	bls.n	800138a <HAL_NVIC_SetPriority+0x4e>
 8001356:	3b03      	subs	r3, #3
 8001358:	f04f 34ff 	mov.w	r4, #4294967295
 800135c:	409c      	lsls	r4, r3
 800135e:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001362:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001366:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	fa04 f405 	lsl.w	r4, r4, r5
 800136c:	ea21 0104 	bic.w	r1, r1, r4
 8001370:	fa01 f103 	lsl.w	r1, r1, r3
 8001374:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001378:	db0a      	blt.n	8001390 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	0109      	lsls	r1, r1, #4
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_NVIC_SetPriority+0x6c>)
 800137e:	b2c9      	uxtb	r1, r1
 8001380:	4403      	add	r3, r0
 8001382:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001386:	bc30      	pop	{r4, r5}
 8001388:	4770      	bx	lr
 800138a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138c:	4613      	mov	r3, r2
 800138e:	e7e8      	b.n	8001362 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	f000 000f 	and.w	r0, r0, #15
 8001394:	0109      	lsls	r1, r1, #4
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_NVIC_SetPriority+0x70>)
 8001398:	b2c9      	uxtb	r1, r1
 800139a:	4403      	add	r3, r0
 800139c:	7619      	strb	r1, [r3, #24]
 800139e:	bc30      	pop	{r4, r5}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ecfc 	.word	0xe000ecfc

080013b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013b0:	2800      	cmp	r0, #0
 80013b2:	db07      	blt.n	80013c4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013b4:	f000 011f 	and.w	r1, r0, #31
 80013b8:	2301      	movs	r3, #1
 80013ba:	0940      	lsrs	r0, r0, #5
 80013bc:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <HAL_NVIC_EnableIRQ+0x18>)
 80013be:	408b      	lsls	r3, r1
 80013c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	3801      	subs	r0, #1
 80013ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013d2:	d20d      	bcs.n	80013f0 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	25f0      	movs	r5, #240	; 0xf0
 80013de:	4c06      	ldr	r4, [pc, #24]	; (80013f8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80013ec:	bc30      	pop	{r4, r5}
 80013ee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013f0:	2001      	movs	r0, #1
 80013f2:	4770      	bx	lr
 80013f4:	e000e010 	.word	0xe000e010
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 80013fc:	b188      	cbz	r0, 8001422 <HAL_DAC_Init+0x26>
{ 
 80013fe:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001400:	7903      	ldrb	r3, [r0, #4]
 8001402:	4604      	mov	r4, r0
 8001404:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001408:	b13b      	cbz	r3, 800141a <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800140a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800140c:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800140e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001410:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001412:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001414:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001416:	7122      	strb	r2, [r4, #4]
}
 8001418:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800141a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800141c:	f004 fac4 	bl	80059a8 <HAL_DAC_MspInit>
 8001420:	e7f3      	b.n	800140a <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8001422:	2001      	movs	r0, #1
}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <HAL_DAC_Start>:

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001428:	7942      	ldrb	r2, [r0, #5]
 800142a:	2a01      	cmp	r2, #1
 800142c:	d025      	beq.n	800147a <HAL_DAC_Start+0x52>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800142e:	4603      	mov	r3, r0
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001430:	2201      	movs	r2, #1
 8001432:	6800      	ldr	r0, [r0, #0]
 8001434:	408a      	lsls	r2, r1
{
 8001436:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 8001438:	2402      	movs	r4, #2
 800143a:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800143c:	6804      	ldr	r4, [r0, #0]
 800143e:	4322      	orrs	r2, r4
 8001440:	6002      	str	r2, [r0, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001442:	6802      	ldr	r2, [r0, #0]
  if(Channel == DAC_CHANNEL_1)
 8001444:	b979      	cbnz	r1, 8001466 <HAL_DAC_Start+0x3e>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001446:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 800144a:	2a02      	cmp	r2, #2
 800144c:	d103      	bne.n	8001456 <HAL_DAC_Start+0x2e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800144e:	6842      	ldr	r2, [r0, #4]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	6042      	str	r2, [r0, #4]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001456:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001458:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 800145a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800145c:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800145e:	7119      	strb	r1, [r3, #4]
}
 8001460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001464:	4770      	bx	lr
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001466:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 800146a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800146e:	d1f2      	bne.n	8001456 <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001470:	6842      	ldr	r2, [r0, #4]
 8001472:	f042 0202 	orr.w	r2, r2, #2
 8001476:	6042      	str	r2, [r0, #4]
 8001478:	e7ed      	b.n	8001456 <HAL_DAC_Start+0x2e>
  __HAL_LOCK(hdac);
 800147a:	2002      	movs	r0, #2
}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001480:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001482:	6800      	ldr	r0, [r0, #0]
{  
 8001484:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;
 8001486:	2400      	movs	r4, #0
 8001488:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 800148a:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 800148c:	b951      	cbnz	r1, 80014a4 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800148e:	9901      	ldr	r1, [sp, #4]
 8001490:	3108      	adds	r1, #8
 8001492:	440a      	add	r2, r1
 8001494:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001496:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8001498:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	b003      	add	sp, #12
 800149e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014a2:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80014a4:	9901      	ldr	r1, [sp, #4]
 80014a6:	3114      	adds	r1, #20
 80014a8:	440a      	add	r2, r1
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	e7f3      	b.n	8001496 <HAL_DAC_SetValue+0x16>
 80014ae:	bf00      	nop

080014b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80014b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)); 
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80014b4:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80014b6:	680f      	ldr	r7, [r1, #0]
  __HAL_LOCK(hdac);
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d07e      	beq.n	80015ba <HAL_DAC_ConfigChannel+0x10a>
 80014bc:	4615      	mov	r5, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014be:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 80014c0:	2201      	movs	r2, #1
  
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80014c2:	2f04      	cmp	r7, #4
 80014c4:	4604      	mov	r4, r0
 80014c6:	460e      	mov	r6, r1
  __HAL_LOCK(hdac);
 80014c8:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ca:	7103      	strb	r3, [r0, #4]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80014cc:	d03e      	beq.n	800154c <HAL_DAC_ConfigChannel+0x9c>
 80014ce:	6803      	ldr	r3, [r0, #0]
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)<<Channel;
    /* RefreshTime */
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)<<Channel;
  }
    
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80014d0:	6932      	ldr	r2, [r6, #16]
 80014d2:	2a01      	cmp	r2, #1
 80014d4:	d030      	beq.n	8001538 <HAL_DAC_ConfigChannel+0x88>
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODE2_0, DAC_MCR_MODE2_1 and DAC_MCR_MODE2_2 bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80014d6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
 80014da:	2207      	movs	r2, #7
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80014dc:	68b1      	ldr	r1, [r6, #8]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014de:	f04f 0e00 	mov.w	lr, #0
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
 80014e2:	fa02 f005 	lsl.w	r0, r2, r5
  tmpreg1 = hdac->Instance->MCR;
 80014e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80014e8:	ea41 010c 	orr.w	r1, r1, ip
  tmpreg1 |= tmpreg2 << Channel;
 80014ec:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
 80014ee:	ea22 0200 	bic.w	r2, r2, r0
  CLEAR_BIT (hdac->Instance->CR, DAC_CR_CEN1 << Channel);
 80014f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80014f6:	4339      	orrs	r1, r7
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << Channel); 
 80014f8:	f640 77fe 	movw	r7, #4094	; 0xffe
  CLEAR_BIT (hdac->Instance->CR, DAC_CR_CEN1 << Channel);
 80014fc:	40a8      	lsls	r0, r5
  tmpreg1 |= tmpreg2 << Channel;
 80014fe:	40ae      	lsls	r6, r5
  tmpreg1 |= tmpreg2 << Channel;
 8001500:	40a9      	lsls	r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << Channel); 
 8001502:	40af      	lsls	r7, r5
  hdac->State = HAL_DAC_STATE_READY;
 8001504:	f04f 0c01 	mov.w	ip, #1
  tmpreg1 |= tmpreg2 << Channel;
 8001508:	4311      	orrs	r1, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800150a:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->MCR = tmpreg1;
 800150c:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800150e:	40aa      	lsls	r2, r5
  CLEAR_BIT (hdac->Instance->CR, DAC_CR_CEN1 << Channel);
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	ea21 0100 	bic.w	r1, r1, r0
  
  /* Return function status */
  return HAL_OK;
 8001516:	4670      	mov	r0, lr
  CLEAR_BIT (hdac->Instance->CR, DAC_CR_CEN1 << Channel);
 8001518:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 800151a:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << Channel); 
 800151c:	ea21 0107 	bic.w	r1, r1, r7
  tmpreg1 |= tmpreg2 << Channel;
 8001520:	4331      	orrs	r1, r6
  hdac->Instance->CR = tmpreg1;
 8001522:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001524:	681d      	ldr	r5, [r3, #0]
 8001526:	ea25 0502 	bic.w	r5, r5, r2
 800152a:	601d      	str	r5, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800152c:	f884 c004 	strb.w	ip, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001530:	f884 e005 	strb.w	lr, [r4, #5]
}
 8001534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << Channel);
 8001538:	201f      	movs	r0, #31
  tmpreg1 = hdac->Instance->CCR;
 800153a:	6b99      	ldr	r1, [r3, #56]	; 0x38
  tmpreg1 |= tmpreg2 << Channel;
 800153c:	6972      	ldr	r2, [r6, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << Channel);
 800153e:	40a8      	lsls	r0, r5
  tmpreg1 |= tmpreg2 << Channel;
 8001540:	40aa      	lsls	r2, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << Channel);
 8001542:	ea21 0100 	bic.w	r1, r1, r0
  tmpreg1 |= tmpreg2 << Channel;
 8001546:	430a      	orrs	r2, r1
  hdac->Instance->CCR = tmpreg1;
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
 800154a:	e7c4      	b.n	80014d6 <HAL_DAC_ConfigChannel+0x26>
    if (Channel == DAC_CHANNEL_1)
 800154c:	b9d5      	cbnz	r5, 8001584 <HAL_DAC_ConfigChannel+0xd4>
      tickstart = HAL_GetTick();
 800154e:	f7ff f8d7 	bl	8000700 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 8001552:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80015c0 <HAL_DAC_ConfigChannel+0x110>
      tickstart = HAL_GetTick();
 8001556:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 8001558:	e004      	b.n	8001564 <HAL_DAC_ConfigChannel+0xb4>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800155a:	f7ff f8d1 	bl	8000700 <HAL_GetTick>
 800155e:	1bc0      	subs	r0, r0, r7
 8001560:	2801      	cmp	r0, #1
 8001562:	d821      	bhi.n	80015a8 <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	ea13 0f08 	tst.w	r3, r8
 800156c:	d1f5      	bne.n	800155a <HAL_DAC_ConfigChannel+0xaa>
      HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff f8cc 	bl	800070c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	69b2      	ldr	r2, [r6, #24]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
 800157a:	e00d      	b.n	8001598 <HAL_DAC_ConfigChannel+0xe8>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800157c:	f7ff f8c0 	bl	8000700 <HAL_GetTick>
 8001580:	2801      	cmp	r0, #1
 8001582:	d811      	bhi.n	80015a8 <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= RESET)
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001588:	2b00      	cmp	r3, #0
 800158a:	dbf7      	blt.n	800157c <HAL_DAC_ConfigChannel+0xcc>
      HAL_Delay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff f8bd 	bl	800070c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	69b2      	ldr	r2, [r6, #24]
 8001596:	645a      	str	r2, [r3, #68]	; 0x44
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)<<Channel;
 8001598:	6837      	ldr	r7, [r6, #0]
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)<<Channel;
 800159a:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)<<Channel;
 800159e:	40a9      	lsls	r1, r5
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)<<Channel;
 80015a0:	40aa      	lsls	r2, r5
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)<<Channel;
 80015a2:	6499      	str	r1, [r3, #72]	; 0x48
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)<<Channel;
 80015a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015a6:	e793      	b.n	80014d0 <HAL_DAC_ConfigChannel+0x20>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015a8:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015aa:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015ac:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 80015b0:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015b2:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015b4:	7122      	strb	r2, [r4, #4]
}
 80015b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdac);
 80015ba:	2002      	movs	r0, #2
}
 80015bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015c0:	20008000 	.word	0x20008000

080015c4 <HAL_DMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d044      	beq.n	8001652 <HAL_DMA_Abort_IT+0x8e>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80015cc:	4603      	mov	r3, r0
 80015ce:	2a02      	cmp	r2, #2
 80015d0:	d10e      	bne.n	80015f0 <HAL_DMA_Abort_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 80015d2:	6802      	ldr	r2, [r0, #0]
 80015d4:	4920      	ldr	r1, [pc, #128]	; (8001658 <HAL_DMA_Abort_IT+0x94>)
 80015d6:	4411      	add	r1, r2
 80015d8:	f5b1 6f95 	cmp.w	r1, #1192	; 0x4a8
 80015dc:	d80c      	bhi.n	80015f8 <HAL_DMA_Abort_IT+0x34>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80015de:	2104      	movs	r1, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 80015e0:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80015e2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f0:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015f6:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80015f8:	6810      	ldr	r0, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 80015fa:	2101      	movs	r1, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80015fc:	f020 000e 	bic.w	r0, r0, #14
{
 8001600:	b570      	push	{r4, r5, r6, lr}
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8001602:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001604:	6e1c      	ldr	r4, [r3, #96]	; 0x60
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001606:	6010      	str	r0, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8001608:	40a9      	lsls	r1, r5
      __HAL_DMA_DISABLE(hdma);
 800160a:	6810      	ldr	r0, [r2, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
      __HAL_DMA_DISABLE(hdma);
 800160e:	f020 0001 	bic.w	r0, r0, #1
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8001612:	4e12      	ldr	r6, [pc, #72]	; (800165c <HAL_DMA_Abort_IT+0x98>)
      __HAL_DMA_DISABLE(hdma);
 8001614:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001616:	6822      	ldr	r2, [r4, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001618:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800161a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161e:	6022      	str	r2, [r4, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8001620:	6071      	str	r1, [r6, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001622:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001624:	606a      	str	r2, [r5, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8001626:	b130      	cbz	r0, 8001636 <HAL_DMA_Abort_IT+0x72>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001628:	6802      	ldr	r2, [r0, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800162a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800162c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800162e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001632:	6002      	str	r2, [r0, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001634:	604c      	str	r4, [r1, #4]
      __HAL_UNLOCK(hdma);
 8001636:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001638:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800163a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800163c:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001640:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001644:	b11a      	cbz	r2, 800164e <HAL_DMA_Abort_IT+0x8a>
        hdma->XferAbortCallback(hdma);
 8001646:	4618      	mov	r0, r3
 8001648:	4790      	blx	r2
  return HAL_OK;
 800164a:	4620      	mov	r0, r4
}
 800164c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800164e:	4610      	mov	r0, r2
}
 8001650:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	bffdfff0 	.word	0xbffdfff0
 800165c:	58025400 	.word	0x58025400

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001664:	2300      	movs	r3, #0
{
 8001666:	b083      	sub	sp, #12
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80018a8 <HAL_GPIO_Init+0x248>
 800166c:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 800166e:	f8df e23c 	ldr.w	lr, [pc, #572]	; 80018ac <HAL_GPIO_Init+0x24c>
 8001672:	e003      	b.n	800167c <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001674:	3301      	adds	r3, #1
 8001676:	2b10      	cmp	r3, #16
 8001678:	f000 80c0 	beq.w	80017fc <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
    if(iocurrent == ioposition)
 8001680:	ea32 0405 	bics.w	r4, r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001684:	ea02 0c05 	and.w	ip, r2, r5
    if(iocurrent == ioposition)
 8001688:	d1f4      	bne.n	8001674 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168a:	684c      	ldr	r4, [r1, #4]
 800168c:	f024 0710 	bic.w	r7, r4, #16
 8001690:	2f02      	cmp	r7, #2
 8001692:	f040 80b6 	bne.w	8001802 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8001696:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001698:	f003 0a07 	and.w	sl, r3, #7
 800169c:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016a0:	690e      	ldr	r6, [r1, #16]
 80016a2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016a6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80016aa:	f8d7 9020 	ldr.w	r9, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ae:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016b2:	fa06 f60a 	lsl.w	r6, r6, sl
 80016b6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ba:	ea29 090b 	bic.w	r9, r9, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016be:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016c2:	ea46 0909 	orr.w	r9, r6, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016c6:	fa0b f60a 	lsl.w	r6, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016ca:	ea04 0b0b 	and.w	fp, r4, fp
        GPIOx->AFR[position >> 3] = temp;
 80016ce:	f8c7 9020 	str.w	r9, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016d2:	ea6f 0906 	mvn.w	r9, r6
      temp = GPIOx->MODER;
 80016d6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016d8:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016dc:	ea27 0606 	bic.w	r6, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e0:	ea4b 0606 	orr.w	r6, fp, r6
      GPIOx->MODER = temp;
 80016e4:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80016e6:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016e8:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016ec:	ea07 0b09 	and.w	fp, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2));
 80016f0:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016f2:	409e      	lsls	r6, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 80016f4:	fa07 f70a 	lsl.w	r7, r7, sl
 80016f8:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80016fc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016fe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001700:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001704:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001706:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001708:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170a:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800170c:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800170e:	ea06 0909 	and.w	r9, r6, r9
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001712:	fa02 f20a 	lsl.w	r2, r2, sl
 8001716:	ea42 0209 	orr.w	r2, r2, r9
      GPIOx->PUPDR = temp;
 800171a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171c:	d5aa      	bpl.n	8001674 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	f8d8 70f4 	ldr.w	r7, [r8, #244]	; 0xf4
 8001722:	f023 0903 	bic.w	r9, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	f047 0702 	orr.w	r7, r7, #2
 8001730:	f109 49b0 	add.w	r9, r9, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001734:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	f8c8 70f4 	str.w	r7, [r8, #244]	; 0xf4
 800173a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800173e:	f8d8 70f4 	ldr.w	r7, [r8, #244]	; 0xf4
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001742:	fa06 fa02 	lsl.w	sl, r6, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	f007 0702 	and.w	r7, r7, #2
 800174a:	9701      	str	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800174c:	4f4d      	ldr	r7, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x224>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001750:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8001752:	f8d9 6008 	ldr.w	r6, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001756:	ea26 060a 	bic.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800175a:	d020      	beq.n	800179e <HAL_GPIO_Init+0x13e>
 800175c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001760:	42b8      	cmp	r0, r7
 8001762:	d066      	beq.n	8001832 <HAL_GPIO_Init+0x1d2>
 8001764:	4f48      	ldr	r7, [pc, #288]	; (8001888 <HAL_GPIO_Init+0x228>)
 8001766:	42b8      	cmp	r0, r7
 8001768:	d068      	beq.n	800183c <HAL_GPIO_Init+0x1dc>
 800176a:	4f48      	ldr	r7, [pc, #288]	; (800188c <HAL_GPIO_Init+0x22c>)
 800176c:	42b8      	cmp	r0, r7
 800176e:	d06a      	beq.n	8001846 <HAL_GPIO_Init+0x1e6>
 8001770:	4f47      	ldr	r7, [pc, #284]	; (8001890 <HAL_GPIO_Init+0x230>)
 8001772:	42b8      	cmp	r0, r7
 8001774:	d06c      	beq.n	8001850 <HAL_GPIO_Init+0x1f0>
 8001776:	4f47      	ldr	r7, [pc, #284]	; (8001894 <HAL_GPIO_Init+0x234>)
 8001778:	42b8      	cmp	r0, r7
 800177a:	d073      	beq.n	8001864 <HAL_GPIO_Init+0x204>
 800177c:	4f46      	ldr	r7, [pc, #280]	; (8001898 <HAL_GPIO_Init+0x238>)
 800177e:	42b8      	cmp	r0, r7
 8001780:	d075      	beq.n	800186e <HAL_GPIO_Init+0x20e>
 8001782:	4f46      	ldr	r7, [pc, #280]	; (800189c <HAL_GPIO_Init+0x23c>)
 8001784:	42b8      	cmp	r0, r7
 8001786:	d068      	beq.n	800185a <HAL_GPIO_Init+0x1fa>
 8001788:	4f45      	ldr	r7, [pc, #276]	; (80018a0 <HAL_GPIO_Init+0x240>)
 800178a:	42b8      	cmp	r0, r7
 800178c:	d074      	beq.n	8001878 <HAL_GPIO_Init+0x218>
 800178e:	4f45      	ldr	r7, [pc, #276]	; (80018a4 <HAL_GPIO_Init+0x244>)
 8001790:	42b8      	cmp	r0, r7
 8001792:	bf0c      	ite	eq
 8001794:	2709      	moveq	r7, #9
 8001796:	270a      	movne	r7, #10
 8001798:	fa07 f202 	lsl.w	r2, r7, r2
 800179c:	4316      	orrs	r6, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 800179e:	f8c9 6008 	str.w	r6, [r9, #8]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI_Ptr->IMR1;
 80017a6:	f8de 2000 	ldr.w	r2, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017aa:	03e6      	lsls	r6, r4, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ac:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80017b0:	bf54      	ite	pl
 80017b2:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80017b4:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI_Ptr->IMR1 = temp;
 80017b8:	f8ce 2000 	str.w	r2, [lr]

        temp = EXTI_Ptr->EMR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017bc:	03a2      	lsls	r2, r4, #14
        temp = EXTI_Ptr->EMR1;
 80017be:	f8de 6004 	ldr.w	r6, [lr, #4]
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~((uint32_t)iocurrent);
 80017c6:	bf54      	ite	pl
 80017c8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80017ca:	ea4c 0606 	orrmi.w	r6, ip, r6
        EXTI_Ptr->EMR1 = temp;
 80017ce:	f8ce 6004 	str.w	r6, [lr, #4]
        temp = EXTI->RTSR1;
 80017d2:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d4:	02e2      	lsls	r2, r4, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80017d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~((uint32_t)iocurrent);
 80017da:	bf54      	ite	pl
 80017dc:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80017de:	ea4c 0606 	orrmi.w	r6, ip, r6

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e2:	02a4      	lsls	r4, r4, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80017e4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 80017e8:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 80017ea:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	bf54      	ite	pl
 80017ee:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80017f0:	ea4c 0202 	orrmi.w	r2, ip, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80017f4:	2b10      	cmp	r3, #16
        EXTI->FTSR1 = temp;
 80017f6:	6062      	str	r2, [r4, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017f8:	f47f af40 	bne.w	800167c <HAL_GPIO_Init+0x1c>
      }      
    }
  }
}
 80017fc:	b003      	add	sp, #12
 80017fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8001802:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001806:	f04f 0903 	mov.w	r9, #3
      temp = GPIOx->MODER;
 800180a:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001810:	ea04 0609 	and.w	r6, r4, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001814:	fa09 f90a 	lsl.w	r9, r9, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001818:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800181a:	ea2b 0b09 	bic.w	fp, fp, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800181e:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001822:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001826:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 800182a:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182c:	f63f af6c 	bhi.w	8001708 <HAL_GPIO_Init+0xa8>
 8001830:	e759      	b.n	80016e6 <HAL_GPIO_Init+0x86>
 8001832:	2701      	movs	r7, #1
 8001834:	fa07 f202 	lsl.w	r2, r7, r2
 8001838:	4316      	orrs	r6, r2
 800183a:	e7b0      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800183c:	2702      	movs	r7, #2
 800183e:	fa07 f202 	lsl.w	r2, r7, r2
 8001842:	4316      	orrs	r6, r2
 8001844:	e7ab      	b.n	800179e <HAL_GPIO_Init+0x13e>
 8001846:	2703      	movs	r7, #3
 8001848:	fa07 f202 	lsl.w	r2, r7, r2
 800184c:	4316      	orrs	r6, r2
 800184e:	e7a6      	b.n	800179e <HAL_GPIO_Init+0x13e>
 8001850:	2704      	movs	r7, #4
 8001852:	fa07 f202 	lsl.w	r2, r7, r2
 8001856:	4316      	orrs	r6, r2
 8001858:	e7a1      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800185a:	2707      	movs	r7, #7
 800185c:	fa07 f202 	lsl.w	r2, r7, r2
 8001860:	4316      	orrs	r6, r2
 8001862:	e79c      	b.n	800179e <HAL_GPIO_Init+0x13e>
 8001864:	2705      	movs	r7, #5
 8001866:	fa07 f202 	lsl.w	r2, r7, r2
 800186a:	4316      	orrs	r6, r2
 800186c:	e797      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800186e:	2706      	movs	r7, #6
 8001870:	fa07 f202 	lsl.w	r2, r7, r2
 8001874:	4316      	orrs	r6, r2
 8001876:	e792      	b.n	800179e <HAL_GPIO_Init+0x13e>
 8001878:	2708      	movs	r7, #8
 800187a:	fa07 f202 	lsl.w	r2, r7, r2
 800187e:	4316      	orrs	r6, r2
 8001880:	e78d      	b.n	800179e <HAL_GPIO_Init+0x13e>
 8001882:	bf00      	nop
 8001884:	58020000 	.word	0x58020000
 8001888:	58020800 	.word	0x58020800
 800188c:	58020c00 	.word	0x58020c00
 8001890:	58021000 	.word	0x58021000
 8001894:	58021400 	.word	0x58021400
 8001898:	58021800 	.word	0x58021800
 800189c:	58021c00 	.word	0x58021c00
 80018a0:	58022000 	.word	0x58022000
 80018a4:	58022400 	.word	0x58022400
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58000080 	.word	0x58000080

080018b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	b10a      	cbz	r2, 80018b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80018b2:	8301      	strh	r1, [r0, #24]
 80018b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80018b6:	8341      	strh	r1, [r0, #26]
  }
}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	6803      	ldr	r3, [r0, #0]
{
 80018c0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	07d9      	lsls	r1, r3, #31
 80018c4:	d530      	bpl.n	8001928 <HAL_RCC_OscConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018c6:	49ae      	ldr	r1, [pc, #696]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 80018c8:	690a      	ldr	r2, [r1, #16]
 80018ca:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80018ce:	2a10      	cmp	r2, #16
 80018d0:	f000 80ed 	beq.w	8001aae <HAL_RCC_OscConfig+0x1f2>
 80018d4:	690a      	ldr	r2, [r1, #16]
 80018d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80018da:	2a18      	cmp	r2, #24
 80018dc:	f000 80e1 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e6:	f000 813a 	beq.w	8001b5e <HAL_RCC_OscConfig+0x2a2>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8179 	beq.w	8001be2 <HAL_RCC_OscConfig+0x326>
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	4ba2      	ldr	r3, [pc, #648]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f000 81c5 	beq.w	8001c86 <HAL_RCC_OscConfig+0x3ca>
 80018fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001908:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7fe fef9 	bl	8000700 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4e9c      	ldr	r6, [pc, #624]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001910:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e005      	b.n	8001920 <HAL_RCC_OscConfig+0x64>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7fe fef4 	bl	8000700 <HAL_GetTick>
 8001918:	1b40      	subs	r0, r0, r5
 800191a:	2864      	cmp	r0, #100	; 0x64
 800191c:	f200 815f 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	6833      	ldr	r3, [r6, #0]
 8001922:	039b      	lsls	r3, r3, #14
 8001924:	d5f6      	bpl.n	8001914 <HAL_RCC_OscConfig+0x58>
 8001926:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001928:	0798      	lsls	r0, r3, #30
 800192a:	d531      	bpl.n	8001990 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001934:	f000 80ca 	beq.w	8001acc <HAL_RCC_OscConfig+0x210>
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800193e:	2a18      	cmp	r2, #24
 8001940:	f000 80c0 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x208>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001944:	68e2      	ldr	r2, [r4, #12]
 8001946:	2a00      	cmp	r2, #0
 8001948:	f000 8189 	beq.w	8001c5e <HAL_RCC_OscConfig+0x3a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800194c:	498c      	ldr	r1, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 800194e:	680b      	ldr	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001952:	f023 0319 	bic.w	r3, r3, #25
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800195a:	f7fe fed1 	bl	8000700 <HAL_GetTick>
 800195e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e005      	b.n	800196e <HAL_RCC_OscConfig+0xb2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001962:	f7fe fecd 	bl	8000700 <HAL_GetTick>
 8001966:	1b40      	subs	r0, r0, r5
 8001968:	2802      	cmp	r0, #2
 800196a:	f200 8138 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	6833      	ldr	r3, [r6, #0]
 8001970:	075f      	lsls	r7, r3, #29
 8001972:	d5f6      	bpl.n	8001962 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	6871      	ldr	r1, [r6, #4]
 8001976:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	fab3 f283 	clz	r2, r3
 8001982:	6923      	ldr	r3, [r4, #16]
 8001984:	f421 317c 	bic.w	r1, r1, #258048	; 0x3f000
 8001988:	4093      	lsls	r3, r2
 800198a:	430b      	orrs	r3, r1
 800198c:	6073      	str	r3, [r6, #4]
 800198e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001990:	06d9      	lsls	r1, r3, #27
 8001992:	d455      	bmi.n	8001a40 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001994:	071d      	lsls	r5, r3, #28
 8001996:	d517      	bpl.n	80019c8 <HAL_RCC_OscConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001998:	6963      	ldr	r3, [r4, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80b1 	beq.w	8001b02 <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a0:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 80019a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80019ac:	f7fe fea8 	bl	8000700 <HAL_GetTick>
 80019b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	e005      	b.n	80019c0 <HAL_RCC_OscConfig+0x104>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7fe fea4 	bl	8000700 <HAL_GetTick>
 80019b8:	1b40      	subs	r0, r0, r5
 80019ba:	2802      	cmp	r0, #2
 80019bc:	f200 810f 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80019c2:	0798      	lsls	r0, r3, #30
 80019c4:	d5f6      	bpl.n	80019b4 <HAL_RCC_OscConfig+0xf8>
 80019c6:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019c8:	069a      	lsls	r2, r3, #26
 80019ca:	d517      	bpl.n	80019fc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019cc:	69a3      	ldr	r3, [r4, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 811e 	beq.w	8001c10 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 80019d6:	681a      	ldr	r2, [r3, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019d8:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 80019da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019e0:	f7fe fe8e 	bl	8000700 <HAL_GetTick>
 80019e4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019e6:	e005      	b.n	80019f4 <HAL_RCC_OscConfig+0x138>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019e8:	f7fe fe8a 	bl	8000700 <HAL_GetTick>
 80019ec:	1b40      	subs	r0, r0, r5
 80019ee:	2802      	cmp	r0, #2
 80019f0:	f200 80f5 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019f4:	6833      	ldr	r3, [r6, #0]
 80019f6:	049f      	lsls	r7, r3, #18
 80019f8:	d5f6      	bpl.n	80019e8 <HAL_RCC_OscConfig+0x12c>
 80019fa:	6823      	ldr	r3, [r4, #0]
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	0759      	lsls	r1, r3, #29
 80019fe:	f100 80b4 	bmi.w	8001b6a <HAL_RCC_OscConfig+0x2ae>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a04:	b1d3      	cbz	r3, 8001a3c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a06:	4a5e      	ldr	r2, [pc, #376]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001a08:	6911      	ldr	r1, [r2, #16]
 8001a0a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001a0e:	2918      	cmp	r1, #24
 8001a10:	d056      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x204>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a12:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	6813      	ldr	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1e:	f000 813a 	beq.w	8001c96 <HAL_RCC_OscConfig+0x3da>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7fe fe6d 	bl	8000700 <HAL_GetTick>
 8001a26:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a28:	e005      	b.n	8001a36 <HAL_RCC_OscConfig+0x17a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7fe fe69 	bl	8000700 <HAL_GetTick>
 8001a2e:	1b00      	subs	r0, r0, r4
 8001a30:	2802      	cmp	r0, #2
 8001a32:	f200 80d4 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	682b      	ldr	r3, [r5, #0]
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	d4f6      	bmi.n	8001a2a <HAL_RCC_OscConfig+0x16e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a3c:	2000      	movs	r0, #0
}
 8001a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a40:	494f      	ldr	r1, [pc, #316]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001a42:	690a      	ldr	r2, [r1, #16]
 8001a44:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001a48:	2a08      	cmp	r2, #8
 8001a4a:	d072      	beq.n	8001b32 <HAL_RCC_OscConfig+0x276>
 8001a4c:	690a      	ldr	r2, [r1, #16]
 8001a4e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001a52:	2a18      	cmp	r2, #24
 8001a54:	d068      	beq.n	8001b28 <HAL_RCC_OscConfig+0x26c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a56:	69e3      	ldr	r3, [r4, #28]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80ec 	beq.w	8001c36 <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_CSI_ENABLE();
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001a60:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001a62:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8001a64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a6a:	f7fe fe49 	bl	8000700 <HAL_GetTick>
 8001a6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001a70:	e005      	b.n	8001a7e <HAL_RCC_OscConfig+0x1c2>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a72:	f7fe fe45 	bl	8000700 <HAL_GetTick>
 8001a76:	1b40      	subs	r0, r0, r5
 8001a78:	2802      	cmp	r0, #2
 8001a7a:	f200 80b0 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001a7e:	6833      	ldr	r3, [r6, #0]
 8001a80:	05db      	lsls	r3, r3, #23
 8001a82:	d5f6      	bpl.n	8001a72 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a84:	6871      	ldr	r1, [r6, #4]
 8001a86:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	fab3 f283 	clz	r2, r3
 8001a92:	6a23      	ldr	r3, [r4, #32]
 8001a94:	f021 41f8 	bic.w	r1, r1, #2080374784	; 0x7c000000
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6073      	str	r3, [r6, #4]
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	e778      	b.n	8001994 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001aa2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	2a02      	cmp	r2, #2
 8001aaa:	f47f af19 	bne.w	80018e0 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	0392      	lsls	r2, r2, #14
 8001ab4:	f57f af38 	bpl.w	8001928 <HAL_RCC_OscConfig+0x6c>
 8001ab8:	6862      	ldr	r2, [r4, #4]
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	f47f af34 	bne.w	8001928 <HAL_RCC_OscConfig+0x6c>
      return HAL_ERROR;
 8001ac0:	2001      	movs	r0, #1
}
 8001ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	0799      	lsls	r1, r3, #30
 8001ac8:	f47f af3c 	bne.w	8001944 <HAL_RCC_OscConfig+0x88>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001ace:	68e1      	ldr	r1, [r4, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	075a      	lsls	r2, r3, #29
 8001ad4:	d501      	bpl.n	8001ada <HAL_RCC_OscConfig+0x21e>
 8001ad6:	2900      	cmp	r1, #0
 8001ad8:	d0f2      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x204>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001adc:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4616      	mov	r6, r2
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ae0:	f023 0319 	bic.w	r3, r3, #25
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ae8:	f7fe fe0a 	bl	8000700 <HAL_GetTick>
 8001aec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	e004      	b.n	8001afa <HAL_RCC_OscConfig+0x23e>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af0:	f7fe fe06 	bl	8000700 <HAL_GetTick>
 8001af4:	1b40      	subs	r0, r0, r5
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d871      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	6833      	ldr	r3, [r6, #0]
 8001afc:	075b      	lsls	r3, r3, #29
 8001afe:	d5f7      	bpl.n	8001af0 <HAL_RCC_OscConfig+0x234>
 8001b00:	e738      	b.n	8001974 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_LSI_DISABLE();
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001b04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b06:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001b0e:	f7fe fdf7 	bl	8000700 <HAL_GetTick>
 8001b12:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	e004      	b.n	8001b20 <HAL_RCC_OscConfig+0x264>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b16:	f7fe fdf3 	bl	8000700 <HAL_GetTick>
 8001b1a:	1b40      	subs	r0, r0, r5
 8001b1c:	2802      	cmp	r0, #2
 8001b1e:	d85e      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001b22:	0799      	lsls	r1, r3, #30
 8001b24:	d4f7      	bmi.n	8001b16 <HAL_RCC_OscConfig+0x25a>
 8001b26:	e74e      	b.n	80019c6 <HAL_RCC_OscConfig+0x10a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b28:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	2a01      	cmp	r2, #1
 8001b30:	d191      	bne.n	8001a56 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	05d2      	lsls	r2, r2, #23
 8001b38:	d502      	bpl.n	8001b40 <HAL_RCC_OscConfig+0x284>
 8001b3a:	69e2      	ldr	r2, [r4, #28]
 8001b3c:	2a80      	cmp	r2, #128	; 0x80
 8001b3e:	d1bf      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x204>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b40:	4d0f      	ldr	r5, [pc, #60]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001b42:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001b46:	6868      	ldr	r0, [r5, #4]
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	fab2 f182 	clz	r1, r2
 8001b50:	6a22      	ldr	r2, [r4, #32]
 8001b52:	f020 40f8 	bic.w	r0, r0, #2080374784	; 0x7c000000
 8001b56:	408a      	lsls	r2, r1
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	606a      	str	r2, [r5, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b5c:	e71a      	b.n	8001994 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_RCC_OscConfig+0x2c4>)
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	e6cf      	b.n	800190a <HAL_RCC_OscConfig+0x4e>
    PWR->CR1 |= PWR_CR1_DBP;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_OscConfig+0x2c8>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b6e:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8001b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b74:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001b76:	f7fe fdc3 	bl	8000700 <HAL_GetTick>
 8001b7a:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_OscConfig+0x2d6>
 8001b7e:	bf00      	nop
 8001b80:	58024400 	.word	0x58024400
 8001b84:	58024800 	.word	0x58024800
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b88:	f7fe fdba 	bl	8000700 <HAL_GetTick>
 8001b8c:	1b40      	subs	r0, r0, r5
 8001b8e:	2864      	cmp	r0, #100	; 0x64
 8001b90:	d825      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b92:	6833      	ldr	r3, [r6, #0]
 8001b94:	05da      	lsls	r2, r3, #23
 8001b96:	d5f7      	bpl.n	8001b88 <HAL_RCC_OscConfig+0x2cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	68a3      	ldr	r3, [r4, #8]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f000 80fc 	beq.w	8001d98 <HAL_RCC_OscConfig+0x4dc>
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80df 	beq.w	8001d64 <HAL_RCC_OscConfig+0x4a8>
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bac:	f000 80fa 	beq.w	8001da4 <HAL_RCC_OscConfig+0x4e8>
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	671a      	str	r2, [r3, #112]	; 0x70
 8001bb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bb8:	f022 0204 	bic.w	r2, r2, #4
 8001bbc:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001bbe:	f7fe fd9f 	bl	8000700 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	4e7c      	ldr	r6, [pc, #496]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bc8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e004      	b.n	8001bd6 <HAL_RCC_OscConfig+0x31a>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7fe fd98 	bl	8000700 <HAL_GetTick>
 8001bd0:	1b40      	subs	r0, r0, r5
 8001bd2:	42b8      	cmp	r0, r7
 8001bd4:	d803      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001bd8:	079b      	lsls	r3, r3, #30
 8001bda:	d5f7      	bpl.n	8001bcc <HAL_RCC_OscConfig+0x310>
 8001bdc:	e711      	b.n	8001a02 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
}
 8001be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	4b74      	ldr	r3, [pc, #464]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fd83 	bl	8000700 <HAL_GetTick>
 8001bfa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfc:	e004      	b.n	8001c08 <HAL_RCC_OscConfig+0x34c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfe:	f7fe fd7f 	bl	8000700 <HAL_GetTick>
 8001c02:	1b40      	subs	r0, r0, r5
 8001c04:	2864      	cmp	r0, #100	; 0x64
 8001c06:	d8ea      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c08:	6833      	ldr	r3, [r6, #0]
 8001c0a:	039f      	lsls	r7, r3, #14
 8001c0c:	d4f7      	bmi.n	8001bfe <HAL_RCC_OscConfig+0x342>
 8001c0e:	e68a      	b.n	8001926 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI48_DISABLE();
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c14:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8001c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c1c:	f7fe fd70 	bl	8000700 <HAL_GetTick>
 8001c20:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c22:	e004      	b.n	8001c2e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c24:	f7fe fd6c 	bl	8000700 <HAL_GetTick>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	2802      	cmp	r0, #2
 8001c2c:	d8d7      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c2e:	6833      	ldr	r3, [r6, #0]
 8001c30:	0498      	lsls	r0, r3, #18
 8001c32:	d4f7      	bmi.n	8001c24 <HAL_RCC_OscConfig+0x368>
 8001c34:	e6e1      	b.n	80019fa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_CSI_DISABLE();
 8001c36:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001c3a:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8001c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c42:	f7fe fd5d 	bl	8000700 <HAL_GetTick>
 8001c46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001c48:	e004      	b.n	8001c54 <HAL_RCC_OscConfig+0x398>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c4a:	f7fe fd59 	bl	8000700 <HAL_GetTick>
 8001c4e:	1b40      	subs	r0, r0, r5
 8001c50:	2802      	cmp	r0, #2
 8001c52:	d8c4      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001c54:	6833      	ldr	r3, [r6, #0]
 8001c56:	05df      	lsls	r7, r3, #23
 8001c58:	d4f7      	bmi.n	8001c4a <HAL_RCC_OscConfig+0x38e>
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	e69a      	b.n	8001994 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c6a:	f7fe fd49 	bl	8000700 <HAL_GetTick>
 8001c6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c70:	e004      	b.n	8001c7c <HAL_RCC_OscConfig+0x3c0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c72:	f7fe fd45 	bl	8000700 <HAL_GetTick>
 8001c76:	1b40      	subs	r0, r0, r5
 8001c78:	2802      	cmp	r0, #2
 8001c7a:	d8b0      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	6833      	ldr	r3, [r6, #0]
 8001c7e:	0758      	lsls	r0, r3, #29
 8001c80:	d4f7      	bmi.n	8001c72 <HAL_RCC_OscConfig+0x3b6>
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	e684      	b.n	8001990 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e639      	b.n	800190a <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001c96:	f7fe fd33 	bl	8000700 <HAL_GetTick>
 8001c9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e004      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3ec>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe fd2f 	bl	8000700 <HAL_GetTick>
 8001ca2:	1b80      	subs	r0, r0, r6
 8001ca4:	2802      	cmp	r0, #2
 8001ca6:	d89a      	bhi.n	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	0199      	lsls	r1, r3, #6
 8001cac:	d4f7      	bmi.n	8001c9e <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001cb0:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_RCC_OscConfig+0x4fc>)
 8001cb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001cb8:	4013      	ands	r3, r2
 8001cba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cbc:	4303      	orrs	r3, r0
 8001cbe:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001cc2:	62ab      	str	r3, [r5, #40]	; 0x28
 8001cc4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001cc6:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8001cca:	3e01      	subs	r6, #1
 8001ccc:	1e50      	subs	r0, r2, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cd2:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8001cd6:	025b      	lsls	r3, r3, #9
 8001cd8:	0400      	lsls	r0, r0, #16
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001ce2:	0612      	lsls	r2, r2, #24
 8001ce4:	4303      	orrs	r3, r0
 8001ce6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001cea:	4333      	orrs	r3, r6
 8001cec:	4313      	orrs	r3, r2
 8001cee:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cf0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001cf2:	fa91 f3a1 	rbit	r3, r1
 8001cf6:	4931      	ldr	r1, [pc, #196]	; (8001dbc <HAL_RCC_OscConfig+0x500>)
 8001cf8:	fab3 f283 	clz	r2, r3
 8001cfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cfe:	4001      	ands	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d00:	4e2c      	ldr	r6, [pc, #176]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d02:	4093      	lsls	r3, r2
 8001d04:	430b      	orrs	r3, r1
 8001d06:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d0c:	f023 030c 	bic.w	r3, r3, #12
 8001d10:	4313      	orrs	r3, r2
 8001d12:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d14:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d16:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d18:	f023 0302 	bic.w	r3, r3, #2
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d26:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d36:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d48:	f7fe fcda 	bl	8000700 <HAL_GetTick>
 8001d4c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_OscConfig+0x4a0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe fcd6 	bl	8000700 <HAL_GetTick>
 8001d54:	1b00      	subs	r0, r0, r4
 8001d56:	2802      	cmp	r0, #2
 8001d58:	f63f af41 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5c:	6833      	ldr	r3, [r6, #0]
 8001d5e:	019a      	lsls	r2, r3, #6
 8001d60:	d5f6      	bpl.n	8001d50 <HAL_RCC_OscConfig+0x494>
 8001d62:	e66b      	b.n	8001a3c <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	671a      	str	r2, [r3, #112]	; 0x70
 8001d74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d7c:	f7fe fcc0 	bl	8000700 <HAL_GetTick>
 8001d80:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d82:	e005      	b.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7fe fcbc 	bl	8000700 <HAL_GetTick>
 8001d88:	1b40      	subs	r0, r0, r5
 8001d8a:	42b8      	cmp	r0, r7
 8001d8c:	f63f af27 	bhi.w	8001bde <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d92:	0798      	lsls	r0, r3, #30
 8001d94:	d4f6      	bmi.n	8001d84 <HAL_RCC_OscConfig+0x4c8>
 8001d96:	e634      	b.n	8001a02 <HAL_RCC_OscConfig+0x146>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d9a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da2:	e70c      	b.n	8001bbe <HAL_RCC_OscConfig+0x302>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da4:	f042 0204 	orr.w	r2, r2, #4
 8001da8:	671a      	str	r2, [r3, #112]	; 0x70
 8001daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	671a      	str	r2, [r3, #112]	; 0x70
 8001db2:	e704      	b.n	8001bbe <HAL_RCC_OscConfig+0x302>
 8001db4:	58024400 	.word	0x58024400
 8001db8:	fffffc0c 	.word	0xfffffc0c
 8001dbc:	ffff0007 	.word	0xffff0007

08001dc0 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc0:	4a4e      	ldr	r2, [pc, #312]	; (8001efc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dc2:	6913      	ldr	r3, [r2, #16]
 8001dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d004      	beq.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x16>
 8001dcc:	2b18      	cmp	r3, #24
 8001dce:	d00d      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x2c>
 8001dd0:	b11b      	cbz	r3, 8001dda <HAL_RCC_GetSysClockFreq+0x1a>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dd2:	484b      	ldr	r0, [pc, #300]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dd4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd6:	484b      	ldr	r0, [pc, #300]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x144>)
 8001dd8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	0699      	lsls	r1, r3, #26
 8001dde:	d547      	bpl.n	8001e70 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	4849      	ldr	r0, [pc, #292]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x148>)
 8001de4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001de8:	40d8      	lsrs	r0, r3
 8001dea:	4770      	bx	lr
{
 8001dec:	b4f0      	push	{r4, r5, r6, r7}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dee:	6a95      	ldr	r5, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001df0:	6a97      	ldr	r7, [r2, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001df2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001df4:	f005 0503 	and.w	r5, r5, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001df8:	6b56      	ldr	r6, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001dfa:	f3c7 1705 	ubfx	r7, r7, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001dfe:	f004 0401 	and.w	r4, r4, #1
 8001e02:	2d01      	cmp	r5, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e04:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 8001e08:	fb04 f406 	mul.w	r4, r4, r6
 8001e0c:	ee07 4a90 	vmov	s15, r4
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    switch (pllsource)
 8001e14:	d053      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0xfe>
 8001e16:	2d02      	cmp	r5, #2
 8001e18:	d02c      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb4>
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	d039      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0xd2>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001e1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e24:	eddf 5a39 	vldr	s11, [pc, #228]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x14c>
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2c:	ee06 3a90 	vmov	s13, r3
 8001e30:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e32:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001e3a:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8001e3e:	ee07 3a10 	vmov	s14, r3
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_RCC_GetSysClockFreq+0x13c>)
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001e44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f3c3 2346 	ubfx	r3, r3, #9, #7
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001e4e:	ee76 7a86 	vadd.f32	s15, s13, s12
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001e52:	3301      	adds	r3, #1
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001e54:	ee27 7a27 	vmul.f32	s14, s14, s15
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001e60:	bcf0      	pop	{r4, r5, r6, r7}
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e6a:	ee17 0a90 	vmov	r0, s15
}
 8001e6e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e70:	4825      	ldr	r0, [pc, #148]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x148>)
}
 8001e72:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001e74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e80:	eddf 5a22 	vldr	s11, [pc, #136]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x14c>
 8001e84:	ee07 3a10 	vmov	s14, r3
 8001e88:	fbb2 f3f7 	udiv	r3, r2, r7
 8001e8c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001e90:	e7d3      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7a>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	069b      	lsls	r3, r3, #26
 8001e96:	d521      	bpl.n	8001edc <HAL_RCC_GetSysClockFreq+0x11c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e98:	6810      	ldr	r0, [r2, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001e9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ea0:	f3c0 02c1 	ubfx	r2, r0, #3, #2
 8001ea4:	4818      	ldr	r0, [pc, #96]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x148>)
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eaa:	eddf 5a18 	vldr	s11, [pc, #96]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x14c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001eae:	40d0      	lsrs	r0, r2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001eb0:	ee07 3a10 	vmov	s14, r3
 8001eb4:	fbb0 f3f7 	udiv	r3, r0, r7
 8001eb8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001ebc:	e7bd      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7a>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001ebe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ec0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ec4:	490e      	ldr	r1, [pc, #56]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eca:	eddf 5a10 	vldr	s11, [pc, #64]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x14c>
 8001ece:	ee07 3a10 	vmov	s14, r3
 8001ed2:	fbb1 f3f7 	udiv	r3, r1, r7
 8001ed6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001eda:	e7ae      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001edc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ede:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x148>)
 8001ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee8:	eddf 5a08 	vldr	s11, [pc, #32]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x14c>
 8001eec:	ee07 3a10 	vmov	s14, r3
 8001ef0:	fbb0 f3f7 	udiv	r3, r0, r7
 8001ef4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001ef8:	e79f      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7a>
 8001efa:	bf00      	nop
 8001efc:	58024400 	.word	0x58024400
 8001f00:	003d0900 	.word	0x003d0900
 8001f04:	00b71b00 	.word	0x00b71b00
 8001f08:	03d09000 	.word	0x03d09000
 8001f0c:	39000000 	.word	0x39000000

08001f10 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f10:	4a68      	ldr	r2, [pc, #416]	; (80020b4 <HAL_RCC_ClockConfig+0x1a4>)
 8001f12:	6813      	ldr	r3, [r2, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	428b      	cmp	r3, r1
{
 8001f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f1e:	460d      	mov	r5, r1
 8001f20:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f22:	d20c      	bcs.n	8001f3e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	f023 0307 	bic.w	r3, r3, #7
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	428b      	cmp	r3, r1
 8001f36:	d002      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8001f38:	2001      	movs	r0, #1
}
 8001f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	0798      	lsls	r0, r3, #30
 8001f42:	d506      	bpl.n	8001f52 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	495c      	ldr	r1, [pc, #368]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
 8001f46:	68e0      	ldr	r0, [r4, #12]
 8001f48:	698a      	ldr	r2, [r1, #24]
 8001f4a:	f022 020f 	bic.w	r2, r2, #15
 8001f4e:	4302      	orrs	r2, r0
 8001f50:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	07d9      	lsls	r1, r3, #31
 8001f54:	d52f      	bpl.n	8001fb6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f56:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
 8001f58:	68a1      	ldr	r1, [r4, #8]
 8001f5a:	6993      	ldr	r3, [r2, #24]
 8001f5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f64:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f68:	2902      	cmp	r1, #2
 8001f6a:	f000 8097 	beq.w	800209c <HAL_RCC_ClockConfig+0x18c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	2903      	cmp	r1, #3
 8001f70:	f000 8090 	beq.w	8002094 <HAL_RCC_ClockConfig+0x184>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f74:	2901      	cmp	r1, #1
 8001f76:	f000 8098 	beq.w	80020aa <HAL_RCC_ClockConfig+0x19a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	075e      	lsls	r6, r3, #29
 8001f7c:	d5dc      	bpl.n	8001f38 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4e4e      	ldr	r6, [pc, #312]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f84:	6933      	ldr	r3, [r6, #16]
 8001f86:	f023 0307 	bic.w	r3, r3, #7
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8001f8e:	f7fe fbb7 	bl	8000700 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8001f94:	4607      	mov	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d060      	beq.n	800205c <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d069      	beq.n	8002072 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_ClockConfig+0x9e>
 8001fa2:	e071      	b.n	8002088 <HAL_RCC_ClockConfig+0x178>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fbac 	bl	8000700 <HAL_GetTick>
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4540      	cmp	r0, r8
 8001fac:	d87a      	bhi.n	80020a4 <HAL_RCC_ClockConfig+0x194>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001fae:	6933      	ldr	r3, [r6, #16]
 8001fb0:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001fb4:	d1f6      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	; (80020b4 <HAL_RCC_ClockConfig+0x1a4>)
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	42ab      	cmp	r3, r5
 8001fc0:	d909      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	f023 0307 	bic.w	r3, r3, #7
 8001fc8:	432b      	orrs	r3, r5
 8001fca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	42ab      	cmp	r3, r5
 8001fd4:	d1b0      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	0758      	lsls	r0, r3, #29
 8001fda:	d506      	bpl.n	8001fea <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fdc:	4936      	ldr	r1, [pc, #216]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
 8001fde:	6920      	ldr	r0, [r4, #16]
 8001fe0:	698a      	ldr	r2, [r1, #24]
 8001fe2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fea:	0719      	lsls	r1, r3, #28
 8001fec:	d506      	bpl.n	8001ffc <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fee:	4932      	ldr	r1, [pc, #200]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
 8001ff0:	6960      	ldr	r0, [r4, #20]
 8001ff2:	69ca      	ldr	r2, [r1, #28]
 8001ff4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ff8:	4302      	orrs	r2, r0
 8001ffa:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	06da      	lsls	r2, r3, #27
 8001ffe:	d506      	bpl.n	800200e <HAL_RCC_ClockConfig+0xfe>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002000:	492d      	ldr	r1, [pc, #180]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
 8002002:	69a0      	ldr	r0, [r4, #24]
 8002004:	69ca      	ldr	r2, [r1, #28]
 8002006:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800200a:	4302      	orrs	r2, r0
 800200c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800200e:	069b      	lsls	r3, r3, #26
 8002010:	d506      	bpl.n	8002020 <HAL_RCC_ClockConfig+0x110>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002012:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
 8002014:	69e1      	ldr	r1, [r4, #28]
 8002016:	6a13      	ldr	r3, [r2, #32]
 8002018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201c:	430b      	orrs	r3, r1
 800201e:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002020:	f7ff fece 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1a8>)
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	4603      	mov	r3, r0
 800202c:	6992      	ldr	r2, [r2, #24]
 800202e:	fa91 f1a1 	rbit	r1, r1
 8002032:	fab1 f181 	clz	r1, r1
 8002036:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800203a:	4c20      	ldr	r4, [pc, #128]	; (80020bc <HAL_RCC_ClockConfig+0x1ac>)
  HAL_InitTick (TICK_INT_PRIORITY);
 800203c:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800203e:	40ca      	lsrs	r2, r1
 8002040:	491f      	ldr	r1, [pc, #124]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002042:	5ca2      	ldrb	r2, [r4, r2]
 8002044:	40d3      	lsrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002048:	f7fe fb1e 	bl	8000688 <HAL_InitTick>
  return HAL_OK;
 800204c:	2000      	movs	r0, #0
}
 800204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002052:	f7fe fb55 	bl	8000700 <HAL_GetTick>
 8002056:	1bc0      	subs	r0, r0, r7
 8002058:	4540      	cmp	r0, r8
 800205a:	d823      	bhi.n	80020a4 <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800205c:	6933      	ldr	r3, [r6, #16]
 800205e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002062:	2b10      	cmp	r3, #16
 8002064:	d1f5      	bne.n	8002052 <HAL_RCC_ClockConfig+0x142>
 8002066:	e7a6      	b.n	8001fb6 <HAL_RCC_ClockConfig+0xa6>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe fb4a 	bl	8000700 <HAL_GetTick>
 800206c:	1bc0      	subs	r0, r0, r7
 800206e:	4540      	cmp	r0, r8
 8002070:	d818      	bhi.n	80020a4 <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002072:	6933      	ldr	r3, [r6, #16]
 8002074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002078:	2b18      	cmp	r3, #24
 800207a:	d1f5      	bne.n	8002068 <HAL_RCC_ClockConfig+0x158>
 800207c:	e79b      	b.n	8001fb6 <HAL_RCC_ClockConfig+0xa6>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207e:	f7fe fb3f 	bl	8000700 <HAL_GetTick>
 8002082:	1bc0      	subs	r0, r0, r7
 8002084:	4540      	cmp	r0, r8
 8002086:	d80d      	bhi.n	80020a4 <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8002088:	6933      	ldr	r3, [r6, #16]
 800208a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800208e:	2b08      	cmp	r3, #8
 8002090:	d1f5      	bne.n	800207e <HAL_RCC_ClockConfig+0x16e>
 8002092:	e790      	b.n	8001fb6 <HAL_RCC_ClockConfig+0xa6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002094:	019b      	lsls	r3, r3, #6
 8002096:	f53f af72 	bmi.w	8001f7e <HAL_RCC_ClockConfig+0x6e>
 800209a:	e74d      	b.n	8001f38 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209c:	039a      	lsls	r2, r3, #14
 800209e:	f53f af6e 	bmi.w	8001f7e <HAL_RCC_ClockConfig+0x6e>
 80020a2:	e749      	b.n	8001f38 <HAL_RCC_ClockConfig+0x28>
            return HAL_TIMEOUT;
 80020a4:	2003      	movs	r0, #3
}
 80020a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80020aa:	05df      	lsls	r7, r3, #23
 80020ac:	f53f af67 	bmi.w	8001f7e <HAL_RCC_ClockConfig+0x6e>
 80020b0:	e742      	b.n	8001f38 <HAL_RCC_ClockConfig+0x28>
 80020b2:	bf00      	nop
 80020b4:	52002000 	.word	0x52002000
 80020b8:	58024400 	.word	0x58024400
 80020bc:	0800bca8 	.word	0x0800bca8
 80020c0:	20011f8c 	.word	0x20011f8c

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 80020c6:	f000 fff7 	bl	80030b8 <HAL_RCCEx_GetD1SysClockFreq>
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_RCC_GetHCLKFreq+0x28>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	fa92 f2a2 	rbit	r2, r2
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80020de:	40d3      	lsrs	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	40d8      	lsrs	r0, r3
 80020e6:	6010      	str	r0, [r2, #0]
  return SystemD2Clock;
}
 80020e8:	bd08      	pop	{r3, pc}
 80020ea:	bf00      	nop
 80020ec:	58024400 	.word	0x58024400
 80020f0:	0800bca8 	.word	0x0800bca8
 80020f4:	20011f90 	.word	0x20011f90

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 80020fa:	f7ff ffe3 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002100:	2210      	movs	r2, #16
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	fa92 f2a2 	rbit	r2, r2
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002110:	4903      	ldr	r1, [pc, #12]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002112:	40d3      	lsrs	r3, r2
 8002114:	5ccb      	ldrb	r3, [r1, r3]
}
 8002116:	40d8      	lsrs	r0, r3
 8002118:	bd08      	pop	{r3, pc}
 800211a:	bf00      	nop
 800211c:	58024400 	.word	0x58024400
 8002120:	0800bca8 	.word	0x0800bca8

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8002126:	f7ff ffcd 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	fa92 f2a2 	rbit	r2, r2
 8002136:	fab2 f282 	clz	r2, r2
 800213a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800213e:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002140:	40d3      	lsrs	r3, r2
 8002142:	5ccb      	ldrb	r3, [r1, r3]
}
 8002144:	40d8      	lsrs	r0, r3
 8002146:	bd08      	pop	{r3, pc}
 8002148:	58024400 	.word	0x58024400
 800214c:	0800bca8 	.word	0x0800bca8

08002150 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002150:	4a33      	ldr	r2, [pc, #204]	; (8002220 <RCCEx_PLL2_Config+0xd0>)
{
 8002152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002154:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d05a      	beq.n	8002214 <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	4606      	mov	r6, r0
 8002162:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002164:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8002166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800216a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800216c:	f7fe fac8 	bl	8000700 <HAL_GetTick>
 8002170:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002172:	e004      	b.n	800217e <RCCEx_PLL2_Config+0x2e>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002174:	f7fe fac4 	bl	8000700 <HAL_GetTick>
 8002178:	1b43      	subs	r3, r0, r5
 800217a:	2b02      	cmp	r3, #2
 800217c:	d848      	bhi.n	8002210 <RCCEx_PLL2_Config+0xc0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	011a      	lsls	r2, r3, #4
 8002182:	d4f7      	bmi.n	8002174 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002184:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002186:	6832      	ldr	r2, [r6, #0]
 8002188:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800218c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002190:	62a3      	str	r3, [r4, #40]	; 0x28
 8002192:	6870      	ldr	r0, [r6, #4]
 8002194:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002198:	3801      	subs	r0, #1
 800219a:	1e51      	subs	r1, r2, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	6932      	ldr	r2, [r6, #16]
 80021a0:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80021a4:	025b      	lsls	r3, r3, #9
 80021a6:	0409      	lsls	r1, r1, #16
 80021a8:	3a01      	subs	r2, #1
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80021b0:	0612      	lsls	r2, r2, #24
 80021b2:	430b      	orrs	r3, r1
 80021b4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80021b8:	4303      	orrs	r3, r0
 80021ba:	4313      	orrs	r3, r2
 80021bc:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80021be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021c0:	6972      	ldr	r2, [r6, #20]
 80021c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021c6:	4313      	orrs	r3, r2
 80021c8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80021ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021cc:	69b2      	ldr	r2, [r6, #24]
 80021ce:	f023 0320 	bic.w	r3, r3, #32
 80021d2:	4313      	orrs	r3, r2
 80021d4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80021d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80021d8:	b1f7      	cbz	r7, 8002218 <RCCEx_PLL2_Config+0xc8>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80021da:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80021dc:	bf0c      	ite	eq
 80021de:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80021e2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80021e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <RCCEx_PLL2_Config+0xd0>)
 80021ea:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80021ec:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 80021ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021f2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80021f4:	f7fe fa84 	bl	8000700 <HAL_GetTick>
 80021f8:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80021fa:	e004      	b.n	8002206 <RCCEx_PLL2_Config+0xb6>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80021fc:	f7fe fa80 	bl	8000700 <HAL_GetTick>
 8002200:	1b00      	subs	r0, r0, r4
 8002202:	2802      	cmp	r0, #2
 8002204:	d804      	bhi.n	8002210 <RCCEx_PLL2_Config+0xc0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	d5f7      	bpl.n	80021fc <RCCEx_PLL2_Config+0xac>
    }

  }


  return status;
 800220c:	2000      	movs	r0, #0
}
 800220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002210:	2003      	movs	r0, #3
}
 8002212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002214:	2001      	movs	r0, #1
}
 8002216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800221c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800221e:	e7e3      	b.n	80021e8 <RCCEx_PLL2_Config+0x98>
 8002220:	58024400 	.word	0x58024400

08002224 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002224:	4a33      	ldr	r2, [pc, #204]	; (80022f4 <RCCEx_PLL3_Config+0xd0>)
{
 8002226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002228:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b03      	cmp	r3, #3
 8002230:	d05a      	beq.n	80022e8 <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	4606      	mov	r6, r0
 8002236:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8002238:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800223a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002240:	f7fe fa5e 	bl	8000700 <HAL_GetTick>
 8002244:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8002246:	e004      	b.n	8002252 <RCCEx_PLL3_Config+0x2e>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002248:	f7fe fa5a 	bl	8000700 <HAL_GetTick>
 800224c:	1b43      	subs	r3, r0, r5
 800224e:	2b02      	cmp	r3, #2
 8002250:	d848      	bhi.n	80022e4 <RCCEx_PLL3_Config+0xc0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	d4f7      	bmi.n	8002248 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002258:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800225a:	6832      	ldr	r2, [r6, #0]
 800225c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002260:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002264:	62a3      	str	r3, [r4, #40]	; 0x28
 8002266:	6870      	ldr	r0, [r6, #4]
 8002268:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800226c:	3801      	subs	r0, #1
 800226e:	1e51      	subs	r1, r2, #1
 8002270:	3b01      	subs	r3, #1
 8002272:	6932      	ldr	r2, [r6, #16]
 8002274:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002278:	025b      	lsls	r3, r3, #9
 800227a:	0409      	lsls	r1, r1, #16
 800227c:	3a01      	subs	r2, #1
 800227e:	b29b      	uxth	r3, r3
 8002280:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002284:	0612      	lsls	r2, r2, #24
 8002286:	430b      	orrs	r3, r1
 8002288:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800228c:	4303      	orrs	r3, r0
 800228e:	4313      	orrs	r3, r2
 8002290:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002294:	6972      	ldr	r2, [r6, #20]
 8002296:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800229a:	4313      	orrs	r3, r2
 800229c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800229e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022a0:	69b2      	ldr	r2, [r6, #24]
 80022a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022a6:	4313      	orrs	r3, r2
 80022a8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80022aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80022ac:	b1f7      	cbz	r7, 80022ec <RCCEx_PLL3_Config+0xc8>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80022ae:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80022b0:	bf0c      	ite	eq
 80022b2:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80022b6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80022ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <RCCEx_PLL3_Config+0xd0>)
 80022be:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80022c0:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 80022c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022c6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80022c8:	f7fe fa1a 	bl	8000700 <HAL_GetTick>
 80022cc:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80022ce:	e004      	b.n	80022da <RCCEx_PLL3_Config+0xb6>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80022d0:	f7fe fa16 	bl	8000700 <HAL_GetTick>
 80022d4:	1b00      	subs	r0, r0, r4
 80022d6:	2802      	cmp	r0, #2
 80022d8:	d804      	bhi.n	80022e4 <RCCEx_PLL3_Config+0xc0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	d5f7      	bpl.n	80022d0 <RCCEx_PLL3_Config+0xac>
    }

  }


  return status;
 80022e0:	2000      	movs	r0, #0
}
 80022e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80022e4:	2003      	movs	r0, #3
}
 80022e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
}
 80022ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80022ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022f2:	e7e3      	b.n	80022bc <RCCEx_PLL3_Config+0x98>
 80022f4:	58024400 	.word	0x58024400

080022f8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80022f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022fc:	6803      	ldr	r3, [r0, #0]
{
 80022fe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002300:	f013 6000 	ands.w	r0, r3, #134217728	; 0x8000000
 8002304:	f000 8113 	beq.w	800252e <HAL_RCCEx_PeriphCLKConfig+0x236>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002308:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800230a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800230e:	f000 84f9 	beq.w	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002312:	f200 8106 	bhi.w	8002522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002316:	2a00      	cmp	r2, #0
 8002318:	f000 8401 	beq.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x826>
 800231c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002320:	f040 8103 	bne.w	800252a <HAL_RCCEx_PeriphCLKConfig+0x232>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002324:	2102      	movs	r1, #2
 8002326:	1d20      	adds	r0, r4, #4
 8002328:	f7ff ff12 	bl	8002150 <RCCEx_PLL2_Config>
 800232c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800232e:	2d00      	cmp	r5, #0
 8002330:	f040 84c7 	bne.w	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8002334:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002336:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002338:	48ab      	ldr	r0, [pc, #684]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800233a:	05de      	lsls	r6, r3, #23
 800233c:	f04f 0500 	mov.w	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002340:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002342:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002346:	ea42 0201 	orr.w	r2, r2, r1
 800234a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800234c:	f100 80f3 	bmi.w	8002536 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8002350:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002352:	0598      	lsls	r0, r3, #22
 8002354:	d517      	bpl.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002356:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002358:	2a80      	cmp	r2, #128	; 0x80
 800235a:	f000 84c4 	beq.w	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800235e:	f200 80f5 	bhi.w	800254c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002362:	2a00      	cmp	r2, #0
 8002364:	f000 83e7 	beq.w	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002368:	2a40      	cmp	r2, #64	; 0x40
 800236a:	f040 80f6 	bne.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x262>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800236e:	2100      	movs	r1, #0
 8002370:	1d20      	adds	r0, r4, #4
 8002372:	f7ff feed 	bl	8002150 <RCCEx_PLL2_Config>
 8002376:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002378:	2e00      	cmp	r6, #0
 800237a:	f000 8395 	beq.w	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 800237e:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 8002380:	ea46 0005 	orr.w	r0, r6, r5
 8002384:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002386:	0559      	lsls	r1, r3, #21
 8002388:	d51a      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai4AClockSelection)
 800238a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800238e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002392:	f000 84a0 	beq.w	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002396:	f200 80e2 	bhi.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x266>
 800239a:	2a00      	cmp	r2, #0
 800239c:	f000 83c5 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x832>
 80023a0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80023a4:	f040 80e3 	bne.w	800256e <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023a8:	2100      	movs	r1, #0
 80023aa:	1d20      	adds	r0, r4, #4
 80023ac:	f7ff fed0 	bl	8002150 <RCCEx_PLL2_Config>
 80023b0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80023b2:	2e00      	cmp	r6, #0
 80023b4:	f000 8381 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 80023b8:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 80023ba:	ea46 0005 	orr.w	r0, r6, r5
 80023be:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023c0:	051a      	lsls	r2, r3, #20
 80023c2:	d51a      	bpl.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x102>
    switch(PeriphClkInit->Sai4BClockSelection)
 80023c4:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80023c8:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80023cc:	f000 847b 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 80023d0:	f200 80cf 	bhi.w	8002572 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80023d4:	2a00      	cmp	r2, #0
 80023d6:	f000 8396 	beq.w	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80023da:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80023de:	f040 80d0 	bne.w	8002582 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023e2:	2100      	movs	r1, #0
 80023e4:	1d20      	adds	r0, r4, #4
 80023e6:	f7ff feb3 	bl	8002150 <RCCEx_PLL2_Config>
 80023ea:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80023ec:	2e00      	cmp	r6, #0
 80023ee:	f000 836e 	beq.w	8002ace <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 80023f2:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 80023f4:	ea46 0005 	orr.w	r0, r6, r5
 80023f8:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023fa:	019f      	lsls	r7, r3, #6
 80023fc:	d519      	bpl.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 80023fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002400:	2a20      	cmp	r2, #32
 8002402:	f000 840a 	beq.w	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x922>
 8002406:	f200 80be 	bhi.w	8002586 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800240a:	b13a      	cbz	r2, 800241c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800240c:	2a10      	cmp	r2, #16
 800240e:	f040 80bd 	bne.w	800258c <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002412:	4a75      	ldr	r2, [pc, #468]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002414:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800241c:	2e00      	cmp	r6, #0
 800241e:	f040 8390 	bne.w	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002422:	4a71      	ldr	r2, [pc, #452]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002424:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002426:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002428:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800242c:	430b      	orrs	r3, r1
 800242e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002430:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002432:	04d8      	lsls	r0, r3, #19
 8002434:	d519      	bpl.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002436:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002438:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800243c:	f000 846c 	beq.w	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002440:	f200 80a9 	bhi.w	8002596 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8002444:	2a00      	cmp	r2, #0
 8002446:	f000 8364 	beq.w	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800244a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800244e:	f040 80aa 	bne.w	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002452:	2100      	movs	r1, #0
 8002454:	1d20      	adds	r0, r4, #4
 8002456:	f7ff fe7b 	bl	8002150 <RCCEx_PLL2_Config>
 800245a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800245c:	2e00      	cmp	r6, #0
 800245e:	f000 8340 	beq.w	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 8002462:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 8002464:	ea46 0005 	orr.w	r0, r6, r5
 8002468:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800246a:	0499      	lsls	r1, r3, #18
 800246c:	d51b      	bpl.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->Spi45ClockSelection)
 800246e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002470:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002474:	f000 83f8 	beq.w	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8002478:	f200 8097 	bhi.w	80025aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800247c:	b142      	cbz	r2, 8002490 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800247e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002482:	f040 809c 	bne.w	80025be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002486:	2101      	movs	r1, #1
 8002488:	1d20      	adds	r0, r4, #4
 800248a:	f7ff fe61 	bl	8002150 <RCCEx_PLL2_Config>
 800248e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002490:	2e00      	cmp	r6, #0
 8002492:	f040 8358 	bne.w	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002496:	4a54      	ldr	r2, [pc, #336]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002498:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800249a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800249c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6513      	str	r3, [r2, #80]	; 0x50
 80024a4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80024a6:	045a      	lsls	r2, r3, #17
 80024a8:	d51d      	bpl.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->Spi6ClockSelection)
 80024aa:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80024ae:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80024b2:	f000 83cf 	beq.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80024b6:	f200 8087 	bhi.w	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80024ba:	b142      	cbz	r2, 80024ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80024bc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80024c0:	f040 808c 	bne.w	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024c4:	2101      	movs	r1, #1
 80024c6:	1d20      	adds	r0, r4, #4
 80024c8:	f7ff fe42 	bl	8002150 <RCCEx_PLL2_Config>
 80024cc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	f040 8358 	bne.w	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80024d4:	4a44      	ldr	r2, [pc, #272]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024d6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80024da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80024dc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6593      	str	r3, [r2, #88]	; 0x58
 80024e4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024e6:	041f      	lsls	r7, r3, #16
 80024e8:	d50f      	bpl.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch(PeriphClkInit->FdcanClockSelection)
 80024ea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80024ec:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80024f0:	f000 838a 	beq.w	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80024f4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80024f8:	f000 824c 	beq.w	8002994 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	f000 824e 	beq.w	800299e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8002502:	2601      	movs	r6, #1
      status |= ret;
 8002504:	ea46 0005 	orr.w	r0, r6, r5
 8002508:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800250a:	01d8      	lsls	r0, r3, #7
 800250c:	d57a      	bpl.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    switch(PeriphClkInit->FmcClockSelection)
 800250e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002510:	2a03      	cmp	r2, #3
 8002512:	f200 845d 	bhi.w	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002516:	e8df f012 	tbh	[pc, r2, lsl #1]
 800251a:	006e      	.short	0x006e
 800251c:	0069036f 	.word	0x0069036f
 8002520:	006e      	.short	0x006e
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002522:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002526:	f43f af07 	beq.w	8002338 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800252a:	2501      	movs	r5, #1
 800252c:	e000      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x238>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800252e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002530:	05de      	lsls	r6, r3, #23
 8002532:	f57f af0d 	bpl.w	8002350 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002536:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002538:	2a04      	cmp	r2, #4
 800253a:	f200 8443 	bhi.w	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800253e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002542:	03b3      	.short	0x03b3
 8002544:	03da03ba 	.word	0x03da03ba
 8002548:	01fa01fa 	.word	0x01fa01fa
    switch(PeriphClkInit->Sai23ClockSelection)
 800254c:	2ac0      	cmp	r2, #192	; 0xc0
 800254e:	f43f af13 	beq.w	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002552:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002556:	f43f af0f 	beq.w	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800255a:	2601      	movs	r6, #1
 800255c:	e710      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai4AClockSelection)
 800255e:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8002562:	f43f af26 	beq.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
 8002566:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800256a:	f43f af22 	beq.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800256e:	2601      	movs	r6, #1
 8002570:	e723      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002572:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8002576:	f43f af39 	beq.w	80023ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800257a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800257e:	f43f af35 	beq.w	80023ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002582:	2601      	movs	r6, #1
 8002584:	e736      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->QspiClockSelection)
 8002586:	2a30      	cmp	r2, #48	; 0x30
 8002588:	f43f af48 	beq.w	800241c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800258c:	2601      	movs	r6, #1
      status |= ret;
 800258e:	ea45 0006 	orr.w	r0, r5, r6
 8002592:	b2c5      	uxtb	r5, r0
 8002594:	e74d      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002596:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800259a:	f43f af5f 	beq.w	800245c <HAL_RCCEx_PeriphCLKConfig+0x164>
 800259e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80025a2:	f43f af5b 	beq.w	800245c <HAL_RCCEx_PeriphCLKConfig+0x164>
 80025a6:	2601      	movs	r6, #1
 80025a8:	e75c      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi45ClockSelection)
 80025aa:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80025ae:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80025b2:	f43f af6d 	beq.w	8002490 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80025b6:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80025ba:	f43f af69 	beq.w	8002490 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80025be:	2601      	movs	r6, #1
      status |= ret;
 80025c0:	ea46 0005 	orr.w	r0, r6, r5
 80025c4:	b2c5      	uxtb	r5, r0
 80025c6:	e76e      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->Spi6ClockSelection)
 80025c8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80025cc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80025d0:	f43f af7d 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80025d4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80025d8:	f43f af79 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80025dc:	2601      	movs	r6, #1
      status |= ret;
 80025de:	ea46 0005 	orr.w	r0, r6, r5
 80025e2:	b2c5      	uxtb	r5, r0
 80025e4:	e77f      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025e6:	bf00      	nop
 80025e8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025ec:	2102      	movs	r1, #2
 80025ee:	1d20      	adds	r0, r4, #4
 80025f0:	f7ff fdae 	bl	8002150 <RCCEx_PLL2_Config>
 80025f4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80025f6:	2e00      	cmp	r6, #0
 80025f8:	f000 82c6 	beq.w	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x890>
 80025fc:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 80025fe:	ea46 0005 	orr.w	r0, r6, r5
 8002602:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002604:	0259      	lsls	r1, r3, #9
 8002606:	f100 81fb 	bmi.w	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x708>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800260a:	07df      	lsls	r7, r3, #31
 800260c:	d531      	bpl.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800260e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002610:	2a28      	cmp	r2, #40	; 0x28
 8002612:	d82a      	bhi.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002614:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002618:	002901d5 	.word	0x002901d5
 800261c:	00290029 	.word	0x00290029
 8002620:	00290029 	.word	0x00290029
 8002624:	00290029 	.word	0x00290029
 8002628:	0029039a 	.word	0x0029039a
 800262c:	00290029 	.word	0x00290029
 8002630:	00290029 	.word	0x00290029
 8002634:	00290029 	.word	0x00290029
 8002638:	002901cf 	.word	0x002901cf
 800263c:	00290029 	.word	0x00290029
 8002640:	00290029 	.word	0x00290029
 8002644:	00290029 	.word	0x00290029
 8002648:	002901d5 	.word	0x002901d5
 800264c:	00290029 	.word	0x00290029
 8002650:	00290029 	.word	0x00290029
 8002654:	00290029 	.word	0x00290029
 8002658:	002901d5 	.word	0x002901d5
 800265c:	00290029 	.word	0x00290029
 8002660:	00290029 	.word	0x00290029
 8002664:	00290029 	.word	0x00290029
 8002668:	01d5      	.short	0x01d5
 800266a:	2601      	movs	r6, #1
      status |= ret;
 800266c:	ea45 0006 	orr.w	r0, r5, r6
 8002670:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002672:	0798      	lsls	r0, r3, #30
 8002674:	d518      	bpl.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002676:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002678:	2a05      	cmp	r2, #5
 800267a:	f200 83a5 	bhi.w	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800267e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002682:	000c      	.short	0x000c
 8002684:	0006035c 	.word	0x0006035c
 8002688:	000c000c 	.word	0x000c000c
 800268c:	000c      	.short	0x000c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800268e:	2101      	movs	r1, #1
 8002690:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002694:	f7ff fdc6 	bl	8002224 <RCCEx_PLL3_Config>
 8002698:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800269a:	2e00      	cmp	r6, #0
 800269c:	f000 8259 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 80026a0:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 80026a2:	ea46 0005 	orr.w	r0, r6, r5
 80026a6:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a8:	0759      	lsls	r1, r3, #29
 80026aa:	d519      	bpl.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80026ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80026b0:	2a05      	cmp	r2, #5
 80026b2:	f200 838b 	bhi.w	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>
 80026b6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80026ba:	000c      	.short	0x000c
 80026bc:	00060337 	.word	0x00060337
 80026c0:	000c000c 	.word	0x000c000c
 80026c4:	000c      	.short	0x000c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026c6:	2101      	movs	r1, #1
 80026c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026cc:	f7ff fdaa 	bl	8002224 <RCCEx_PLL3_Config>
 80026d0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80026d2:	2e00      	cmp	r6, #0
 80026d4:	f000 8246 	beq.w	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80026d8:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 80026da:	ea46 0005 	orr.w	r0, r6, r5
 80026de:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026e0:	069a      	lsls	r2, r3, #26
 80026e2:	d51d      	bpl.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80026e4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80026e8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80026ec:	f000 829e 	beq.w	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80026f0:	f200 80e9 	bhi.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
 80026f4:	b142      	cbz	r2, 8002708 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80026f6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80026fa:	f040 80ee 	bne.w	80028da <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026fe:	2100      	movs	r1, #0
 8002700:	1d20      	adds	r0, r4, #4
 8002702:	f7ff fd25 	bl	8002150 <RCCEx_PLL2_Config>
 8002706:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002708:	2e00      	cmp	r6, #0
 800270a:	f040 821e 	bne.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x852>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270e:	4abb      	ldr	r2, [pc, #748]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002710:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002714:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002716:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800271a:	430b      	orrs	r3, r1
 800271c:	6553      	str	r3, [r2, #84]	; 0x54
 800271e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002720:	065f      	lsls	r7, r3, #25
 8002722:	d51d      	bpl.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002724:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8002728:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800272c:	f000 8288 	beq.w	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8002730:	f200 80d8 	bhi.w	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8002734:	b142      	cbz	r2, 8002748 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8002736:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800273a:	f040 80dd 	bne.w	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800273e:	2100      	movs	r1, #0
 8002740:	1d20      	adds	r0, r4, #4
 8002742:	f7ff fd05 	bl	8002150 <RCCEx_PLL2_Config>
 8002746:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002748:	2e00      	cmp	r6, #0
 800274a:	f040 8200 	bne.w	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x856>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800274e:	4aab      	ldr	r2, [pc, #684]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002750:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8002754:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002756:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800275a:	430b      	orrs	r3, r1
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
 800275e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002760:	0618      	lsls	r0, r3, #24
 8002762:	d51d      	bpl.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002764:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8002768:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800276c:	f000 823a 	beq.w	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002770:	f200 80c7 	bhi.w	8002902 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8002774:	b142      	cbz	r2, 8002788 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8002776:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800277a:	f040 80cc 	bne.w	8002916 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800277e:	2100      	movs	r1, #0
 8002780:	1d20      	adds	r0, r4, #4
 8002782:	f7ff fce5 	bl	8002150 <RCCEx_PLL2_Config>
 8002786:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002788:	2e00      	cmp	r6, #0
 800278a:	f040 81f9 	bne.w	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800278e:	4a9b      	ldr	r2, [pc, #620]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002790:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002794:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002796:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800279a:	430b      	orrs	r3, r1
 800279c:	6593      	str	r3, [r2, #88]	; 0x58
 800279e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80027a0:	0719      	lsls	r1, r3, #28
 80027a2:	d50b      	bpl.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80027a4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80027a8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80027ac:	f000 826f 	beq.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x996>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80027b0:	4892      	ldr	r0, [pc, #584]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80027b2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80027b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027b8:	430a      	orrs	r2, r1
 80027ba:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027bc:	06da      	lsls	r2, r3, #27
 80027be:	d50b      	bpl.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80027c0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80027c4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80027c8:	f000 8258 	beq.w	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027cc:	488b      	ldr	r0, [pc, #556]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80027ce:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80027d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027d4:	430a      	orrs	r2, r1
 80027d6:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d8:	031f      	lsls	r7, r3, #12
 80027da:	d510      	bpl.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->AdcClockSelection)
 80027dc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80027e0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80027e4:	f000 80b0 	beq.w	8002948 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80027e8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80027ec:	f000 80b2 	beq.w	8002954 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80027f0:	2900      	cmp	r1, #0
 80027f2:	f000 81ef 	beq.w	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80027f6:	2601      	movs	r6, #1
      status |= ret;
 80027f8:	ea46 0005 	orr.w	r0, r6, r5
 80027fc:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027fe:	0358      	lsls	r0, r3, #13
 8002800:	d511      	bpl.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch(PeriphClkInit->UsbClockSelection)
 8002802:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002806:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800280a:	f000 80b0 	beq.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800280e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002812:	f000 80b2 	beq.w	800297a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002816:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800281a:	f000 81d2 	beq.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800281e:	2601      	movs	r6, #1
      status |= ret;
 8002820:	ea46 0005 	orr.w	r0, r6, r5
 8002824:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002826:	03d9      	lsls	r1, r3, #15
 8002828:	d50b      	bpl.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    switch(PeriphClkInit->SdmmcClockSelection)
 800282a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800282c:	2a00      	cmp	r2, #0
 800282e:	f000 81b8 	beq.w	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8002832:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002836:	f000 815d 	beq.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 800283a:	2601      	movs	r6, #1
      status |= ret;
 800283c:	ea46 0005 	orr.w	r0, r6, r5
 8002840:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	f100 811e 	bmi.w	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x78c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002848:	039f      	lsls	r7, r3, #14
 800284a:	d510      	bpl.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch(PeriphClkInit->RngClockSelection)
 800284c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800284e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002852:	f000 8284 	beq.w	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002856:	f240 80c0 	bls.w	80029da <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800285a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800285e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002862:	f000 80bd 	beq.w	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8002866:	2601      	movs	r6, #1
      status |= ret;
 8002868:	ea45 0006 	orr.w	r0, r5, r6
 800286c:	b2c5      	uxtb	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800286e:	02de      	lsls	r6, r3, #11
 8002870:	d506      	bpl.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002872:	4962      	ldr	r1, [pc, #392]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002874:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002876:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002878:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800287c:	4302      	orrs	r2, r0
 800287e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002880:	00d8      	lsls	r0, r3, #3
 8002882:	d507      	bpl.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002884:	495d      	ldr	r1, [pc, #372]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002886:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800288a:	690a      	ldr	r2, [r1, #16]
 800288c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002890:	4302      	orrs	r2, r0
 8002892:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002894:	0299      	lsls	r1, r3, #10
 8002896:	d506      	bpl.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002898:	4958      	ldr	r1, [pc, #352]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800289a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800289c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800289e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80028a2:	4302      	orrs	r2, r0
 80028a4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80028a6:	005a      	lsls	r2, r3, #1
 80028a8:	d43a      	bmi.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x628>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da06      	bge.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80028ae:	4a53      	ldr	r2, [pc, #332]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80028b0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80028b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80028b4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80028b8:	430b      	orrs	r3, r1
 80028ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (status == HAL_OK)
 80028bc:	1e28      	subs	r0, r5, #0
 80028be:	bf18      	it	ne
 80028c0:	2001      	movne	r0, #1
}
 80028c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80028c6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80028ca:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80028ce:	f43f af1b 	beq.w	8002708 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80028d2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80028d6:	f43f af17 	beq.w	8002708 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80028da:	2601      	movs	r6, #1
      status |= ret;
 80028dc:	ea46 0005 	orr.w	r0, r6, r5
 80028e0:	b2c5      	uxtb	r5, r0
 80028e2:	e71d      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80028e4:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80028e8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80028ec:	f43f af2c 	beq.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x450>
 80028f0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80028f4:	f43f af28 	beq.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x450>
 80028f8:	2601      	movs	r6, #1
      status |= ret;
 80028fa:	ea46 0005 	orr.w	r0, r6, r5
 80028fe:	b2c5      	uxtb	r5, r0
 8002900:	e72e      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002902:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002906:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800290a:	f43f af3d 	beq.w	8002788 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800290e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8002912:	f43f af39 	beq.w	8002788 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8002916:	2601      	movs	r6, #1
      status |= ret;
 8002918:	ea46 0005 	orr.w	r0, r6, r5
 800291c:	b2c5      	uxtb	r5, r0
 800291e:	e73f      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002920:	4a36      	ldr	r2, [pc, #216]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002922:	6911      	ldr	r1, [r2, #16]
 8002924:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002928:	6111      	str	r1, [r2, #16]
 800292a:	6911      	ldr	r1, [r2, #16]
 800292c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8002930:	4301      	orrs	r1, r0
 8002932:	6111      	str	r1, [r2, #16]
 8002934:	e7b9      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002936:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 8002938:	2e00      	cmp	r6, #0
 800293a:	f000 80ac 	beq.w	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800293e:	6823      	ldr	r3, [r4, #0]
      status |= ret;
 8002940:	ea46 0005 	orr.w	r0, r6, r5
 8002944:	b2c5      	uxtb	r5, r0
 8002946:	e504      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002948:	2102      	movs	r1, #2
 800294a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800294e:	f7ff fc69 	bl	8002224 <RCCEx_PLL3_Config>
 8002952:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002954:	2e00      	cmp	r6, #0
 8002956:	f040 8111 	bne.w	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x884>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800295a:	4a28      	ldr	r2, [pc, #160]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800295c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002960:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002962:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002966:	430b      	orrs	r3, r1
 8002968:	6593      	str	r3, [r2, #88]	; 0x58
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	e747      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800296e:	2101      	movs	r1, #1
 8002970:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002974:	f7ff fc56 	bl	8002224 <RCCEx_PLL3_Config>
 8002978:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800297a:	2e00      	cmp	r6, #0
 800297c:	f040 80fc 	bne.w	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002980:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002982:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002986:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002988:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800298c:	430b      	orrs	r3, r1
 800298e:	6553      	str	r3, [r2, #84]	; 0x54
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	e748      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002994:	2101      	movs	r1, #1
 8002996:	1d20      	adds	r0, r4, #4
 8002998:	f7ff fbda 	bl	8002150 <RCCEx_PLL2_Config>
 800299c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800299e:	2e00      	cmp	r6, #0
 80029a0:	f040 80fd 	bne.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80029a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80029aa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80029ae:	430b      	orrs	r3, r1
 80029b0:	6513      	str	r3, [r2, #80]	; 0x50
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	e5a9      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029b6:	2101      	movs	r1, #1
 80029b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029bc:	f7ff fc32 	bl	8002224 <RCCEx_PLL3_Config>
 80029c0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80029c2:	2e00      	cmp	r6, #0
 80029c4:	f040 80e9 	bne.w	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029ca:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80029cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80029ce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80029d2:	430b      	orrs	r3, r1
 80029d4:	6553      	str	r3, [r2, #84]	; 0x54
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	e64b      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    switch(PeriphClkInit->RngClockSelection)
 80029da:	2a00      	cmp	r2, #0
 80029dc:	f47f af43 	bne.w	8002866 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    if(ret == HAL_OK)
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	f47f af41 	bne.w	8002868 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x704>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029e8:	02de      	lsls	r6, r3, #11
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029ea:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80029ec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80029f0:	ea42 0201 	orr.w	r2, r2, r1
 80029f4:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029f6:	f57f af43 	bpl.w	8002880 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80029fa:	e73a      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80029fc:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4ba7      	ldr	r3, [pc, #668]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8002a02:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a04:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002a0c:	f7fd fe78 	bl	8000700 <HAL_GetTick>
 8002a10:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a12:	e005      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x728>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fd fe74 	bl	8000700 <HAL_GetTick>
 8002a18:	1bc0      	subs	r0, r0, r7
 8002a1a:	2864      	cmp	r0, #100	; 0x64
 8002a1c:	f200 81a8 	bhi.w	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xa78>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a20:	f8d8 3000 	ldr.w	r3, [r8]
 8002a24:	05da      	lsls	r2, r3, #23
 8002a26:	d5f5      	bpl.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    if(ret == HAL_OK)
 8002a28:	2e00      	cmp	r6, #0
 8002a2a:	f040 81a2 	bne.w	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a2e:	4a9d      	ldr	r2, [pc, #628]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002a30:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002a34:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a36:	4059      	eors	r1, r3
 8002a38:	f411 7f40 	tst.w	r1, #768	; 0x300
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x75e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a3e:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a40:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a42:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a46:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002a4a:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4c:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8002a4e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002a52:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002a54:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5a:	f000 818f 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa84>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002a62:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002a66:	f000 81a3 	beq.w	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
 8002a6a:	498e      	ldr	r1, [pc, #568]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002a6c:	690a      	ldr	r2, [r1, #16]
 8002a6e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002a72:	610a      	str	r2, [r1, #16]
 8002a74:	4a8b      	ldr	r2, [pc, #556]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	e5c2      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x312>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a84:	2102      	movs	r1, #2
 8002a86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a8a:	f7ff fbcb 	bl	8002224 <RCCEx_PLL3_Config>
 8002a8e:	4328      	orrs	r0, r5
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	b2c5      	uxtb	r5, r0
 8002a94:	e6d8      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x550>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a96:	4a83      	ldr	r2, [pc, #524]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002a98:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002a9a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002a9c:	f023 0307 	bic.w	r3, r3, #7
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6513      	str	r3, [r2, #80]	; 0x50
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	e454      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002aa8:	4a7e      	ldr	r2, [pc, #504]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002aaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002aac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002aae:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	6513      	str	r3, [r2, #80]	; 0x50
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	e465      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002aba:	4a7a      	ldr	r2, [pc, #488]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002abc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002ac0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002ac2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	e478      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ace:	4a75      	ldr	r2, [pc, #468]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002ad0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002ad4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ada:	430b      	orrs	r3, r1
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	e48b      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ae2:	4a70      	ldr	r2, [pc, #448]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002ae4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002ae6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6513      	str	r3, [r2, #80]	; 0x50
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	e4ba      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x172>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002af4:	2102      	movs	r1, #2
 8002af6:	1d20      	adds	r0, r4, #4
 8002af8:	f7ff fb2a 	bl	8002150 <RCCEx_PLL2_Config>
 8002afc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002afe:	2e00      	cmp	r6, #0
 8002b00:	d056      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	e69a      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x544>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b06:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002b10:	e46c      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b12:	4a64      	ldr	r2, [pc, #400]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002b1c:	e49e      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1e:	4861      	ldr	r0, [pc, #388]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b20:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002b22:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002b26:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8002b28:	e406      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b32:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002b34:	e43d      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b36:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002b40:	e41a      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	e523      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	e53a      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	e6c6      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	e6d3      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x602>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b52:	4a54      	ldr	r2, [pc, #336]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b54:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002b56:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002b58:	f023 0307 	bic.w	r3, r3, #7
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6553      	str	r3, [r2, #84]	; 0x54
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	e5a1      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b64:	4a4f      	ldr	r2, [pc, #316]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b66:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002b6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b6c:	f023 0307 	bic.w	r3, r3, #7
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6593      	str	r3, [r2, #88]	; 0x58
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	e5b3      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	e651      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	e63b      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	e6c9      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	e52a      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b88:	4a46      	ldr	r2, [pc, #280]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002b8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002b8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	430b      	orrs	r3, r1
 8002b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	e534      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	e566      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	e4b0      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba2:	4a40      	ldr	r2, [pc, #256]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002ba4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002baa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002bac:	2e00      	cmp	r6, #0
 8002bae:	d1a8      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002bb0:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002bb2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002bb4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	e63f      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc2:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002bc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002bcc:	2e00      	cmp	r6, #0
 8002bce:	f43f aed7 	beq.w	8002980 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002bd2:	e7d1      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x880>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bd4:	1d20      	adds	r0, r4, #4
 8002bd6:	f7ff fabb 	bl	8002150 <RCCEx_PLL2_Config>
 8002bda:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002bdc:	2e00      	cmp	r6, #0
 8002bde:	f43f aebc 	beq.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002be2:	e7cb      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x884>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002be4:	2102      	movs	r1, #2
 8002be6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002bea:	f7ff fb1b 	bl	8002224 <RCCEx_PLL3_Config>
 8002bee:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002bf0:	2e00      	cmp	r6, #0
 8002bf2:	f43f adcc 	beq.w	800278e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002bf6:	e7c3      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002bfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002c02:	2e00      	cmp	r6, #0
 8002c04:	d0c0      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8002c06:	e4f9      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8002c0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c10:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002c12:	2e00      	cmp	r6, #0
 8002c14:	f43f aec6 	beq.w	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002c18:	e7c1      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	1d20      	adds	r0, r4, #4
 8002c1e:	f7ff fa97 	bl	8002150 <RCCEx_PLL2_Config>
 8002c22:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c24:	2e00      	cmp	r6, #0
 8002c26:	f43f abfc 	beq.w	8002422 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8002c2a:	e78a      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c32:	f7ff faf7 	bl	8002224 <RCCEx_PLL3_Config>
 8002c36:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c38:	2e00      	cmp	r6, #0
 8002c3a:	f43f ad68 	beq.w	800270e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c3e:	e784      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x852>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c40:	2102      	movs	r1, #2
 8002c42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c46:	f7ff faed 	bl	8002224 <RCCEx_PLL3_Config>
 8002c4a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c4c:	2e00      	cmp	r6, #0
 8002c4e:	f43f ad7e 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x456>
 8002c52:	e77c      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x856>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c54:	2101      	movs	r1, #1
 8002c56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c5a:	f7ff fae3 	bl	8002224 <RCCEx_PLL3_Config>
 8002c5e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c60:	2e00      	cmp	r6, #0
 8002c62:	f43f ac37 	beq.w	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c66:	e78d      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c68:	2101      	movs	r1, #1
 8002c6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c6e:	f7ff fad9 	bl	8002224 <RCCEx_PLL3_Config>
 8002c72:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c74:	2e00      	cmp	r6, #0
 8002c76:	f43f ac0e 	beq.w	8002496 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002c7a:	e764      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c82:	f7ff facf 	bl	8002224 <RCCEx_PLL3_Config>
 8002c86:	4328      	orrs	r0, r5
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	b2c5      	uxtb	r5, r0
 8002c8c:	e5a4      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c8e:	2102      	movs	r1, #2
 8002c90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c94:	f7ff fac6 	bl	8002224 <RCCEx_PLL3_Config>
 8002c98:	4328      	orrs	r0, r5
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	b2c5      	uxtb	r5, r0
 8002c9e:	e58d      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8002ca0:	58024800 	.word	0x58024800
 8002ca4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
      break;
 8002caa:	462e      	mov	r6, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002cb4:	e640      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	1d20      	adds	r0, r4, #4
 8002cba:	f7ff fa49 	bl	8002150 <RCCEx_PLL2_Config>
 8002cbe:	4606      	mov	r6, r0
      break;
 8002cc0:	e63a      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	e434      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x238>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ccc:	f7ff faaa 	bl	8002224 <RCCEx_PLL3_Config>
 8002cd0:	4606      	mov	r6, r0
      break;
 8002cd2:	f7ff bb8b 	b.w	80023ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cdc:	f7ff faa2 	bl	8002224 <RCCEx_PLL3_Config>
 8002ce0:	4606      	mov	r6, r0
      break;
 8002ce2:	f7ff bb66 	b.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cec:	f7ff fa9a 	bl	8002224 <RCCEx_PLL3_Config>
 8002cf0:	4606      	mov	r6, r0
      break;
 8002cf2:	f7ff bb41 	b.w	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cfc:	f7ff fa92 	bl	8002224 <RCCEx_PLL3_Config>
 8002d00:	4606      	mov	r6, r0
      break;
 8002d02:	e619      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d04:	2102      	movs	r1, #2
 8002d06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d0a:	f7ff fa8b 	bl	8002224 <RCCEx_PLL3_Config>
 8002d0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	f43f ab0f 	beq.w	8002334 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002d16:	e7d4      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d1e:	f7ff fa81 	bl	8002224 <RCCEx_PLL3_Config>
 8002d22:	4606      	mov	r6, r0
      break;
 8002d24:	f7ff bb9a 	b.w	800245c <HAL_RCCEx_PeriphCLKConfig+0x164>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d28:	2101      	movs	r1, #1
 8002d2a:	1d20      	adds	r0, r4, #4
 8002d2c:	f7ff fa10 	bl	8002150 <RCCEx_PLL2_Config>
 8002d30:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002d32:	2e00      	cmp	r6, #0
 8002d34:	f43f af16 	beq.w	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8002d38:	e4ce      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	1d20      	adds	r0, r4, #4
 8002d3e:	f7ff fa07 	bl	8002150 <RCCEx_PLL2_Config>
 8002d42:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	f43f af04 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8002d4a:	e4a9      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	1d20      	adds	r0, r4, #4
 8002d50:	f7ff f9fe 	bl	8002150 <RCCEx_PLL2_Config>
 8002d54:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002d56:	2e00      	cmp	r6, #0
 8002d58:	f43f ae36 	beq.w	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8002d5c:	e71d      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d5e:	481d      	ldr	r0, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8002d60:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d62:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002d66:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8002d68:	2e00      	cmp	r6, #0
 8002d6a:	f47f ad7d 	bne.w	8002868 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d6e:	e63a      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
        ret = HAL_TIMEOUT;
 8002d70:	2603      	movs	r6, #3
      status |= ret;
 8002d72:	ea45 0006 	orr.w	r0, r5, r6
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	b2c5      	uxtb	r5, r0
 8002d7a:	e446      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x312>
        tickstart = HAL_GetTick();
 8002d7c:	f7fd fcc0 	bl	8000700 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d88:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	e004      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fd fcb8 	bl	8000700 <HAL_GetTick>
 8002d90:	1bc0      	subs	r0, r0, r7
 8002d92:	4548      	cmp	r0, r9
 8002d94:	d806      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002d9a:	079b      	lsls	r3, r3, #30
 8002d9c:	d5f6      	bpl.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa94>
 8002d9e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002da2:	e65c      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x766>
        status |= ret;
 8002da4:	f045 0503 	orr.w	r5, r5, #3
 8002da8:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8002daa:	2603      	movs	r6, #3
        status |= ret;
 8002dac:	b2ed      	uxtb	r5, r5
 8002dae:	e42c      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x312>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xae0>)
 8002db4:	6901      	ldr	r1, [r0, #16]
 8002db6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002dba:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	6102      	str	r2, [r0, #16]
 8002dc2:	e657      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002dc4:	2601      	movs	r6, #1
 8002dc6:	e5bb      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x648>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002dc8:	2601      	movs	r6, #1
 8002dca:	e46a      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002dcc:	2601      	movs	r6, #1
 8002dce:	e484      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    switch(PeriphClkInit->FmcClockSelection)
 8002dd0:	2601      	movs	r6, #1
 8002dd2:	e414      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x306>
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	00ffffcf 	.word	0x00ffffcf

08002ddc <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002ddc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8002dde:	f7ff f971 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002de4:	2210      	movs	r2, #16
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	fab2 f282 	clz	r2, r2
 8002df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002df6:	40d3      	lsrs	r3, r2
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
}
 8002dfa:	40d8      	lsrs	r0, r3
 8002dfc:	bd08      	pop	{r3, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
 8002e04:	0800bca8 	.word	0x0800bca8

08002e08 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8002e08:	b4f0      	push	{r4, r5, r6, r7}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e0a:	4f50      	ldr	r7, [pc, #320]	; (8002f4c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8002e0c:	6abc      	ldr	r4, [r7, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002e10:	6afe      	ldr	r6, [r7, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e12:	f004 0403 	and.w	r4, r4, #3
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002e18:	f3c1 3c05 	ubfx	ip, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002e1c:	f006 0610 	and.w	r6, r6, #16
  switch (pllsource)
 8002e20:	2c01      	cmp	r4, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002e22:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002e26:	fb06 f603 	mul.w	r6, r6, r3
 8002e2a:	ee07 6a90 	vmov	s15, r6
 8002e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 8002e32:	d048      	beq.n	8002ec6 <HAL_RCCEx_GetPLL2ClockFreq+0xbe>
 8002e34:	2c02      	cmp	r4, #2
 8002e36:	d06b      	beq.n	8002f10 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8002e38:	2c00      	cmp	r4, #0
 8002e3a:	d053      	beq.n	8002ee4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002e42:	eddf 5a43 	vldr	s11, [pc, #268]	; 8002f50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4a:	ee06 3a90 	vmov	s13, r3
 8002e4e:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 8002e50:	fbb3 f3fc 	udiv	r3, r3, ip
 8002e54:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002e58:	eee7 6a25 	vfma.f32	s13, s14, s11
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002e5e:	ee07 3a90 	vmov	s15, r3
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002e62:	6b93      	ldr	r3, [r2, #56]	; 0x38
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002e68:	f3c3 2346 	ubfx	r3, r3, #9, #7
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002e6c:	ee36 7a86 	vadd.f32	s14, s13, s12
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002e70:	3301      	adds	r3, #1
}
 8002e72:	bcf0      	pop	{r4, r5, r6, r7}
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002e74:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002e78:	ee07 3a10 	vmov	s14, r3
 8002e7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e84:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002e88:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8002e8c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002e8e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002e92:	3301      	adds	r3, #1
 8002e94:	ee07 3a10 	vmov	s14, r3
 8002e98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ea0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002ea4:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8002ea8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002eaa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002eae:	3301      	adds	r3, #1
 8002eb0:	ee07 3a10 	vmov	s14, r3
 8002eb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002eb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ebc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002ec0:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8002ec4:	4770      	bx	lr
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002ecc:	4921      	ldr	r1, [pc, #132]	; (8002f54 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8002f50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	fbb1 f3fc 	udiv	r3, r1, ip
 8002ede:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ee2:	e7b9      	b.n	8002e58 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	069b      	lsls	r3, r3, #26
 8002ee8:	d521      	bpl.n	8002f2e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002eea:	683a      	ldr	r2, [r7, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002eec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ef2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002ef6:	4d18      	ldr	r5, [pc, #96]	; (8002f58 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efc:	eddf 5a14 	vldr	s11, [pc, #80]	; 8002f50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f00:	40d5      	lsrs	r5, r2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	fbb5 f3fc 	udiv	r3, r5, ip
 8002f0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f0e:	e7a3      	b.n	8002e58 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_RCCEx_GetPLL2ClockFreq+0x154>)
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8002f50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	fbb2 f3fc 	udiv	r3, r2, ip
 8002f28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f2c:	e794      	b.n	8002e58 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002f34:	4c08      	ldr	r4, [pc, #32]	; (8002f58 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8002f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3a:	eddf 5a05 	vldr	s11, [pc, #20]	; 8002f50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	fbb4 f3fc 	udiv	r3, r4, ip
 8002f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f4a:	e785      	b.n	8002e58 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	39000000 	.word	0x39000000
 8002f54:	003d0900 	.word	0x003d0900
 8002f58:	03d09000 	.word	0x03d09000
 8002f5c:	00b71b00 	.word	0x00b71b00

08002f60 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8002f60:	b4f0      	push	{r4, r5, r6, r7}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f62:	4f50      	ldr	r7, [pc, #320]	; (80030a4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8002f64:	6abc      	ldr	r4, [r7, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002f68:	6afe      	ldr	r6, [r7, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f6a:	f004 0403 	and.w	r4, r4, #3
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002f70:	f3c1 5c05 	ubfx	ip, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002f74:	f406 7680 	and.w	r6, r6, #256	; 0x100
  switch (pllsource)
 8002f78:	2c01      	cmp	r4, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002f7a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002f7e:	fb06 f603 	mul.w	r6, r6, r3
 8002f82:	ee07 6a90 	vmov	s15, r6
 8002f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 8002f8a:	d048      	beq.n	800301e <HAL_RCCEx_GetPLL3ClockFreq+0xbe>
 8002f8c:	2c02      	cmp	r4, #2
 8002f8e:	d06b      	beq.n	8003068 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d053      	beq.n	800303c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002f9a:	eddf 5a43 	vldr	s11, [pc, #268]	; 80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee06 3a90 	vmov	s13, r3
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8002fa8:	fbb3 f3fc 	udiv	r3, r3, ip
 8002fac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002fb0:	eee7 6a25 	vfma.f32	s13, s14, s11
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002fb4:	4a3b      	ldr	r2, [pc, #236]	; (80030a4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002fb6:	ee07 3a90 	vmov	s15, r3
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002fba:	6c13      	ldr	r3, [r2, #64]	; 0x40
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002fc0:	f3c3 2346 	ubfx	r3, r3, #9, #7
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002fc4:	ee36 7a86 	vadd.f32	s14, s13, s12
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002fc8:	3301      	adds	r3, #1
}
 8002fca:	bcf0      	pop	{r4, r5, r6, r7}
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002fd0:	ee07 3a10 	vmov	s14, r3
 8002fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fdc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002fe0:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8002fe4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002fe6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002fea:	3301      	adds	r3, #1
 8002fec:	ee07 3a10 	vmov	s14, r3
 8002ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ff4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ff8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002ffc:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8003000:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003002:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003006:	3301      	adds	r3, #1
 8003008:	ee07 3a10 	vmov	s14, r3
 800300c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003010:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003014:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003018:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800301c:	4770      	bx	lr
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800301e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003020:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003024:	4921      	ldr	r1, [pc, #132]	; (80030ac <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	eddf 5a1f 	vldr	s11, [pc, #124]	; 80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	fbb1 f3fc 	udiv	r3, r1, ip
 8003036:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800303a:	e7b9      	b.n	8002fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	069b      	lsls	r3, r3, #26
 8003040:	d521      	bpl.n	8003086 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003042:	683a      	ldr	r2, [r7, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8003044:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800304a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800304e:	4d18      	ldr	r5, [pc, #96]	; (80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8003050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003054:	eddf 5a14 	vldr	s11, [pc, #80]	; 80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003058:	40d5      	lsrs	r5, r2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	fbb5 f3fc 	udiv	r3, r5, ip
 8003062:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003066:	e7a3      	b.n	8002fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800306e:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>)
 8003070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003074:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	fbb2 f3fc 	udiv	r3, r2, ip
 8003080:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003084:	e794      	b.n	8002fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8003086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003088:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800308c:	4c08      	ldr	r4, [pc, #32]	; (80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	eddf 5a05 	vldr	s11, [pc, #20]	; 80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	fbb4 f3fc 	udiv	r3, r4, ip
 800309e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030a2:	e785      	b.n	8002fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
 80030a4:	58024400 	.word	0x58024400
 80030a8:	39000000 	.word	0x39000000
 80030ac:	003d0900 	.word	0x003d0900
 80030b0:	03d09000 	.word	0x03d09000
 80030b4:	00b71b00 	.word	0x00b71b00

080030b8 <HAL_RCCEx_GetD1SysClockFreq>:
{
 80030b8:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80030ba:	f7fe fe81 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 80030c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	fa92 f2a2 	rbit	r2, r2
 80030ca:	fab2 f282 	clz	r2, r2
 80030ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80030d4:	40d3      	lsrs	r3, r2
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	40d8      	lsrs	r0, r3
 80030dc:	6010      	str	r0, [r2, #0]
}
 80030de:	bd08      	pop	{r3, pc}
 80030e0:	58024400 	.word	0x58024400
 80030e4:	0800bca8 	.word	0x0800bca8
 80030e8:	20011f8c 	.word	0x20011f8c

080030ec <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80030ec:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80030ee:	492c      	ldr	r1, [pc, #176]	; (80031a0 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80030f0:	695a      	ldr	r2, [r3, #20]
{
 80030f2:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80030f4:	699c      	ldr	r4, [r3, #24]
 80030f6:	f044 0408 	orr.w	r4, r4, #8
 80030fa:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80030fc:	699c      	ldr	r4, [r3, #24]
 80030fe:	f044 0410 	orr.w	r4, r4, #16
 8003102:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8003104:	681c      	ldr	r4, [r3, #0]
 8003106:	f024 0401 	bic.w	r4, r4, #1
 800310a:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800310c:	691c      	ldr	r4, [r3, #16]
 800310e:	4021      	ands	r1, r4
 8003110:	6119      	str	r1, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8003118:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800311a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 800311e:	2904      	cmp	r1, #4
 8003120:	d001      	beq.n	8003126 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 8003122:	0691      	lsls	r1, r2, #26
 8003124:	d430      	bmi.n	8003188 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003126:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 800312a:	2903      	cmp	r1, #3
 800312c:	d001      	beq.n	8003132 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800312e:	0654      	lsls	r4, r2, #25
 8003130:	d41f      	bmi.n	8003172 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 8003132:	0591      	lsls	r1, r2, #22
 8003134:	d509      	bpl.n	800314a <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003136:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800313a:	f041 0101 	orr.w	r1, r1, #1
 800313e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003142:	6999      	ldr	r1, [r3, #24]
 8003144:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003148:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 800314a:	05d2      	lsls	r2, r2, #23
 800314c:	d509      	bpl.n	8003162 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800314e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8003152:	f042 0208 	orr.w	r2, r2, #8
 8003156:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003160:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 8003162:	2300      	movs	r3, #0
  hspi->RxXferCount = 0U;
}
 8003164:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = 0U;
 8003168:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = 0U;
 800316c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8003170:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003172:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8003176:	f041 0104 	orr.w	r1, r1, #4
 800317a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003184:	6199      	str	r1, [r3, #24]
 8003186:	e7d4      	b.n	8003132 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003188:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800318c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003190:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003194:	6999      	ldr	r1, [r3, #24]
 8003196:	f041 0120 	orr.w	r1, r1, #32
 800319a:	6199      	str	r1, [r3, #24]
 800319c:	e7c3      	b.n	8003126 <SPI_CloseTransfer+0x3a>
 800319e:	bf00      	nop
 80031a0:	fffffc94 	.word	0xfffffc94

080031a4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80031a4:	2800      	cmp	r0, #0
 80031a6:	f000 80ab 	beq.w	8003300 <HAL_SPI_Init+0x15c>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80031aa:	4a56      	ldr	r2, [pc, #344]	; (8003304 <HAL_SPI_Init+0x160>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ac:	2100      	movs	r1, #0
{
 80031ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80031b0:	6803      	ldr	r3, [r0, #0]
 80031b2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b4:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d016      	beq.n	80031e8 <HAL_SPI_Init+0x44>
 80031ba:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80031be:	4293      	cmp	r3, r2
 80031c0:	d012      	beq.n	80031e8 <HAL_SPI_Init+0x44>
 80031c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031c6:	4293      	cmp	r3, r2
 80031c8:	68c2      	ldr	r2, [r0, #12]
 80031ca:	f000 8091 	beq.w	80032f0 <HAL_SPI_Init+0x14c>
 80031ce:	2a0f      	cmp	r2, #15
 80031d0:	d808      	bhi.n	80031e4 <HAL_SPI_Init+0x40>
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80031d2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 80031d4:	f102 0008 	add.w	r0, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80031d8:	094d      	lsrs	r5, r1, #5
  data_size = (data_size+7)/8;
 80031da:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
 80031dc:	fb05 0000 	mla	r0, r5, r0, r0
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 80031e0:	2808      	cmp	r0, #8
 80031e2:	d915      	bls.n	8003210 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 80031e4:	2001      	movs	r0, #1
}
 80031e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  data_size = (data_size+7)/8;
 80031e8:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80031ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size+7)/8;
 80031ec:	f102 0008 	add.w	r0, r2, #8
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 80031f0:	4e44      	ldr	r6, [pc, #272]	; (8003304 <HAL_SPI_Init+0x160>)
 80031f2:	4d45      	ldr	r5, [pc, #276]	; (8003308 <HAL_SPI_Init+0x164>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80031f4:	094f      	lsrs	r7, r1, #5
  data_size = (data_size+7)/8;
 80031f6:	08c0      	lsrs	r0, r0, #3
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 80031f8:	42ab      	cmp	r3, r5
 80031fa:	bf18      	it	ne
 80031fc:	42b3      	cmpne	r3, r6
  return data_size * fifo_threashold;
 80031fe:	fb07 0000 	mla	r0, r7, r0, r0
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 8003202:	d003      	beq.n	800320c <HAL_SPI_Init+0x68>
 8003204:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003208:	42ab      	cmp	r3, r5
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Init+0x6c>
 800320c:	2810      	cmp	r0, #16
 800320e:	d8e9      	bhi.n	80031e4 <HAL_SPI_Init+0x40>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003210:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 8003214:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 8003218:	2800      	cmp	r0, #0
 800321a:	d05e      	beq.n	80032da <HAL_SPI_Init+0x136>
 800321c:	f04f 0c00 	mov.w	ip, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8003220:	2002      	movs	r0, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8003222:	69a7      	ldr	r7, [r4, #24]
 8003224:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8003226:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800322a:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	f020 0001 	bic.w	r0, r0, #1
 8003234:	6018      	str	r0, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8003236:	6860      	ldr	r0, [r4, #4]
 8003238:	d045      	beq.n	80032c6 <HAL_SPI_Init+0x122>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800323a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800323c:	ea47 0e06 	orr.w	lr, r7, r6
 8003240:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003242:	6926      	ldr	r6, [r4, #16]
 8003244:	ea4e 0e07 	orr.w	lr, lr, r7
 8003248:	6967      	ldr	r7, [r4, #20]
 800324a:	ea4e 0e06 	orr.w	lr, lr, r6
 800324e:	6a26      	ldr	r6, [r4, #32]
 8003250:	ea4e 0e07 	orr.w	lr, lr, r7
 8003254:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8003256:	ea4e 0e06 	orr.w	lr, lr, r6
 800325a:	68a6      	ldr	r6, [r4, #8]
 800325c:	ea4e 0707 	orr.w	r7, lr, r7
 8003260:	433e      	orrs	r6, r7
 8003262:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8003264:	433e      	orrs	r6, r7
 8003266:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8003268:	433e      	orrs	r6, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800326a:	69e7      	ldr	r7, [r4, #28]
 800326c:	4339      	orrs	r1, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800326e:	4306      	orrs	r6, r0
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003270:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003272:	4335      	orrs	r5, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003274:	ea42 020c 	orr.w	r2, r2, ip
 8003278:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800327a:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800327c:	b9b0      	cbnz	r0, 80032ac <HAL_SPI_Init+0x108>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8003284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003288:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003290:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003294:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800329e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80032a0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80032a6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80032aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80032b4:	0242      	lsls	r2, r0, #9
 80032b6:	d5f2      	bpl.n	800329e <HAL_SPI_Init+0xfa>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80032bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e7eb      	b.n	800329e <HAL_SPI_Init+0xfa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80032c6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80032ca:	d1b6      	bne.n	800323a <HAL_SPI_Init+0x96>
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	d1b4      	bne.n	800323a <HAL_SPI_Init+0x96>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80032d0:	681e      	ldr	r6, [r3, #0]
 80032d2:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 80032d6:	601e      	str	r6, [r3, #0]
 80032d8:	e7af      	b.n	800323a <HAL_SPI_Init+0x96>
    HAL_SPI_MspInit(hspi);
 80032da:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80032dc:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80032e0:	f003 fba6 	bl	8006a30 <HAL_SPI_MspInit>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80032ea:	68e2      	ldr	r2, [r4, #12]
 80032ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80032ee:	e797      	b.n	8003220 <HAL_SPI_Init+0x7c>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80032f0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size+7)/8;
 80032f2:	f102 0008 	add.w	r0, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80032f6:	094d      	lsrs	r5, r1, #5
  data_size = (data_size+7)/8;
 80032f8:	08c0      	lsrs	r0, r0, #3
  return data_size * fifo_threashold;
 80032fa:	fb05 0000 	mla	r0, r5, r0, r0
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 80032fe:	e785      	b.n	800320c <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8003300:	2001      	movs	r0, #1
}
 8003302:	4770      	bx	lr
 8003304:	40013000 	.word	0x40013000
 8003308:	40003800 	.word	0x40003800

0800330c <HAL_SPI_Transmit>:
{
 800330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003310:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003312:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003316:	2b01      	cmp	r3, #1
 8003318:	f000 80bc 	beq.w	8003494 <HAL_SPI_Transmit+0x188>
 800331c:	2301      	movs	r3, #1
 800331e:	4604      	mov	r4, r0
 8003320:	4689      	mov	r9, r1
 8003322:	4690      	mov	r8, r2
 8003324:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003328:	f7fd f9ea 	bl	8000700 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800332c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8003330:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003332:	2b01      	cmp	r3, #1
 8003334:	b2df      	uxtb	r7, r3
 8003336:	f040 80a6 	bne.w	8003486 <HAL_SPI_Transmit+0x17a>
  if ((pData == NULL) || (Size == 0U))
 800333a:	f1b9 0f00 	cmp.w	r9, #0
 800333e:	f000 80c9 	beq.w	80034d4 <HAL_SPI_Transmit+0x1c8>
 8003342:	fab8 f388 	clz	r3, r8
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	f1b8 0f00 	cmp.w	r8, #0
 800334c:	f000 80c2 	beq.w	80034d4 <HAL_SPI_Transmit+0x1c8>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003350:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003352:	2103      	movs	r1, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003354:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003358:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800335c:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->TxXferSize  = Size;
 8003360:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003364:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SPI_1LINE_TX(hspi);
 8003368:	6821      	ldr	r1, [r4, #0]
  hspi->TxXferCount = Size;
 800336a:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800336e:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = 0U;
 8003370:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = 0U;
 8003374:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8003378:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337c:	d103      	bne.n	8003386 <HAL_SPI_Transmit+0x7a>
    SPI_1LINE_TX(hspi);
 800337e:	680b      	ldr	r3, [r1, #0]
 8003380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003384:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003386:	684b      	ldr	r3, [r1, #4]
 8003388:	4a82      	ldr	r2, [pc, #520]	; (8003594 <HAL_SPI_Transmit+0x288>)
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800338a:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800338c:	401a      	ands	r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800338e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003392:	ea42 0208 	orr.w	r2, r2, r8
 8003396:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8003398:	680b      	ldr	r3, [r1, #0]
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033a0:	d103      	bne.n	80033aa <HAL_SPI_Transmit+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80033a2:	680b      	ldr	r3, [r1, #0]
 80033a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a8:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80033aa:	68e3      	ldr	r3, [r4, #12]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d83c      	bhi.n	800342a <HAL_SPI_Transmit+0x11e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033b0:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0U)
 80033b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80033b6:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033b8:	d970      	bls.n	800349c <HAL_SPI_Transmit+0x190>
    while (hspi->TxXferCount > 0U)
 80033ba:	b9d3      	cbnz	r3, 80033f2 <HAL_SPI_Transmit+0xe6>
 80033bc:	e04f      	b.n	800345e <HAL_SPI_Transmit+0x152>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80033be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	f240 80a9 	bls.w	800351c <HAL_SPI_Transmit+0x210>
 80033ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80a5 	beq.w	800351c <HAL_SPI_Transmit+0x210>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80033d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033d4:	f852 3b04 	ldr.w	r3, [r2], #4
 80033d8:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount-=2;
 80033da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80033de:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 80033e0:	3b02      	subs	r3, #2
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 80033e8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d035      	beq.n	800345e <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033f2:	694b      	ldr	r3, [r1, #20]
 80033f4:	0798      	lsls	r0, r3, #30
 80033f6:	d4e2      	bmi.n	80033be <HAL_SPI_Transmit+0xb2>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	f000 80b2 	beq.w	8003562 <HAL_SPI_Transmit+0x256>
 80033fe:	1c6a      	adds	r2, r5, #1
 8003400:	d0f2      	beq.n	80033e8 <HAL_SPI_Transmit+0xdc>
 8003402:	f7fd f97d 	bl	8000700 <HAL_GetTick>
 8003406:	1b80      	subs	r0, r0, r6
 8003408:	42a8      	cmp	r0, r5
 800340a:	f080 80aa 	bcs.w	8003562 <HAL_SPI_Transmit+0x256>
 800340e:	6821      	ldr	r1, [r4, #0]
 8003410:	e7ea      	b.n	80033e8 <HAL_SPI_Transmit+0xdc>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003412:	2d00      	cmp	r5, #0
 8003414:	f000 80a5 	beq.w	8003562 <HAL_SPI_Transmit+0x256>
 8003418:	1c6b      	adds	r3, r5, #1
 800341a:	d006      	beq.n	800342a <HAL_SPI_Transmit+0x11e>
 800341c:	f7fd f970 	bl	8000700 <HAL_GetTick>
 8003420:	1b80      	subs	r0, r0, r6
 8003422:	42a8      	cmp	r0, r5
 8003424:	f080 809d 	bcs.w	8003562 <HAL_SPI_Transmit+0x256>
 8003428:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0U)
 800342a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800342e:	b29b      	uxth	r3, r3
 8003430:	b1ab      	cbz	r3, 800345e <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003432:	694b      	ldr	r3, [r1, #20]
 8003434:	079a      	lsls	r2, r3, #30
 8003436:	d5ec      	bpl.n	8003412 <HAL_SPI_Transmit+0x106>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003438:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800343a:	f852 3b04 	ldr.w	r3, [r2], #4
 800343e:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 8003440:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003444:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8003446:	3b01      	subs	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 800344e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ec      	bne.n	8003432 <HAL_SPI_Transmit+0x126>
 8003458:	e001      	b.n	800345e <HAL_SPI_Transmit+0x152>
    if(Timeout != HAL_MAX_DELAY)
 800345a:	1c6a      	adds	r2, r5, #1
 800345c:	d179      	bne.n	8003552 <HAL_SPI_Transmit+0x246>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800345e:	694b      	ldr	r3, [r1, #20]
 8003460:	071b      	lsls	r3, r3, #28
 8003462:	d5fa      	bpl.n	800345a <HAL_SPI_Transmit+0x14e>
  SPI_CloseTransfer(hspi);
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff fe41 	bl	80030ec <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800346a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800346c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800346e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003472:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8003476:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800347a:	1aff      	subs	r7, r7, r3
 800347c:	bf18      	it	ne
 800347e:	2701      	movne	r7, #1
}
 8003480:	4638      	mov	r0, r7
 8003482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 8003486:	2300      	movs	r3, #0
    return errorcode;
 8003488:	2702      	movs	r7, #2
    __HAL_UNLOCK(hspi);
 800348a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800348e:	4638      	mov	r0, r7
 8003490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8003494:	2702      	movs	r7, #2
}
 8003496:	4638      	mov	r0, r7
 8003498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (hspi->TxXferCount > 0U)
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0de      	beq.n	800345e <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a0:	694b      	ldr	r3, [r1, #20]
 80034a2:	079b      	lsls	r3, r3, #30
 80034a4:	d51c      	bpl.n	80034e0 <HAL_SPI_Transmit+0x1d4>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80034a6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d922      	bls.n	80034f6 <HAL_SPI_Transmit+0x1ea>
 80034b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d91f      	bls.n	80034f6 <HAL_SPI_Transmit+0x1ea>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80034b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80034b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80034bc:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount-=4;
 80034be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80034c2:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 80034c4:	3b04      	subs	r3, #4
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 80034cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	e7e3      	b.n	800349c <HAL_SPI_Transmit+0x190>
    __HAL_UNLOCK(hspi);
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4638      	mov	r0, r7
    __HAL_UNLOCK(hspi);
 80034d8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80034dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80034e0:	2d00      	cmp	r5, #0
 80034e2:	d03e      	beq.n	8003562 <HAL_SPI_Transmit+0x256>
 80034e4:	1c68      	adds	r0, r5, #1
 80034e6:	d0f1      	beq.n	80034cc <HAL_SPI_Transmit+0x1c0>
 80034e8:	f7fd f90a 	bl	8000700 <HAL_GetTick>
 80034ec:	1b80      	subs	r0, r0, r6
 80034ee:	42a8      	cmp	r0, r5
 80034f0:	d237      	bcs.n	8003562 <HAL_SPI_Transmit+0x256>
 80034f2:	6821      	ldr	r1, [r4, #0]
 80034f4:	e7ea      	b.n	80034cc <HAL_SPI_Transmit+0x1c0>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80034f6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d919      	bls.n	8003534 <HAL_SPI_Transmit+0x228>
 8003500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003502:	b1bb      	cbz	r3, 8003534 <HAL_SPI_Transmit+0x228>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8003504:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003506:	f832 3b02 	ldrh.w	r3, [r2], #2
 800350a:	840b      	strh	r3, [r1, #32]
          hspi->TxXferCount-=2;
 800350c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003510:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8003512:	3b02      	subs	r3, #2
 8003514:	b29b      	uxth	r3, r3
 8003516:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800351a:	e7d7      	b.n	80034cc <HAL_SPI_Transmit+0x1c0>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800351c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800351e:	f832 3b02 	ldrh.w	r3, [r2], #2
 8003522:	840b      	strh	r3, [r1, #32]
          hspi->TxXferCount--;
 8003524:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003528:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800352a:	3b01      	subs	r3, #1
 800352c:	b29b      	uxth	r3, r3
 800352e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8003532:	e759      	b.n	80033e8 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8003534:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->TxXferCount--;
 800353c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003540:	6de2      	ldr	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8003542:	3b01      	subs	r3, #1
 8003544:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003546:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8003548:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800354a:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800354c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8003550:	e7bc      	b.n	80034cc <HAL_SPI_Transmit+0x1c0>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003552:	b1c5      	cbz	r5, 8003586 <HAL_SPI_Transmit+0x27a>
 8003554:	f7fd f8d4 	bl	8000700 <HAL_GetTick>
 8003558:	1b80      	subs	r0, r0, r6
 800355a:	4285      	cmp	r5, r0
 800355c:	d313      	bcc.n	8003586 <HAL_SPI_Transmit+0x27a>
 800355e:	6821      	ldr	r1, [r4, #0]
 8003560:	e77d      	b.n	800345e <HAL_SPI_Transmit+0x152>
          SPI_CloseTransfer(hspi);
 8003562:	4620      	mov	r0, r4
 8003564:	f7ff fdc2 	bl	80030ec <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003568:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 800356c:	2100      	movs	r1, #0
          hspi->State = HAL_SPI_STATE_READY;
 800356e:	2201      	movs	r2, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
}
 8003574:	4638      	mov	r0, r7
          __HAL_UNLOCK(hspi);
 8003576:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800357a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800357e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8003582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003586:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8003592:	e767      	b.n	8003464 <HAL_SPI_Transmit+0x158>
 8003594:	ffff0000 	.word	0xffff0000

08003598 <HAL_SPI_TransmitReceive>:
{
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800359c:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800359e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 80035a2:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	f000 80a4 	beq.w	80036f2 <HAL_SPI_TransmitReceive+0x15a>
 80035aa:	2301      	movs	r3, #1
 80035ac:	4604      	mov	r4, r0
 80035ae:	4688      	mov	r8, r1
 80035b0:	4691      	mov	r9, r2
 80035b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80035b6:	f7fd f8a3 	bl	8000700 <HAL_GetTick>
  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 80035ba:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 80035be:	4606      	mov	r6, r0
  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d00c      	beq.n	80035de <HAL_SPI_TransmitReceive+0x46>
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	f040 8086 	bne.w	80036da <HAL_SPI_TransmitReceive+0x142>
        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX))))
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 8082 	bne.w	80036da <HAL_SPI_TransmitReceive+0x142>
 80035d6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d17d      	bne.n	80036da <HAL_SPI_TransmitReceive+0x142>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035de:	2f00      	cmp	r7, #0
 80035e0:	bf18      	it	ne
 80035e2:	f1b9 0f00 	cmpne.w	r9, #0
 80035e6:	d07e      	beq.n	80036e6 <HAL_SPI_TransmitReceive+0x14e>
 80035e8:	f1b8 0f00 	cmp.w	r8, #0
 80035ec:	d07b      	beq.n	80036e6 <HAL_SPI_TransmitReceive+0x14e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035ee:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d002      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035f6:	2305      	movs	r3, #5
 80035f8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80035fc:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fe:	2100      	movs	r1, #0
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003600:	4ba5      	ldr	r3, [pc, #660]	; (8003898 <HAL_SPI_TransmitReceive+0x300>)
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003602:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8003606:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 800360a:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800360e:	6850      	ldr	r0, [r2, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003610:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003614:	4003      	ands	r3, r0
  hspi->RxXferSize  = Size;
 8003616:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800361a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800361e:	433b      	orrs	r3, r7
  hspi->TxXferSize  = Size;
 8003620:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8003624:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003628:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800362a:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800362c:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800362e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  __HAL_SPI_ENABLE(hspi);
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003638:	d103      	bne.n	8003642 <HAL_SPI_TransmitReceive+0xaa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003640:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003642:	68e3      	ldr	r3, [r4, #12]
 8003644:	2b0f      	cmp	r3, #15
 8003646:	d97b      	bls.n	8003740 <HAL_SPI_TransmitReceive+0x1a8>
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT)))
 8003648:	f248 0708 	movw	r7, #32776	; 0x8008
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003650:	b29b      	uxth	r3, r3
 8003652:	b923      	cbnz	r3, 800365e <HAL_SPI_TransmitReceive+0xc6>
 8003654:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d052      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x16c>
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800365e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003662:	b29b      	uxth	r3, r3
 8003664:	b173      	cbz	r3, 8003684 <HAL_SPI_TransmitReceive+0xec>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	0792      	lsls	r2, r2, #30
 800366c:	d50a      	bpl.n	8003684 <HAL_SPI_TransmitReceive+0xec>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800366e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003670:	f852 1b04 	ldr.w	r1, [r2], #4
 8003674:	6219      	str	r1, [r3, #32]
        hspi->TxXferCount --;
 8003676:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800367a:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800367c:	3b01      	subs	r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT)))
 8003684:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003688:	b29b      	uxth	r3, r3
 800368a:	b173      	cbz	r3, 80036aa <HAL_SPI_TransmitReceive+0x112>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	423a      	tst	r2, r7
 8003692:	d00a      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x112>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003694:	6b19      	ldr	r1, [r3, #48]	; 0x30
        hspi->RxXferCount --;
 8003696:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800369a:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800369c:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800369e:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 80036a2:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80036a4:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 80036a6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80036aa:	1c6b      	adds	r3, r5, #1
 80036ac:	d0ce      	beq.n	800364c <HAL_SPI_TransmitReceive+0xb4>
 80036ae:	f7fd f827 	bl	8000700 <HAL_GetTick>
 80036b2:	1b80      	subs	r0, r0, r6
 80036b4:	42a8      	cmp	r0, r5
 80036b6:	d3c9      	bcc.n	800364c <HAL_SPI_TransmitReceive+0xb4>
        SPI_CloseTransfer(hspi);
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff fd17 	bl	80030ec <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80036be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80036c2:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80036c4:	2100      	movs	r1, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 80036ca:	4610      	mov	r0, r2
        __HAL_UNLOCK(hspi);
 80036cc:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80036d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80036d4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
        return HAL_ERROR;
 80036d8:	e003      	b.n	80036e2 <HAL_SPI_TransmitReceive+0x14a>
    __HAL_UNLOCK(hspi);
 80036da:	2300      	movs	r3, #0
    return errorcode;
 80036dc:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 80036de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80036e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 80036e6:	2300      	movs	r3, #0
    return errorcode;
 80036e8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 80036ea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80036ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80036f2:	2002      	movs	r0, #2
}
 80036f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80036f8:	b1dd      	cbz	r5, 8003732 <HAL_SPI_TransmitReceive+0x19a>
 80036fa:	f7fd f801 	bl	8000700 <HAL_GetTick>
 80036fe:	1b80      	subs	r0, r0, r6
 8003700:	4285      	cmp	r5, r0
 8003702:	d316      	bcc.n	8003732 <HAL_SPI_TransmitReceive+0x19a>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	e001      	b.n	800370c <HAL_SPI_TransmitReceive+0x174>
    if(Timeout != HAL_MAX_DELAY)
 8003708:	1c69      	adds	r1, r5, #1
 800370a:	d1f5      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x160>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800370c:	6953      	ldr	r3, [r2, #20]
 800370e:	071b      	lsls	r3, r3, #28
 8003710:	d5fa      	bpl.n	8003708 <HAL_SPI_TransmitReceive+0x170>
  SPI_CloseTransfer(hspi);
 8003712:	4620      	mov	r0, r4
 8003714:	f7ff fcea 	bl	80030ec <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8003718:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800371a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800371c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003720:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8003724:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8003728:	1ac0      	subs	r0, r0, r3
 800372a:	bf18      	it	ne
 800372c:	2001      	movne	r0, #1
}
 800372e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003732:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800373e:	e7e8      	b.n	8003712 <HAL_SPI_TransmitReceive+0x17a>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003740:	2b07      	cmp	r3, #7
 8003742:	d80e      	bhi.n	8003762 <HAL_SPI_TransmitReceive+0x1ca>
 8003744:	e071      	b.n	800382a <HAL_SPI_TransmitReceive+0x292>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003746:	6b19      	ldr	r1, [r3, #48]	; 0x30
          hspi->RxXferCount-=2;
 8003748:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800374c:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 800374e:	3b02      	subs	r3, #2
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003750:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount-=2;
 8003754:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003756:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 8003758:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800375c:	1c69      	adds	r1, r5, #1
 800375e:	f040 80cb 	bne.w	80038f8 <HAL_SPI_TransmitReceive+0x360>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003762:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003766:	b29b      	uxth	r3, r3
 8003768:	b923      	cbnz	r3, 8003774 <HAL_SPI_TransmitReceive+0x1dc>
 800376a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0c7      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x16c>
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003774:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003778:	b29b      	uxth	r3, r3
 800377a:	b1b3      	cbz	r3, 80037aa <HAL_SPI_TransmitReceive+0x212>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	0797      	lsls	r7, r2, #30
 8003782:	d512      	bpl.n	80037aa <HAL_SPI_TransmitReceive+0x212>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003784:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8003788:	b292      	uxth	r2, r2
 800378a:	2a01      	cmp	r2, #1
 800378c:	d978      	bls.n	8003880 <HAL_SPI_TransmitReceive+0x2e8>
 800378e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003790:	2a00      	cmp	r2, #0
 8003792:	d075      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x2e8>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003794:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003796:	f852 1b04 	ldr.w	r1, [r2], #4
 800379a:	6219      	str	r1, [r3, #32]
          hspi->TxXferCount-=2;
 800379c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80037a0:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 80037a2:	3b02      	subs	r3, #2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 80037aa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0d3      	beq.n	800375c <HAL_SPI_TransmitReceive+0x1c4>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 80037bc:	d0ce      	beq.n	800375c <HAL_SPI_TransmitReceive+0x1c4>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	0410      	lsls	r0, r2, #16
 80037c2:	d4c0      	bmi.n	8003746 <HAL_SPI_TransmitReceive+0x1ae>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80037c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80037c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037c8:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 80037cc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d0:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80037da:	e7bf      	b.n	800375c <HAL_SPI_TransmitReceive+0x1c4>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80037dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80037de:	2a40      	cmp	r2, #64	; 0x40
 80037e0:	d93b      	bls.n	800385a <HAL_SPI_TransmitReceive+0x2c2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80037e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80037e4:	f852 1b04 	ldr.w	r1, [r2], #4
 80037e8:	6219      	str	r1, [r3, #32]
          hspi->TxXferCount-=4;
 80037ea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80037ee:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 80037f0:	3b04      	subs	r3, #4
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 80037f8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b193      	cbz	r3, 8003826 <HAL_SPI_TransmitReceive+0x28e>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8003808:	d00d      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x28e>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	0417      	lsls	r7, r2, #16
 800380e:	d553      	bpl.n	80038b8 <HAL_SPI_TransmitReceive+0x320>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003810:	6b19      	ldr	r1, [r3, #48]	; 0x30
          hspi->RxXferCount-=4;
 8003812:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003816:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 8003818:	3b04      	subs	r3, #4
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800381a:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount-=4;
 800381e:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003820:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 8003822:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003826:	1c68      	adds	r0, r5, #1
 8003828:	d16d      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x36e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800382e:	b29b      	uxth	r3, r3
 8003830:	b92b      	cbnz	r3, 800383e <HAL_SPI_TransmitReceive+0x2a6>
 8003832:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f43f af63 	beq.w	8003704 <HAL_SPI_TransmitReceive+0x16c>
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800383e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0d7      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x260>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	0792      	lsls	r2, r2, #30
 800384e:	d5d3      	bpl.n	80037f8 <HAL_SPI_TransmitReceive+0x260>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003850:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8003854:	b292      	uxth	r2, r2
 8003856:	2a03      	cmp	r2, #3
 8003858:	d8c0      	bhi.n	80037dc <HAL_SPI_TransmitReceive+0x244>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800385a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800385e:	b292      	uxth	r2, r2
 8003860:	2a01      	cmp	r2, #1
 8003862:	d91b      	bls.n	800389c <HAL_SPI_TransmitReceive+0x304>
 8003864:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003866:	b1ca      	cbz	r2, 800389c <HAL_SPI_TransmitReceive+0x304>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8003868:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800386a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800386e:	8419      	strh	r1, [r3, #32]
          hspi->TxXferCount-=2;
 8003870:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003874:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8003876:	3b02      	subs	r3, #2
 8003878:	b29b      	uxth	r3, r3
 800387a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800387e:	e7bb      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x260>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003882:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003886:	8419      	strh	r1, [r3, #32]
          hspi->TxXferCount--;
 8003888:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800388e:	3b01      	subs	r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8003896:	e788      	b.n	80037aa <HAL_SPI_TransmitReceive+0x212>
 8003898:	ffff0000 	.word	0xffff0000
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800389c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	f883 2020 	strb.w	r2, [r3, #32]
          hspi->TxXferCount--;
 80038a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80038a8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80038aa:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ac:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80038ae:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b0:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80038b2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80038b6:	e79f      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x260>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
 80038be:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80038c2:	d90b      	bls.n	80038dc <HAL_SPI_TransmitReceive+0x344>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80038c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80038c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038c8:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount-=2;
 80038cc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038d0:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 80038d2:	3b02      	subs	r3, #2
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80038da:	e7a4      	b.n	8003826 <HAL_SPI_TransmitReceive+0x28e>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80038dc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80038e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038e2:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80038e4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80038e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80038ea:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80038ec:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 80038ee:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80038f0:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80038f2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80038f6:	e796      	b.n	8003826 <HAL_SPI_TransmitReceive+0x28e>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80038f8:	f7fc ff02 	bl	8000700 <HAL_GetTick>
 80038fc:	1b80      	subs	r0, r0, r6
 80038fe:	42a8      	cmp	r0, r5
 8003900:	f4ff af2f 	bcc.w	8003762 <HAL_SPI_TransmitReceive+0x1ca>
 8003904:	e6d8      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x120>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003906:	f7fc fefb 	bl	8000700 <HAL_GetTick>
 800390a:	1b80      	subs	r0, r0, r6
 800390c:	42a8      	cmp	r0, r5
 800390e:	d38c      	bcc.n	800382a <HAL_SPI_TransmitReceive+0x292>
 8003910:	e6d2      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x120>
 8003912:	bf00      	nop

08003914 <HAL_SPI_Receive>:
{
 8003914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003918:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800391a:	6843      	ldr	r3, [r0, #4]
{
 800391c:	b083      	sub	sp, #12
 800391e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
{
 8003924:	4690      	mov	r8, r2
 8003926:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003928:	f000 808e 	beq.w	8003a48 <HAL_SPI_Receive+0x134>
  __HAL_LOCK(hspi);
 800392c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8003930:	2b01      	cmp	r3, #1
 8003932:	f000 8097 	beq.w	8003a64 <HAL_SPI_Receive+0x150>
 8003936:	2301      	movs	r3, #1
 8003938:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800393c:	f7fc fee0 	bl	8000700 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003940:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8003944:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003946:	2b01      	cmp	r3, #1
 8003948:	b2df      	uxtb	r7, r3
 800394a:	d175      	bne.n	8003a38 <HAL_SPI_Receive+0x124>
  if ((pData == NULL) || (Size == 0U))
 800394c:	f1b9 0f00 	cmp.w	r9, #0
 8003950:	f000 80d7 	beq.w	8003b02 <HAL_SPI_Receive+0x1ee>
 8003954:	fab8 f388 	clz	r3, r8
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	f1b8 0f00 	cmp.w	r8, #0
 800395e:	f000 80d0 	beq.w	8003b02 <HAL_SPI_Receive+0x1ee>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003962:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003964:	2104      	movs	r1, #4
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003966:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396a:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800396e:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8003972:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003976:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SPI_1LINE_RX(hspi);
 800397a:	6821      	ldr	r1, [r4, #0]
  hspi->RxXferCount = Size;
 800397c:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 8003980:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = 0U;
 8003982:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = 0U;
 8003986:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800398a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398e:	d103      	bne.n	8003998 <HAL_SPI_Receive+0x84>
    SPI_1LINE_RX(hspi);
 8003990:	680b      	ldr	r3, [r1, #0]
 8003992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003996:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003998:	6848      	ldr	r0, [r1, #4]
 800399a:	4b7d      	ldr	r3, [pc, #500]	; (8003b90 <HAL_SPI_Receive+0x27c>)
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800399c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800399e:	4003      	ands	r3, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039a0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80039a4:	ea43 0308 	orr.w	r3, r3, r8
 80039a8:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 80039aa:	680b      	ldr	r3, [r1, #0]
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039b2:	d103      	bne.n	80039bc <HAL_SPI_Receive+0xa8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80039b4:	680b      	ldr	r3, [r1, #0]
 80039b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ba:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	2b0f      	cmp	r3, #15
 80039c0:	d855      	bhi.n	8003a6e <HAL_SPI_Receive+0x15a>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c2:	2b07      	cmp	r3, #7
    while (hspi->RxXferCount > 0U)
 80039c4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80039c8:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ca:	f200 80af 	bhi.w	8003b2c <HAL_SPI_Receive+0x218>
    while (hspi->RxXferCount > 0U)
 80039ce:	b9a3      	cbnz	r3, 80039fa <HAL_SPI_Receive+0xe6>
 80039d0:	e085      	b.n	8003ade <HAL_SPI_Receive+0x1ca>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 80039d2:	694b      	ldr	r3, [r1, #20]
 80039d4:	041a      	lsls	r2, r3, #16
 80039d6:	d570      	bpl.n	8003aba <HAL_SPI_Receive+0x1a6>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80039d8:	6b09      	ldr	r1, [r1, #48]	; 0x30
          hspi->RxXferCount-=4;
 80039da:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80039de:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 80039e0:	3b04      	subs	r3, #4
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80039e2:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount-=4;
 80039e6:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80039e8:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 80039ea:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0U)
 80039ee:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d072      	beq.n	8003ade <HAL_SPI_Receive+0x1ca>
 80039f8:	6821      	ldr	r1, [r4, #0]
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 80039fa:	694b      	ldr	r3, [r1, #20]
 80039fc:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8003a00:	d1e7      	bne.n	80039d2 <HAL_SPI_Receive+0xbe>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003a02:	b135      	cbz	r5, 8003a12 <HAL_SPI_Receive+0xfe>
 8003a04:	1c6b      	adds	r3, r5, #1
 8003a06:	d0f2      	beq.n	80039ee <HAL_SPI_Receive+0xda>
 8003a08:	f7fc fe7a 	bl	8000700 <HAL_GetTick>
 8003a0c:	1b80      	subs	r0, r0, r6
 8003a0e:	42a8      	cmp	r0, r5
 8003a10:	d3ed      	bcc.n	80039ee <HAL_SPI_Receive+0xda>
          SPI_CloseTransfer(hspi);
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7ff fb6a 	bl	80030ec <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003a18:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 8003a1c:	2100      	movs	r1, #0
          hspi->State = HAL_SPI_STATE_READY;
 8003a1e:	2201      	movs	r2, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
}
 8003a24:	4638      	mov	r0, r7
          __HAL_UNLOCK(hspi);
 8003a26:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003a2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003a2e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8003a32:	b003      	add	sp, #12
 8003a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 8003a38:	2300      	movs	r3, #0
    return errorcode;
 8003a3a:	2702      	movs	r7, #2
    __HAL_UNLOCK(hspi);
 8003a3c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8003a40:	4638      	mov	r0, r7
 8003a42:	b003      	add	sp, #12
 8003a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a48:	6883      	ldr	r3, [r0, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f47f af6e 	bne.w	800392c <HAL_SPI_Receive+0x18>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a50:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a52:	4613      	mov	r3, r2
 8003a54:	9500      	str	r5, [sp, #0]
 8003a56:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a58:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a5c:	f7ff fd9c 	bl	8003598 <HAL_SPI_TransmitReceive>
 8003a60:	4607      	mov	r7, r0
 8003a62:	e7ed      	b.n	8003a40 <HAL_SPI_Receive+0x12c>
  __HAL_LOCK(hspi);
 8003a64:	2702      	movs	r7, #2
}
 8003a66:	4638      	mov	r0, r7
 8003a68:	b003      	add	sp, #12
 8003a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (hspi->RxXferCount > 0U)
 8003a6e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d032      	beq.n	8003ade <HAL_SPI_Receive+0x1ca>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT))
 8003a78:	f248 0808 	movw	r8, #32776	; 0x8008
 8003a7c:	e00f      	b.n	8003a9e <HAL_SPI_Receive+0x18a>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003a7e:	6b09      	ldr	r1, [r1, #48]	; 0x30
        hspi->RxXferCount--;
 8003a80:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003a84:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8003a86:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003a88:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount--;
 8003a8c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8003a8e:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8003a90:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0U)
 8003a94:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8003a98:	b292      	uxth	r2, r2
 8003a9a:	b302      	cbz	r2, 8003ade <HAL_SPI_Receive+0x1ca>
 8003a9c:	6821      	ldr	r1, [r4, #0]
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT))
 8003a9e:	694b      	ldr	r3, [r1, #20]
 8003aa0:	ea13 0f08 	tst.w	r3, r8
 8003aa4:	d1eb      	bne.n	8003a7e <HAL_SPI_Receive+0x16a>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d0b3      	beq.n	8003a12 <HAL_SPI_Receive+0xfe>
 8003aaa:	1c6b      	adds	r3, r5, #1
 8003aac:	d0f2      	beq.n	8003a94 <HAL_SPI_Receive+0x180>
 8003aae:	f7fc fe27 	bl	8000700 <HAL_GetTick>
 8003ab2:	1b80      	subs	r0, r0, r6
 8003ab4:	42a8      	cmp	r0, r5
 8003ab6:	d3ed      	bcc.n	8003a94 <HAL_SPI_Receive+0x180>
 8003ab8:	e7ab      	b.n	8003a12 <HAL_SPI_Receive+0xfe>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 8003aba:	694b      	ldr	r3, [r1, #20]
 8003abc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d924      	bls.n	8003b10 <HAL_SPI_Receive+0x1fc>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003ac6:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8003ac8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aca:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount-=2;
 8003ace:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ad2:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 8003ad4:	3b02      	subs	r3, #2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8003adc:	e787      	b.n	80039ee <HAL_SPI_Receive+0xda>
  SPI_CloseTransfer(hspi);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff fb04 	bl	80030ec <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8003ae4:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003ae6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003ae8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aec:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8003af0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003af4:	1aff      	subs	r7, r7, r3
 8003af6:	bf18      	it	ne
 8003af8:	2701      	movne	r7, #1
}
 8003afa:	4638      	mov	r0, r7
 8003afc:	b003      	add	sp, #12
 8003afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4638      	mov	r0, r7
    __HAL_UNLOCK(hspi);
 8003b06:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8003b0a:	b003      	add	sp, #12
 8003b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003b10:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8003b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b16:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8003b18:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8003b1e:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b20:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 8003b22:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b24:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8003b26:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8003b2a:	e760      	b.n	80039ee <HAL_SPI_Receive+0xda>
    while (hspi->RxXferCount > 0U)
 8003b2c:	b9a3      	cbnz	r3, 8003b58 <HAL_SPI_Receive+0x244>
 8003b2e:	e7d6      	b.n	8003ade <HAL_SPI_Receive+0x1ca>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 8003b30:	694b      	ldr	r3, [r1, #20]
 8003b32:	0418      	lsls	r0, r3, #16
 8003b34:	d51f      	bpl.n	8003b76 <HAL_SPI_Receive+0x262>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003b36:	6b09      	ldr	r1, [r1, #48]	; 0x30
          hspi->RxXferCount-=2;
 8003b38:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003b3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 8003b3e:	3b02      	subs	r3, #2
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003b40:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount-=2;
 8003b44:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003b46:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 8003b48:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0U)
 8003b4c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0c3      	beq.n	8003ade <HAL_SPI_Receive+0x1ca>
 8003b56:	6821      	ldr	r1, [r4, #0]
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 8003b58:	694b      	ldr	r3, [r1, #20]
 8003b5a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8003b5e:	d1e7      	bne.n	8003b30 <HAL_SPI_Receive+0x21c>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	f43f af56 	beq.w	8003a12 <HAL_SPI_Receive+0xfe>
 8003b66:	1c69      	adds	r1, r5, #1
 8003b68:	d0f0      	beq.n	8003b4c <HAL_SPI_Receive+0x238>
 8003b6a:	f7fc fdc9 	bl	8000700 <HAL_GetTick>
 8003b6e:	1b80      	subs	r0, r0, r6
 8003b70:	42a8      	cmp	r0, r5
 8003b72:	d3eb      	bcc.n	8003b4c <HAL_SPI_Receive+0x238>
 8003b74:	e74d      	b.n	8003a12 <HAL_SPI_Receive+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003b76:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8003b78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b7a:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8003b7e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b82:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8003b8c:	e7de      	b.n	8003b4c <HAL_SPI_Receive+0x238>
 8003b8e:	bf00      	nop
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b96:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003b98:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b9a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 8003b9e:	680e      	ldr	r6, [r1, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	4d14      	ldr	r5, [pc, #80]	; (8003bf4 <TIM_OC5_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ba2:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8003ba4:	6a03      	ldr	r3, [r0, #32]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba6:	42a8      	cmp	r0, r5
  tmpcr2 =  TIMx->CR2; 
 8003ba8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003baa:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8003bac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003bb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	d00e      	beq.n	8003bdc <TIM_OC5_SetConfig+0x48>
 8003bbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bc2:	42a8      	cmp	r0, r5
 8003bc4:	d00a      	beq.n	8003bdc <TIM_OC5_SetConfig+0x48>
 8003bc6:	4e0c      	ldr	r6, [pc, #48]	; (8003bf8 <TIM_OC5_SetConfig+0x64>)
 8003bc8:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8003bcc:	42a8      	cmp	r0, r5
 8003bce:	bf18      	it	ne
 8003bd0:	42b0      	cmpne	r0, r6
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC5_SetConfig+0x48>
 8003bd4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bd8:	42a8      	cmp	r0, r5
 8003bda:	d104      	bne.n	8003be6 <TIM_OC5_SetConfig+0x52>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bdc:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003be0:	694d      	ldr	r5, [r1, #20]
 8003be2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003be6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003be8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003bea:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003bec:	6581      	str	r1, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003bee:	6203      	str	r3, [r0, #32]
}
 8003bf0:	bcf0      	pop	{r4, r5, r6, r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40014000 	.word	0x40014000

08003bfc <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The Output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bfe:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003c00:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c02:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003c06:	680e      	ldr	r6, [r1, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c08:	4d14      	ldr	r5, [pc, #80]	; (8003c5c <TIM_OC6_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c0a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8003c0c:	6a03      	ldr	r3, [r0, #32]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	42a8      	cmp	r0, r5
  tmpcr2 =  TIMx->CR2; 
 8003c10:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003c12:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c18:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003c1c:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003c20:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c24:	d00e      	beq.n	8003c44 <TIM_OC6_SetConfig+0x48>
 8003c26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c2a:	42a8      	cmp	r0, r5
 8003c2c:	d00a      	beq.n	8003c44 <TIM_OC6_SetConfig+0x48>
 8003c2e:	4e0c      	ldr	r6, [pc, #48]	; (8003c60 <TIM_OC6_SetConfig+0x64>)
 8003c30:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8003c34:	42a8      	cmp	r0, r5
 8003c36:	bf18      	it	ne
 8003c38:	42b0      	cmpne	r0, r6
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC6_SetConfig+0x48>
 8003c3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c40:	42a8      	cmp	r0, r5
 8003c42:	d104      	bne.n	8003c4e <TIM_OC6_SetConfig+0x52>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c44:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003c48:	694d      	ldr	r5, [r1, #20]
 8003c4a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c4e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003c50:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003c52:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003c54:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003c56:	6203      	str	r3, [r0, #32]
} 
 8003c58:	bcf0      	pop	{r4, r5, r6, r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40014000 	.word	0x40014000

08003c64 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003c66:	684a      	ldr	r2, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003c68:	482c      	ldr	r0, [pc, #176]	; (8003d1c <TIM_SlaveTimer_SetConfig+0xb8>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003c6a:	2a60      	cmp	r2, #96	; 0x60
{
 8003c6c:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 8003c6e:	689d      	ldr	r5, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c70:	4c2b      	ldr	r4, [pc, #172]	; (8003d20 <TIM_SlaveTimer_SetConfig+0xbc>)
 8003c72:	ea04 0405 	and.w	r4, r4, r5
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003c76:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003c78:	ea44 0402 	orr.w	r4, r4, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003c7c:	ea00 0004 	and.w	r0, r0, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003c80:	ea40 0005 	orr.w	r0, r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8003c84:	6098      	str	r0, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8003c86:	d026      	beq.n	8003cd6 <TIM_SlaveTimer_SetConfig+0x72>
 8003c88:	d816      	bhi.n	8003cb8 <TIM_SlaveTimer_SetConfig+0x54>
 8003c8a:	2a40      	cmp	r2, #64	; 0x40
 8003c8c:	d037      	beq.n	8003cfe <TIM_SlaveTimer_SetConfig+0x9a>
 8003c8e:	2a50      	cmp	r2, #80	; 0x50
 8003c90:	d110      	bne.n	8003cb4 <TIM_SlaveTimer_SetConfig+0x50>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c92:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c94:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	6888      	ldr	r0, [r1, #8]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c98:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9c:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca0:	690e      	ldr	r6, [r1, #16]
  tmpccer |= TIM_ICPolarity;
 8003ca2:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003ca6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003cac:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb2:	6218      	str	r0, [r3, #32]
}
 8003cb4:	bc70      	pop	{r4, r5, r6}
 8003cb6:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8003cb8:	2a70      	cmp	r2, #112	; 0x70
 8003cba:	d1fb      	bne.n	8003cb4 <TIM_SlaveTimer_SetConfig+0x50>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003cbc:	6908      	ldr	r0, [r1, #16]
 8003cbe:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8003cc2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003cc4:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003cca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003cce:	430a      	orrs	r2, r1
}
 8003cd0:	bc70      	pop	{r4, r5, r6}

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd8:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cda:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cde:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce0:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003ce4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003cee:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8003cf2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bc70      	pop	{r4, r5, r6}
 8003cfc:	4770      	bx	lr
      tmpccer = htim->Instance->CCER;
 8003cfe:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003d00:	6a18      	ldr	r0, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 8003d02:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003d04:	f020 0001 	bic.w	r0, r0, #1
 8003d08:	6218      	str	r0, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8003d0a:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 8003d10:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003d14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 8003d16:	621c      	str	r4, [r3, #32]
}
 8003d18:	bc70      	pop	{r4, r5, r6}
 8003d1a:	4770      	bx	lr
 8003d1c:	fffefff8 	.word	0xfffefff8
 8003d20:	ffcfff8f 	.word	0xffcfff8f

08003d24 <HAL_TIM_Base_Start_IT>:
{
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68d3      	ldr	r3, [r2, #12]
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8003d32:	8813      	ldrh	r3, [r2, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	8013      	strh	r3, [r2, #0]
}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop

08003d40 <HAL_TIM_OC_Start>:
{
 8003d40:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003d42:	2401      	movs	r4, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d44:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <HAL_TIM_OC_Start+0x60>)
  tmp = TIM_CCER_CC1E << Channel;
 8003d48:	fa04 f101 	lsl.w	r1, r4, r1
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003d4c:	4c15      	ldr	r4, [pc, #84]	; (8003da4 <HAL_TIM_OC_Start+0x64>)

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d4e:	6a18      	ldr	r0, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	bf18      	it	ne
 8003d54:	4293      	cmpne	r3, r2
 8003d56:	4d14      	ldr	r5, [pc, #80]	; (8003da8 <HAL_TIM_OC_Start+0x68>)
  TIMx->CCER &= ~tmp;
 8003d58:	ea20 0001 	bic.w	r0, r0, r1
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003d5c:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8003d60:	bf0c      	ite	eq
 8003d62:	2201      	moveq	r2, #1
 8003d64:	2200      	movne	r2, #0
  TIMx->CCER &= ~tmp;
 8003d66:	6218      	str	r0, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003d68:	42ab      	cmp	r3, r5
 8003d6a:	bf08      	it	eq
 8003d6c:	f042 0201 	orreq.w	r2, r2, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003d70:	6a18      	ldr	r0, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003d72:	42a3      	cmp	r3, r4
 8003d74:	bf08      	it	eq
 8003d76:	f042 0201 	orreq.w	r2, r2, #1
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003d7a:	4301      	orrs	r1, r0
 8003d7c:	6219      	str	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003d7e:	b912      	cbnz	r2, 8003d86 <HAL_TIM_OC_Start+0x46>
 8003d80:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <HAL_TIM_OC_Start+0x6c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d103      	bne.n	8003d8e <HAL_TIM_OC_Start+0x4e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim); 
 8003d8e:	881a      	ldrh	r2, [r3, #0]
}
 8003d90:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim); 
 8003d92:	b292      	uxth	r2, r2
 8003d94:	f042 0201 	orr.w	r2, r2, #1
}
 8003d98:	bc30      	pop	{r4, r5}
  __HAL_TIM_ENABLE(htim); 
 8003d9a:	801a      	strh	r2, [r3, #0]
}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40010400 	.word	0x40010400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014800 	.word	0x40014800

08003db0 <HAL_TIM_OC_Start_IT>:
{
 8003db0:	b470      	push	{r4, r5, r6}
 8003db2:	290c      	cmp	r1, #12
 8003db4:	d808      	bhi.n	8003dc8 <HAL_TIM_OC_Start_IT+0x18>
 8003db6:	e8df f001 	tbb	[pc, r1]
 8003dba:	073a      	.short	0x073a
 8003dbc:	07400707 	.word	0x07400707
 8003dc0:	07460707 	.word	0x07460707
 8003dc4:	0707      	.short	0x0707
 8003dc6:	34          	.byte	0x34
 8003dc7:	00          	.byte	0x00
 8003dc8:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003dca:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <HAL_TIM_OC_Start_IT+0xa4>)
  tmp = TIM_CCER_CC1E << Channel;
 8003dcc:	2001      	movs	r0, #1
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003dce:	4e22      	ldr	r6, [pc, #136]	; (8003e58 <HAL_TIM_OC_Start_IT+0xa8>)
  TIMx->CCER &= ~tmp;
 8003dd0:	6a1c      	ldr	r4, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8003dd2:	fa00 f101 	lsl.w	r1, r0, r1
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003dd6:	42b3      	cmp	r3, r6
 8003dd8:	bf18      	it	ne
 8003dda:	4293      	cmpne	r3, r2
 8003ddc:	4d1f      	ldr	r5, [pc, #124]	; (8003e5c <HAL_TIM_OC_Start_IT+0xac>)
  TIMx->CCER &= ~tmp;
 8003dde:	ea24 0001 	bic.w	r0, r4, r1
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003de2:	4c1f      	ldr	r4, [pc, #124]	; (8003e60 <HAL_TIM_OC_Start_IT+0xb0>)
 8003de4:	bf0c      	ite	eq
 8003de6:	2201      	moveq	r2, #1
 8003de8:	2200      	movne	r2, #0
  TIMx->CCER &= ~tmp;
 8003dea:	6218      	str	r0, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003dec:	42ab      	cmp	r3, r5
 8003dee:	bf08      	it	eq
 8003df0:	f042 0201 	orreq.w	r2, r2, #1
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003df4:	6a18      	ldr	r0, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003df6:	42a3      	cmp	r3, r4
 8003df8:	bf08      	it	eq
 8003dfa:	f042 0201 	orreq.w	r2, r2, #1
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003dfe:	4301      	orrs	r1, r0
 8003e00:	6219      	str	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003e02:	b912      	cbnz	r2, 8003e0a <HAL_TIM_OC_Start_IT+0x5a>
 8003e04:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_TIM_OC_Start_IT+0xb4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d103      	bne.n	8003e12 <HAL_TIM_OC_Start_IT+0x62>
    __HAL_TIM_MOE_ENABLE(htim);
 8003e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003e12:	881a      	ldrh	r2, [r3, #0]
}
 8003e14:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003e16:	b292      	uxth	r2, r2
 8003e18:	f042 0201 	orr.w	r2, r2, #1
}
 8003e1c:	bc70      	pop	{r4, r5, r6}
  __HAL_TIM_ENABLE(htim);
 8003e1e:	801a      	strh	r2, [r3, #0]
}
 8003e20:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e22:	6803      	ldr	r3, [r0, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	f042 0210 	orr.w	r2, r2, #16
 8003e2a:	60da      	str	r2, [r3, #12]
    break;
 8003e2c:	e7cd      	b.n	8003dca <HAL_TIM_OC_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e2e:	6803      	ldr	r3, [r0, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	f042 0202 	orr.w	r2, r2, #2
 8003e36:	60da      	str	r2, [r3, #12]
    break;
 8003e38:	e7c7      	b.n	8003dca <HAL_TIM_OC_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e3a:	6803      	ldr	r3, [r0, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	f042 0204 	orr.w	r2, r2, #4
 8003e42:	60da      	str	r2, [r3, #12]
    break;
 8003e44:	e7c1      	b.n	8003dca <HAL_TIM_OC_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	60da      	str	r2, [r3, #12]
    break;
 8003e50:	e7bb      	b.n	8003dca <HAL_TIM_OC_Start_IT+0x1a>
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40010400 	.word	0x40010400
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800

08003e68 <HAL_TIM_OC_Stop_IT>:
{
 8003e68:	b410      	push	{r4}
 8003e6a:	290c      	cmp	r1, #12
 8003e6c:	d808      	bhi.n	8003e80 <HAL_TIM_OC_Stop_IT+0x18>
 8003e6e:	e8df f001 	tbb	[pc, r1]
 8003e72:	075b      	.short	0x075b
 8003e74:	07550707 	.word	0x07550707
 8003e78:	074f0707 	.word	0x074f0707
 8003e7c:	0707      	.short	0x0707
 8003e7e:	49          	.byte	0x49
 8003e7f:	00          	.byte	0x00
 8003e80:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003e82:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <HAL_TIM_OC_Stop_IT+0xcc>)
  tmp = TIM_CCER_CC1E << Channel;
 8003e84:	2001      	movs	r0, #1
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003e86:	4c2c      	ldr	r4, [pc, #176]	; (8003f38 <HAL_TIM_OC_Stop_IT+0xd0>)
  tmp = TIM_CCER_CC1E << Channel;
 8003e88:	4088      	lsls	r0, r1
  TIMx->CCER &= ~tmp;
 8003e8a:	6a19      	ldr	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	bf18      	it	ne
 8003e90:	4293      	cmpne	r3, r2
 8003e92:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
  TIMx->CCER &= ~tmp;
 8003e96:	ea21 0100 	bic.w	r1, r1, r0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003e9a:	4828      	ldr	r0, [pc, #160]	; (8003f3c <HAL_TIM_OC_Stop_IT+0xd4>)
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2201      	moveq	r2, #1
 8003ea0:	2200      	movne	r2, #0
  TIMx->CCER &= ~tmp;
 8003ea2:	6219      	str	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	bf08      	it	eq
 8003ea8:	f042 0201 	orreq.w	r2, r2, #1
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003eac:	6a19      	ldr	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003eae:	4283      	cmp	r3, r0
 8003eb0:	bf08      	it	eq
 8003eb2:	f042 0201 	orreq.w	r2, r2, #1
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003eb6:	6219      	str	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003eb8:	b912      	cbnz	r2, 8003ec0 <HAL_TIM_OC_Stop_IT+0x58>
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_TIM_OC_Stop_IT+0xd8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10d      	bne.n	8003edc <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 8003ec0:	6a19      	ldr	r1, [r3, #32]
 8003ec2:	f241 1211 	movw	r2, #4369	; 0x1111
 8003ec6:	4211      	tst	r1, r2
 8003ec8:	d108      	bne.n	8003edc <HAL_TIM_OC_Stop_IT+0x74>
 8003eca:	6a19      	ldr	r1, [r3, #32]
 8003ecc:	f240 4244 	movw	r2, #1092	; 0x444
 8003ed0:	4211      	tst	r1, r2
 8003ed2:	d103      	bne.n	8003edc <HAL_TIM_OC_Stop_IT+0x74>
 8003ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);  
 8003edc:	6a19      	ldr	r1, [r3, #32]
 8003ede:	f241 1211 	movw	r2, #4369	; 0x1111
 8003ee2:	4211      	tst	r1, r2
 8003ee4:	d10a      	bne.n	8003efc <HAL_TIM_OC_Stop_IT+0x94>
 8003ee6:	6a19      	ldr	r1, [r3, #32]
 8003ee8:	f240 4244 	movw	r2, #1092	; 0x444
 8003eec:	4211      	tst	r1, r2
 8003eee:	d105      	bne.n	8003efc <HAL_TIM_OC_Stop_IT+0x94>
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	0412      	lsls	r2, r2, #16
 8003ef8:	0c12      	lsrs	r2, r2, #16
 8003efa:	801a      	strh	r2, [r3, #0]
}
 8003efc:	2000      	movs	r0, #0
 8003efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f02:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f04:	6803      	ldr	r3, [r0, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	f022 0210 	bic.w	r2, r2, #16
 8003f0c:	60da      	str	r2, [r3, #12]
    break;
 8003f0e:	e7b8      	b.n	8003e82 <HAL_TIM_OC_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f10:	6803      	ldr	r3, [r0, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	f022 0208 	bic.w	r2, r2, #8
 8003f18:	60da      	str	r2, [r3, #12]
    break;
 8003f1a:	e7b2      	b.n	8003e82 <HAL_TIM_OC_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f1c:	6803      	ldr	r3, [r0, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	f022 0204 	bic.w	r2, r2, #4
 8003f24:	60da      	str	r2, [r3, #12]
    break;
 8003f26:	e7ac      	b.n	8003e82 <HAL_TIM_OC_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f28:	6803      	ldr	r3, [r0, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	f022 0202 	bic.w	r2, r2, #2
 8003f30:	60da      	str	r2, [r3, #12]
    break;
 8003f32:	e7a6      	b.n	8003e82 <HAL_TIM_OC_Stop_IT+0x1a>
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010400 	.word	0x40010400
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <HAL_TIM_PWM_MspInit>:
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop

08003f48 <HAL_TIM_PWM_Start>:
 8003f48:	f7ff befa 	b.w	8003d40 <HAL_TIM_OC_Start>

08003f4c <HAL_TIM_PWM_Start_IT>:
 8003f4c:	f7ff bf30 	b.w	8003db0 <HAL_TIM_OC_Start_IT>

08003f50 <HAL_TIM_PWM_Stop_IT>:
 8003f50:	f7ff bf8a 	b.w	8003e68 <HAL_TIM_OC_Stop_IT>

08003f54 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f000 8099 	beq.w	8004090 <HAL_TIM_ConfigClockSource+0x13c>
 8003f5e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003f62:	6800      	ldr	r0, [r0, #0]
{
 8003f64:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003f66:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003f6c:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	4c5a      	ldr	r4, [pc, #360]	; (80040dc <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 8003f72:	6885      	ldr	r5, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f74:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f76:	402c      	ands	r4, r5
  switch (sClockSourceConfig->ClockSource)
 8003f78:	2b50      	cmp	r3, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8003f7a:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f7c:	f000 808a 	beq.w	8004094 <HAL_TIM_ConfigClockSource+0x140>
 8003f80:	d827      	bhi.n	8003fd2 <HAL_TIM_ConfigClockSource+0x7e>
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	f000 809e 	beq.w	80040c4 <HAL_TIM_ConfigClockSource+0x170>
 8003f88:	d93a      	bls.n	8004000 <HAL_TIM_ConfigClockSource+0xac>
 8003f8a:	2b30      	cmp	r3, #48	; 0x30
 8003f8c:	d072      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0x120>
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d116      	bne.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 8003f92:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f94:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003f96:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f98:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9c:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003fa0:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003fa2:	431c      	orrs	r4, r3
   tmpsmcr &= ~TIM_SMCR_TS;
 8003fa4:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003fa8:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003faa:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003fae:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003fb2:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	6204      	str	r4, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8003fb6:	6881      	ldr	r1, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003fb8:	400b      	ands	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003fba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8003fbe:	6083      	str	r3, [r0, #8]
  __HAL_UNLOCK(htim);
 8003fc0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fc2:	2101      	movs	r1, #1
  return HAL_OK;
 8003fc4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fca:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003fce:	bcf0      	pop	{r4, r5, r6, r7}
 8003fd0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	d07c      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x17e>
 8003fd8:	d91d      	bls.n	8004016 <HAL_TIM_ConfigClockSource+0xc2>
 8003fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fde:	d1ef      	bne.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003fe0:	68cc      	ldr	r4, [r1, #12]
 8003fe2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003fe6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003fe8:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fea:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003fee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003ff2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003ff4:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff6:	6883      	ldr	r3, [r0, #8]
 8003ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ffc:	6083      	str	r3, [r0, #8]
    break;
 8003ffe:	e7df      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8004000:	2b00      	cmp	r3, #0
 8004002:	d03e      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x12e>
 8004004:	2b10      	cmp	r3, #16
 8004006:	d1db      	bne.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr = TIMx->SMCR;
 8004008:	6881      	ldr	r1, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800400a:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <HAL_TIM_ConfigClockSource+0x18c>)
 800400c:	400b      	ands	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800400e:	f043 0317 	orr.w	r3, r3, #23
   TIMx->SMCR = tmpsmcr;
 8004012:	6083      	str	r3, [r0, #8]
}
 8004014:	e7d4      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8004016:	2b60      	cmp	r3, #96	; 0x60
 8004018:	d013      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xee>
 800401a:	2b70      	cmp	r3, #112	; 0x70
 800401c:	d1d0      	bne.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800401e:	68cd      	ldr	r5, [r1, #12]
 8004020:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	492f      	ldr	r1, [pc, #188]	; (80040e4 <HAL_TIM_ConfigClockSource+0x190>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004026:	4323      	orrs	r3, r4
  tmpsmcr = TIMx->SMCR;
 8004028:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800402a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004032:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004034:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004036:	6883      	ldr	r3, [r0, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004038:	4019      	ands	r1, r3
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800403a:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800403e:	6081      	str	r1, [r0, #8]
    break;
 8004040:	e7be      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004042:	6a05      	ldr	r5, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004044:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004046:	f025 0510 	bic.w	r5, r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800404a:	68cf      	ldr	r7, [r1, #12]
   tmpsmcr &= ~TIM_SMCR_TS;
 800404c:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004050:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004052:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004054:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004058:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 800405c:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8004060:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004064:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004066:	6201      	str	r1, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8004068:	6881      	ldr	r1, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800406a:	400b      	ands	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800406c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8004070:	6083      	str	r3, [r0, #8]
}
 8004072:	e7a5      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr = TIMx->SMCR;
 8004074:	6881      	ldr	r1, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004076:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <HAL_TIM_ConfigClockSource+0x18c>)
 8004078:	400b      	ands	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800407a:	f043 0337 	orr.w	r3, r3, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 800407e:	6083      	str	r3, [r0, #8]
}
 8004080:	e79e      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr = TIMx->SMCR;
 8004082:	6881      	ldr	r1, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_TIM_ConfigClockSource+0x18c>)
 8004086:	400b      	ands	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004088:	f043 0307 	orr.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800408c:	6083      	str	r3, [r0, #8]
}
 800408e:	e797      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 8004090:	2002      	movs	r0, #2
}
 8004092:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004094:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004096:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004098:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800409a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80040a2:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80040a4:	431c      	orrs	r4, r3
   tmpsmcr &= ~TIM_SMCR_TS;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80040aa:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ac:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80040b0:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80040b4:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 80040b6:	6204      	str	r4, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80040b8:	6881      	ldr	r1, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80040ba:	400b      	ands	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80040bc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 80040c0:	6083      	str	r3, [r0, #8]
}
 80040c2:	e77d      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
   tmpsmcr = TIMx->SMCR;
 80040c4:	6881      	ldr	r1, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_TIM_ConfigClockSource+0x18c>)
 80040c8:	400b      	ands	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80040ca:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 80040ce:	6083      	str	r3, [r0, #8]
}
 80040d0:	e776      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80040d2:	6881      	ldr	r1, [r0, #8]
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_TIM_ConfigClockSource+0x194>)
 80040d6:	400b      	ands	r3, r1
 80040d8:	6083      	str	r3, [r0, #8]
    break;
 80040da:	e771      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x6c>
 80040dc:	ffce0088 	.word	0xffce0088
 80040e0:	ffcfff8f 	.word	0xffcfff8f
 80040e4:	ffceff88 	.word	0xffceff88
 80040e8:	fffefff8 	.word	0xfffefff8

080040ec <HAL_TIM_SlaveConfigSynchronization>:
{
 80040ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80040ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d018      	beq.n	8004128 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 80040f6:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80040fc:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8004104:	f7ff fdae 	bl	8003c64 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004108:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(htim);  
 800410a:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800410c:	68da      	ldr	r2, [r3, #12]
  return HAL_OK;
 800410e:	4608      	mov	r0, r1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800411c:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800411e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 8004122:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 8004126:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004128:	2002      	movs	r0, #2
}
 800412a:	bd38      	pop	{r3, r4, r5, pc}

0800412c <HAL_TIM_IC_CaptureCallback>:
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop

08004130 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop

08004134 <HAL_TIM_TriggerCallback>:
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop

08004138 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004138:	6803      	ldr	r3, [r0, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	0791      	lsls	r1, r2, #30
{
 800413e:	b510      	push	{r4, lr}
 8004140:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004142:	d502      	bpl.n	800414a <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	0792      	lsls	r2, r2, #30
 8004148:	d468      	bmi.n	800421c <HAL_TIM_IRQHandler+0xe4>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	0752      	lsls	r2, r2, #29
 800414e:	d502      	bpl.n	8004156 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	0750      	lsls	r0, r2, #29
 8004154:	d44f      	bmi.n	80041f6 <HAL_TIM_IRQHandler+0xbe>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	0711      	lsls	r1, r2, #28
 800415a:	d502      	bpl.n	8004162 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	0712      	lsls	r2, r2, #28
 8004160:	d437      	bmi.n	80041d2 <HAL_TIM_IRQHandler+0x9a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	06d0      	lsls	r0, r2, #27
 8004166:	d502      	bpl.n	800416e <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	06d1      	lsls	r1, r2, #27
 800416c:	d41e      	bmi.n	80041ac <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	07d2      	lsls	r2, r2, #31
 8004172:	d502      	bpl.n	800417a <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	07d0      	lsls	r0, r2, #31
 8004178:	d469      	bmi.n	800424e <HAL_TIM_IRQHandler+0x116>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	0611      	lsls	r1, r2, #24
 800417e:	d502      	bpl.n	8004186 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	0612      	lsls	r2, r2, #24
 8004184:	d46b      	bmi.n	800425e <HAL_TIM_IRQHandler+0x126>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	05d0      	lsls	r0, r2, #23
 800418a:	d502      	bpl.n	8004192 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	0611      	lsls	r1, r2, #24
 8004190:	d46d      	bmi.n	800426e <HAL_TIM_IRQHandler+0x136>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	0652      	lsls	r2, r2, #25
 8004196:	d502      	bpl.n	800419e <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	0650      	lsls	r0, r2, #25
 800419c:	d46f      	bmi.n	800427e <HAL_TIM_IRQHandler+0x146>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	0691      	lsls	r1, r2, #26
 80041a2:	d502      	bpl.n	80041aa <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	0692      	lsls	r2, r2, #26
 80041a8:	d449      	bmi.n	800423e <HAL_TIM_IRQHandler+0x106>
}
 80041aa:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ac:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f413 7f40 	tst.w	r3, #768	; 0x300
 80041be:	d16f      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c0:	f001 ffba 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7ff ffb3 	bl	8004130 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	2200      	movs	r2, #0
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	7722      	strb	r2, [r4, #28]
 80041d0:	e7cd      	b.n	800416e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80041d8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041da:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041dc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	079b      	lsls	r3, r3, #30
 80041e2:	d15a      	bne.n	800429a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e4:	f001 ffa8 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80041e8:	4620      	mov	r0, r4
 80041ea:	f7ff ffa1 	bl	8004130 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	2200      	movs	r2, #0
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	7722      	strb	r2, [r4, #28]
 80041f4:	e7b5      	b.n	8004162 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041f6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fa:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80041fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041fe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004200:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004208:	d144      	bne.n	8004294 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	f001 ff95 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff ff8e 	bl	8004130 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004214:	2200      	movs	r2, #0
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	7722      	strb	r2, [r4, #28]
 800421a:	e79c      	b.n	8004156 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800421c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004220:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004222:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004224:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	0799      	lsls	r1, r3, #30
 800422a:	d130      	bne.n	800428e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422c:	f001 ff84 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	4620      	mov	r0, r4
 8004232:	f7ff ff7d 	bl	8004130 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	2200      	movs	r2, #0
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	7722      	strb	r2, [r4, #28]
 800423c:	e785      	b.n	800414a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800423e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004242:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004244:	611a      	str	r2, [r3, #16]
}
 8004246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800424a:	f000 bae3 	b.w	8004814 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800424e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004252:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004254:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004256:	f001 ff2d 	bl	80060b4 <HAL_TIM_PeriodElapsedCallback>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	e78d      	b.n	800417a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800425e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004262:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004264:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004266:	f000 fad7 	bl	8004818 <HAL_TIMEx_BreakCallback>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	e78b      	b.n	8004186 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800426e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004272:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004274:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004276:	f000 facf 	bl	8004818 <HAL_TIMEx_BreakCallback>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	e789      	b.n	8004192 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800427e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004282:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004284:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004286:	f7ff ff55 	bl	8004134 <HAL_TIM_TriggerCallback>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	e787      	b.n	800419e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800428e:	f7ff ff4d 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8004292:	e7d0      	b.n	8004236 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004294:	f7ff ff4a 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8004298:	e7bc      	b.n	8004214 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	f7ff ff47 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 800429e:	e7a6      	b.n	80041ee <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80042a0:	f7ff ff44 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 80042a4:	e791      	b.n	80041ca <HAL_TIM_IRQHandler+0x92>
 80042a6:	bf00      	nop

080042a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	4a36      	ldr	r2, [pc, #216]	; (8004384 <TIM_Base_SetConfig+0xdc>)
 80042aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80042ae:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b0:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 80042b4:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b6:	fab2 f282 	clz	r2, r2
{
 80042ba:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042bc:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80042c0:	d006      	beq.n	80042d0 <TIM_Base_SetConfig+0x28>
 80042c2:	b92a      	cbnz	r2, 80042d0 <TIM_Base_SetConfig+0x28>
 80042c4:	4d30      	ldr	r5, [pc, #192]	; (8004388 <TIM_Base_SetConfig+0xe0>)
 80042c6:	4c31      	ldr	r4, [pc, #196]	; (800438c <TIM_Base_SetConfig+0xe4>)
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	bf18      	it	ne
 80042cc:	42a8      	cmpne	r0, r5
 80042ce:	d128      	bne.n	8004322 <TIM_Base_SetConfig+0x7a>
 80042d0:	4f2f      	ldr	r7, [pc, #188]	; (8004390 <TIM_Base_SetConfig+0xe8>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042d6:	684d      	ldr	r5, [r1, #4]
 80042d8:	1bc7      	subs	r7, r0, r7
 80042da:	432b      	orrs	r3, r5
 80042dc:	fab7 f787 	clz	r7, r7
 80042e0:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e8:	694d      	ldr	r5, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ec:	688e      	ldr	r6, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80042ee:	880c      	ldrh	r4, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fa:	62c6      	str	r6, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80042fc:	8504      	strh	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80042fe:	b952      	cbnz	r2, 8004316 <TIM_Base_SetConfig+0x6e>
 8004300:	b94f      	cbnz	r7, 8004316 <TIM_Base_SetConfig+0x6e>
 8004302:	4a24      	ldr	r2, [pc, #144]	; (8004394 <TIM_Base_SetConfig+0xec>)
 8004304:	4b24      	ldr	r3, [pc, #144]	; (8004398 <TIM_Base_SetConfig+0xf0>)
 8004306:	4298      	cmp	r0, r3
 8004308:	bf18      	it	ne
 800430a:	4290      	cmpne	r0, r2
 800430c:	d003      	beq.n	8004316 <TIM_Base_SetConfig+0x6e>
 800430e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004312:	4298      	cmp	r0, r3
 8004314:	d101      	bne.n	800431a <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8004316:	8a0b      	ldrh	r3, [r1, #16]
 8004318:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800431a:	2301      	movs	r3, #1
}
 800431c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800431e:	6143      	str	r3, [r0, #20]
}
 8004320:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004322:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004326:	42a0      	cmp	r0, r4
 8004328:	d018      	beq.n	800435c <TIM_Base_SetConfig+0xb4>
 800432a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800432e:	42a0      	cmp	r0, r4
 8004330:	d014      	beq.n	800435c <TIM_Base_SetConfig+0xb4>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	4d18      	ldr	r5, [pc, #96]	; (8004394 <TIM_Base_SetConfig+0xec>)
 8004334:	4c18      	ldr	r4, [pc, #96]	; (8004398 <TIM_Base_SetConfig+0xf0>)
 8004336:	42a0      	cmp	r0, r4
 8004338:	bf18      	it	ne
 800433a:	42a8      	cmpne	r0, r5
 800433c:	d01f      	beq.n	800437e <TIM_Base_SetConfig+0xd6>
 800433e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004342:	42a0      	cmp	r0, r4
 8004344:	d01b      	beq.n	800437e <TIM_Base_SetConfig+0xd6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004346:	694a      	ldr	r2, [r1, #20]
 8004348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800434c:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434e:	4313      	orrs	r3, r2
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004350:	880a      	ldrh	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004352:	b29b      	uxth	r3, r3
 8004354:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004356:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004358:	8502      	strh	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800435a:	e7d2      	b.n	8004302 <TIM_Base_SetConfig+0x5a>
 800435c:	4f0c      	ldr	r7, [pc, #48]	; (8004390 <TIM_Base_SetConfig+0xe8>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	4d0e      	ldr	r5, [pc, #56]	; (800439c <TIM_Base_SetConfig+0xf4>)
 8004364:	1bc7      	subs	r7, r0, r7
    tmpcr1 |= Structure->CounterMode;
 8004366:	684e      	ldr	r6, [r1, #4]
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004368:	42a8      	cmp	r0, r5
 800436a:	fab7 f787 	clz	r7, r7
    tmpcr1 |= Structure->CounterMode;
 800436e:	ea43 0306 	orr.w	r3, r3, r6
 8004372:	ea4f 1757 	mov.w	r7, r7, lsr #5
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004376:	d0b4      	beq.n	80042e2 <TIM_Base_SetConfig+0x3a>
 8004378:	2f00      	cmp	r7, #0
 800437a:	d1b2      	bne.n	80042e2 <TIM_Base_SetConfig+0x3a>
 800437c:	e7d9      	b.n	8004332 <TIM_Base_SetConfig+0x8a>
 800437e:	2700      	movs	r7, #0
 8004380:	e7af      	b.n	80042e2 <TIM_Base_SetConfig+0x3a>
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40010400 	.word	0x40010400
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40000c00 	.word	0x40000c00

080043a0 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80043a0:	b1c0      	cbz	r0, 80043d4 <HAL_TIM_Base_Init+0x34>
{ 
 80043a2:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80043a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043a8:	4604      	mov	r4, r0
 80043aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043ae:	b163      	cbz	r3, 80043ca <HAL_TIM_Base_Init+0x2a>
  htim->State= HAL_TIM_STATE_BUSY;
 80043b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80043b2:	4621      	mov	r1, r4
  htim->State= HAL_TIM_STATE_BUSY;
 80043b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80043b8:	f851 0b04 	ldr.w	r0, [r1], #4
 80043bc:	f7ff ff74 	bl	80042a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80043c0:	2301      	movs	r3, #1
  return HAL_OK;
 80043c2:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80043c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80043c8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80043ca:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80043ce:	f002 fc1f 	bl	8006c10 <HAL_TIM_Base_MspInit>
 80043d2:	e7ed      	b.n	80043b0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80043d4:	2001      	movs	r0, #1
}
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80043d8:	b1c0      	cbz	r0, 800440c <HAL_TIM_PWM_Init+0x34>
{
 80043da:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80043dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043e0:	4604      	mov	r4, r0
 80043e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043e6:	b163      	cbz	r3, 8004402 <HAL_TIM_PWM_Init+0x2a>
  htim->State= HAL_TIM_STATE_BUSY;
 80043e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80043ea:	4621      	mov	r1, r4
  htim->State= HAL_TIM_STATE_BUSY;
 80043ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80043f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80043f4:	f7ff ff58 	bl	80042a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80043f8:	2301      	movs	r3, #1
  return HAL_OK;
 80043fa:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80043fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004400:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004402:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004406:	f7ff fd9d 	bl	8003f44 <HAL_TIM_PWM_MspInit>
 800440a:	e7ed      	b.n	80043e8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800440c:	2001      	movs	r0, #1
}
 800440e:	4770      	bx	lr

08004410 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004410:	6a02      	ldr	r2, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 8004412:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	f022 0201 	bic.w	r2, r2, #1
{
 800441a:	b4f0      	push	{r4, r5, r6, r7}
  tmpccmrx |= OC_Config->OCMode;
 800441c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800441e:	4f19      	ldr	r7, [pc, #100]	; (8004484 <TIM_OC1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004420:	6202      	str	r2, [r0, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004422:	4e19      	ldr	r6, [pc, #100]	; (8004488 <TIM_OC1_SetConfig+0x78>)
  tmpccer = TIMx->CCER;
 8004424:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8004426:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004428:	42b0      	cmp	r0, r6
  tmpccmrx = TIMx->CCMR1;
 800442a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800442c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004430:	ea07 0702 	and.w	r7, r7, r2
  tmpccer |= OC_Config->OCPolarity;
 8004434:	ea43 030c 	orr.w	r3, r3, ip
  tmpccmrx |= OC_Config->OCMode;
 8004438:	ea45 0507 	orr.w	r5, r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800443c:	d00e      	beq.n	800445c <TIM_OC1_SetConfig+0x4c>
 800443e:	4a13      	ldr	r2, [pc, #76]	; (800448c <TIM_OC1_SetConfig+0x7c>)
 8004440:	4290      	cmp	r0, r2
 8004442:	d00b      	beq.n	800445c <TIM_OC1_SetConfig+0x4c>
 8004444:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8004448:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800444c:	4290      	cmp	r0, r2
 800444e:	bf18      	it	ne
 8004450:	42b0      	cmpne	r0, r6
 8004452:	d003      	beq.n	800445c <TIM_OC1_SetConfig+0x4c>
 8004454:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004458:	4290      	cmp	r0, r2
 800445a:	d10b      	bne.n	8004474 <TIM_OC1_SetConfig+0x64>
    tmpccer |= OC_Config->OCNPolarity;
 800445c:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800445e:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8004462:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004464:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8004468:	4313      	orrs	r3, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800446a:	694a      	ldr	r2, [r1, #20]
 800446c:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800446e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004472:	4314      	orrs	r4, r2
  TIMx->CCR1 = OC_Config->Pulse;
 8004474:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004476:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004478:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800447a:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800447c:	6203      	str	r3, [r0, #32]
} 
 800447e:	bcf0      	pop	{r4, r5, r6, r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	fffeff8c 	.word	0xfffeff8c
 8004488:	40010000 	.word	0x40010000
 800448c:	40010400 	.word	0x40010400

08004490 <TIM_OC2_SetConfig>:
{
 8004490:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004492:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004494:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004498:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 800449c:	680a      	ldr	r2, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800449e:	4f19      	ldr	r7, [pc, #100]	; (8004504 <TIM_OC2_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a0:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a2:	4e19      	ldr	r6, [pc, #100]	; (8004508 <TIM_OC2_SetConfig+0x78>)
  tmpccer = TIMx->CCER;
 80044a4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80044a6:	6845      	ldr	r5, [r0, #4]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a8:	42b0      	cmp	r0, r6
  tmpccmrx = TIMx->CCMR1;
 80044aa:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80044ac:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044b0:	ea07 0704 	and.w	r7, r7, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 80044b4:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 80044b8:	ea47 2202 	orr.w	r2, r7, r2, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044bc:	d00d      	beq.n	80044da <TIM_OC2_SetConfig+0x4a>
 80044be:	4c13      	ldr	r4, [pc, #76]	; (800450c <TIM_OC2_SetConfig+0x7c>)
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	d00a      	beq.n	80044da <TIM_OC2_SetConfig+0x4a>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	4e12      	ldr	r6, [pc, #72]	; (8004510 <TIM_OC2_SetConfig+0x80>)
 80044c6:	4c13      	ldr	r4, [pc, #76]	; (8004514 <TIM_OC2_SetConfig+0x84>)
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	bf18      	it	ne
 80044cc:	42b0      	cmpne	r0, r6
 80044ce:	d00b      	beq.n	80044e8 <TIM_OC2_SetConfig+0x58>
 80044d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d10e      	bne.n	80044f6 <TIM_OC2_SetConfig+0x66>
 80044d8:	e006      	b.n	80044e8 <TIM_OC2_SetConfig+0x58>
    tmpccer &= ~TIM_CCER_CC2NP;
 80044da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80044de:	68cc      	ldr	r4, [r1, #12]
 80044e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80044e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80044e8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044ea:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80044ee:	698e      	ldr	r6, [r1, #24]
 80044f0:	4334      	orrs	r4, r6
 80044f2:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80044f6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80044f8:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80044fa:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80044fc:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 80044fe:	6203      	str	r3, [r0, #32]
}
 8004500:	bcf0      	pop	{r4, r5, r6, r7}
 8004502:	4770      	bx	lr
 8004504:	feff8cff 	.word	0xfeff8cff
 8004508:	40010000 	.word	0x40010000
 800450c:	40010400 	.word	0x40010400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400

08004518 <TIM_OC3_SetConfig>:
{
 8004518:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800451a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 800451c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004520:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 8004524:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004526:	4e19      	ldr	r6, [pc, #100]	; (800458c <TIM_OC3_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004528:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800452a:	6a03      	ldr	r3, [r0, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800452c:	42b0      	cmp	r0, r6
  tmpcr2 =  TIMx->CR2; 
 800452e:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004530:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004532:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004536:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= (OC_Config->OCPolarity << 8);
 800453a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800453e:	ea42 0207 	orr.w	r2, r2, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004542:	d00d      	beq.n	8004560 <TIM_OC3_SetConfig+0x48>
 8004544:	4c12      	ldr	r4, [pc, #72]	; (8004590 <TIM_OC3_SetConfig+0x78>)
 8004546:	42a0      	cmp	r0, r4
 8004548:	d00a      	beq.n	8004560 <TIM_OC3_SetConfig+0x48>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	4e12      	ldr	r6, [pc, #72]	; (8004594 <TIM_OC3_SetConfig+0x7c>)
 800454c:	4c12      	ldr	r4, [pc, #72]	; (8004598 <TIM_OC3_SetConfig+0x80>)
 800454e:	42a0      	cmp	r0, r4
 8004550:	bf18      	it	ne
 8004552:	42b0      	cmpne	r0, r6
 8004554:	d00b      	beq.n	800456e <TIM_OC3_SetConfig+0x56>
 8004556:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800455a:	42a0      	cmp	r0, r4
 800455c:	d10e      	bne.n	800457c <TIM_OC3_SetConfig+0x64>
 800455e:	e006      	b.n	800456e <TIM_OC3_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004564:	68cc      	ldr	r4, [r1, #12]
 8004566:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800456a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800456e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004570:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004574:	698e      	ldr	r6, [r1, #24]
 8004576:	4334      	orrs	r4, r6
 8004578:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800457c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800457e:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004580:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004582:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 8004584:	6203      	str	r3, [r0, #32]
}
 8004586:	bcf0      	pop	{r4, r5, r6, r7}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40010000 	.word	0x40010000
 8004590:	40010400 	.word	0x40010400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400

0800459c <TIM_OC4_SetConfig>:
{
 800459c:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800459e:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 80045a0:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80045a6:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80045a8:	4d14      	ldr	r5, [pc, #80]	; (80045fc <TIM_OC4_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045aa:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80045ac:	6a03      	ldr	r3, [r0, #32]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80045ae:	42a8      	cmp	r0, r5
  tmpcr2 =  TIMx->CR2; 
 80045b0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80045b2:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80045b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12);
 80045bc:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 80045c0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80045c4:	d00e      	beq.n	80045e4 <TIM_OC4_SetConfig+0x48>
 80045c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045ca:	42a8      	cmp	r0, r5
 80045cc:	d00a      	beq.n	80045e4 <TIM_OC4_SetConfig+0x48>
 80045ce:	4e0c      	ldr	r6, [pc, #48]	; (8004600 <TIM_OC4_SetConfig+0x64>)
 80045d0:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80045d4:	42a8      	cmp	r0, r5
 80045d6:	bf18      	it	ne
 80045d8:	42b0      	cmpne	r0, r6
 80045da:	d003      	beq.n	80045e4 <TIM_OC4_SetConfig+0x48>
 80045dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045e0:	42a8      	cmp	r0, r5
 80045e2:	d104      	bne.n	80045ee <TIM_OC4_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80045e8:	694d      	ldr	r5, [r1, #20]
 80045ea:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 80045ee:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045f0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045f2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80045f4:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 80045f6:	6203      	str	r3, [r0, #32]
}
 80045f8:	bcf0      	pop	{r4, r5, r6, r7}
 80045fa:	4770      	bx	lr
 80045fc:	40010000 	.word	0x40010000
 8004600:	40014000 	.word	0x40014000

08004604 <HAL_TIM_PWM_ConfigChannel>:
{
 8004604:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004606:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	f000 808d 	beq.w	800472a <HAL_TIM_PWM_ConfigChannel+0x126>
 8004610:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004614:	2101      	movs	r1, #1
 8004616:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800461c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 8004620:	2a14      	cmp	r2, #20
 8004622:	d81d      	bhi.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004624:	e8df f002 	tbb	[pc, r2]
 8004628:	1c1c1c0b 	.word	0x1c1c1c0b
 800462c:	1c1c1c37 	.word	0x1c1c1c37
 8004630:	1c1c1c4a 	.word	0x1c1c1c4a
 8004634:	1c1c1c5c 	.word	0x1c1c1c5c
 8004638:	1c1c1c6f 	.word	0x1c1c1c6f
 800463c:	24          	.byte	0x24
 800463d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800463e:	4629      	mov	r1, r5
 8004640:	6800      	ldr	r0, [r0, #0]
 8004642:	f7ff fee5 	bl	8004410 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004646:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004648:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800464a:	6999      	ldr	r1, [r3, #24]
 800464c:	f041 0108 	orr.w	r1, r1, #8
 8004650:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004652:	6999      	ldr	r1, [r3, #24]
 8004654:	f021 0104 	bic.w	r1, r1, #4
 8004658:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	4302      	orrs	r2, r0
 800465e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004660:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004662:	2201      	movs	r2, #1
  return HAL_OK;
 8004664:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8004666:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800466a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800466e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004670:	4629      	mov	r1, r5
 8004672:	6800      	ldr	r0, [r0, #0]
 8004674:	f7ff fac2 	bl	8003bfc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004678:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 800467a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800467c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800467e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004682:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004684:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004686:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800468a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 800468c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004694:	e7e4      	b.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004696:	4629      	mov	r1, r5
 8004698:	6800      	ldr	r0, [r0, #0]
 800469a:	f7ff fef9 	bl	8004490 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800469e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80046a0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a2:	6999      	ldr	r1, [r3, #24]
 80046a4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80046a8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046aa:	6999      	ldr	r1, [r3, #24]
 80046ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80046b0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80046b8:	619a      	str	r2, [r3, #24]
    break;
 80046ba:	e7d1      	b.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046bc:	4629      	mov	r1, r5
 80046be:	6800      	ldr	r0, [r0, #0]
 80046c0:	f7ff ff2a 	bl	8004518 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046c6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046c8:	69d9      	ldr	r1, [r3, #28]
 80046ca:	f041 0108 	orr.w	r1, r1, #8
 80046ce:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046d0:	69d9      	ldr	r1, [r3, #28]
 80046d2:	f021 0104 	bic.w	r1, r1, #4
 80046d6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	4302      	orrs	r2, r0
 80046dc:	61da      	str	r2, [r3, #28]
    break;
 80046de:	e7bf      	b.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046e0:	4629      	mov	r1, r5
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	f7ff ff5a 	bl	800459c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80046ea:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ec:	69d9      	ldr	r1, [r3, #28]
 80046ee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80046f2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046f4:	69d9      	ldr	r1, [r3, #28]
 80046f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80046fa:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004702:	61da      	str	r2, [r3, #28]
    break;
 8004704:	e7ac      	b.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004706:	4629      	mov	r1, r5
 8004708:	6800      	ldr	r0, [r0, #0]
 800470a:	f7ff fa43 	bl	8003b94 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800470e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004710:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004712:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004714:	f041 0108 	orr.w	r1, r1, #8
 8004718:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800471a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800471c:	f021 0104 	bic.w	r1, r1, #4
 8004720:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004722:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004724:	4302      	orrs	r2, r0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004728:	e79a      	b.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 800472a:	2002      	movs	r0, #2
}
 800472c:	bd38      	pop	{r3, r4, r5, pc}
 800472e:	bf00      	nop

08004730 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004730:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d020      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x4a>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004738:	6802      	ldr	r2, [r0, #0]
{
 800473a:	b470      	push	{r4, r5, r6}
 800473c:	4604      	mov	r4, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800473e:	4810      	ldr	r0, [pc, #64]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8004740:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004742:	4282      	cmp	r2, r0
  tmpsmcr = htim->Instance->SMCR;
 8004744:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004746:	d013      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004748:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800474c:	4282      	cmp	r2, r0
 800474e:	d00f      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004750:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004752:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004756:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800475c:	2600      	movs	r6, #0
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800475e:	4303      	orrs	r3, r0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004760:	4329      	orrs	r1, r5
  
  return HAL_OK;
 8004762:	4630      	mov	r0, r6
  htim->Instance->CR2 = tmpcr2;
 8004764:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004766:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8004768:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
} 
 800476c:	bc70      	pop	{r4, r5, r6}
 800476e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004770:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004774:	6848      	ldr	r0, [r1, #4]
 8004776:	4303      	orrs	r3, r0
 8004778:	e7ea      	b.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0x20>
  __HAL_LOCK(htim);
 800477a:	2002      	movs	r0, #2
} 
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000

08004784 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004784:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d03c      	beq.n	8004806 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 800478c:	b470      	push	{r4, r5, r6}
 800478e:	4605      	mov	r5, r0
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004790:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004792:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004796:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047a0:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80047b0:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047b6:	4333      	orrs	r3, r6
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047b8:	682e      	ldr	r6, [r5, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047be:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047c0:	4812      	ldr	r0, [pc, #72]	; (800480c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047c6:	4286      	cmp	r6, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047c8:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80047cc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80047d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047d4:	d009      	beq.n	80047ea <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80047d6:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80047d8:	4296      	cmp	r6, r2
 80047da:	d006      	beq.n	80047ea <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);
 80047dc:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 80047de:	6473      	str	r3, [r6, #68]	; 0x44

  return HAL_OK;
 80047e0:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 80047e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
}
 80047e6:	bc70      	pop	{r4, r5, r6}
 80047e8:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80047ea:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80047ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047f0:	69c8      	ldr	r0, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80047f2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047f6:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fc:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004802:	4313      	orrs	r3, r2
 8004804:	e7ea      	b.n	80047dc <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8004806:	2002      	movs	r0, #2
}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40010400 	.word	0x40010400

08004814 <HAL_TIMEx_CommutationCallback>:
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <HAL_TIMEx_BreakCallback>:
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop

0800481c <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800481c:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8004820:	2b20      	cmp	r3, #32
 8004822:	d12e      	bne.n	8004882 <HAL_UART_Receive_IT+0x66>
  {
    if((pData == NULL ) || (Size == 0U))
 8004824:	b359      	cbz	r1, 800487e <HAL_UART_Receive_IT+0x62>
 8004826:	b352      	cbz	r2, 800487e <HAL_UART_Receive_IT+0x62>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004828:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800482c:	2b01      	cmp	r3, #1
 800482e:	d028      	beq.n	8004882 <HAL_UART_Receive_IT+0x66>
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004830:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8004832:	6641      	str	r1, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8004838:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    huart->RxXferCount = Size;
 800483c:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    UART_MASK_COMPUTATION(huart);
 8004840:	d02b      	beq.n	800489a <HAL_UART_Receive_IT+0x7e>
 8004842:	b303      	cbz	r3, 8004886 <HAL_UART_Receive_IT+0x6a>
 8004844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004848:	d032      	beq.n	80048b0 <HAL_UART_Receive_IT+0x94>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	2100      	movs	r1, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800484e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	67c1      	str	r1, [r0, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 8004852:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004856:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	6893      	ldr	r3, [r2, #8]
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6093      	str	r3, [r2, #8]

    /* Enable the UART Parity Error interupt and RX FIFO Threshold interrupt
       (if FIFO mode is enabled) or Data Register Not Empty interrupt
       (if FIFO mode is disabled).
    */
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8004862:	6810      	ldr	r0, [r2, #0]
    {
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004864:	6813      	ldr	r3, [r2, #0]
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8004866:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800486a:	d012      	beq.n	8004892 <HAL_UART_Receive_IT+0x76>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    else
    {
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
    }

    return HAL_OK;
 8004870:	4608      	mov	r0, r1
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004872:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004874:	6893      	ldr	r3, [r2, #8]
 8004876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487a:	6093      	str	r3, [r2, #8]
 800487c:	4770      	bx	lr
      return HAL_ERROR;
 800487e:	2001      	movs	r0, #1
 8004880:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004882:	2002      	movs	r0, #2
  }
}
 8004884:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8004886:	6903      	ldr	r3, [r0, #16]
 8004888:	b173      	cbz	r3, 80048a8 <HAL_UART_Receive_IT+0x8c>
 800488a:	237f      	movs	r3, #127	; 0x7f
 800488c:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8004890:	e7db      	b.n	800484a <HAL_UART_Receive_IT+0x2e>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004892:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800489a:	6903      	ldr	r3, [r0, #16]
 800489c:	b923      	cbnz	r3, 80048a8 <HAL_UART_Receive_IT+0x8c>
 800489e:	f240 13ff 	movw	r3, #511	; 0x1ff
 80048a2:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 80048a6:	e7d0      	b.n	800484a <HAL_UART_Receive_IT+0x2e>
 80048a8:	23ff      	movs	r3, #255	; 0xff
 80048aa:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 80048ae:	e7cc      	b.n	800484a <HAL_UART_Receive_IT+0x2e>
 80048b0:	6903      	ldr	r3, [r0, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0e9      	beq.n	800488a <HAL_UART_Receive_IT+0x6e>
 80048b6:	233f      	movs	r3, #63	; 0x3f
 80048b8:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 80048bc:	e7c5      	b.n	800484a <HAL_UART_Receive_IT+0x2e>
 80048be:	bf00      	nop

080048c0 <HAL_UART_TxCpltCallback>:
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop

080048c4 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048c4:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 80048c8:	2b22      	cmp	r3, #34	; 0x22
 80048ca:	d130      	bne.n	800492e <UART_Receive_IT+0x6a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048cc:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ce:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  uint16_t  uhMask = huart->Mask;
 80048d6:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048da:	b29b      	uxth	r3, r3
{
 80048dc:	b510      	push	{r4, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048de:	d00d      	beq.n	80048fc <UART_Receive_IT+0x38>
      *tmp = (uint16_t)(uhdata & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048e0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80048e2:	400b      	ands	r3, r1
 80048e4:	1c51      	adds	r1, r2, #1
 80048e6:	6641      	str	r1, [r0, #100]	; 0x64
 80048e8:	7013      	strb	r3, [r2, #0]
    }

    if(--huart->RxXferCount == 0U)
 80048ea:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 80048ee:	3c01      	subs	r4, #1
 80048f0:	b2a4      	uxth	r4, r4
 80048f2:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
 80048f6:	b154      	cbz	r4, 800490e <UART_Receive_IT+0x4a>
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80048f8:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80048fa:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fc:	6902      	ldr	r2, [r0, #16]
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d1ee      	bne.n	80048e0 <UART_Receive_IT+0x1c>
      *tmp = (uint16_t)(uhdata & uhMask);
 8004902:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004904:	400b      	ands	r3, r1
 8004906:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2;
 800490a:	6642      	str	r2, [r0, #100]	; 0x64
 800490c:	e7ed      	b.n	80048ea <UART_Receive_IT+0x26>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490e:	6803      	ldr	r3, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8004910:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004918:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004922:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
      HAL_UART_RxCpltCallback(huart);
 8004926:	f001 fc21 	bl	800616c <HAL_UART_RxCpltCallback>
 800492a:	4620      	mov	r0, r4
}
 800492c:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800492e:	6802      	ldr	r2, [r0, #0]
    return HAL_BUSY;
 8004930:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004932:	8b13      	ldrh	r3, [r2, #24]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f043 0308 	orr.w	r3, r3, #8
 800493a:	8313      	strh	r3, [r2, #24]
}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_UART_ErrorCallback>:
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004944:	6803      	ldr	r3, [r0, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
{
 8004948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == RESET)
 800494c:	0717      	lsls	r7, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800494e:	681d      	ldr	r5, [r3, #0]
{
 8004950:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004952:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 8004954:	f000 808d 	beq.w	8004a72 <HAL_UART_IRQHandler+0x12e>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8004958:	4875      	ldr	r0, [pc, #468]	; (8004b30 <HAL_UART_IRQHandler+0x1ec>)
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800495a:	f405 7690 	and.w	r6, r5, #288	; 0x120
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 800495e:	4008      	ands	r0, r1
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004960:	4306      	orrs	r6, r0
 8004962:	d132      	bne.n	80049ca <HAL_UART_IRQHandler+0x86>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8004964:	02d7      	lsls	r7, r2, #11
 8004966:	d502      	bpl.n	800496e <HAL_UART_IRQHandler+0x2a>
 8004968:	024e      	lsls	r6, r1, #9
 800496a:	f100 809b 	bmi.w	8004aa4 <HAL_UART_IRQHandler+0x160>
  if(((isrflags & USART_ISR_TXE) != RESET)
 800496e:	0610      	lsls	r0, r2, #24
 8004970:	d40e      	bmi.n	8004990 <HAL_UART_IRQHandler+0x4c>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004972:	0656      	lsls	r6, r2, #25
 8004974:	d502      	bpl.n	800497c <HAL_UART_IRQHandler+0x38>
 8004976:	0668      	lsls	r0, r5, #25
 8004978:	f100 80a5 	bmi.w	8004ac6 <HAL_UART_IRQHandler+0x182>
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 800497c:	0211      	lsls	r1, r2, #8
 800497e:	d505      	bpl.n	800498c <HAL_UART_IRQHandler+0x48>
 8004980:	006a      	lsls	r2, r5, #1
 8004982:	d503      	bpl.n	800498c <HAL_UART_IRQHandler+0x48>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800498a:	601a      	str	r2, [r3, #0]
}
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8004990:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 8004994:	f005 0080 	and.w	r0, r5, #128	; 0x80
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8004998:	4301      	orrs	r1, r0
 800499a:	d0ea      	beq.n	8004972 <HAL_UART_IRQHandler+0x2e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800499c:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 80049a0:	2a21      	cmp	r2, #33	; 0x21
 80049a2:	d1f3      	bne.n	800498c <HAL_UART_IRQHandler+0x48>
    if(huart->TxXferCount == 0U)
 80049a4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80049a8:	b292      	uxth	r2, r2
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	f040 8096 	bne.w	8004adc <HAL_UART_IRQHandler+0x198>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	0097      	lsls	r7, r2, #2
 80049b4:	f140 80ac 	bpl.w	8004b10 <HAL_UART_IRQHandler+0x1cc>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80049be:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c6:	601a      	str	r2, [r3, #0]
      return HAL_OK;
 80049c8:	e7e0      	b.n	800498c <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ca:	07d7      	lsls	r7, r2, #31
 80049cc:	d507      	bpl.n	80049de <HAL_UART_IRQHandler+0x9a>
 80049ce:	05ee      	lsls	r6, r5, #23
 80049d0:	d505      	bpl.n	80049de <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80049d2:	2601      	movs	r6, #1
 80049d4:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049d6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80049d8:	f046 0601 	orr.w	r6, r6, #1
 80049dc:	67e6      	str	r6, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049de:	0797      	lsls	r7, r2, #30
 80049e0:	d555      	bpl.n	8004a8e <HAL_UART_IRQHandler+0x14a>
 80049e2:	07ce      	lsls	r6, r1, #31
 80049e4:	d507      	bpl.n	80049f6 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80049e6:	2602      	movs	r6, #2
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049e8:	0757      	lsls	r7, r2, #29
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80049ea:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ec:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80049ee:	f046 0604 	orr.w	r6, r6, #4
 80049f2:	67e6      	str	r6, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f4:	d44f      	bmi.n	8004a96 <HAL_UART_IRQHandler+0x152>
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 80049f6:	0716      	lsls	r6, r2, #28
 80049f8:	d509      	bpl.n	8004a0e <HAL_UART_IRQHandler+0xca>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80049fa:	f005 0620 	and.w	r6, r5, #32
 80049fe:	4330      	orrs	r0, r6
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0xca>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8004a02:	2008      	movs	r0, #8
 8004a04:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a06:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004a08:	f040 0008 	orr.w	r0, r0, #8
 8004a0c:	67e0      	str	r0, [r4, #124]	; 0x7c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d0bb      	beq.n	800498c <HAL_UART_IRQHandler+0x48>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8004a14:	0690      	lsls	r0, r2, #26
 8004a16:	d506      	bpl.n	8004a26 <HAL_UART_IRQHandler+0xe2>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a18:	f005 0520 	and.w	r5, r5, #32
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8004a1c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8004a20:	ea55 0201 	orrs.w	r2, r5, r1
 8004a24:	d16a      	bne.n	8004afc <HAL_UART_IRQHandler+0x1b8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004a26:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004a28:	0711      	lsls	r1, r2, #28
 8004a2a:	d403      	bmi.n	8004a34 <HAL_UART_IRQHandler+0xf0>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8004a2c:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004a2e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8004a32:	d068      	beq.n	8004b06 <HAL_UART_IRQHandler+0x1c2>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004a36:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a3c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004a46:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	0652      	lsls	r2, r2, #25
 8004a4e:	d536      	bpl.n	8004abe <HAL_UART_IRQHandler+0x17a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a50:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8004a52:	6f60      	ldr	r0, [r4, #116]	; 0x74
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a58:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8004a5a:	b380      	cbz	r0, 8004abe <HAL_UART_IRQHandler+0x17a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a5c:	4b35      	ldr	r3, [pc, #212]	; (8004b34 <HAL_UART_IRQHandler+0x1f0>)
 8004a5e:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a60:	f7fc fdb0 	bl	80015c4 <HAL_DMA_Abort_IT>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d091      	beq.n	800498c <HAL_UART_IRQHandler+0x48>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a68:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8004a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a70:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8004a72:	0696      	lsls	r6, r2, #26
 8004a74:	f57f af76 	bpl.w	8004964 <HAL_UART_IRQHandler+0x20>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a78:	f005 0620 	and.w	r6, r5, #32
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8004a7c:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8004a80:	433e      	orrs	r6, r7
 8004a82:	f43f af6f 	beq.w	8004964 <HAL_UART_IRQHandler+0x20>
}
 8004a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      UART_Receive_IT(huart);
 8004a8a:	f7ff bf1b 	b.w	80048c4 <UART_Receive_IT>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a8e:	0756      	lsls	r6, r2, #29
 8004a90:	d5b1      	bpl.n	80049f6 <HAL_UART_IRQHandler+0xb2>
 8004a92:	07cf      	lsls	r7, r1, #31
 8004a94:	d5af      	bpl.n	80049f6 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8004a96:	2604      	movs	r6, #4
 8004a98:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a9a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8004a9c:	f046 0602 	orr.w	r6, r6, #2
 8004aa0:	67e6      	str	r6, [r4, #124]	; 0x7c
 8004aa2:	e7a8      	b.n	80049f6 <HAL_UART_IRQHandler+0xb2>
    huart->gState  = HAL_UART_STATE_READY;
 8004aa4:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8004aa6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004aaa:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8004aac:	6219      	str	r1, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8004aae:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
}
 8004ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004aba:	f000 bd95 	b.w	80055e8 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7ff ff3e 	bl	8004940 <HAL_UART_ErrorCallback>
 8004ac4:	e762      	b.n	800498c <HAL_UART_IRQHandler+0x48>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac6:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	2120      	movs	r1, #32
  HAL_UART_TxCpltCallback(huart);
 8004aca:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
  HAL_UART_TxCpltCallback(huart);
 8004ad6:	f7ff fef3 	bl	80048c0 <HAL_UART_TxCpltCallback>
    return;
 8004ada:	e757      	b.n	800498c <HAL_UART_IRQHandler+0x48>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004adc:	68a2      	ldr	r2, [r4, #8]
 8004ade:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004ae2:	d01a      	beq.n	8004b1a <HAL_UART_IRQHandler+0x1d6>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8004ae4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ae6:	1c51      	adds	r1, r2, #1
 8004ae8:	65e1      	str	r1, [r4, #92]	; 0x5c
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8004aee:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      return HAL_OK;
 8004afa:	e747      	b.n	800498c <HAL_UART_IRQHandler+0x48>
        UART_Receive_IT(huart);
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7ff fee1 	bl	80048c4 <UART_Receive_IT>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	e78f      	b.n	8004a26 <HAL_UART_IRQHandler+0xe2>
        HAL_UART_ErrorCallback(huart);
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7ff ff1a 	bl	8004940 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	67e5      	str	r5, [r4, #124]	; 0x7c
 8004b0e:	e73d      	b.n	800498c <HAL_UART_IRQHandler+0x48>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e752      	b.n	80049c0 <HAL_UART_IRQHandler+0x7c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1a:	6922      	ldr	r2, [r4, #16]
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	d1e1      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x1a0>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004b20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004b22:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004b26:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004b2a:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004b2c:	65e2      	str	r2, [r4, #92]	; 0x5c
 8004b2e:	e7de      	b.n	8004aee <HAL_UART_IRQHandler+0x1aa>
 8004b30:	10000001 	.word	0x10000001
 8004b34:	08004b39 	.word	0x08004b39

08004b38 <UART_DMAAbortOnError>:
{
 8004b38:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004b3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  huart->TxXferCount = 0U;
 8004b42:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  HAL_UART_ErrorCallback(huart);
 8004b46:	f7ff fefb 	bl	8004940 <HAL_UART_ErrorCallback>
}
 8004b4a:	bd08      	pop	{r3, pc}

08004b4c <HAL_UART_AbortReceiveCpltCallback>:
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop

08004b50 <HAL_UART_AbortReceive_IT>:
{
 8004b50:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b52:	6803      	ldr	r3, [r0, #0]
{
 8004b54:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8004b56:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <HAL_UART_AbortReceive_IT+0x6c>)
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b58:	6819      	ldr	r1, [r3, #0]
 8004b5a:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8004b5e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8004b60:	6899      	ldr	r1, [r3, #8]
 8004b62:	400a      	ands	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004b6c:	d01b      	beq.n	8004ba6 <HAL_UART_AbortReceive_IT+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6e:	689a      	ldr	r2, [r3, #8]
    if(huart->hdmarx != NULL)
 8004b70:	6f41      	ldr	r1, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b76:	609a      	str	r2, [r3, #8]
    if(huart->hdmarx != NULL)
 8004b78:	b151      	cbz	r1, 8004b90 <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_UART_AbortReceive_IT+0x70>)
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b7c:	4608      	mov	r0, r1
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004b7e:	650b      	str	r3, [r1, #80]	; 0x50
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b80:	f7fc fd20 	bl	80015c4 <HAL_DMA_Abort_IT>
 8004b84:	b110      	cbz	r0, 8004b8c <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b86:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004b88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b8a:	4798      	blx	r3
}
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
      huart->RxState = HAL_UART_STATE_READY;
 8004b90:	2220      	movs	r2, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004b92:	250f      	movs	r5, #15
      huart->RxXferCount = 0U;
 8004b94:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004b98:	621d      	str	r5, [r3, #32]
      huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004b9e:	f7ff ffd5 	bl	8004b4c <HAL_UART_AbortReceiveCpltCallback>
}
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	2120      	movs	r1, #32
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004ba8:	250f      	movs	r5, #15
    huart->RxXferCount = 0U;
 8004baa:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004bae:	621d      	str	r5, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004bb4:	f7ff ffca 	bl	8004b4c <HAL_UART_AbortReceiveCpltCallback>
}
 8004bb8:	2000      	movs	r0, #0
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	effffffe 	.word	0xeffffffe
 8004bc0:	08004bc5 	.word	0x08004bc5

08004bc4 <UART_DMARxOnlyAbortCallback>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bc4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004bc6:	210f      	movs	r1, #15
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	2320      	movs	r3, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004bca:	6802      	ldr	r2, [r0, #0]
{
 8004bcc:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8004bce:	2400      	movs	r4, #0
 8004bd0:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004bd4:	6211      	str	r1, [r2, #32]
  huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004bda:	f7ff ffb7 	bl	8004b4c <HAL_UART_AbortReceiveCpltCallback>
}
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <UART_SetConfig>:
{
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	4604      	mov	r4, r0
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8004be6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004be8:	4fad      	ldr	r7, [pc, #692]	; (8004ea0 <UART_SetConfig+0x2c0>)
{
 8004bea:	b087      	sub	sp, #28
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8004bec:	68a3      	ldr	r3, [r4, #8]
 8004bee:	6921      	ldr	r1, [r4, #16]
 8004bf0:	ea40 0203 	orr.w	r2, r0, r3
 8004bf4:	6966      	ldr	r6, [r4, #20]
  if(UART_INSTANCE_LOWPOWER(huart))
 8004bf6:	6823      	ldr	r3, [r4, #0]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8004bf8:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bfa:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8004c00:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004c02:	681e      	ldr	r6, [r3, #0]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c04:	4da7      	ldr	r5, [pc, #668]	; (8004ea4 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004c06:	4037      	ands	r7, r6
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8004c08:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c0a:	69a6      	ldr	r6, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c0c:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004c0e:	ea42 0207 	orr.w	r2, r2, r7
 8004c12:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c1a:	ea42 020c 	orr.w	r2, r2, ip
 8004c1e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c20:	d07b      	beq.n	8004d1a <UART_SetConfig+0x13a>
    tmpreg |= huart->Init.OneBitSampling;
 8004c22:	6a22      	ldr	r2, [r4, #32]
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8004c24:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    tmpreg |= huart->Init.OneBitSampling;
 8004c28:	ea46 0602 	orr.w	r6, r6, r2
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8004c2c:	d079      	beq.n	8004d22 <UART_SetConfig+0x142>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c2e:	689d      	ldr	r5, [r3, #8]
 8004c30:	4a9d      	ldr	r2, [pc, #628]	; (8004ea8 <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8004c32:	6a60      	ldr	r0, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c34:	402a      	ands	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c36:	4d9d      	ldr	r5, [pc, #628]	; (8004eac <UART_SetConfig+0x2cc>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c38:	4332      	orrs	r2, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c3c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	f022 020f 	bic.w	r2, r2, #15
 8004c44:	ea42 0200 	orr.w	r2, r2, r0
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c4a:	d06f      	beq.n	8004d2c <UART_SetConfig+0x14c>
 8004c4c:	4a98      	ldr	r2, [pc, #608]	; (8004eb0 <UART_SetConfig+0x2d0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d04d      	beq.n	8004cee <UART_SetConfig+0x10e>
 8004c52:	4a98      	ldr	r2, [pc, #608]	; (8004eb4 <UART_SetConfig+0x2d4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	f000 81a8 	beq.w	8004faa <UART_SetConfig+0x3ca>
 8004c5a:	4a97      	ldr	r2, [pc, #604]	; (8004eb8 <UART_SetConfig+0x2d8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	f000 81cb 	beq.w	8004ff8 <UART_SetConfig+0x418>
 8004c62:	4a96      	ldr	r2, [pc, #600]	; (8004ebc <UART_SetConfig+0x2dc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	f000 818b 	beq.w	8004f80 <UART_SetConfig+0x3a0>
 8004c6a:	4a95      	ldr	r2, [pc, #596]	; (8004ec0 <UART_SetConfig+0x2e0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	f000 81cd 	beq.w	800500c <UART_SetConfig+0x42c>
 8004c72:	4a94      	ldr	r2, [pc, #592]	; (8004ec4 <UART_SetConfig+0x2e4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f000 8317 	beq.w	80052a8 <UART_SetConfig+0x6c8>
 8004c7a:	4a93      	ldr	r2, [pc, #588]	; (8004ec8 <UART_SetConfig+0x2e8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	f000 82eb 	beq.w	8005258 <UART_SetConfig+0x678>
 8004c82:	4a88      	ldr	r2, [pc, #544]	; (8004ea4 <UART_SetConfig+0x2c4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d139      	bne.n	8004cfc <UART_SetConfig+0x11c>
 8004c88:	4b90      	ldr	r3, [pc, #576]	; (8004ecc <UART_SetConfig+0x2ec>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d836      	bhi.n	8004d02 <UART_SetConfig+0x122>
 8004c94:	4e8e      	ldr	r6, [pc, #568]	; (8004ed0 <UART_SetConfig+0x2f0>)
 8004c96:	4433      	add	r3, r6
 8004c98:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
    switch (clocksource)
 8004c9c:	2d20      	cmp	r5, #32
 8004c9e:	f200 82f1 	bhi.w	8005284 <UART_SetConfig+0x6a4>
 8004ca2:	2d01      	cmp	r5, #1
 8004ca4:	d92d      	bls.n	8004d02 <UART_SetConfig+0x122>
 8004ca6:	1eab      	subs	r3, r5, #2
 8004ca8:	2b1e      	cmp	r3, #30
 8004caa:	d82a      	bhi.n	8004d02 <UART_SetConfig+0x122>
 8004cac:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004cb0:	00290251 	.word	0x00290251
 8004cb4:	00290249 	.word	0x00290249
 8004cb8:	00290029 	.word	0x00290029
 8004cbc:	0029023e 	.word	0x0029023e
 8004cc0:	00290029 	.word	0x00290029
 8004cc4:	00290029 	.word	0x00290029
 8004cc8:	00290029 	.word	0x00290029
 8004ccc:	0029023c 	.word	0x0029023c
 8004cd0:	00290029 	.word	0x00290029
 8004cd4:	00290029 	.word	0x00290029
 8004cd8:	00290029 	.word	0x00290029
 8004cdc:	00290029 	.word	0x00290029
 8004ce0:	00290029 	.word	0x00290029
 8004ce4:	00290029 	.word	0x00290029
 8004ce8:	00290029 	.word	0x00290029
 8004cec:	020c      	.short	0x020c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cee:	4a77      	ldr	r2, [pc, #476]	; (8004ecc <UART_SetConfig+0x2ec>)
 8004cf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cf2:	f002 0207 	and.w	r2, r2, #7
 8004cf6:	2a05      	cmp	r2, #5
 8004cf8:	f240 80f0 	bls.w	8004edc <UART_SetConfig+0x2fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004d00:	d004      	beq.n	8004d0c <UART_SetConfig+0x12c>
        ret = HAL_ERROR;
 8004d02:	2501      	movs	r5, #1
}
 8004d04:	4628      	mov	r0, r5
 8004d06:	b007      	add	sp, #28
 8004d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (clocksource)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2501      	movs	r5, #1
}
 8004d10:	4628      	mov	r0, r5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004d12:	60da      	str	r2, [r3, #12]
}
 8004d14:	b007      	add	sp, #28
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8004d1a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8004d1e:	f040 82a5 	bne.w	800526c <UART_SetConfig+0x68c>
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8004d22:	e9d4 200b 	ldrd	r2, r0, [r4, #44]	; 0x2c
 8004d26:	4302      	orrs	r2, r0
 8004d28:	4316      	orrs	r6, r2
 8004d2a:	e780      	b.n	8004c2e <UART_SetConfig+0x4e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d2c:	4a67      	ldr	r2, [pc, #412]	; (8004ecc <UART_SetConfig+0x2ec>)
 8004d2e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d30:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004d34:	2a28      	cmp	r2, #40	; 0x28
 8004d36:	d8e1      	bhi.n	8004cfc <UART_SetConfig+0x11c>
 8004d38:	4d65      	ldr	r5, [pc, #404]	; (8004ed0 <UART_SetConfig+0x2f0>)
 8004d3a:	5cad      	ldrb	r5, [r5, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004d40:	f000 80d4 	beq.w	8004eec <UART_SetConfig+0x30c>
    switch (clocksource)
 8004d44:	2d20      	cmp	r5, #32
 8004d46:	f200 8125 	bhi.w	8004f94 <UART_SetConfig+0x3b4>
 8004d4a:	2d20      	cmp	r5, #32
 8004d4c:	d8d9      	bhi.n	8004d02 <UART_SetConfig+0x122>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0x174>)
 8004d50:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8004d54:	08004e97 	.word	0x08004e97
 8004d58:	08004e6b 	.word	0x08004e6b
 8004d5c:	08004d03 	.word	0x08004d03
 8004d60:	08004d03 	.word	0x08004d03
 8004d64:	08004e3b 	.word	0x08004e3b
 8004d68:	08004d03 	.word	0x08004d03
 8004d6c:	08004d03 	.word	0x08004d03
 8004d70:	08004d03 	.word	0x08004d03
 8004d74:	08004e07 	.word	0x08004e07
 8004d78:	08004d03 	.word	0x08004d03
 8004d7c:	08004d03 	.word	0x08004d03
 8004d80:	08004d03 	.word	0x08004d03
 8004d84:	08004d03 	.word	0x08004d03
 8004d88:	08004d03 	.word	0x08004d03
 8004d8c:	08004d03 	.word	0x08004d03
 8004d90:	08004d03 	.word	0x08004d03
 8004d94:	08004df9 	.word	0x08004df9
 8004d98:	08004d03 	.word	0x08004d03
 8004d9c:	08004d03 	.word	0x08004d03
 8004da0:	08004d03 	.word	0x08004d03
 8004da4:	08004d03 	.word	0x08004d03
 8004da8:	08004d03 	.word	0x08004d03
 8004dac:	08004d03 	.word	0x08004d03
 8004db0:	08004d03 	.word	0x08004d03
 8004db4:	08004d03 	.word	0x08004d03
 8004db8:	08004d03 	.word	0x08004d03
 8004dbc:	08004d03 	.word	0x08004d03
 8004dc0:	08004d03 	.word	0x08004d03
 8004dc4:	08004d03 	.word	0x08004d03
 8004dc8:	08004d03 	.word	0x08004d03
 8004dcc:	08004d03 	.word	0x08004d03
 8004dd0:	08004d03 	.word	0x08004d03
 8004dd4:	08004dd9 	.word	0x08004dd9
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004dd8:	493d      	ldr	r1, [pc, #244]	; (8004ed0 <UART_SetConfig+0x2f0>)
 8004dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004dde:	6864      	ldr	r4, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de0:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8004de6:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8004de8:	fbb2 f2f1 	udiv	r2, r2, r1
 8004dec:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 8004df0:	fbb2 f2f4 	udiv	r2, r2, r4
 8004df4:	b292      	uxth	r2, r2
 8004df6:	e78b      	b.n	8004d10 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004df8:	4935      	ldr	r1, [pc, #212]	; (8004ed0 <UART_SetConfig+0x2f0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dfa:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004dfc:	6864      	ldr	r4, [r4, #4]
 8004dfe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8004e02:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <UART_SetConfig+0x2f4>)
 8004e04:	e7ef      	b.n	8004de6 <UART_SetConfig+0x206>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e06:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <UART_SetConfig+0x2ec>)
 8004e08:	6815      	ldr	r5, [r2, #0]
 8004e0a:	f015 0520 	ands.w	r5, r5, #32
 8004e0e:	f000 821d 	beq.w	800524c <UART_SetConfig+0x66c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8004e12:	6816      	ldr	r6, [r2, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e14:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8004e16:	492e      	ldr	r1, [pc, #184]	; (8004ed0 <UART_SetConfig+0x2f0>)
 8004e18:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004e1c:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <UART_SetConfig+0x2f8>)
 8004e1e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8004e22:	6861      	ldr	r1, [r4, #4]
 8004e24:	40f2      	lsrs	r2, r6
 8004e26:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8004e28:	fbb2 f2f0 	udiv	r2, r2, r0
 8004e2c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8004e30:	fbb2 f2f1 	udiv	r2, r2, r1
 8004e34:	b292      	uxth	r2, r2
 8004e36:	60da      	str	r2, [r3, #12]
 8004e38:	e764      	b.n	8004d04 <UART_SetConfig+0x124>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e3a:	4668      	mov	r0, sp
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3c:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e3e:	f7fd ffe3 	bl	8002e08 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004e42:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <UART_SetConfig+0x2f0>)
 8004e44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e46:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004e48:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8004e4c:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8004e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e52:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004e56:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	60c3      	str	r3, [r0, #12]
}
 8004e62:	4628      	mov	r0, r5
 8004e64:	b007      	add	sp, #28
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004e6a:	f7fd f95b 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e6e:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004e70:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <UART_SetConfig+0x2f0>)
 8004e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e74:	6861      	ldr	r1, [r4, #4]
 8004e76:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004e7a:	6824      	ldr	r4, [r4, #0]
 8004e7c:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 8004e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e82:	eb03 0351 	add.w	r3, r3, r1, lsr #1
}
 8004e86:	4628      	mov	r0, r5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	60e3      	str	r3, [r4, #12]
}
 8004e90:	b007      	add	sp, #28
 8004e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004e96:	f7fd f92f 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8004e9a:	4a0d      	ldr	r2, [pc, #52]	; (8004ed0 <UART_SetConfig+0x2f0>)
 8004e9c:	e7e9      	b.n	8004e72 <UART_SetConfig+0x292>
 8004e9e:	bf00      	nop
 8004ea0:	cfff69f3 	.word	0xcfff69f3
 8004ea4:	58000c00 	.word	0x58000c00
 8004ea8:	11fff4ff 	.word	0x11fff4ff
 8004eac:	40011000 	.word	0x40011000
 8004eb0:	40004400 	.word	0x40004400
 8004eb4:	40004800 	.word	0x40004800
 8004eb8:	40004c00 	.word	0x40004c00
 8004ebc:	40005000 	.word	0x40005000
 8004ec0:	40011400 	.word	0x40011400
 8004ec4:	40007800 	.word	0x40007800
 8004ec8:	40007c00 	.word	0x40007c00
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	0800b220 	.word	0x0800b220
 8004ed4:	003d0900 	.word	0x003d0900
 8004ed8:	03d09000 	.word	0x03d09000
 8004edc:	4db4      	ldr	r5, [pc, #720]	; (80051b0 <UART_SetConfig+0x5d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ede:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004ee2:	442a      	add	r2, r5
 8004ee4:	f892 502c 	ldrb.w	r5, [r2, #44]	; 0x2c
 8004ee8:	f47f af2c 	bne.w	8004d44 <UART_SetConfig+0x164>
    switch (clocksource)
 8004eec:	2d20      	cmp	r5, #32
 8004eee:	d866      	bhi.n	8004fbe <UART_SetConfig+0x3de>
 8004ef0:	2d20      	cmp	r5, #32
 8004ef2:	f63f af0b 	bhi.w	8004d0c <UART_SetConfig+0x12c>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x31c>)
 8004ef8:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8004efc:	080050c1 	.word	0x080050c1
 8004f00:	08005091 	.word	0x08005091
 8004f04:	08004d0d 	.word	0x08004d0d
 8004f08:	08004d0d 	.word	0x08004d0d
 8004f0c:	08005081 	.word	0x08005081
 8004f10:	08004d0d 	.word	0x08004d0d
 8004f14:	08004d0d 	.word	0x08004d0d
 8004f18:	08004d0d 	.word	0x08004d0d
 8004f1c:	0800505b 	.word	0x0800505b
 8004f20:	08004d0d 	.word	0x08004d0d
 8004f24:	08004d0d 	.word	0x08004d0d
 8004f28:	08004d0d 	.word	0x08004d0d
 8004f2c:	08004d0d 	.word	0x08004d0d
 8004f30:	08004d0d 	.word	0x08004d0d
 8004f34:	08004d0d 	.word	0x08004d0d
 8004f38:	08004d0d 	.word	0x08004d0d
 8004f3c:	0800504d 	.word	0x0800504d
 8004f40:	08004d0d 	.word	0x08004d0d
 8004f44:	08004d0d 	.word	0x08004d0d
 8004f48:	08004d0d 	.word	0x08004d0d
 8004f4c:	08004d0d 	.word	0x08004d0d
 8004f50:	08004d0d 	.word	0x08004d0d
 8004f54:	08004d0d 	.word	0x08004d0d
 8004f58:	08004d0d 	.word	0x08004d0d
 8004f5c:	08004d0d 	.word	0x08004d0d
 8004f60:	08004d0d 	.word	0x08004d0d
 8004f64:	08004d0d 	.word	0x08004d0d
 8004f68:	08004d0d 	.word	0x08004d0d
 8004f6c:	08004d0d 	.word	0x08004d0d
 8004f70:	08004d0d 	.word	0x08004d0d
 8004f74:	08004d0d 	.word	0x08004d0d
 8004f78:	08004d0d 	.word	0x08004d0d
 8004f7c:	08005021 	.word	0x08005021
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f80:	4a8c      	ldr	r2, [pc, #560]	; (80051b4 <UART_SetConfig+0x5d4>)
 8004f82:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f84:	f002 0207 	and.w	r2, r2, #7
 8004f88:	2a05      	cmp	r2, #5
 8004f8a:	f63f aeb7 	bhi.w	8004cfc <UART_SetConfig+0x11c>
 8004f8e:	4d8a      	ldr	r5, [pc, #552]	; (80051b8 <UART_SetConfig+0x5d8>)
 8004f90:	5cad      	ldrb	r5, [r5, r2]
 8004f92:	e6d3      	b.n	8004d3c <UART_SetConfig+0x15c>
    switch (clocksource)
 8004f94:	2d40      	cmp	r5, #64	; 0x40
 8004f96:	f47f aeb4 	bne.w	8004d02 <UART_SetConfig+0x122>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f9a:	a803      	add	r0, sp, #12
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f9c:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f9e:	f7fd ffdf 	bl	8002f60 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004fa2:	4a83      	ldr	r2, [pc, #524]	; (80051b0 <UART_SetConfig+0x5d0>)
 8004fa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fa6:	9b04      	ldr	r3, [sp, #16]
 8004fa8:	e74e      	b.n	8004e48 <UART_SetConfig+0x268>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004faa:	4a82      	ldr	r2, [pc, #520]	; (80051b4 <UART_SetConfig+0x5d4>)
 8004fac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fae:	f002 0207 	and.w	r2, r2, #7
 8004fb2:	2a05      	cmp	r2, #5
 8004fb4:	f63f aea2 	bhi.w	8004cfc <UART_SetConfig+0x11c>
 8004fb8:	4d80      	ldr	r5, [pc, #512]	; (80051bc <UART_SetConfig+0x5dc>)
 8004fba:	5cad      	ldrb	r5, [r5, r2]
 8004fbc:	e6be      	b.n	8004d3c <UART_SetConfig+0x15c>
    switch (clocksource)
 8004fbe:	2d40      	cmp	r5, #64	; 0x40
 8004fc0:	f47f aea4 	bne.w	8004d0c <UART_SetConfig+0x12c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fc4:	a803      	add	r0, sp, #12
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fc6:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fc8:	f7fd ffca 	bl	8002f60 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004fcc:	4878      	ldr	r0, [pc, #480]	; (80051b0 <UART_SetConfig+0x5d0>)
 8004fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd0:	9a04      	ldr	r2, [sp, #16]
 8004fd2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8004fd6:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8004fd8:	e9d4 3600 	ldrd	r3, r6, [r4]
 8004fdc:	fbb2 f2f0 	udiv	r2, r2, r0
 8004fe0:	0871      	lsrs	r1, r6, #1
 8004fe2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8004fe6:	fbb1 f1f6 	udiv	r1, r1, r6
      break;
 8004fea:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8004fee:	f021 010f 	bic.w	r1, r1, #15
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	b292      	uxth	r2, r2
 8004ff6:	e68b      	b.n	8004d10 <UART_SetConfig+0x130>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff8:	4a6e      	ldr	r2, [pc, #440]	; (80051b4 <UART_SetConfig+0x5d4>)
 8004ffa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ffc:	f002 0207 	and.w	r2, r2, #7
 8005000:	2a05      	cmp	r2, #5
 8005002:	f63f ae7b 	bhi.w	8004cfc <UART_SetConfig+0x11c>
 8005006:	4d6e      	ldr	r5, [pc, #440]	; (80051c0 <UART_SetConfig+0x5e0>)
 8005008:	5cad      	ldrb	r5, [r5, r2]
 800500a:	e697      	b.n	8004d3c <UART_SetConfig+0x15c>
 800500c:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <UART_SetConfig+0x5d4>)
 800500e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005010:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8005014:	2a28      	cmp	r2, #40	; 0x28
 8005016:	f63f ae71 	bhi.w	8004cfc <UART_SetConfig+0x11c>
 800501a:	4d6a      	ldr	r5, [pc, #424]	; (80051c4 <UART_SetConfig+0x5e4>)
 800501c:	5cad      	ldrb	r5, [r5, r2]
 800501e:	e68d      	b.n	8004d3c <UART_SetConfig+0x15c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8005020:	4e63      	ldr	r6, [pc, #396]	; (80051b0 <UART_SetConfig+0x5d0>)
 8005022:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005026:	6864      	ldr	r4, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005028:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800502a:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 800502e:	0861      	lsrs	r1, r4, #1
 8005030:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8005032:	fbb2 f2f0 	udiv	r2, r2, r0
 8005036:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800503a:	fbb1 f1f4 	udiv	r1, r1, r4
      break;
 800503e:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8005042:	f021 010f 	bic.w	r1, r1, #15
 8005046:	430a      	orrs	r2, r1
 8005048:	b292      	uxth	r2, r2
 800504a:	e661      	b.n	8004d10 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <UART_SetConfig+0x5d0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 800504e:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8005050:	6864      	ldr	r4, [r4, #4]
 8005052:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8005056:	4a5c      	ldr	r2, [pc, #368]	; (80051c8 <UART_SetConfig+0x5e8>)
 8005058:	e7e9      	b.n	800502e <UART_SetConfig+0x44e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800505a:	4a56      	ldr	r2, [pc, #344]	; (80051b4 <UART_SetConfig+0x5d4>)
 800505c:	6815      	ldr	r5, [r2, #0]
 800505e:	f015 0520 	ands.w	r5, r5, #32
 8005062:	f000 812d 	beq.w	80052c0 <UART_SetConfig+0x6e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8005066:	6816      	ldr	r6, [r2, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005068:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800506a:	4951      	ldr	r1, [pc, #324]	; (80051b0 <UART_SetConfig+0x5d0>)
 800506c:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8005070:	4a56      	ldr	r2, [pc, #344]	; (80051cc <UART_SetConfig+0x5ec>)
 8005072:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8005076:	6864      	ldr	r4, [r4, #4]
 8005078:	40f2      	lsrs	r2, r6
 800507a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 800507c:	0861      	lsrs	r1, r4, #1
 800507e:	e7d8      	b.n	8005032 <UART_SetConfig+0x452>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005080:	4668      	mov	r0, sp
  HAL_StatusTypeDef ret               = HAL_OK;
 8005082:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005084:	f7fd fec0 	bl	8002e08 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8005088:	4849      	ldr	r0, [pc, #292]	; (80051b0 <UART_SetConfig+0x5d0>)
 800508a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800508c:	9a01      	ldr	r2, [sp, #4]
 800508e:	e7a0      	b.n	8004fd2 <UART_SetConfig+0x3f2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8005090:	4e47      	ldr	r6, [pc, #284]	; (80051b0 <UART_SetConfig+0x5d0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8005092:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8005094:	f7fd f846 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8005098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800509a:	6861      	ldr	r1, [r4, #4]
 800509c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	084a      	lsrs	r2, r1, #1
 80050a4:	8fb4      	ldrh	r4, [r6, #60]	; 0x3c
 80050a6:	fbb0 f0f4 	udiv	r0, r0, r4
 80050aa:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80050ae:	fbb2 f1f1 	udiv	r1, r2, r1
      break;
 80050b2:	f3c1 0242 	ubfx	r2, r1, #1, #3
 80050b6:	f021 010f 	bic.w	r1, r1, #15
 80050ba:	430a      	orrs	r2, r1
 80050bc:	b292      	uxth	r2, r2
 80050be:	e627      	b.n	8004d10 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80050c0:	4e3b      	ldr	r6, [pc, #236]	; (80051b0 <UART_SetConfig+0x5d0>)
 80050c2:	f7fd f819 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 80050c6:	e7e7      	b.n	8005098 <UART_SetConfig+0x4b8>
      tmpreg = (uint32_t) LSE_VALUE;
 80050c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80050cc:	6867      	ldr	r7, [r4, #4]
 80050ce:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80050d2:	4283      	cmp	r3, r0
 80050d4:	f63f ae15 	bhi.w	8004d02 <UART_SetConfig+0x122>
 80050d8:	ebb0 3f07 	cmp.w	r0, r7, lsl #12
 80050dc:	f63f ae11 	bhi.w	8004d02 <UART_SetConfig+0x122>
        switch (clocksource)
 80050e0:	2d20      	cmp	r5, #32
 80050e2:	f200 80d7 	bhi.w	8005294 <UART_SetConfig+0x6b4>
 80050e6:	2d01      	cmp	r5, #1
 80050e8:	d914      	bls.n	8005114 <UART_SetConfig+0x534>
 80050ea:	1eab      	subs	r3, r5, #2
 80050ec:	2b1e      	cmp	r3, #30
 80050ee:	d811      	bhi.n	8005114 <UART_SetConfig+0x534>
 80050f0:	e8df f003 	tbb	[pc, r3]
 80050f4:	1070108e 	.word	0x1070108e
 80050f8:	104c1010 	.word	0x104c1010
 80050fc:	10101010 	.word	0x10101010
 8005100:	10321010 	.word	0x10321010
 8005104:	10101010 	.word	0x10101010
 8005108:	10101010 	.word	0x10101010
 800510c:	10101010 	.word	0x10101010
 8005110:	1010      	.short	0x1010
 8005112:	98          	.byte	0x98
 8005113:	00          	.byte	0x00
 8005114:	2501      	movs	r5, #1
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8005116:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800511a:	4b2d      	ldr	r3, [pc, #180]	; (80051d0 <UART_SetConfig+0x5f0>)
 800511c:	429a      	cmp	r2, r3
 800511e:	f63f adf0 	bhi.w	8004d02 <UART_SetConfig+0x122>
           huart->Instance->BRR = tmpreg;
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	60d8      	str	r0, [r3, #12]
 8005126:	e5ed      	b.n	8004d04 <UART_SetConfig+0x124>
    switch (clocksource)
 8005128:	4827      	ldr	r0, [pc, #156]	; (80051c8 <UART_SetConfig+0x5e8>)
 800512a:	e7cf      	b.n	80050cc <UART_SetConfig+0x4ec>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512c:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <UART_SetConfig+0x5d4>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	0692      	lsls	r2, r2, #26
 8005132:	f140 80c3 	bpl.w	80052bc <UART_SetConfig+0x6dc>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4824      	ldr	r0, [pc, #144]	; (80051cc <UART_SetConfig+0x5ec>)
 800513a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800513e:	40d8      	lsrs	r0, r3
    if (tmpreg != 0U)
 8005140:	e7c4      	b.n	80050cc <UART_SetConfig+0x4ec>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005142:	4668      	mov	r0, sp
 8005144:	f7fd fe60 	bl	8002e08 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8005148:	9801      	ldr	r0, [sp, #4]
    if (tmpreg != 0U)
 800514a:	2800      	cmp	r0, #0
 800514c:	d1be      	bne.n	80050cc <UART_SetConfig+0x4ec>
 800514e:	4605      	mov	r5, r0
  return ret;
 8005150:	e5d8      	b.n	8004d04 <UART_SetConfig+0x124>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8005152:	f7fd fe43 	bl	8002ddc <HAL_RCCEx_GetD3PCLK1Freq>
      break;
 8005156:	e7f8      	b.n	800514a <UART_SetConfig+0x56a>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8005158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800515a:	2100      	movs	r1, #0
 800515c:	481a      	ldr	r0, [pc, #104]	; (80051c8 <UART_SetConfig+0x5e8>)
          break;
 800515e:	2500      	movs	r5, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8005160:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8005164:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8005166:	2300      	movs	r3, #0
 8005168:	f7fb f912 	bl	8000390 <__aeabi_uldivmod>
 800516c:	463a      	mov	r2, r7
 800516e:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8005172:	462b      	mov	r3, r5
 8005174:	087f      	lsrs	r7, r7, #1
 8005176:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800517a:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800517e:	eb18 0007 	adds.w	r0, r8, r7
 8005182:	f149 0100 	adc.w	r1, r9, #0
 8005186:	f7fb f903 	bl	8000390 <__aeabi_uldivmod>
          break;
 800518a:	e7c4      	b.n	8005116 <UART_SetConfig+0x536>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800518c:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <UART_SetConfig+0x5d4>)
 800518e:	6813      	ldr	r3, [r2, #0]
 8005190:	f013 0820 	ands.w	r8, r3, #32
 8005194:	f000 809a 	beq.w	80052cc <UART_SetConfig+0x6ec>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	2100      	movs	r1, #0
 800519c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800519e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80051a2:	480a      	ldr	r0, [pc, #40]	; (80051cc <UART_SetConfig+0x5ec>)
 80051a4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80051a8:	460d      	mov	r5, r1
 80051aa:	40d0      	lsrs	r0, r2
 80051ac:	e7da      	b.n	8005164 <UART_SetConfig+0x584>
 80051ae:	bf00      	nop
 80051b0:	0800b220 	.word	0x0800b220
 80051b4:	58024400 	.word	0x58024400
 80051b8:	0800b24c 	.word	0x0800b24c
 80051bc:	0800b24c 	.word	0x0800b24c
 80051c0:	0800b24c 	.word	0x0800b24c
 80051c4:	0800b220 	.word	0x0800b220
 80051c8:	003d0900 	.word	0x003d0900
 80051cc:	03d09000 	.word	0x03d09000
 80051d0:	000ffcff 	.word	0x000ffcff
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d4:	4668      	mov	r0, sp
          break;
 80051d6:	2500      	movs	r5, #0
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d8:	f7fd fe16 	bl	8002e08 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80051dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051de:	9801      	ldr	r0, [sp, #4]
 80051e0:	4629      	mov	r1, r5
 80051e2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80051e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80051ea:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80051ec:	2300      	movs	r3, #0
 80051ee:	f7fb f8cf 	bl	8000390 <__aeabi_uldivmod>
 80051f2:	4642      	mov	r2, r8
 80051f4:	020f      	lsls	r7, r1, #8
 80051f6:	462b      	mov	r3, r5
 80051f8:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80051fc:	0206      	lsls	r6, r0, #8
 80051fe:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005202:	eb16 0008 	adds.w	r0, r6, r8
 8005206:	f147 0100 	adc.w	r1, r7, #0
 800520a:	f7fb f8c1 	bl	8000390 <__aeabi_uldivmod>
          break;
 800520e:	e782      	b.n	8005116 <UART_SetConfig+0x536>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8005210:	f7fd fde4 	bl	8002ddc <HAL_RCCEx_GetD3PCLK1Freq>
 8005214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005216:	2100      	movs	r1, #0
 8005218:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800521c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
          break;
 8005220:	460d      	mov	r5, r1
 8005222:	e7e2      	b.n	80051ea <UART_SetConfig+0x60a>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8005224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005226:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800522a:	0878      	lsrs	r0, r7, #1
 800522c:	463a      	mov	r2, r7
 800522e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8005232:	f44f 7780 	mov.w	r7, #256	; 0x100
 8005236:	2100      	movs	r1, #0
 8005238:	2300      	movs	r3, #0
 800523a:	8fb6      	ldrh	r6, [r6, #60]	; 0x3c
 800523c:	fbb5 f5f6 	udiv	r5, r5, r6
 8005240:	fbe5 0107 	umlal	r0, r1, r5, r7
          break;
 8005244:	461d      	mov	r5, r3
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8005246:	f7fb f8a3 	bl	8000390 <__aeabi_uldivmod>
          break;
 800524a:	e764      	b.n	8005116 <UART_SetConfig+0x536>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800524c:	492c      	ldr	r1, [pc, #176]	; (8005300 <UART_SetConfig+0x720>)
 800524e:	6864      	ldr	r4, [r4, #4]
 8005250:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8005254:	4a2b      	ldr	r2, [pc, #172]	; (8005304 <UART_SetConfig+0x724>)
 8005256:	e5c6      	b.n	8004de6 <UART_SetConfig+0x206>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005258:	4a2b      	ldr	r2, [pc, #172]	; (8005308 <UART_SetConfig+0x728>)
 800525a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800525c:	f002 0207 	and.w	r2, r2, #7
 8005260:	2a05      	cmp	r2, #5
 8005262:	f63f ad4b 	bhi.w	8004cfc <UART_SetConfig+0x11c>
 8005266:	4d29      	ldr	r5, [pc, #164]	; (800530c <UART_SetConfig+0x72c>)
 8005268:	5cad      	ldrb	r5, [r5, r2]
 800526a:	e567      	b.n	8004d3c <UART_SetConfig+0x15c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800526c:	6899      	ldr	r1, [r3, #8]
 800526e:	4a28      	ldr	r2, [pc, #160]	; (8005310 <UART_SetConfig+0x730>)
 8005270:	400a      	ands	r2, r1
 8005272:	4332      	orrs	r2, r6
 8005274:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8005276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005278:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800527a:	f022 020f 	bic.w	r2, r2, #15
 800527e:	430a      	orrs	r2, r1
 8005280:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005282:	e501      	b.n	8004c88 <UART_SetConfig+0xa8>
    switch (clocksource)
 8005284:	2d40      	cmp	r5, #64	; 0x40
 8005286:	f47f ad3c 	bne.w	8004d02 <UART_SetConfig+0x122>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800528a:	a803      	add	r0, sp, #12
 800528c:	f7fd fe68 	bl	8002f60 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8005290:	9804      	ldr	r0, [sp, #16]
      break;
 8005292:	e75a      	b.n	800514a <UART_SetConfig+0x56a>
        switch (clocksource)
 8005294:	2d40      	cmp	r5, #64	; 0x40
 8005296:	f47f af3d 	bne.w	8005114 <UART_SetConfig+0x534>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800529a:	a803      	add	r0, sp, #12
          break;
 800529c:	2500      	movs	r5, #0
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800529e:	f7fd fe5f 	bl	8002f60 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80052a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a4:	9804      	ldr	r0, [sp, #16]
 80052a6:	e79b      	b.n	80051e0 <UART_SetConfig+0x600>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a8:	4a17      	ldr	r2, [pc, #92]	; (8005308 <UART_SetConfig+0x728>)
 80052aa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052ac:	f002 0207 	and.w	r2, r2, #7
 80052b0:	2a05      	cmp	r2, #5
 80052b2:	f63f ad23 	bhi.w	8004cfc <UART_SetConfig+0x11c>
 80052b6:	4d17      	ldr	r5, [pc, #92]	; (8005314 <UART_SetConfig+0x734>)
 80052b8:	5cad      	ldrb	r5, [r5, r2]
 80052ba:	e53f      	b.n	8004d3c <UART_SetConfig+0x15c>
        tmpreg = (uint32_t) HSI_VALUE;
 80052bc:	4811      	ldr	r0, [pc, #68]	; (8005304 <UART_SetConfig+0x724>)
 80052be:	e705      	b.n	80050cc <UART_SetConfig+0x4ec>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80052c0:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <UART_SetConfig+0x720>)
 80052c2:	6864      	ldr	r4, [r4, #4]
 80052c4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80052c8:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <UART_SetConfig+0x724>)
 80052ca:	e6b0      	b.n	800502e <UART_SetConfig+0x44e>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80052cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ce:	2100      	movs	r1, #0
 80052d0:	480c      	ldr	r0, [pc, #48]	; (8005304 <UART_SetConfig+0x724>)
 80052d2:	4645      	mov	r5, r8
 80052d4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80052d8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80052da:	2300      	movs	r3, #0
 80052dc:	f7fb f858 	bl	8000390 <__aeabi_uldivmod>
 80052e0:	463a      	mov	r2, r7
 80052e2:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80052e6:	4643      	mov	r3, r8
 80052e8:	087f      	lsrs	r7, r7, #1
 80052ea:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 80052ee:	ea4b 6b10 	orr.w	fp, fp, r0, lsr #24
 80052f2:	eb1a 0007 	adds.w	r0, sl, r7
 80052f6:	f14b 0100 	adc.w	r1, fp, #0
 80052fa:	f7fb f849 	bl	8000390 <__aeabi_uldivmod>
 80052fe:	e70a      	b.n	8005116 <UART_SetConfig+0x536>
 8005300:	0800b220 	.word	0x0800b220
 8005304:	03d09000 	.word	0x03d09000
 8005308:	58024400 	.word	0x58024400
 800530c:	0800b24c 	.word	0x0800b24c
 8005310:	11fff4ff 	.word	0x11fff4ff
 8005314:	0800b24c 	.word	0x0800b24c

08005318 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005318:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800531a:	07da      	lsls	r2, r3, #31
{
 800531c:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800531e:	d506      	bpl.n	800532e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005320:	6801      	ldr	r1, [r0, #0]
 8005322:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005324:	684a      	ldr	r2, [r1, #4]
 8005326:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800532a:	4322      	orrs	r2, r4
 800532c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800532e:	079c      	lsls	r4, r3, #30
 8005330:	d506      	bpl.n	8005340 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005332:	6801      	ldr	r1, [r0, #0]
 8005334:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005336:	684a      	ldr	r2, [r1, #4]
 8005338:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800533c:	4322      	orrs	r2, r4
 800533e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005340:	0759      	lsls	r1, r3, #29
 8005342:	d506      	bpl.n	8005352 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005344:	6801      	ldr	r1, [r0, #0]
 8005346:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005348:	684a      	ldr	r2, [r1, #4]
 800534a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800534e:	4322      	orrs	r2, r4
 8005350:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005352:	071a      	lsls	r2, r3, #28
 8005354:	d506      	bpl.n	8005364 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005356:	6801      	ldr	r1, [r0, #0]
 8005358:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800535a:	684a      	ldr	r2, [r1, #4]
 800535c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005360:	4322      	orrs	r2, r4
 8005362:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005364:	06dc      	lsls	r4, r3, #27
 8005366:	d506      	bpl.n	8005376 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800536c:	688a      	ldr	r2, [r1, #8]
 800536e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005372:	4322      	orrs	r2, r4
 8005374:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005376:	0699      	lsls	r1, r3, #26
 8005378:	d506      	bpl.n	8005388 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800537a:	6801      	ldr	r1, [r0, #0]
 800537c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800537e:	688a      	ldr	r2, [r1, #8]
 8005380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005384:	4322      	orrs	r2, r4
 8005386:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005388:	065a      	lsls	r2, r3, #25
 800538a:	d50a      	bpl.n	80053a2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800538c:	6801      	ldr	r1, [r0, #0]
 800538e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005390:	684a      	ldr	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005392:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005396:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800539a:	ea42 0204 	orr.w	r2, r2, r4
 800539e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a0:	d00b      	beq.n	80053ba <UART_AdvFeatureConfig+0xa2>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	d506      	bpl.n	80053b4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a6:	6802      	ldr	r2, [r0, #0]
 80053a8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80053aa:	6853      	ldr	r3, [r2, #4]
 80053ac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6053      	str	r3, [r2, #4]
}
 80053b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ba:	684a      	ldr	r2, [r1, #4]
 80053bc:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80053be:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80053c2:	4322      	orrs	r2, r4
 80053c4:	604a      	str	r2, [r1, #4]
 80053c6:	e7ec      	b.n	80053a2 <UART_AdvFeatureConfig+0x8a>

080053c8 <UART_WaitOnFlagUntilTimeout>:
{
 80053c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053cc:	9f08      	ldr	r7, [sp, #32]
 80053ce:	4680      	mov	r8, r0
 80053d0:	460e      	mov	r6, r1
 80053d2:	4615      	mov	r5, r2
 80053d4:	4699      	mov	r9, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d6:	f8d8 2000 	ldr.w	r2, [r8]
 80053da:	e001      	b.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 80053dc:	1c7b      	adds	r3, r7, #1
 80053de:	d10a      	bne.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e0:	69d4      	ldr	r4, [r2, #28]
 80053e2:	ea36 0304 	bics.w	r3, r6, r4
 80053e6:	bf0c      	ite	eq
 80053e8:	2401      	moveq	r4, #1
 80053ea:	2400      	movne	r4, #0
 80053ec:	42ac      	cmp	r4, r5
 80053ee:	d0f5      	beq.n	80053dc <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80053f0:	2000      	movs	r0, #0
}
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80053f6:	b13f      	cbz	r7, 8005408 <UART_WaitOnFlagUntilTimeout+0x40>
 80053f8:	f7fb f982 	bl	8000700 <HAL_GetTick>
 80053fc:	eba0 0009 	sub.w	r0, r0, r9
 8005400:	42b8      	cmp	r0, r7
 8005402:	d9e8      	bls.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xe>
 8005404:	f8d8 2000 	ldr.w	r2, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005408:	6813      	ldr	r3, [r2, #0]
        huart->gState = HAL_UART_STATE_READY;
 800540a:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800540c:	2400      	movs	r4, #0
 800540e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005414:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005416:	6893      	ldr	r3, [r2, #8]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800541e:	f888 1079 	strb.w	r1, [r8, #121]	; 0x79
        __HAL_UNLOCK(huart);
 8005422:	f888 4078 	strb.w	r4, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005426:	f888 107a 	strb.w	r1, [r8, #122]	; 0x7a
        return HAL_TIMEOUT;
 800542a:	e7e2      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x2a>

0800542c <HAL_UART_Transmit>:
{
 800542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005430:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8005432:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
{
 8005436:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 8005438:	2b20      	cmp	r3, #32
 800543a:	d15e      	bne.n	80054fa <HAL_UART_Transmit+0xce>
    if((pData == NULL ) || (Size == 0U))
 800543c:	460e      	mov	r6, r1
 800543e:	2900      	cmp	r1, #0
 8005440:	d057      	beq.n	80054f2 <HAL_UART_Transmit+0xc6>
 8005442:	fab2 f382 	clz	r3, r2
 8005446:	4615      	mov	r5, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	2a00      	cmp	r2, #0
 800544c:	d051      	beq.n	80054f2 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 800544e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8005452:	4604      	mov	r4, r0
 8005454:	2a01      	cmp	r2, #1
 8005456:	d050      	beq.n	80054fa <HAL_UART_Transmit+0xce>
 8005458:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800545c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800545e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005462:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    tickstart = HAL_GetTick();
 8005466:	f7fb f94b 	bl	8000700 <HAL_GetTick>
    huart->TxXferCount = Size;
 800546a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 800546e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    tickstart = HAL_GetTick();
 8005472:	4680      	mov	r8, r0
    huart->TxXferSize = Size;
 8005474:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    while(huart->TxXferCount > 0U)
 8005478:	b292      	uxth	r2, r2
 800547a:	b94a      	cbnz	r2, 8005490 <HAL_UART_Transmit+0x64>
 800547c:	e029      	b.n	80054d2 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800547e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	461e      	mov	r6, r3
 8005486:	8511      	strh	r1, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8005488:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800548c:	b292      	uxth	r2, r2
 800548e:	b302      	cbz	r2, 80054d2 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8005490:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005494:	4643      	mov	r3, r8
 8005496:	9700      	str	r7, [sp, #0]
 8005498:	2200      	movs	r2, #0
      huart->TxXferCount--;
 800549a:	3d01      	subs	r5, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	4620      	mov	r0, r4
      huart->TxXferCount--;
 80054a0:	b2ad      	uxth	r5, r5
 80054a2:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054a6:	f7ff ff8f 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80054aa:	4633      	mov	r3, r6
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ac:	bb48      	cbnz	r0, 8005502 <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ae:	68a2      	ldr	r2, [r4, #8]
 80054b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80054b4:	d1e3      	bne.n	800547e <HAL_UART_Transmit+0x52>
 80054b6:	6922      	ldr	r2, [r4, #16]
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	d1e0      	bne.n	800547e <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80054bc:	f836 3b02 	ldrh.w	r3, [r6], #2
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c6:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80054c8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80054cc:	b292      	uxth	r2, r2
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d1de      	bne.n	8005490 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d2:	4643      	mov	r3, r8
 80054d4:	2200      	movs	r2, #0
 80054d6:	2140      	movs	r1, #64	; 0x40
 80054d8:	4620      	mov	r0, r4
 80054da:	9700      	str	r7, [sp, #0]
 80054dc:	f7ff ff74 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 80054e0:	b978      	cbnz	r0, 8005502 <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 80054e2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80054e4:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->gState = HAL_UART_STATE_READY;
 80054e8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
}
 80054ec:	b002      	add	sp, #8
 80054ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80054f2:	2001      	movs	r0, #1
}
 80054f4:	b002      	add	sp, #8
 80054f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80054fa:	2002      	movs	r0, #2
}
 80054fc:	b002      	add	sp, #8
 80054fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8005502:	2003      	movs	r0, #3
}
 8005504:	b002      	add	sp, #8
 8005506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800550a:	bf00      	nop

0800550c <UART_CheckIdleState>:
{
 800550c:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	2600      	movs	r6, #0
{
 8005510:	4604      	mov	r4, r0
 8005512:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005516:	f7fb f8f3 	bl	8000700 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800551c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	0712      	lsls	r2, r2, #28
 8005522:	d40d      	bmi.n	8005540 <UART_CheckIdleState+0x34>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	075b      	lsls	r3, r3, #29
 8005528:	d419      	bmi.n	800555e <UART_CheckIdleState+0x52>
  __HAL_UNLOCK(huart);
 800552a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800552c:	2220      	movs	r2, #32
  return HAL_OK;
 800552e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005530:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8005534:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005538:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
}
 800553c:	b002      	add	sp, #8
 800553e:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005540:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8005544:	4632      	mov	r2, r6
 8005546:	462b      	mov	r3, r5
 8005548:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800554c:	9000      	str	r0, [sp, #0]
 800554e:	4620      	mov	r0, r4
 8005550:	f7ff ff3a 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 8005554:	b978      	cbnz	r0, 8005576 <UART_CheckIdleState+0x6a>
 8005556:	6823      	ldr	r3, [r4, #0]
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	075b      	lsls	r3, r3, #29
 800555c:	d5e5      	bpl.n	800552a <UART_CheckIdleState+0x1e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800555e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8005562:	462b      	mov	r3, r5
 8005564:	2200      	movs	r2, #0
 8005566:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800556a:	9000      	str	r0, [sp, #0]
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff ff2b 	bl	80053c8 <UART_WaitOnFlagUntilTimeout>
 8005572:	2800      	cmp	r0, #0
 8005574:	d0d9      	beq.n	800552a <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 8005576:	2003      	movs	r0, #3
}
 8005578:	b002      	add	sp, #8
 800557a:	bd70      	pop	{r4, r5, r6, pc}

0800557c <HAL_UART_Init>:
  if(huart == NULL)
 800557c:	b390      	cbz	r0, 80055e4 <HAL_UART_Init+0x68>
{
 800557e:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8005580:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8005584:	4604      	mov	r4, r0
 8005586:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800558a:	b333      	cbz	r3, 80055da <HAL_UART_Init+0x5e>
  __HAL_UART_DISABLE(huart);
 800558c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800558e:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005590:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005592:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800559e:	f7ff fb1f 	bl	8004be0 <UART_SetConfig>
 80055a2:	2801      	cmp	r0, #1
 80055a4:	d017      	beq.n	80055d6 <HAL_UART_Init+0x5a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055a8:	b98b      	cbnz	r3, 80055ce <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055aa:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80055ac:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
}
 80055c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80055c8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80055ca:	f7ff bf9f 	b.w	800550c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7ff fea2 	bl	8005318 <UART_AdvFeatureConfig>
 80055d4:	e7e9      	b.n	80055aa <HAL_UART_Init+0x2e>
}
 80055d6:	2001      	movs	r0, #1
 80055d8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80055da:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80055de:	f001 fcdb 	bl	8006f98 <HAL_UART_MspInit>
 80055e2:	e7d3      	b.n	800558c <HAL_UART_Init+0x10>
}
 80055e4:	2001      	movs	r0, #1
 80055e6:	4770      	bx	lr

080055e8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop

080055ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80055ec:	b530      	push	{r4, r5, lr}
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 80055ee:	4822      	ldr	r0, [pc, #136]	; (8005678 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80055f0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
  hadc1.Instance = ADC1;
 80055f4:	4c21      	ldr	r4, [pc, #132]	; (800567c <MX_ADC1_Init+0x90>)
  ADC_MultiModeTypeDef multimode = {0};
 80055f6:	2300      	movs	r3, #0
{
 80055f8:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055fa:	2104      	movs	r1, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80055fc:	8283      	strh	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.BoostMode = DISABLE;
 80055fe:	8703      	strh	r3, [r0, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005600:	6101      	str	r1, [r0, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8005602:	6083      	str	r3, [r0, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8005604:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005606:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005608:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800560a:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 800560c:	e9c0 4200 	strd	r4, r2, [r0]
  hadc1.Init.NbrOfConversion = 1;
 8005610:	2201      	movs	r2, #1
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005612:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005616:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 800561a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800561e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005622:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005626:	e9cd 3308 	strd	r3, r3, [sp, #32]
  hadc1.Init.NbrOfConversion = 1;
 800562a:	6182      	str	r2, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800562c:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800562e:	f7fb f87f 	bl	8000730 <HAL_ADC_Init>
 8005632:	b9b8      	cbnz	r0, 8005664 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
  }
  /**Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005634:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005636:	4669      	mov	r1, sp
 8005638:	480f      	ldr	r0, [pc, #60]	; (8005678 <MX_ADC1_Init+0x8c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800563a:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800563c:	f7fb fdf2 	bl	8001224 <HAL_ADCEx_MultiModeConfigChannel>
 8005640:	b9b8      	cbnz	r0, 8005672 <MX_ADC1_Init+0x86>
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005642:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_5;
 8005644:	2505      	movs	r5, #5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005646:	2401      	movs	r4, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8005648:	2206      	movs	r2, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800564a:	a903      	add	r1, sp, #12
 800564c:	480a      	ldr	r0, [pc, #40]	; (8005678 <MX_ADC1_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800564e:	e9cd 5403 	strd	r5, r4, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005652:	e9cd 2305 	strd	r2, r3, [sp, #20]
  sConfig.Offset = 0;
 8005656:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800565a:	f7fb f9dd 	bl	8000a18 <HAL_ADC_ConfigChannel>
 800565e:	b920      	cbnz	r0, 800566a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
  }

}
 8005660:	b00b      	add	sp, #44	; 0x2c
 8005662:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8005664:	f001 f9b2 	bl	80069cc <Error_Handler>
 8005668:	e7e4      	b.n	8005634 <MX_ADC1_Init+0x48>
    Error_Handler();
 800566a:	f001 f9af 	bl	80069cc <Error_Handler>
}
 800566e:	b00b      	add	sp, #44	; 0x2c
 8005670:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8005672:	f001 f9ab 	bl	80069cc <Error_Handler>
 8005676:	e7e4      	b.n	8005642 <MX_ADC1_Init+0x56>
 8005678:	2001221c 	.word	0x2001221c
 800567c:	40022000 	.word	0x40022000

08005680 <MX_ADC2_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc2.Instance = ADC2;
 8005680:	481c      	ldr	r0, [pc, #112]	; (80056f4 <MX_ADC2_Init+0x74>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8005682:	2300      	movs	r3, #0
  hadc2.Instance = ADC2;
 8005684:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <MX_ADC2_Init+0x78>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005686:	2104      	movs	r1, #4
{
 8005688:	b530      	push	{r4, r5, lr}
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 800568a:	f44f 14c0 	mov.w	r4, #1572864	; 0x180000
{
 800568e:	b089      	sub	sp, #36	; 0x24
  hadc2.Instance = ADC2;
 8005690:	6002      	str	r2, [r0, #0]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 8005692:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005694:	8283      	strh	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc2.Init.BoostMode = DISABLE;
 8005696:	8703      	strh	r3, [r0, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8005698:	6044      	str	r4, [r0, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800569a:	6101      	str	r1, [r0, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800569c:	6083      	str	r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800569e:	9301      	str	r3, [sp, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80056a0:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80056a2:	7703      	strb	r3, [r0, #28]
  hadc2.Init.NbrOfConversion = 1;
 80056a4:	6182      	str	r2, [r0, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80056a6:	6242      	str	r2, [r0, #36]	; 0x24
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80056a8:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80056ac:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80056b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80056b8:	e9cd 3306 	strd	r3, r3, [sp, #24]
  hadc2.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80056bc:	f7fb f838 	bl	8000730 <HAL_ADC_Init>
 80056c0:	b980      	cbnz	r0, 80056e4 <MX_ADC2_Init+0x64>
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80056c2:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_11;
 80056c4:	250b      	movs	r5, #11
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80056c6:	2401      	movs	r4, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80056c8:	2202      	movs	r2, #2
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056ca:	a901      	add	r1, sp, #4
 80056cc:	4809      	ldr	r0, [pc, #36]	; (80056f4 <MX_ADC2_Init+0x74>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80056ce:	e9cd 5401 	strd	r5, r4, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80056d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sConfig.Offset = 0;
 80056d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056da:	f7fb f99d 	bl	8000a18 <HAL_ADC_ConfigChannel>
 80056de:	b920      	cbnz	r0, 80056ea <MX_ADC2_Init+0x6a>
  {
    Error_Handler();
  }

}
 80056e0:	b009      	add	sp, #36	; 0x24
 80056e2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80056e4:	f001 f972 	bl	80069cc <Error_Handler>
 80056e8:	e7eb      	b.n	80056c2 <MX_ADC2_Init+0x42>
    Error_Handler();
 80056ea:	f001 f96f 	bl	80069cc <Error_Handler>
}
 80056ee:	b009      	add	sp, #36	; 0x24
 80056f0:	bd30      	pop	{r4, r5, pc}
 80056f2:	bf00      	nop
 80056f4:	200121b8 	.word	0x200121b8
 80056f8:	40022100 	.word	0x40022100

080056fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 80056fc:	4934      	ldr	r1, [pc, #208]	; (80057d0 <HAL_ADC_MspInit+0xd4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056fe:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8005700:	6802      	ldr	r2, [r0, #0]
{
 8005702:	b570      	push	{r4, r5, r6, lr}
  if(adcHandle->Instance==ADC1)
 8005704:	428a      	cmp	r2, r1
{
 8005706:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005708:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800570c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005710:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8005712:	d023      	beq.n	800575c <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8005714:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <HAL_ADC_MspInit+0xd8>)
 8005716:	429a      	cmp	r2, r3
 8005718:	d001      	beq.n	800571e <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800571a:	b00a      	add	sp, #40	; 0x28
 800571c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800571e:	4a2e      	ldr	r2, [pc, #184]	; (80057d8 <HAL_ADC_MspInit+0xdc>)
 8005720:	6813      	ldr	r3, [r2, #0]
 8005722:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005724:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005726:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005728:	d043      	beq.n	80057b2 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800572a:	4b2c      	ldr	r3, [pc, #176]	; (80057dc <HAL_ADC_MspInit+0xe0>)
    GPIO_InitStruct.Pin = CCD_OS_Pin;
 800572c:	2602      	movs	r6, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800572e:	2503      	movs	r5, #3
    HAL_GPIO_Init(CCD_OS_GPIO_Port, &GPIO_InitStruct);
 8005730:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005732:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005736:	2400      	movs	r4, #0
    HAL_GPIO_Init(CCD_OS_GPIO_Port, &GPIO_InitStruct);
 8005738:	4829      	ldr	r0, [pc, #164]	; (80057e0 <HAL_ADC_MspInit+0xe4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800573a:	f042 0204 	orr.w	r2, r2, #4
 800573e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = CCD_OS_Pin;
 8005746:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	9304      	str	r3, [sp, #16]
 800574e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(CCD_OS_GPIO_Port, &GPIO_InitStruct);
 8005754:	f7fb ff84 	bl	8001660 <HAL_GPIO_Init>
}
 8005758:	b00a      	add	sp, #40	; 0x28
 800575a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800575c:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <HAL_ADC_MspInit+0xdc>)
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005762:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005764:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005766:	d016      	beq.n	8005796 <HAL_ADC_MspInit+0x9a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005768:	4b1c      	ldr	r3, [pc, #112]	; (80057dc <HAL_ADC_MspInit+0xe0>)
    GPIO_InitStruct.Pin = I_LED_Pin;
 800576a:	2602      	movs	r6, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800576c:	2503      	movs	r5, #3
    HAL_GPIO_Init(I_LED_GPIO_Port, &GPIO_InitStruct);
 800576e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005770:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005774:	2400      	movs	r4, #0
    HAL_GPIO_Init(I_LED_GPIO_Port, &GPIO_InitStruct);
 8005776:	481b      	ldr	r0, [pc, #108]	; (80057e4 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005778:	4332      	orrs	r2, r6
 800577a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800577e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = I_LED_Pin;
 8005782:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005784:	4033      	ands	r3, r6
 8005786:	9302      	str	r3, [sp, #8]
 8005788:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578a:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(I_LED_GPIO_Port, &GPIO_InitStruct);
 800578e:	f7fb ff67 	bl	8001660 <HAL_GPIO_Init>
}
 8005792:	b00a      	add	sp, #40	; 0x28
 8005794:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005796:	4b11      	ldr	r3, [pc, #68]	; (80057dc <HAL_ADC_MspInit+0xe0>)
 8005798:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800579c:	f042 0220 	orr.w	r2, r2, #32
 80057a0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80057a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	e7da      	b.n	8005768 <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80057b2:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <HAL_ADC_MspInit+0xe0>)
 80057b4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80057b8:	f042 0220 	orr.w	r2, r2, #32
 80057bc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80057c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	9303      	str	r3, [sp, #12]
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	e7ad      	b.n	800572a <HAL_ADC_MspInit+0x2e>
 80057ce:	bf00      	nop
 80057d0:	40022000 	.word	0x40022000
 80057d4:	40022100 	.word	0x40022100
 80057d8:	20012188 	.word	0x20012188
 80057dc:	58024400 	.word	0x58024400
 80057e0:	58020800 	.word	0x58020800
 80057e4:	58020400 	.word	0x58020400

080057e8 <std_dev>:

void std_dev(uint32_t *arr, const uint16_t len) //std_dev dla serii, nadpisuje
{
	uint32_t sum=0;

	for(uint16_t j=NUM_PIX-1; j>len; j--)
 80057e8:	f640 6372 	movw	r3, #3698	; 0xe72
 80057ec:	4299      	cmp	r1, r3
 80057ee:	d84a      	bhi.n	8005886 <std_dev+0x9e>
{
 80057f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057f4:	f640 6574 	movw	r5, #3700	; 0xe74
 80057f8:	f643 17d0 	movw	r7, #14800	; 0x39d0
 80057fc:	4681      	mov	r9, r0
	for(uint16_t j=NUM_PIX-1; j>len; j--)
 80057fe:	f640 6673 	movw	r6, #3699	; 0xe73
 8005802:	1a6d      	subs	r5, r5, r1
 8005804:	f100 0804 	add.w	r8, r0, #4
 8005808:	4407      	add	r7, r0
 800580a:	b2ad      	uxth	r5, r5
{
 800580c:	ed2d 8b02 	vpush	{d8}
 8005810:	b083      	sub	sp, #12
	{
		sum=0;

		for(uint16_t i=j-len+1; i<=j; i++)
 8005812:	42b5      	cmp	r5, r6
 8005814:	d835      	bhi.n	8005882 <std_dev+0x9a>
 8005816:	eba6 0c05 	sub.w	ip, r6, r5
 800581a:	eb09 0485 	add.w	r4, r9, r5, lsl #2
		sum=0;
 800581e:	2300      	movs	r3, #0
 8005820:	fa15 fc8c 	uxtah	ip, r5, ip
		for(uint16_t i=j-len+1; i<=j; i++)
 8005824:	4622      	mov	r2, r4
 8005826:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
			sum+=arr[i];
 800582a:	f852 0b04 	ldr.w	r0, [r2], #4
		for(uint16_t i=j-len+1; i<=j; i++)
 800582e:	4594      	cmp	ip, r2
			sum+=arr[i];
 8005830:	4403      	add	r3, r0
		for(uint16_t i=j-len+1; i<=j; i++)
 8005832:	d1fa      	bne.n	800582a <std_dev+0x42>

		uint32_t avg=sum/len;
 8005834:	f04f 0e00 	mov.w	lr, #0
 8005838:	fbb3 f2f1 	udiv	r2, r3, r1
		sum=0;

		for(uint16_t i=j-len+1; i<=j; i++)
		{
			sum+=(arr[i]-avg)*(arr[i]-avg);
 800583c:	f854 3b04 	ldr.w	r3, [r4], #4
 8005840:	1a9b      	subs	r3, r3, r2
		for(uint16_t i=j-len+1; i<=j; i++)
 8005842:	45a4      	cmp	ip, r4
			sum+=(arr[i]-avg)*(arr[i]-avg);
 8005844:	fb03 ee03 	mla	lr, r3, r3, lr
		for(uint16_t i=j-len+1; i<=j; i++)
 8005848:	d1f8      	bne.n	800583c <std_dev+0x54>
		}

		arr[j]=(uint32_t)sqrt(sum);
 800584a:	ee07 ea90 	vmov	s15, lr
 800584e:	eeb8 0b67 	vcvt.f64.u32	d0, s15
 8005852:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005856:	eeb1 8bc0 	vsqrt.f64	d8, d0
 800585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585e:	d413      	bmi.n	8005888 <std_dev+0xa0>
 8005860:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8005864:	ee17 3a90 	vmov	r3, s15
	for(uint16_t j=NUM_PIX-1; j>len; j--)
 8005868:	3e01      	subs	r6, #1
 800586a:	3d01      	subs	r5, #1
		arr[j]=(uint32_t)sqrt(sum);
 800586c:	f847 3d04 	str.w	r3, [r7, #-4]!
	for(uint16_t j=NUM_PIX-1; j>len; j--)
 8005870:	b2b6      	uxth	r6, r6
 8005872:	b2ad      	uxth	r5, r5
 8005874:	42b1      	cmp	r1, r6
 8005876:	d1cc      	bne.n	8005812 <std_dev+0x2a>
	}
}
 8005878:	b003      	add	sp, #12
 800587a:	ecbd 8b02 	vpop	{d8}
 800587e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for(uint16_t i=j-len+1; i<=j; i++)
 8005882:	2300      	movs	r3, #0
 8005884:	e7f0      	b.n	8005868 <std_dev+0x80>
 8005886:	4770      	bx	lr
 8005888:	9101      	str	r1, [sp, #4]
		arr[j]=(uint32_t)sqrt(sum);
 800588a:	f004 fd1d 	bl	800a2c8 <sqrt>
 800588e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8005892:	9901      	ldr	r1, [sp, #4]
 8005894:	ee17 3a90 	vmov	r3, s15
 8005898:	e7e6      	b.n	8005868 <std_dev+0x80>
 800589a:	bf00      	nop

0800589c <fir>:

void fir(uint32_t *inp, uint32_t *outp, const uint8_t len)
{
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	460e      	mov	r6, r1
 80058a0:	4615      	mov	r5, r2
	memset((uint8_t*)outp, 0, 4*NUM_PIX);
 80058a2:	2100      	movs	r1, #0
 80058a4:	f643 12d0 	movw	r2, #14800	; 0x39d0
{
 80058a8:	4604      	mov	r4, r0
	memset((uint8_t*)outp, 0, 4*NUM_PIX);
 80058aa:	4630      	mov	r0, r6
 80058ac:	f001 fc58 	bl	8007160 <memset>

	for(uint16_t i=len-1; i<REAL_PIX_NUM; i++)
 80058b0:	1e6b      	subs	r3, r5, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f5b2 6f64 	cmp.w	r2, #3648	; 0xe40
 80058b8:	d21b      	bcs.n	80058f2 <fir+0x56>
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	3c04      	subs	r4, #4
 80058be:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80058c2:	009f      	lsls	r7, r3, #2
 80058c4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80058c8:	3704      	adds	r7, #4
 80058ca:	eba4 0483 	sub.w	r4, r4, r3, lsl #2
	{
		uint32_t tmp=0;
		for(uint8_t j=0; j<len; j++)
 80058ce:	b18d      	cbz	r5, 80058f4 <fir+0x58>
 80058d0:	193b      	adds	r3, r7, r4
		uint32_t tmp=0;
 80058d2:	2100      	movs	r1, #0
			tmp+=inp[i-j];
 80058d4:	f853 0904 	ldr.w	r0, [r3], #-4
		for(uint8_t j=0; j<len; j++)
 80058d8:	42a3      	cmp	r3, r4
			tmp+=inp[i-j];
 80058da:	4401      	add	r1, r0
		for(uint8_t j=0; j<len; j++)
 80058dc:	d1fa      	bne.n	80058d4 <fir+0x38>
 80058de:	fbb1 f1f5 	udiv	r1, r1, r5
		outp[i]=tmp/len;
 80058e2:	3201      	adds	r2, #1
 80058e4:	3404      	adds	r4, #4
 80058e6:	f846 1b04 	str.w	r1, [r6], #4
	for(uint16_t i=len-1; i<REAL_PIX_NUM; i++)
 80058ea:	b293      	uxth	r3, r2
 80058ec:	f5b3 6f64 	cmp.w	r3, #3648	; 0xe40
 80058f0:	d3ed      	bcc.n	80058ce <fir+0x32>
	}
}
 80058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for(uint8_t j=0; j<len; j++)
 80058f4:	4629      	mov	r1, r5
 80058f6:	e7f4      	b.n	80058e2 <fir+0x46>

080058f8 <fir16>:

void fir16(uint16_t *inp, uint16_t *outp, const uint8_t len)
{
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	460e      	mov	r6, r1
 80058fc:	4615      	mov	r5, r2
	memset((uint8_t*)outp, 0, 2*NUM_PIX);
 80058fe:	2100      	movs	r1, #0
 8005900:	f641 42e8 	movw	r2, #7400	; 0x1ce8
{
 8005904:	4604      	mov	r4, r0
	memset((uint8_t*)outp, 0, 2*NUM_PIX);
 8005906:	4630      	mov	r0, r6
 8005908:	f001 fc2a 	bl	8007160 <memset>

	for(uint16_t i=len-1; i<REAL_PIX_NUM; i++)
 800590c:	1e6b      	subs	r3, r5, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	f5b2 6f64 	cmp.w	r2, #3648	; 0xe40
 8005914:	d21c      	bcs.n	8005950 <fir16+0x58>
 8005916:	b2db      	uxtb	r3, r3
 8005918:	3c02      	subs	r4, #2
 800591a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 800591e:	005f      	lsls	r7, r3, #1
 8005920:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8005924:	3702      	adds	r7, #2
 8005926:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
	{
		uint32_t tmp=0;
		for(uint8_t j=0; j<len; j++)
 800592a:	b195      	cbz	r5, 8005952 <fir16+0x5a>
 800592c:	193b      	adds	r3, r7, r4
		uint32_t tmp=0;
 800592e:	2100      	movs	r1, #0
			tmp+=inp[i-j];
 8005930:	f833 0902 	ldrh.w	r0, [r3], #-2
		for(uint8_t j=0; j<len; j++)
 8005934:	42a3      	cmp	r3, r4
			tmp+=inp[i-j];
 8005936:	4401      	add	r1, r0
		for(uint8_t j=0; j<len; j++)
 8005938:	d1fa      	bne.n	8005930 <fir16+0x38>
 800593a:	fbb1 f1f5 	udiv	r1, r1, r5
 800593e:	b289      	uxth	r1, r1
		outp[i]=tmp/len;
 8005940:	3201      	adds	r2, #1
 8005942:	3402      	adds	r4, #2
 8005944:	f826 1b02 	strh.w	r1, [r6], #2
	for(uint16_t i=len-1; i<REAL_PIX_NUM; i++)
 8005948:	b293      	uxth	r3, r2
 800594a:	f5b3 6f64 	cmp.w	r3, #3648	; 0xe40
 800594e:	d3ec      	bcc.n	800592a <fir16+0x32>
	}
}
 8005950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for(uint8_t j=0; j<len; j++)
 8005952:	4629      	mov	r1, r5
 8005954:	e7f4      	b.n	8005940 <fir16+0x48>
 8005956:	bf00      	nop

08005958 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8005958:	b500      	push	{lr}
 800595a:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 800595c:	2224      	movs	r2, #36	; 0x24
 800595e:	2100      	movs	r1, #0
 8005960:	a801      	add	r0, sp, #4
 8005962:	f001 fbfd 	bl	8007160 <memset>

  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8005966:	480e      	ldr	r0, [pc, #56]	; (80059a0 <MX_DAC1_Init+0x48>)
 8005968:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <MX_DAC1_Init+0x4c>)
 800596a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800596c:	f7fb fd46 	bl	80013fc <HAL_DAC_Init>
 8005970:	b970      	cbnz	r0, 8005990 <MX_DAC1_Init+0x38>
  {
    Error_Handler();
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005972:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8005974:	2302      	movs	r3, #2
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005976:	a901      	add	r1, sp, #4
 8005978:	4809      	ldr	r0, [pc, #36]	; (80059a0 <MX_DAC1_Init+0x48>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800597a:	9201      	str	r2, [sp, #4]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800597c:	9205      	str	r2, [sp, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800597e:	9302      	str	r3, [sp, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005980:	e9cd 2203 	strd	r2, r2, [sp, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005984:	f7fb fd94 	bl	80014b0 <HAL_DAC_ConfigChannel>
 8005988:	b928      	cbnz	r0, 8005996 <MX_DAC1_Init+0x3e>
  {
    Error_Handler();
  }

}
 800598a:	b00b      	add	sp, #44	; 0x2c
 800598c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005990:	f001 f81c 	bl	80069cc <Error_Handler>
 8005994:	e7ed      	b.n	8005972 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8005996:	f001 f819 	bl	80069cc <Error_Handler>
}
 800599a:	b00b      	add	sp, #44	; 0x2c
 800599c:	f85d fb04 	ldr.w	pc, [sp], #4
 80059a0:	20012280 	.word	0x20012280
 80059a4:	40007400 	.word	0x40007400

080059a8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 80059a8:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <HAL_DAC_MspInit+0x64>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059aa:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 80059ac:	6801      	ldr	r1, [r0, #0]
{
 80059ae:	b570      	push	{r4, r5, r6, lr}
  if(dacHandle->Instance==DAC1)
 80059b0:	4291      	cmp	r1, r2
{
 80059b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80059b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80059bc:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 80059be:	d001      	beq.n	80059c4 <HAL_DAC_MspInit+0x1c>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80059c0:	b008      	add	sp, #32
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80059c4:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <HAL_DAC_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80059c6:	2610      	movs	r6, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059ca:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 80059cc:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d0:	4810      	ldr	r0, [pc, #64]	; (8005a14 <HAL_DAC_MspInit+0x6c>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80059d2:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80059d6:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
 80059da:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
 80059de:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 80059e2:	9401      	str	r4, [sp, #4]
 80059e4:	9c01      	ldr	r4, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e6:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 80059ea:	f044 0401 	orr.w	r4, r4, #1
 80059ee:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 80059f2:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f6:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059f8:	f002 0201 	and.w	r2, r2, #1
 80059fc:	9202      	str	r2, [sp, #8]
 80059fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a00:	e9cd 6503 	strd	r6, r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a04:	f7fb fe2c 	bl	8001660 <HAL_GPIO_Init>
}
 8005a08:	b008      	add	sp, #32
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	40007400 	.word	0x40007400
 8005a10:	58024400 	.word	0x58024400
 8005a14:	58020000 	.word	0x58020000

08005a18 <DS_CheckCksum>:
#include "ds.h"
#include "ds_crc.h"
#include "usart.h"

uint8_t DS_CheckCksum(uint8_t *inp, uint8_t numBytes)
{
 8005a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1a:	2700      	movs	r7, #0
 8005a1c:	b085      	sub	sp, #20
		local[byte]=0;

		for(uint8_t bit=0; bit<8; bit++)
		{
			if(inp[byte*8+bit]==0xFF)
				local[byte]|=(1<<bit);
 8005a1e:	f04f 0c01 	mov.w	ip, #1
 8005a22:	463a      	mov	r2, r7
		local[byte]=0;
 8005a24:	46be      	mov	lr, r7
 8005a26:	ab04      	add	r3, sp, #16
 8005a28:	189e      	adds	r6, r3, r2
 8005a2a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
			if(inp[byte*8+bit]==0xFF)
 8005a2e:	2300      	movs	r3, #0
		local[byte]=0;
 8005a30:	f806 ec0c 	strb.w	lr, [r6, #-12]
			if(inp[byte*8+bit]==0xFF)
 8005a34:	f812 4b01 	ldrb.w	r4, [r2], #1
 8005a38:	2cff      	cmp	r4, #255	; 0xff
 8005a3a:	d106      	bne.n	8005a4a <DS_CheckCksum+0x32>
				local[byte]|=(1<<bit);
 8005a3c:	f816 5c0c 	ldrb.w	r5, [r6, #-12]
 8005a40:	fa0c f403 	lsl.w	r4, ip, r3
 8005a44:	432c      	orrs	r4, r5
 8005a46:	f806 4c0c 	strb.w	r4, [r6, #-12]
 8005a4a:	3301      	adds	r3, #1
		for(uint8_t bit=0; bit<8; bit++)
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d1f1      	bne.n	8005a34 <DS_CheckCksum+0x1c>
	for(uint8_t byte=0; byte<numBytes+1; byte++)
 8005a50:	3701      	adds	r7, #1
 8005a52:	b2fa      	uxtb	r2, r7
 8005a54:	4291      	cmp	r1, r2
 8005a56:	d2e6      	bcs.n	8005a26 <DS_CheckCksum+0xe>
		}
	}

	for(uint8_t i=0; i<numBytes-1; i++)
 8005a58:	1e4c      	subs	r4, r1, #1
 8005a5a:	2c00      	cmp	r4, #0
 8005a5c:	dd18      	ble.n	8005a90 <DS_CheckCksum+0x78>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4d0c      	ldr	r5, [pc, #48]	; (8005a94 <DS_CheckCksum+0x7c>)
	uint8_t crc=0;
 8005a62:	461a      	mov	r2, r3
	for(uint8_t i=0; i<numBytes-1; i++)
 8005a64:	4619      	mov	r1, r3
		crc = CodeCRC[crc^local[i]];
 8005a66:	a804      	add	r0, sp, #16
	for(uint8_t i=0; i<numBytes-1; i++)
 8005a68:	3301      	adds	r3, #1
		crc = CodeCRC[crc^local[i]];
 8005a6a:	4401      	add	r1, r0
	for(uint8_t i=0; i<numBytes-1; i++)
 8005a6c:	b2db      	uxtb	r3, r3
		crc = CodeCRC[crc^local[i]];
 8005a6e:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
	for(uint8_t i=0; i<numBytes-1; i++)
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	4619      	mov	r1, r3
		crc = CodeCRC[crc^local[i]];
 8005a76:	ea82 0200 	eor.w	r2, r2, r0
 8005a7a:	5caa      	ldrb	r2, [r5, r2]
	for(uint8_t i=0; i<numBytes-1; i++)
 8005a7c:	dbf3      	blt.n	8005a66 <DS_CheckCksum+0x4e>

	if(crc==local[numBytes-1])
 8005a7e:	ab04      	add	r3, sp, #16
 8005a80:	441c      	add	r4, r3
 8005a82:	f814 0c0c 	ldrb.w	r0, [r4, #-12]
		return 0;
	else
		return 1;
}
 8005a86:	1a80      	subs	r0, r0, r2
 8005a88:	bf18      	it	ne
 8005a8a:	2001      	movne	r0, #1
 8005a8c:	b005      	add	sp, #20
 8005a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t crc=0;
 8005a90:	2200      	movs	r2, #0
 8005a92:	e7f4      	b.n	8005a7e <DS_CheckCksum+0x66>
 8005a94:	0800b274 	.word	0x0800b274

08005a98 <DS_Reset>:

void DS_Reset(void)
{
 8005a98:	b510      	push	{r4, lr}
	uint8_t val=0xF0;
	huart4.Init.BaudRate=9600;
 8005a9a:	4c0a      	ldr	r4, [pc, #40]	; (8005ac4 <DS_Reset+0x2c>)
{
 8005a9c:	b082      	sub	sp, #8
	huart4.Init.BaudRate=9600;
 8005a9e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
	uint8_t val=0xF0;
 8005aa2:	23f0      	movs	r3, #240	; 0xf0
	HAL_UART_Init(&huart4);
 8005aa4:	4620      	mov	r0, r4
	huart4.Init.BaudRate=9600;
 8005aa6:	6062      	str	r2, [r4, #4]
	uint8_t val=0xF0;
 8005aa8:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_UART_Init(&huart4);
 8005aac:	f7ff fd66 	bl	800557c <HAL_UART_Init>
	//HAL_UART_Receive_DMA(&huart4, &uart_rcv_val, 1);
	HAL_UART_Transmit(&huart4, &val, 1, 1);
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f10d 0107 	add.w	r1, sp, #7
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f7ff fcb7 	bl	800542c <HAL_UART_Transmit>
}
 8005abe:	b002      	add	sp, #8
 8005ac0:	bd10      	pop	{r4, pc}
 8005ac2:	bf00      	nop
 8005ac4:	2001b748 	.word	0x2001b748

08005ac8 <DS_Write>:

void DS_Write(uint8_t val)
{
 8005ac8:	b530      	push	{r4, r5, lr}
 8005aca:	b083      	sub	sp, #12
 8005acc:	2400      	movs	r4, #0
 8005ace:	f10d 32ff 	add.w	r2, sp, #4294967295
	uint8_t ds_snd[8];

	for(uint8_t i=0; i<8; i++)
		if((val>>i)&1)
 8005ad2:	fa40 f304 	asr.w	r3, r0, r4
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	f343 0300 	sbfx	r3, r3, #0, #1
	for(uint8_t i=0; i<8; i++)
 8005adc:	2c08      	cmp	r4, #8
 8005ade:	f802 3f01 	strb.w	r3, [r2, #1]!
 8005ae2:	d1f6      	bne.n	8005ad2 <DS_Write+0xa>
			ds_snd[i]=0xFF;
		else
			ds_snd[i]=0;

	huart4.Init.BaudRate=115200;
 8005ae4:	4d07      	ldr	r5, [pc, #28]	; (8005b04 <DS_Write+0x3c>)
 8005ae6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	HAL_UART_Init(&huart4);
 8005aea:	4628      	mov	r0, r5
	huart4.Init.BaudRate=115200;
 8005aec:	606b      	str	r3, [r5, #4]
	HAL_UART_Init(&huart4);
 8005aee:	f7ff fd45 	bl	800557c <HAL_UART_Init>
	HAL_UART_Transmit(&huart4, ds_snd, 8, 5);
 8005af2:	4622      	mov	r2, r4
 8005af4:	2305      	movs	r3, #5
 8005af6:	4669      	mov	r1, sp
 8005af8:	4628      	mov	r0, r5
 8005afa:	f7ff fc97 	bl	800542c <HAL_UART_Transmit>
}
 8005afe:	b003      	add	sp, #12
 8005b00:	bd30      	pop	{r4, r5, pc}
 8005b02:	bf00      	nop
 8005b04:	2001b748 	.word	0x2001b748

08005b08 <DS_Read>:

void DS_Read(uint8_t num_bits, uint8_t *dest)
{
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	b094      	sub	sp, #80	; 0x50
 8005b0c:	ae02      	add	r6, sp, #8
	uint8_t ds_snd[9*8];

	for(uint8_t i=0; i<num_bits; i++)
 8005b0e:	b150      	cbz	r0, 8005b26 <DS_Read+0x1e>
 8005b10:	1e44      	subs	r4, r0, #1
 8005b12:	f10d 0209 	add.w	r2, sp, #9
		ds_snd[i]=0xFF;
 8005b16:	25ff      	movs	r5, #255	; 0xff
 8005b18:	4633      	mov	r3, r6
 8005b1a:	fa52 f484 	uxtab	r4, r2, r4
 8005b1e:	f803 5b01 	strb.w	r5, [r3], #1
	for(uint8_t i=0; i<num_bits; i++)
 8005b22:	42a3      	cmp	r3, r4
 8005b24:	d1fb      	bne.n	8005b1e <DS_Read+0x16>

	huart4.Init.BaudRate=115200;
 8005b26:	4c0d      	ldr	r4, [pc, #52]	; (8005b5c <DS_Read+0x54>)
 8005b28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	HAL_UART_Init(&huart4);
	HAL_UART_AbortReceive_IT(&huart4);
	HAL_UART_Receive_IT(&huart4, dest, num_bits);
 8005b2c:	b282      	uxth	r2, r0
 8005b2e:	9101      	str	r1, [sp, #4]
	HAL_UART_Init(&huart4);
 8005b30:	4620      	mov	r0, r4
	huart4.Init.BaudRate=115200;
 8005b32:	6063      	str	r3, [r4, #4]
	HAL_UART_Receive_IT(&huart4, dest, num_bits);
 8005b34:	9200      	str	r2, [sp, #0]
	HAL_UART_Init(&huart4);
 8005b36:	f7ff fd21 	bl	800557c <HAL_UART_Init>
	HAL_UART_AbortReceive_IT(&huart4);
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f7ff f808 	bl	8004b50 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&huart4, dest, num_bits);
 8005b40:	4620      	mov	r0, r4
 8005b42:	e9dd 2100 	ldrd	r2, r1, [sp]
 8005b46:	f7fe fe69 	bl	800481c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart4, ds_snd, num_bits, 10);
 8005b4a:	9a00      	ldr	r2, [sp, #0]
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	230a      	movs	r3, #10
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7ff fc6b 	bl	800542c <HAL_UART_Transmit>
}
 8005b56:	b014      	add	sp, #80	; 0x50
 8005b58:	bd70      	pop	{r4, r5, r6, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2001b748 	.word	0x2001b748

08005b60 <DS_GetTemp>:

float DS_GetTemp(void)
{
 8005b60:	b530      	push	{r4, r5, lr}
 8005b62:	b093      	sub	sp, #76	; 0x4c
	//HAL_Delay(1);
	DS_Write(0xBE);
	//HAL_Delay(1);
	DS_Read(9*8, local_ds);

	uint16_t temp=0;
 8005b64:	2400      	movs	r4, #0
	DS_Reset();
 8005b66:	f7ff ff97 	bl	8005a98 <DS_Reset>
	HAL_Delay(5);
 8005b6a:	2005      	movs	r0, #5
 8005b6c:	f7fa fdce 	bl	800070c <HAL_Delay>
	DS_Write(0xCC);
 8005b70:	20cc      	movs	r0, #204	; 0xcc
 8005b72:	f7ff ffa9 	bl	8005ac8 <DS_Write>
	DS_Write(0x44);
 8005b76:	2044      	movs	r0, #68	; 0x44
 8005b78:	f7ff ffa6 	bl	8005ac8 <DS_Write>
	DS_Read(9*8, local_ds);
 8005b7c:	466d      	mov	r5, sp
	DS_Reset();
 8005b7e:	f7ff ff8b 	bl	8005a98 <DS_Reset>
	HAL_Delay(5);
 8005b82:	2005      	movs	r0, #5
 8005b84:	f7fa fdc2 	bl	800070c <HAL_Delay>
	DS_Write(0xCC);
 8005b88:	20cc      	movs	r0, #204	; 0xcc
 8005b8a:	f7ff ff9d 	bl	8005ac8 <DS_Write>
	DS_Write(0xBE);
 8005b8e:	20be      	movs	r0, #190	; 0xbe
 8005b90:	f7ff ff9a 	bl	8005ac8 <DS_Write>
	DS_Read(9*8, local_ds);
 8005b94:	4629      	mov	r1, r5
 8005b96:	2048      	movs	r0, #72	; 0x48
 8005b98:	f7ff ffb6 	bl	8005b08 <DS_Read>
	for(uint8_t i=0; i<16; i++)
 8005b9c:	f10d 030f 	add.w	r3, sp, #15
	{
		temp<<=1;
		if(local_ds[15-i]==0xFF)
 8005ba0:	781a      	ldrb	r2, [r3, #0]
		temp<<=1;
 8005ba2:	0064      	lsls	r4, r4, #1
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3b01      	subs	r3, #1
		if(local_ds[15-i]==0xFF)
 8005ba8:	2aff      	cmp	r2, #255	; 0xff
		temp<<=1;
 8005baa:	b2a4      	uxth	r4, r4
			temp|=1;
 8005bac:	bf08      	it	eq
 8005bae:	f044 0401 	orreq.w	r4, r4, #1
	for(uint8_t i=0; i<16; i++)
 8005bb2:	42a8      	cmp	r0, r5
 8005bb4:	d1f4      	bne.n	8005ba0 <DS_GetTemp+0x40>
	}

	if(!DS_CheckCksum(local_ds, 9))
 8005bb6:	2109      	movs	r1, #9
 8005bb8:	f7ff ff2e 	bl	8005a18 <DS_CheckCksum>
 8005bbc:	b928      	cbnz	r0, 8005bca <DS_GetTemp+0x6a>
		return (float)temp/16.0;
 8005bbe:	ee00 4a10 	vmov	s0, r4
 8005bc2:	eebb 0ace 	vcvt.f32.u32	s0, s0, #4
	else
		return -2137.0;	//niedobrze :)
}
 8005bc6:	b013      	add	sp, #76	; 0x4c
 8005bc8:	bd30      	pop	{r4, r5, pc}
		return -2137.0;	//niedobrze :)
 8005bca:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005bd4 <DS_GetTemp+0x74>
}
 8005bce:	b013      	add	sp, #76	; 0x4c
 8005bd0:	bd30      	pop	{r4, r5, pc}
 8005bd2:	bf00      	nop
 8005bd4:	c5059000 	.word	0xc5059000

08005bd8 <eepromWriteByte>:

#include "eeprom.h"
#include "spi.h"

void eepromWriteByte(uint32_t addr, uint8_t val)
{
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	4603      	mov	r3, r0
 8005bdc:	b084      	sub	sp, #16
	uint8_t wren=0b00000110;
	uint8_t seq[5]={0b00000010, addr>>16, addr>>8, addr, val}; //WRITE, addr, data

	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005bde:	4c1b      	ldr	r4, [pc, #108]	; (8005c4c <eepromWriteByte+0x74>)
	uint8_t wren=0b00000110;
 8005be0:	2206      	movs	r2, #6
	uint8_t seq[5]={0b00000010, addr>>16, addr>>8, addr, val}; //WRITE, addr, data
 8005be2:	f88d 100c 	strb.w	r1, [sp, #12]
 8005be6:	0c19      	lsrs	r1, r3, #16
	HAL_SPI_Transmit(&hspi4, &wren, 1, 5);
 8005be8:	4d19      	ldr	r5, [pc, #100]	; (8005c50 <eepromWriteByte+0x78>)
	uint8_t seq[5]={0b00000010, addr>>16, addr>>8, addr, val}; //WRITE, addr, data
 8005bea:	ba5b      	rev16	r3, r3
 8005bec:	2602      	movs	r6, #2
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005bee:	4620      	mov	r0, r4
	uint8_t wren=0b00000110;
 8005bf0:	f88d 2007 	strb.w	r2, [sp, #7]
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005bf4:	2200      	movs	r2, #0
	uint8_t seq[5]={0b00000010, addr>>16, addr>>8, addr, val}; //WRITE, addr, data
 8005bf6:	f88d 1009 	strb.w	r1, [sp, #9]
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005bfa:	2110      	movs	r1, #16
	uint8_t seq[5]={0b00000010, addr>>16, addr>>8, addr, val}; //WRITE, addr, data
 8005bfc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8005c00:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005c04:	f7fb fe54 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, &wren, 1, 5);
 8005c08:	2305      	movs	r3, #5
 8005c0a:	f10d 0107 	add.w	r1, sp, #7
 8005c0e:	4628      	mov	r0, r5
 8005c10:	2201      	movs	r2, #1
 8005c12:	f7fd fb7b 	bl	800330c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 1);
 8005c16:	4620      	mov	r0, r4
 8005c18:	2201      	movs	r2, #1
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	f7fb fe48 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8005c20:	2005      	movs	r0, #5
 8005c22:	f7fa fd73 	bl	800070c <HAL_Delay>
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005c26:	4620      	mov	r0, r4
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2110      	movs	r1, #16
 8005c2c:	f7fb fe40 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, seq, 5, 5);
 8005c30:	2305      	movs	r3, #5
 8005c32:	a902      	add	r1, sp, #8
 8005c34:	4628      	mov	r0, r5
 8005c36:	461a      	mov	r2, r3
 8005c38:	f7fd fb68 	bl	800330c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 1);
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	2201      	movs	r2, #1
 8005c40:	2110      	movs	r1, #16
 8005c42:	f7fb fe35 	bl	80018b0 <HAL_GPIO_WritePin>
}
 8005c46:	b004      	add	sp, #16
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
 8005c4a:	bf00      	nop
 8005c4c:	58021000 	.word	0x58021000
 8005c50:	2001b580 	.word	0x2001b580

08005c54 <eepromReadByte>:

uint8_t eepromReadByte(uint32_t addr)
{
 8005c54:	b570      	push	{r4, r5, r6, lr}
	uint8_t tmp=0;
	uint8_t seq[4]={0b00000011, addr>>16, addr>>8, addr}; //READ, addr
 8005c56:	2103      	movs	r1, #3
{
 8005c58:	b082      	sub	sp, #8

	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005c5a:	4c14      	ldr	r4, [pc, #80]	; (8005cac <eepromReadByte+0x58>)
	uint8_t seq[4]={0b00000011, addr>>16, addr>>8, addr}; //READ, addr
 8005c5c:	ba43      	rev16	r3, r0
	uint8_t tmp=0;
 8005c5e:	2200      	movs	r2, #0
	uint8_t seq[4]={0b00000011, addr>>16, addr>>8, addr}; //READ, addr
 8005c60:	0c06      	lsrs	r6, r0, #16
 8005c62:	f88d 1004 	strb.w	r1, [sp, #4]
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005c66:	4620      	mov	r0, r4
 8005c68:	2110      	movs	r1, #16
	HAL_SPI_Transmit(&hspi4, seq, 4, 5);
 8005c6a:	4d11      	ldr	r5, [pc, #68]	; (8005cb0 <eepromReadByte+0x5c>)
	uint8_t tmp=0;
 8005c6c:	f88d 2003 	strb.w	r2, [sp, #3]
	uint8_t seq[4]={0b00000011, addr>>16, addr>>8, addr}; //READ, addr
 8005c70:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005c74:	f88d 6005 	strb.w	r6, [sp, #5]
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 0);
 8005c78:	f7fb fe1a 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, seq, 4, 5);
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	2305      	movs	r3, #5
 8005c82:	eb0d 0102 	add.w	r1, sp, r2
 8005c86:	f7fd fb41 	bl	800330c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi4, &tmp, 1, 5);
 8005c8a:	2305      	movs	r3, #5
 8005c8c:	f10d 0103 	add.w	r1, sp, #3
 8005c90:	4628      	mov	r0, r5
 8005c92:	2201      	movs	r2, #1
 8005c94:	f7fd fe3e 	bl	8003914 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, 1);
 8005c98:	4620      	mov	r0, r4
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	2110      	movs	r1, #16
 8005c9e:	f7fb fe07 	bl	80018b0 <HAL_GPIO_WritePin>

	return tmp;
}
 8005ca2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005ca6:	b002      	add	sp, #8
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	bf00      	nop
 8005cac:	58021000 	.word	0x58021000
 8005cb0:	2001b580 	.word	0x2001b580

08005cb4 <eepromWriteFloat>:

void eepromWriteFloat(uint32_t addr, float val)
{
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	4604      	mov	r4, r0
 8005cba:	1d06      	adds	r6, r0, #4
 8005cbc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005cc0:	ad03      	add	r5, sp, #12
	uint8_t f_b[4];

	memcpy((uint8_t*)f_b, (uint8_t*)&val, 4);
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	9303      	str	r3, [sp, #12]

	for(uint8_t i=0; i<4; i++)
	{
		eepromWriteByte(addr+i, f_b[i]);
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005ccc:	3401      	adds	r4, #1
 8005cce:	f7ff ff83 	bl	8005bd8 <eepromWriteByte>
		HAL_Delay(8);
 8005cd2:	2008      	movs	r0, #8
 8005cd4:	f7fa fd1a 	bl	800070c <HAL_Delay>
	for(uint8_t i=0; i<4; i++)
 8005cd8:	42b4      	cmp	r4, r6
 8005cda:	d1f4      	bne.n	8005cc6 <eepromWriteFloat+0x12>
	}
}
 8005cdc:	b004      	add	sp, #16
 8005cde:	bd70      	pop	{r4, r5, r6, pc}

08005ce0 <eepromReadFloat>:

float eepromReadFloat(uint32_t addr)
{
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	1d06      	adds	r6, r0, #4
 8005ce8:	ad01      	add	r5, sp, #4
	uint8_t f_b[4];
	float val;

	for(uint8_t i=0; i<4; i++)
		f_b[i]=eepromReadByte(addr+i);
 8005cea:	4620      	mov	r0, r4
 8005cec:	3401      	adds	r4, #1
 8005cee:	f7ff ffb1 	bl	8005c54 <eepromReadByte>
 8005cf2:	f805 0b01 	strb.w	r0, [r5], #1
	for(uint8_t i=0; i<4; i++)
 8005cf6:	42b4      	cmp	r4, r6
 8005cf8:	d1f7      	bne.n	8005cea <eepromReadFloat+0xa>

	memcpy((uint8_t*)&val, (uint8_t*)f_b, 4);

	return val;
}
 8005cfa:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005cfe:	b002      	add	sp, #8
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
 8005d02:	bf00      	nop

08005d04 <eepromWriteInt>:

void eepromWriteInt(uint32_t addr, uint16_t val)
{
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4605      	mov	r5, r0
 8005d08:	460c      	mov	r4, r1

	memcpy((uint8_t*)i_b, (uint8_t*)&val, 2);

	for(uint8_t i=0; i<2; i++)
	{
		eepromWriteByte(addr+i, i_b[i]);
 8005d0a:	b2c9      	uxtb	r1, r1
 8005d0c:	f7ff ff64 	bl	8005bd8 <eepromWriteByte>
		HAL_Delay(8);
 8005d10:	2008      	movs	r0, #8
 8005d12:	f7fa fcfb 	bl	800070c <HAL_Delay>
		eepromWriteByte(addr+i, i_b[i]);
 8005d16:	1c68      	adds	r0, r5, #1
 8005d18:	0a21      	lsrs	r1, r4, #8
 8005d1a:	f7ff ff5d 	bl	8005bd8 <eepromWriteByte>
		HAL_Delay(8);
 8005d1e:	2008      	movs	r0, #8
	}
}
 8005d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_Delay(8);
 8005d24:	f7fa bcf2 	b.w	800070c <HAL_Delay>

08005d28 <eepromReadInt>:

uint16_t eepromReadInt(uint32_t addr)
{
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	b082      	sub	sp, #8
	uint8_t i_b[2];
	uint16_t val;

	for(uint8_t i=0; i<2; i++)
		i_b[i]=eepromReadByte(addr+i);
 8005d2e:	f7ff ff91 	bl	8005c54 <eepromReadByte>
 8005d32:	4603      	mov	r3, r0
 8005d34:	1c60      	adds	r0, r4, #1
 8005d36:	f88d 3004 	strb.w	r3, [sp, #4]
 8005d3a:	f7ff ff8b 	bl	8005c54 <eepromReadByte>
 8005d3e:	f88d 0005 	strb.w	r0, [sp, #5]

	memcpy((uint8_t*)&val, (uint8_t*)i_b, 2);

	return val;
}
 8005d42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005d46:	b002      	add	sp, #8
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop

08005d4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d50:	4b41      	ldr	r3, [pc, #260]	; (8005e58 <MX_GPIO_Init+0x10c>)
{
 8005d52:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d54:	2400      	movs	r4, #0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CCD_ICG_GPIO_Port, CCD_ICG_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EEPROM_WP_Pin|EEPROM_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d56:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
 8005d58:	4f40      	ldr	r7, [pc, #256]	; (8005e5c <MX_GPIO_Init+0x110>)
 8005d5a:	2108      	movs	r1, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d5c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
 8005d5e:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d60:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d62:	f04f 0903 	mov.w	r9, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d66:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(EEPROM_HOLD_GPIO_Port, EEPROM_HOLD_Pin, GPIO_PIN_SET);
 8005d68:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8005e64 <MX_GPIO_Init+0x118>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d6c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d70:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005d74:	f040 0010 	orr.w	r0, r0, #16
 8005d78:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
 8005d7c:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d7e:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005d82:	f006 0610 	and.w	r6, r6, #16
 8005d86:	9600      	str	r6, [sp, #0]
 8005d88:	9e00      	ldr	r6, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d8a:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005d8e:	f046 0604 	orr.w	r6, r6, #4
 8005d92:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
 8005d96:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005d9a:	f006 0604 	and.w	r6, r6, #4
 8005d9e:	9601      	str	r6, [sp, #4]
 8005da0:	9e01      	ldr	r6, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005da2:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005da6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8005daa:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
 8005dae:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005db2:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8005db6:	9602      	str	r6, [sp, #8]
 8005db8:	9e02      	ldr	r6, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dba:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005dbe:	432e      	orrs	r6, r5
 8005dc0:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
 8005dc4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005dc8:	402e      	ands	r6, r5
 8005dca:	9603      	str	r6, [sp, #12]
 8005dcc:	9e03      	ldr	r6, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dce:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8005dd2:	f046 0602 	orr.w	r6, r6, #2
 8005dd6:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
 8005dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(CCD_SH_GPIO_Port, CCD_SH_Pin, GPIO_PIN_RESET);
 8005dde:	4e20      	ldr	r6, [pc, #128]	; (8005e60 <MX_GPIO_Init+0x114>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
 8005de8:	f7fb fd62 	bl	80018b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_SET);
 8005dec:	4638      	mov	r0, r7
 8005dee:	462a      	mov	r2, r5
 8005df0:	2110      	movs	r1, #16
 8005df2:	f7fb fd5d 	bl	80018b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EEPROM_HOLD_GPIO_Port, EEPROM_HOLD_Pin, GPIO_PIN_SET);
 8005df6:	4640      	mov	r0, r8
 8005df8:	462a      	mov	r2, r5
 8005dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dfe:	f7fb fd57 	bl	80018b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CCD_SH_GPIO_Port, CCD_SH_Pin, GPIO_PIN_RESET);
 8005e02:	4622      	mov	r2, r4
 8005e04:	4630      	mov	r0, r6
 8005e06:	2108      	movs	r1, #8
 8005e08:	f7fb fd52 	bl	80018b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CCD_ICG_GPIO_Port, CCD_ICG_Pin, GPIO_PIN_SET);
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	4630      	mov	r0, r6
 8005e10:	2120      	movs	r1, #32
 8005e12:	f7fb fd4d 	bl	80018b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EEPROM_WP_Pin|EEPROM_CS_Pin;
 8005e16:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e18:	4638      	mov	r0, r7
 8005e1a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e1e:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e22:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e26:	f7fb fc1b 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EEPROM_HOLD_Pin;
 8005e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(EEPROM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8005e2e:	4640      	mov	r0, r8
 8005e30:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = EEPROM_HOLD_Pin;
 8005e32:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e34:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(EEPROM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8005e3a:	f7fb fc11 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CCD_SH_Pin|CCD_ICG_Pin;
 8005e3e:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e40:	a905      	add	r1, sp, #20
 8005e42:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e44:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pin = CCD_SH_Pin|CCD_ICG_Pin;
 8005e48:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e4e:	f7fb fc07 	bl	8001660 <HAL_GPIO_Init>

}
 8005e52:	b00b      	add	sp, #44	; 0x2c
 8005e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e58:	58024400 	.word	0x58024400
 8005e5c:	58021000 	.word	0x58021000
 8005e60:	58020000 	.word	0x58020000
 8005e64:	58020800 	.word	0x58020800

08005e68 <setLedCurrent>:

void setLedCurrent(float current)
{
	uint16_t val=0;

	if(current>(REF*(R2/(R1+R2)))/RI)	//max_i
 8005e68:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005ed0 <setLedCurrent+0x68>
 8005e6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
{
 8005e70:	b508      	push	{r3, lr}
	if(current>(REF*(R2/(R1+R2)))/RI)	//max_i
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	dc21      	bgt.n	8005ebc <setLedCurrent+0x54>
		val=4095;
	else
		val=(((current*RI*((R1+R2)/R2)))/REF)*4095.0;
 8005e78:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005ed4 <setLedCurrent+0x6c>
 8005e7c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005ed8 <setLedCurrent+0x70>
 8005e80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e84:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005edc <setLedCurrent+0x74>
 8005e88:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8005ec8 <setLedCurrent+0x60>
 8005e8c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005e90:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8005e94:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005e98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e9c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8005ea0:	ee17 3a10 	vmov	r3, s14
 8005ea4:	b29b      	uxth	r3, r3

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, val);
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	480d      	ldr	r0, [pc, #52]	; (8005ee0 <setLedCurrent+0x78>)
 8005eaa:	4611      	mov	r1, r2
 8005eac:	f7fb fae8 	bl	8001480 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	480b      	ldr	r0, [pc, #44]	; (8005ee0 <setLedCurrent+0x78>)
}
 8005eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8005eb8:	f7fb bab6 	b.w	8001428 <HAL_DAC_Start>
 8005ebc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005ec0:	e7f1      	b.n	8005ea6 <setLedCurrent+0x3e>
 8005ec2:	bf00      	nop
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	40affe00 	.word	0x40affe00
 8005ed0:	3b969f04 	.word	0x3b969f04
 8005ed4:	424c0000 	.word	0x424c0000
 8005ed8:	41613b14 	.word	0x41613b14
 8005edc:	40533333 	.word	0x40533333
 8005ee0:	20012280 	.word	0x20012280
 8005ee4:	00000000 	.word	0x00000000

08005ee8 <getLedCurrent>:

float getLedCurrent(void)
{
 8005ee8:	b510      	push	{r4, lr}
	uint16_t val;

	HAL_ADC_Start(&hadc1);
 8005eea:	4c13      	ldr	r4, [pc, #76]	; (8005f38 <getLedCurrent+0x50>)
 8005eec:	4620      	mov	r0, r4
 8005eee:	f7fb f897 	bl	8001020 <HAL_ADC_Start>
	val=HAL_ADC_GetValue(&hadc1);
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7fa fd8c 	bl	8000a10 <HAL_ADC_GetValue>

	return (val/65535.0*REF)/RI;
 8005ef8:	b280      	uxth	r0, r0
 8005efa:	ee07 0a90 	vmov	s15, r0
 8005efe:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8005f20 <getLedCurrent+0x38>
 8005f02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f06:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8005f28 <getLedCurrent+0x40>
 8005f0a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005f0e:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8005f30 <getLedCurrent+0x48>
 8005f12:	ee26 6b04 	vmul.f64	d6, d6, d4
 8005f16:	ee86 0b05 	vdiv.f64	d0, d6, d5
}
 8005f1a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005f1e:	bd10      	pop	{r4, pc}
 8005f20:	00000000 	.word	0x00000000
 8005f24:	40efffe0 	.word	0x40efffe0
 8005f28:	60000000 	.word	0x60000000
 8005f2c:	400a6666 	.word	0x400a6666
 8005f30:	00000000 	.word	0x00000000
 8005f34:	40498000 	.word	0x40498000
 8005f38:	2001221c 	.word	0x2001221c
 8005f3c:	00000000 	.word	0x00000000

08005f40 <autoLed>:

	return max-min;
}

void autoLed(void)
{
 8005f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f44:	ed2d 8b04 	vpush	{d8-d9}
 8005f48:	f5ad 5de7 	sub.w	sp, sp, #7392	; 0x1ce0
	volatile uint16_t c_max=0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f641 34c2 	movw	r4, #7106	; 0x1bc2
 8005f52:	f641 41f0 	movw	r1, #7408	; 0x1cf0
{
 8005f56:	b085      	sub	sp, #20
	volatile uint16_t c_max=0;
 8005f58:	4a4d      	ldr	r2, [pc, #308]	; (8006090 <autoLed+0x150>)
	float curr_max=0.0;
 8005f5a:	eddf 8a4e 	vldr	s17, [pc, #312]	; 8006094 <autoLed+0x154>
	volatile uint16_t c_max=0;
 8005f5e:	4699      	mov	r9, r3
 8005f60:	4469      	add	r1, sp
 8005f62:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80060b0 <autoLed+0x170>
 8005f66:	4d4c      	ldr	r5, [pc, #304]	; (8006098 <autoLed+0x158>)
 8005f68:	446c      	add	r4, sp
 8005f6a:	4f4c      	ldr	r7, [pc, #304]	; (800609c <autoLed+0x15c>)
	uint16_t ccd_copy[NUM_PIX];
	for(uint8_t i=0; i<50; i++) //bylo 0..200
	{
		setLedCurrent((float)i/10000.0);	//40000
 8005f6c:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 80060a0 <autoLed+0x160>

		//memset((uint8_t*)ccd, 0, NUM_PIX*2);

		ccd_read_req=1;
		while(!ccd_data_ready);
		fir16(ccd, ccd_copy, 3);
 8005f70:	4e4c      	ldr	r6, [pc, #304]	; (80060a4 <autoLed+0x164>)
	volatile uint16_t c_max=0;
 8005f72:	528b      	strh	r3, [r1, r2]
		setLedCurrent((float)i/10000.0);	//40000
 8005f74:	fa5f f389 	uxtb.w	r3, r9
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f80:	ee87 8a89 	vdiv.f32	s16, s15, s18
 8005f84:	eeb0 0a48 	vmov.f32	s0, s16
 8005f88:	f7ff ff6e 	bl	8005e68 <setLedCurrent>
		HAL_Delay(20);	//bylo 25
 8005f8c:	2014      	movs	r0, #20
 8005f8e:	f7fa fbbd 	bl	800070c <HAL_Delay>
		ccd_read_req=1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f888 3000 	strb.w	r3, [r8]
		while(!ccd_data_ready);
 8005f98:	782b      	ldrb	r3, [r5, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0fc      	beq.n	8005f98 <autoLed+0x58>
		fir16(ccd, ccd_copy, 3);
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	a902      	add	r1, sp, #8
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7ff fca8 	bl	80058f8 <fir16>
		memcpy(ccd, ccd_copy, sizeof(ccd));
 8005fa8:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 8005fac:	a902      	add	r1, sp, #8
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f001 f8c8 	bl	8007144 <memcpy>
		fir16(ccd, ccd_copy, 5);
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	a902      	add	r1, sp, #8
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff fc9d 	bl	80058f8 <fir16>
		memcpy(ccd, ccd_copy, sizeof(ccd));
 8005fbe:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 8005fc2:	a902      	add	r1, sp, #8
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f001 f8bd 	bl	8007144 <memcpy>
		fir16(ccd, ccd_copy, 7);
 8005fca:	2207      	movs	r2, #7
 8005fcc:	a902      	add	r1, sp, #8
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f7ff fc92 	bl	80058f8 <fir16>
		memcpy(ccd, ccd_copy, sizeof(ccd));
 8005fd4:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 8005fd8:	a902      	add	r1, sp, #8
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f001 f8b2 	bl	8007144 <memcpy>
		fir16(ccd, ccd_copy, 9);
 8005fe0:	a902      	add	r1, sp, #8
 8005fe2:	2209      	movs	r2, #9
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff fc87 	bl	80058f8 <fir16>
	for(uint16_t i=150; i<3550; i++)
 8005fea:	f50d 7399 	add.w	r3, sp, #306	; 0x132
	uint16_t min=65535, max=0;
 8005fee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005ff2:	2100      	movs	r1, #0
		if(inp[i]>max)
 8005ff4:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8005ff8:	4291      	cmp	r1, r2
 8005ffa:	bf38      	it	cc
 8005ffc:	4611      	movcc	r1, r2
		if(inp[i]<min)
 8005ffe:	4290      	cmp	r0, r2
 8006000:	bf28      	it	cs
 8006002:	4610      	movcs	r0, r2
	for(uint16_t i=150; i<3550; i++)
 8006004:	42a3      	cmp	r3, r4
 8006006:	d1f5      	bne.n	8005ff4 <autoLed+0xb4>
	return max-min;
 8006008:	1a0b      	subs	r3, r1, r0
 800600a:	b29b      	uxth	r3, r3
		contrast=getContrast(ccd_copy);
 800600c:	803b      	strh	r3, [r7, #0]
		if(contrast>c_max)
 800600e:	883a      	ldrh	r2, [r7, #0]
 8006010:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006014:	b292      	uxth	r2, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	429a      	cmp	r2, r3
 800601a:	d905      	bls.n	8006028 <autoLed+0xe8>
		{
			c_max=contrast;
 800601c:	883b      	ldrh	r3, [r7, #0]
			curr_max=(float)i/10000.0;
 800601e:	eef0 8a48 	vmov.f32	s17, s16
			c_max=contrast;
 8006022:	b29b      	uxth	r3, r3
 8006024:	f8ad 3006 	strh.w	r3, [sp, #6]
	for(uint8_t i=0; i<50; i++) //bylo 0..200
 8006028:	f109 0901 	add.w	r9, r9, #1
 800602c:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 8006030:	d1a0      	bne.n	8005f74 <autoLed+0x34>
		}
	}

	setLedCurrent(curr_max*0.8);	//powinno byc *0.8, ale nikt nie wie czemu to nie dziala
 8006032:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006088 <autoLed+0x148>
 8006036:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 800603a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800603e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006042:	f7ff ff11 	bl	8005e68 <setLedCurrent>

	//memset((uint8_t*)ccd, 0, NUM_PIX*2);
	ccd_read_req=1;
 8006046:	2301      	movs	r3, #1
 8006048:	f888 3000 	strb.w	r3, [r8]
	while(!ccd_data_ready);
 800604c:	782b      	ldrb	r3, [r5, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0fc      	beq.n	800604c <autoLed+0x10c>
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <autoLed+0x168>)
	uint16_t min=65535, max=0;
 8006054:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006058:	4c14      	ldr	r4, [pc, #80]	; (80060ac <autoLed+0x16c>)
 800605a:	2100      	movs	r1, #0
		if(inp[i]>max)
 800605c:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8006060:	4291      	cmp	r1, r2
 8006062:	bf38      	it	cc
 8006064:	4611      	movcc	r1, r2
		if(inp[i]<min)
 8006066:	4290      	cmp	r0, r2
 8006068:	bf28      	it	cs
 800606a:	4610      	movcs	r0, r2
	for(uint16_t i=150; i<3550; i++)
 800606c:	429c      	cmp	r4, r3
 800606e:	d1f5      	bne.n	800605c <autoLed+0x11c>
	return max-min;
 8006070:	1a0b      	subs	r3, r1, r0
 8006072:	b29b      	uxth	r3, r3
	contrast=getContrast(ccd);
 8006074:	803b      	strh	r3, [r7, #0]
}
 8006076:	f50d 5de7 	add.w	sp, sp, #7392	; 0x1ce0
 800607a:	b005      	add	sp, #20
 800607c:	ecbd 8b04 	vpop	{d8-d9}
 8006080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006084:	f3af 8000 	nop.w
 8006088:	9999999a 	.word	0x9999999a
 800608c:	3fe99999 	.word	0x3fe99999
 8006090:	ffffe316 	.word	0xffffe316
 8006094:	00000000 	.word	0x00000000
 8006098:	20012190 	.word	0x20012190
 800609c:	2001219e 	.word	0x2001219e
 80060a0:	461c4000 	.word	0x461c4000
 80060a4:	200122ac 	.word	0x200122ac
 80060a8:	200123d6 	.word	0x200123d6
 80060ac:	20013e66 	.word	0x20013e66
 80060b0:	2001218c 	.word	0x2001218c

080060b4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b510      	push	{r4, lr}
	//przerwanie do odczytu linii z CCD, ok 7.5ms dla zegara 2MHz
	//if(htim->Instance==TIM2)
	{
		//czy ostatnio odczytywalismy linijke z CCD?
		if(ccd_read_req && ccd_pix_num>100)
 80060b6:	4c1c      	ldr	r4, [pc, #112]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80060b8:	7823      	ldrb	r3, [r4, #0]
 80060ba:	b11b      	cbz	r3, 80060c4 <HAL_TIM_PeriodElapsedCallback+0x10>
 80060bc:	8863      	ldrh	r3, [r4, #2]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b64      	cmp	r3, #100	; 0x64
 80060c2:	d827      	bhi.n	8006114 <HAL_TIM_PeriodElapsedCallback+0x60>
			ccd_read_req=0;
			ccd_pix_num=0;
			ccd_data_ready=1;
		}

		ICG_L;
 80060c4:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80060c6:	2320      	movs	r3, #32
 80060c8:	8353      	strh	r3, [r2, #26]
		for(uint16_t i=0; i<5; i++) asm("NOP");
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
		SH_H;
 80060d4:	2108      	movs	r1, #8
 80060d6:	2332      	movs	r3, #50	; 0x32
 80060d8:	8311      	strh	r1, [r2, #24]
		for(uint16_t i=0; i<50; i++) asm("NOP");
 80060da:	bf00      	nop
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1fa      	bne.n	80060da <HAL_TIM_PeriodElapsedCallback+0x26>
		SH_L;
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80060e6:	2208      	movs	r2, #8
 80060e8:	2195      	movs	r1, #149	; 0x95
 80060ea:	835a      	strh	r2, [r3, #26]
		for(uint16_t i=0; i<149; i++) asm("NOP");
 80060ec:	bf00      	nop
 80060ee:	3901      	subs	r1, #1
 80060f0:	b289      	uxth	r1, r1
 80060f2:	2900      	cmp	r1, #0
 80060f4:	d1fa      	bne.n	80060ec <HAL_TIM_PeriodElapsedCallback+0x38>
		ICG_H;
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80060f8:	2220      	movs	r2, #32
 80060fa:	831a      	strh	r2, [r3, #24]

		if(ccd_read_req)
 80060fc:	7823      	ldrb	r3, [r4, #0]
 80060fe:	b903      	cbnz	r3, 8006102 <HAL_TIM_PeriodElapsedCallback+0x4e>
			ccd_pix_num=0;
			ccd_data_ready=0;
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
		}
	}
}
 8006100:	bd10      	pop	{r4, pc}
			TIM1->CNT=0;
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <HAL_TIM_PeriodElapsedCallback+0x7c>)
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8006104:	480b      	ldr	r0, [pc, #44]	; (8006134 <HAL_TIM_PeriodElapsedCallback+0x80>)
			TIM1->CNT=0;
 8006106:	6259      	str	r1, [r3, #36]	; 0x24
			ccd_pix_num=0;
 8006108:	8061      	strh	r1, [r4, #2]
			ccd_data_ready=0;
 800610a:	7121      	strb	r1, [r4, #4]
}
 800610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8006110:	f7fd bf1c 	b.w	8003f4c <HAL_TIM_PWM_Start_IT>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8006114:	2100      	movs	r1, #0
 8006116:	4807      	ldr	r0, [pc, #28]	; (8006134 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8006118:	f7fd ff1a 	bl	8003f50 <HAL_TIM_PWM_Stop_IT>
			ccd_read_req=0;
 800611c:	2300      	movs	r3, #0
			ccd_data_ready=1;
 800611e:	2201      	movs	r2, #1
			ccd_read_req=0;
 8006120:	7023      	strb	r3, [r4, #0]
			ccd_pix_num=0;
 8006122:	8063      	strh	r3, [r4, #2]
			ccd_data_ready=1;
 8006124:	7122      	strb	r2, [r4, #4]
 8006126:	e7cd      	b.n	80060c4 <HAL_TIM_PeriodElapsedCallback+0x10>
 8006128:	2001218c 	.word	0x2001218c
 800612c:	58020000 	.word	0x58020000
 8006130:	40010000 	.word	0x40010000
 8006134:	2001b648 	.word	0x2001b648

08006138 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b510      	push	{r4, lr}
	//przerwanie do odczytu probki sygnalu z CCD, 500kHz
	//if(htim->Instance==TIM1)
	{
		HAL_ADC_Start(&hadc2);
 800613a:	4c09      	ldr	r4, [pc, #36]	; (8006160 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 800613c:	4620      	mov	r0, r4
 800613e:	f7fa ff6f 	bl	8001020 <HAL_ADC_Start>
		ccd[ccd_pix_num]=HAL_ADC_GetValue(&hadc2);
 8006142:	4620      	mov	r0, r4
 8006144:	f7fa fc64 	bl	8000a10 <HAL_ADC_GetValue>
 8006148:	4a06      	ldr	r2, [pc, #24]	; (8006164 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 800614a:	4c07      	ldr	r4, [pc, #28]	; (8006168 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 800614c:	8851      	ldrh	r1, [r2, #2]
		ccd_pix_num++;
 800614e:	8853      	ldrh	r3, [r2, #2]
		ccd[ccd_pix_num]=HAL_ADC_GetValue(&hadc2);
 8006150:	b289      	uxth	r1, r1
		ccd_pix_num++;
 8006152:	3301      	adds	r3, #1
		ccd[ccd_pix_num]=HAL_ADC_GetValue(&hadc2);
 8006154:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
		ccd_pix_num++;
 8006158:	b29b      	uxth	r3, r3
 800615a:	8053      	strh	r3, [r2, #2]
	}
}
 800615c:	bd10      	pop	{r4, pc}
 800615e:	bf00      	nop
 8006160:	200121b8 	.word	0x200121b8
 8006164:	2001218c 	.word	0x2001218c
 8006168:	200122ac 	.word	0x200122ac

0800616c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	//jezeli przerwanie z UARTa do komunikacji z plytka komputera
	if(huart->Instance==USART1)
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <HAL_UART_RxCpltCallback+0x14>)
 800616e:	6802      	ldr	r2, [r0, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d000      	beq.n	8006176 <HAL_UART_RxCpltCallback+0xa>
	{
		cal_data_save_pending=1;
	}
}
 8006174:	4770      	bx	lr
		cal_data_save_pending=1;
 8006176:	4b03      	ldr	r3, [pc, #12]	; (8006184 <HAL_UART_RxCpltCallback+0x18>)
 8006178:	2201      	movs	r2, #1
 800617a:	715a      	strb	r2, [r3, #5]
}
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40011000 	.word	0x40011000
 8006184:	2001218c 	.word	0x2001218c

08006188 <saveCalData>:
	ccd_read_req=1;
	while(!ccd_data_ready);
}

void saveCalData(void)
{
 8006188:	b510      	push	{r4, lr}
	eepromWriteInt(EEPROM_BASE_ADDR  +0, cal_data.serial);
 800618a:	4c10      	ldr	r4, [pc, #64]	; (80061cc <saveCalData+0x44>)
 800618c:	f640 0059 	movw	r0, #2137	; 0x859
 8006190:	8821      	ldrh	r1, [r4, #0]
 8006192:	f7ff fdb7 	bl	8005d04 <eepromWriteInt>
	eepromWriteFloat(EEPROM_BASE_ADDR+2, cal_data.f);
 8006196:	ed94 0a01 	vldr	s0, [r4, #4]
 800619a:	f640 005b 	movw	r0, #2139	; 0x85b
 800619e:	f7ff fd89 	bl	8005cb4 <eepromWriteFloat>
	eepromWriteFloat(EEPROM_BASE_ADDR+6, cal_data.D);
 80061a2:	ed94 0a02 	vldr	s0, [r4, #8]
 80061a6:	f640 005f 	movw	r0, #2143	; 0x85f
 80061aa:	f7ff fd83 	bl	8005cb4 <eepromWriteFloat>
	eepromWriteFloat(EEPROM_BASE_ADDR+10, cal_data.temp_corr);
 80061ae:	ed94 0a03 	vldr	s0, [r4, #12]
 80061b2:	f640 0063 	movw	r0, #2147	; 0x863
 80061b6:	f7ff fd7d 	bl	8005cb4 <eepromWriteFloat>
	eepromWriteFloat(EEPROM_BASE_ADDR+14, cal_data.x_corr);
 80061ba:	ed94 0a04 	vldr	s0, [r4, #16]
 80061be:	f640 0067 	movw	r0, #2151	; 0x867
}
 80061c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	eepromWriteFloat(EEPROM_BASE_ADDR+14, cal_data.x_corr);
 80061c6:	f7ff bd75 	b.w	8005cb4 <eepromWriteFloat>
 80061ca:	bf00      	nop
 80061cc:	20012294 	.word	0x20012294

080061d0 <readCalData>:

void readCalData(void)
{
 80061d0:	b510      	push	{r4, lr}
	cal_data.serial=eepromReadInt(EEPROM_BASE_ADDR  +0);
 80061d2:	f640 0059 	movw	r0, #2137	; 0x859
 80061d6:	4c0f      	ldr	r4, [pc, #60]	; (8006214 <readCalData+0x44>)
 80061d8:	f7ff fda6 	bl	8005d28 <eepromReadInt>
 80061dc:	4603      	mov	r3, r0
	cal_data.f=eepromReadFloat(EEPROM_BASE_ADDR+2);
 80061de:	f640 005b 	movw	r0, #2139	; 0x85b
	cal_data.serial=eepromReadInt(EEPROM_BASE_ADDR  +0);
 80061e2:	8023      	strh	r3, [r4, #0]
	cal_data.f=eepromReadFloat(EEPROM_BASE_ADDR+2);
 80061e4:	f7ff fd7c 	bl	8005ce0 <eepromReadFloat>
	cal_data.D=eepromReadFloat(EEPROM_BASE_ADDR+6);
 80061e8:	f640 005f 	movw	r0, #2143	; 0x85f
	cal_data.f=eepromReadFloat(EEPROM_BASE_ADDR+2);
 80061ec:	ed84 0a01 	vstr	s0, [r4, #4]
	cal_data.D=eepromReadFloat(EEPROM_BASE_ADDR+6);
 80061f0:	f7ff fd76 	bl	8005ce0 <eepromReadFloat>
	cal_data.temp_corr=eepromReadFloat(EEPROM_BASE_ADDR+10);
 80061f4:	f640 0063 	movw	r0, #2147	; 0x863
	cal_data.D=eepromReadFloat(EEPROM_BASE_ADDR+6);
 80061f8:	ed84 0a02 	vstr	s0, [r4, #8]
	cal_data.temp_corr=eepromReadFloat(EEPROM_BASE_ADDR+10);
 80061fc:	f7ff fd70 	bl	8005ce0 <eepromReadFloat>
	cal_data.x_corr=eepromReadFloat(EEPROM_BASE_ADDR+14);
 8006200:	f640 0067 	movw	r0, #2151	; 0x867
	cal_data.temp_corr=eepromReadFloat(EEPROM_BASE_ADDR+10);
 8006204:	ed84 0a03 	vstr	s0, [r4, #12]
	cal_data.x_corr=eepromReadFloat(EEPROM_BASE_ADDR+14);
 8006208:	f7ff fd6a 	bl	8005ce0 <eepromReadFloat>
 800620c:	ed84 0a04 	vstr	s0, [r4, #16]
}
 8006210:	bd10      	pop	{r4, pc}
 8006212:	bf00      	nop
 8006214:	20012294 	.word	0x20012294

08006218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800621c:	2400      	movs	r4, #0
{
 800621e:	b0cd      	sub	sp, #308	; 0x134
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006220:	2220      	movs	r2, #32
 8006222:	4621      	mov	r1, r4
 8006224:	a802      	add	r0, sp, #8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006226:	9410      	str	r4, [sp, #64]	; 0x40
 8006228:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800622c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006230:	f000 ff96 	bl	8007160 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006234:	4621      	mov	r1, r4
 8006236:	22bc      	movs	r2, #188	; 0xbc
 8006238:	a81d      	add	r0, sp, #116	; 0x74
 800623a:	f000 ff91 	bl	8007160 <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800623e:	4b30      	ldr	r3, [pc, #192]	; (8006300 <SystemClock_Config+0xe8>)
 8006240:	68d9      	ldr	r1, [r3, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8006242:	461a      	mov	r2, r3
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8006244:	f021 0104 	bic.w	r1, r1, #4
 8006248:	60d9      	str	r1, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800624a:	9401      	str	r4, [sp, #4]
 800624c:	6999      	ldr	r1, [r3, #24]
 800624e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8006252:	6199      	str	r1, [r3, #24]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	9b01      	ldr	r3, [sp, #4]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 800625e:	6993      	ldr	r3, [r2, #24]
 8006260:	049b      	lsls	r3, r3, #18
 8006262:	d5fc      	bpl.n	800625e <SystemClock_Config+0x46>
  {
    
  }
  /**Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006264:	4a27      	ldr	r2, [pc, #156]	; (8006304 <SystemClock_Config+0xec>)
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
  RCC_OscInitStruct.CSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006266:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8006268:	2511      	movs	r5, #17
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800626a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800626e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 3;
 8006270:	2603      	movs	r6, #3
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8006272:	f04f 0908 	mov.w	r9, #8
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8006276:	2110      	movs	r1, #16
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006278:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800627c:	2780      	movs	r7, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 200;
 800627e:	f04f 08c8 	mov.w	r8, #200	; 0xc8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006282:	4323      	orrs	r3, r4
 8006284:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8006286:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006288:	2500      	movs	r5, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800628a:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800628c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLR = 2;
 800628e:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006290:	951c      	str	r5, [sp, #112]	; 0x70
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8006292:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006296:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800629a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 200;
 800629e:	e9cd 6815 	strd	r6, r8, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80062a2:	e9cd 951a 	strd	r9, r5, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062a6:	f7fb fb09 	bl	80018bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062aa:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80062ae:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80062b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80062b4:	4621      	mov	r1, r4
 80062b6:	eb0d 0009 	add.w	r0, sp, r9
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062ba:	f8cd c008 	str.w	ip, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80062be:	f8cd 9014 	str.w	r9, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80062c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80062c6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80062ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80062ce:	f7fb fe1f 	bl	8001f10 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USART1
 80062d2:	490d      	ldr	r1, [pc, #52]	; (8006308 <SystemClock_Config+0xf0>)
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_CSI;
 80062d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 80062d8:	2304      	movs	r3, #4
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062da:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80062dc:	953b      	str	r5, [sp, #236]	; 0xec
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80062de:	9545      	str	r5, [sp, #276]	; 0x114
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USART1
 80062e0:	911d      	str	r1, [sp, #116]	; 0x74
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_CSI;
 80062e2:	9235      	str	r2, [sp, #212]	; 0xd4
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 80062e4:	933a      	str	r3, [sp, #232]	; 0xe8
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 80062e6:	e9cd 681e 	strd	r6, r8, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80062ea:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80062ee:	e9cd 4722 	strd	r4, r7, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80062f2:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062f6:	f7fb ffff 	bl	80022f8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80062fa:	b04d      	add	sp, #308	; 0x134
 80062fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006300:	58024800 	.word	0x58024800
 8006304:	58024400 	.word	0x58024400
 8006308:	00082003 	.word	0x00082003
 800630c:	00000000 	.word	0x00000000

08006310 <main>:
{
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	4cb8      	ldr	r4, [pc, #736]	; (80065f8 <main+0x2e8>)
 8006316:	ed2d 8b10 	vpush	{d8-d15}
 800631a:	b087      	sub	sp, #28
 800631c:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  HAL_Init();
 8006320:	f7fa f9d2 	bl	80006c8 <HAL_Init>
  SystemClock_Config();
 8006324:	f7ff ff78 	bl	8006218 <SystemClock_Config>
  MX_GPIO_Init();
 8006328:	f7ff fd10 	bl	8005d4c <MX_GPIO_Init>
  MX_ADC1_Init();
 800632c:	1d23      	adds	r3, r4, #4
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	f7ff f95c 	bl	80055ec <MX_ADC1_Init>
  MX_SPI4_Init();
 8006334:	f000 fb4c 	bl	80069d0 <MX_SPI4_Init>
  MX_DAC1_Init();
 8006338:	f7ff fb0e 	bl	8005958 <MX_DAC1_Init>
  MX_ADC2_Init();
 800633c:	f7ff f9a0 	bl	8005680 <MX_ADC2_Init>
  MX_TIM3_Init();
 8006340:	f000 fd8a 	bl	8006e58 <MX_TIM3_Init>
  MX_TIM2_Init();
 8006344:	f000 fc1e 	bl	8006b84 <MX_TIM2_Init>
  MX_TIM1_Init();
 8006348:	f000 fd06 	bl	8006d58 <MX_TIM1_Init>
  MX_UART4_Init();
 800634c:	f000 fde0 	bl	8006f10 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8006350:	f000 fe00 	bl	8006f54 <MX_USART1_UART_Init>
  SCB->CPACR|=(3<<20)|(3<<22);
 8006354:	4aa9      	ldr	r2, [pc, #676]	; (80065fc <main+0x2ec>)
  setLedCurrent(0.00);
 8006356:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8006600 <main+0x2f0>
  SCB->CPACR|=(3<<20)|(3<<22);
 800635a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800635e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006362:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  setLedCurrent(0.00);
 8006366:	f7ff fd7f 	bl	8005e68 <setLedCurrent>
 800636a:	4623      	mov	r3, r4
	  pix_nums[i]=0;
 800636c:	2200      	movs	r2, #0
 800636e:	f843 2f04 	str.w	r2, [r3, #4]!
  for(uint8_t i=0; i<PIX_NUM_AVG; i++)
 8006372:	429e      	cmp	r6, r3
 8006374:	d1fb      	bne.n	800636e <main+0x5e>
  HAL_Delay(250);
 8006376:	4ba3      	ldr	r3, [pc, #652]	; (8006604 <main+0x2f4>)
 8006378:	20fa      	movs	r0, #250	; 0xfa
 800637a:	4ca3      	ldr	r4, [pc, #652]	; (8006608 <main+0x2f8>)
 800637c:	9302      	str	r3, [sp, #8]
 800637e:	f7fa f9c5 	bl	800070c <HAL_Delay>
  readCalData();
 8006382:	f7ff ff25 	bl	80061d0 <readCalData>
  HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, 1);
 8006386:	2201      	movs	r2, #1
 8006388:	2108      	movs	r1, #8
 800638a:	48a0      	ldr	r0, [pc, #640]	; (800660c <main+0x2fc>)
 800638c:	f7fb fa90 	bl	80018b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EEPROM_HOLD_GPIO_Port, EEPROM_HOLD_Pin, 1);
 8006390:	2201      	movs	r2, #1
 8006392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006396:	489e      	ldr	r0, [pc, #632]	; (8006610 <main+0x300>)
 8006398:	f7fb fa8a 	bl	80018b0 <HAL_GPIO_WritePin>
  DS_Reset();
 800639c:	4d9d      	ldr	r5, [pc, #628]	; (8006614 <main+0x304>)
 800639e:	f7ff fb7b 	bl	8005a98 <DS_Reset>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80063a2:	2200      	movs	r2, #0
 80063a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80063a8:	489b      	ldr	r0, [pc, #620]	; (8006618 <main+0x308>)
 80063aa:	f7fa feef 	bl	800118c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80063ae:	2200      	movs	r2, #0
 80063b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80063b4:	4899      	ldr	r0, [pc, #612]	; (800661c <main+0x30c>)
 80063b6:	f7fa fee9 	bl	800118c <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80063ba:	2104      	movs	r1, #4
 80063bc:	4898      	ldr	r0, [pc, #608]	; (8006620 <main+0x310>)
 80063be:	f7fd fdc3 	bl	8003f48 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80063c2:	4898      	ldr	r0, [pc, #608]	; (8006624 <main+0x314>)
 80063c4:	f7fd fcae 	bl	8003d24 <HAL_TIM_Base_Start_IT>
  HAL_Delay(2000);
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80063ce:	f8df b284 	ldr.w	fp, [pc, #644]	; 8006654 <main+0x344>
 80063d2:	f503 77ec 	add.w	r7, r3, #472	; 0x1d8
 80063d6:	f7fa f999 	bl	800070c <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, uart_in, 21);
 80063da:	2215      	movs	r2, #21
 80063dc:	4992      	ldr	r1, [pc, #584]	; (8006628 <main+0x318>)
 80063de:	4893      	ldr	r0, [pc, #588]	; (800662c <main+0x31c>)
 80063e0:	f7fe fa1c 	bl	800481c <HAL_UART_Receive_IT>
  autoLed();
 80063e4:	f7ff fdac 	bl	8005f40 <autoLed>
		  float ns=1.75996+((13.6e-6)*(meas.temp-20.0));// n szafiru
 80063e8:	ed9f ab77 	vldr	d10, [pc, #476]	; 80065c8 <main+0x2b8>
 80063ec:	ed9f 9b78 	vldr	d9, [pc, #480]	; 80065d0 <main+0x2c0>
		  float xp=-(REAL_PIX_NUM/2.0-meas.num_pix+cal_data.x_corr)*0.008;
 80063f0:	ed9f 8b79 	vldr	d8, [pc, #484]	; 80065d8 <main+0x2c8>
 80063f4:	ed9f db7a 	vldr	d13, [pc, #488]	; 80065e0 <main+0x2d0>
		  float n_alpha=n_beta+54.0/180.0*M_PI;
 80063f8:	ed9f cb7b 	vldr	d12, [pc, #492]	; 80065e8 <main+0x2d8>
		  meas.nc = ((uint32_t)(meas.nc * 100000 + 0.5) / 100000.0);
 80063fc:	ed9f bb7c 	vldr	d11, [pc, #496]	; 80065f0 <main+0x2e0>
 8006400:	9701      	str	r7, [sp, #4]
	  for(uint16_t i=0; i<NUM_PIX; i++)
 8006402:	488b      	ldr	r0, [pc, #556]	; (8006630 <main+0x320>)
		  ccd_avg[i]=0;
 8006404:	2200      	movs	r2, #0
  setLedCurrent(0.00);
 8006406:	9f01      	ldr	r7, [sp, #4]
 8006408:	4603      	mov	r3, r0
		  ccd_avg[i]=0;
 800640a:	f843 2f04 	str.w	r2, [r3, #4]!
	  for(uint16_t i=0; i<NUM_PIX; i++)
 800640e:	429c      	cmp	r4, r3
 8006410:	d1fb      	bne.n	800640a <main+0xfa>
 8006412:	f04f 0a0a 	mov.w	sl, #10
	ccd_read_req=1;
 8006416:	f04f 0c01 	mov.w	ip, #1
 800641a:	9701      	str	r7, [sp, #4]
 800641c:	f885 c000 	strb.w	ip, [r5]
	while(!ccd_data_ready);
 8006420:	792b      	ldrb	r3, [r5, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0fc      	beq.n	8006420 <main+0x110>
 8006426:	4983      	ldr	r1, [pc, #524]	; (8006634 <main+0x324>)
 8006428:	4603      	mov	r3, r0
			  ccd_avg[j]+=ccd[j];
 800642a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800642e:	f831 ef02 	ldrh.w	lr, [r1, #2]!
		  for(uint16_t j=0; j<NUM_PIX; j++)
 8006432:	429c      	cmp	r4, r3
			  ccd_avg[j]+=ccd[j];
 8006434:	4472      	add	r2, lr
 8006436:	601a      	str	r2, [r3, #0]
		  for(uint16_t j=0; j<NUM_PIX; j++)
 8006438:	d1f7      	bne.n	800642a <main+0x11a>
	  for(uint8_t i=0; i<AVG_LINES; i++)  {
 800643a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800643e:	f013 0aff 	ands.w	sl, r3, #255	; 0xff
 8006442:	d1eb      	bne.n	800641c <main+0x10c>
	  meas.temp=DS_GetTemp()+cal_data.temp_corr;
 8006444:	9701      	str	r7, [sp, #4]
 8006446:	f7ff fb8b 	bl	8005b60 <DS_GetTemp>
 800644a:	eddb 7a03 	vldr	s15, [fp, #12]
	  fir(ccd_avg, ccd_fir, 5);
 800644e:	2205      	movs	r2, #5
	  meas.temp=DS_GetTemp()+cal_data.temp_corr;
 8006450:	4b79      	ldr	r3, [pc, #484]	; (8006638 <main+0x328>)
	  max_val=0;
 8006452:	46d1      	mov	r9, sl
	  meas.temp=DS_GetTemp()+cal_data.temp_corr;
 8006454:	ee37 0a80 	vadd.f32	s0, s15, s0
	  fir(ccd_avg, ccd_fir, 5);
 8006458:	4978      	ldr	r1, [pc, #480]	; (800663c <main+0x32c>)
 800645a:	4879      	ldr	r0, [pc, #484]	; (8006640 <main+0x330>)
	  meas.temp=DS_GetTemp()+cal_data.temp_corr;
 800645c:	ed83 0a00 	vstr	s0, [r3]
	  fir(ccd_avg, ccd_fir, 5);
 8006460:	f7ff fa1c 	bl	800589c <fir>
	  fir(ccd_fir, ccd_avg, 7);
 8006464:	2207      	movs	r2, #7
 8006466:	4976      	ldr	r1, [pc, #472]	; (8006640 <main+0x330>)
 8006468:	4874      	ldr	r0, [pc, #464]	; (800663c <main+0x32c>)
 800646a:	f7ff fa17 	bl	800589c <fir>
	  fir(ccd_avg, ccd_fir, 9);
 800646e:	2209      	movs	r2, #9
 8006470:	4972      	ldr	r1, [pc, #456]	; (800663c <main+0x32c>)
 8006472:	4873      	ldr	r0, [pc, #460]	; (8006640 <main+0x330>)
 8006474:	f7ff fa12 	bl	800589c <fir>
	  fir(ccd_fir, ccd_avg, 11);
 8006478:	220b      	movs	r2, #11
 800647a:	4971      	ldr	r1, [pc, #452]	; (8006640 <main+0x330>)
 800647c:	486f      	ldr	r0, [pc, #444]	; (800663c <main+0x32c>)
 800647e:	f7ff fa0d 	bl	800589c <fir>
	  std_dev(ccd_avg, STD_DEV_LEN);
 8006482:	2140      	movs	r1, #64	; 0x40
 8006484:	486e      	ldr	r0, [pc, #440]	; (8006640 <main+0x330>)
 8006486:	f7ff f9af 	bl	80057e8 <std_dev>
	  max_val=0;
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	496d      	ldr	r1, [pc, #436]	; (8006644 <main+0x334>)
 800648e:	4650      	mov	r0, sl
 8006490:	461a      	mov	r2, r3
 8006492:	9304      	str	r3, [sp, #16]
	  for(uint16_t i=150; i<3500; i++) {
 8006494:	f640 5eac 	movw	lr, #3500	; 0xdac
	  max_val=0;
 8006498:	2396      	movs	r3, #150	; 0x96
 800649a:	4690      	mov	r8, r2
 800649c:	9f01      	ldr	r7, [sp, #4]
 800649e:	f8c5 a008 	str.w	sl, [r5, #8]
		  if(ccd_avg[i]>max_val) {
 80064a2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80064a6:	fa1f fc83 	uxth.w	ip, r3
 80064aa:	3301      	adds	r3, #1
 80064ac:	4282      	cmp	r2, r0
 80064ae:	d903      	bls.n	80064b8 <main+0x1a8>
			  pix_num=i;
 80064b0:	46e0      	mov	r8, ip
 80064b2:	4610      	mov	r0, r2
 80064b4:	f04f 0901 	mov.w	r9, #1
	  for(uint16_t i=150; i<3500; i++) {
 80064b8:	4573      	cmp	r3, lr
 80064ba:	d1f2      	bne.n	80064a2 <main+0x192>
 80064bc:	9701      	str	r7, [sp, #4]
 80064be:	f1b9 0f00 	cmp.w	r9, #0
 80064c2:	d07a      	beq.n	80065ba <main+0x2aa>
 80064c4:	60a8      	str	r0, [r5, #8]
 80064c6:	f8a5 800c 	strh.w	r8, [r5, #12]
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	9f01      	ldr	r7, [sp, #4]
		  pix_nums[i]=pix_nums[i+1];
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	f843 2b04 	str.w	r2, [r3], #4
	  for(uint8_t i=0; i<PIX_NUM_AVG-1; i++) {
 80064d4:	42b3      	cmp	r3, r6
 80064d6:	d1fa      	bne.n	80064ce <main+0x1be>
	  if(meas_num<PIX_NUM_AVG)
 80064d8:	89ea      	ldrh	r2, [r5, #14]
	  pix_nums[PIX_NUM_AVG-1]=pix_num;
 80064da:	4643      	mov	r3, r8
 80064dc:	9903      	ldr	r1, [sp, #12]
	  if(meas_num<PIX_NUM_AVG)
 80064de:	b292      	uxth	r2, r2
 80064e0:	9701      	str	r7, [sp, #4]
	  pix_nums[PIX_NUM_AVG-1]=pix_num;
 80064e2:	f8c1 81dc 	str.w	r8, [r1, #476]	; 0x1dc
	  if(meas_num<PIX_NUM_AVG)
 80064e6:	2a77      	cmp	r2, #119	; 0x77
 80064e8:	d803      	bhi.n	80064f2 <main+0x1e2>
		  meas_num++;
 80064ea:	89ea      	ldrh	r2, [r5, #14]
 80064ec:	3201      	adds	r2, #1
 80064ee:	b292      	uxth	r2, r2
 80064f0:	81ea      	strh	r2, [r5, #14]
	  for(int16_t i=PIX_NUM_AVG-1; i>PIX_NUM_AVG-1-meas_num; i--)
 80064f2:	89ea      	ldrh	r2, [r5, #14]
 80064f4:	b292      	uxth	r2, r2
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	f000 8229 	beq.w	800694e <main+0x63e>
 80064fc:	2277      	movs	r2, #119	; 0x77
	  float pn=0.0;
 80064fe:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006600 <main+0x2f0>
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800650a:	9f01      	ldr	r7, [sp, #4]
 800650c:	e003      	b.n	8006516 <main+0x206>
 800650e:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 8006512:	edd3 7a00 	vldr	s15, [r3]
	  for(int16_t i=PIX_NUM_AVG-1; i>PIX_NUM_AVG-1-meas_num; i--)
 8006516:	89e9      	ldrh	r1, [r5, #14]
 8006518:	3a01      	subs	r2, #1
		  pn+=pix_nums[i];
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(int16_t i=PIX_NUM_AVG-1; i>PIX_NUM_AVG-1-meas_num; i--)
 800651e:	b28b      	uxth	r3, r1
 8006520:	b212      	sxth	r2, r2
 8006522:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
		  pn+=pix_nums[i];
 8006526:	ee37 7a27 	vadd.f32	s14, s14, s15
	  for(int16_t i=PIX_NUM_AVG-1; i>PIX_NUM_AVG-1-meas_num; i--)
 800652a:	429a      	cmp	r2, r3
 800652c:	dcef      	bgt.n	800650e <main+0x1fe>
 800652e:	9701      	str	r7, [sp, #4]
	  meas.num_pix=pn/meas_num;
 8006530:	89eb      	ldrh	r3, [r5, #14]
	  if(max_val<10000)	//brak probki, bylo 4000
 8006532:	f242 720f 	movw	r2, #9999	; 0x270f
	  meas.num_pix=pn/meas_num;
 8006536:	b29b      	uxth	r3, r3
	  if(max_val<10000)	//brak probki, bylo 4000
 8006538:	4290      	cmp	r0, r2
	  meas.num_pix=pn/meas_num;
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	4b3e      	ldr	r3, [pc, #248]	; (8006638 <main+0x328>)
 8006540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006544:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006548:	edc3 6a06 	vstr	s13, [r3, #24]
	  if(max_val<10000)	//brak probki, bylo 4000
 800654c:	f200 8084 	bhi.w	8006658 <main+0x348>
		  meas_num=0;
 8006550:	2100      	movs	r1, #0
 8006552:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <main+0x2e8>)
 8006554:	9f01      	ldr	r7, [sp, #4]
			  pix_nums[i]=0;
 8006556:	460a      	mov	r2, r1
		  meas_num=0;
 8006558:	81e9      	strh	r1, [r5, #14]
			  pix_nums[i]=0;
 800655a:	f843 2f04 	str.w	r2, [r3, #4]!
		  for(uint8_t i=0; i<PIX_NUM_AVG-1; i++)
 800655e:	429f      	cmp	r7, r3
 8006560:	d1fb      	bne.n	800655a <main+0x24a>
		  meas.nc=-1.0;
 8006562:	4a35      	ldr	r2, [pc, #212]	; (8006638 <main+0x328>)
 8006564:	4b38      	ldr	r3, [pc, #224]	; (8006648 <main+0x338>)
		  HAL_UART_AbortReceive_IT(&huart1);
 8006566:	4831      	ldr	r0, [pc, #196]	; (800662c <main+0x31c>)
		  meas.nc=-1.0;
 8006568:	6053      	str	r3, [r2, #4]
 800656a:	9701      	str	r7, [sp, #4]
		  HAL_UART_AbortReceive_IT(&huart1);
 800656c:	f7fe faf0 	bl	8004b50 <HAL_UART_AbortReceive_IT>
		  HAL_UART_Receive_IT(&huart1, uart_in, 21);
 8006570:	2215      	movs	r2, #21
 8006572:	492d      	ldr	r1, [pc, #180]	; (8006628 <main+0x318>)
 8006574:	482d      	ldr	r0, [pc, #180]	; (800662c <main+0x31c>)
 8006576:	f7fe f951 	bl	800481c <HAL_UART_Receive_IT>
	  if(cal_data_save_pending)
 800657a:	796b      	ldrb	r3, [r5, #5]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f43f af40 	beq.w	8006402 <main+0xf2>
 8006582:	9f01      	ldr	r7, [sp, #4]
 8006584:	4a31      	ldr	r2, [pc, #196]	; (800664c <main+0x33c>)
			  sum+=uart_in[i];
 8006586:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800658a:	449a      	add	sl, r3
		  for(uint8_t i=0; i<20; i++)
 800658c:	4b30      	ldr	r3, [pc, #192]	; (8006650 <main+0x340>)
 800658e:	4293      	cmp	r3, r2
			  sum+=uart_in[i];
 8006590:	fa5f fa8a 	uxtb.w	sl, sl
		  for(uint8_t i=0; i<20; i++)
 8006594:	d1f7      	bne.n	8006586 <main+0x276>
		  if(uart_in[0]=='!' && uart_in[1]=='C' && sum==uart_in[20])
 8006596:	f1a3 0213 	sub.w	r2, r3, #19
 800659a:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 800659e:	2b21      	cmp	r3, #33	; 0x21
 80065a0:	d103      	bne.n	80065aa <main+0x29a>
 80065a2:	7853      	ldrb	r3, [r2, #1]
 80065a4:	2b43      	cmp	r3, #67	; 0x43
 80065a6:	f000 81d5 	beq.w	8006954 <main+0x644>
		  cal_data_save_pending=0;
 80065aa:	2300      	movs	r3, #0
		  HAL_UART_Receive_IT(&huart1, uart_in, 21);
 80065ac:	2215      	movs	r2, #21
 80065ae:	491e      	ldr	r1, [pc, #120]	; (8006628 <main+0x318>)
 80065b0:	481e      	ldr	r0, [pc, #120]	; (800662c <main+0x31c>)
		  cal_data_save_pending=0;
 80065b2:	716b      	strb	r3, [r5, #5]
		  HAL_UART_Receive_IT(&huart1, uart_in, 21);
 80065b4:	f7fe f932 	bl	800481c <HAL_UART_Receive_IT>
 80065b8:	e71e      	b.n	80063f8 <main+0xe8>
	  for(uint16_t i=150; i<3500; i++) {
 80065ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80065be:	4648      	mov	r0, r9
 80065c0:	e783      	b.n	80064ca <main+0x1ba>
 80065c2:	bf00      	nop
 80065c4:	f3af 8000 	nop.w
 80065c8:	c4687a3d 	.word	0xc4687a3d
 80065cc:	3eec8571 	.word	0x3eec8571
 80065d0:	d1244a62 	.word	0xd1244a62
 80065d4:	3ffc28cb 	.word	0x3ffc28cb
 80065d8:	00000000 	.word	0x00000000
 80065dc:	409c8000 	.word	0x409c8000
 80065e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80065e4:	3f80624d 	.word	0x3f80624d
 80065e8:	31eb6950 	.word	0x31eb6950
 80065ec:	3fee28c7 	.word	0x3fee28c7
 80065f0:	00000000 	.word	0x00000000
 80065f4:	40f86a00 	.word	0x40f86a00
 80065f8:	20017998 	.word	0x20017998
 80065fc:	e000ed00 	.word	0xe000ed00
 8006600:	00000000 	.word	0x00000000
 8006604:	20017b7c 	.word	0x20017b7c
 8006608:	2001b57c 	.word	0x2001b57c
 800660c:	58021000 	.word	0x58021000
 8006610:	58020800 	.word	0x58020800
 8006614:	2001218c 	.word	0x2001218c
 8006618:	2001221c 	.word	0x2001221c
 800661c:	200121b8 	.word	0x200121b8
 8006620:	2001b608 	.word	0x2001b608
 8006624:	2001b688 	.word	0x2001b688
 8006628:	20017980 	.word	0x20017980
 800662c:	2001b6c8 	.word	0x2001b6c8
 8006630:	20017bac 	.word	0x20017bac
 8006634:	200122aa 	.word	0x200122aa
 8006638:	20017964 	.word	0x20017964
 800663c:	20013f94 	.word	0x20013f94
 8006640:	20017bb0 	.word	0x20017bb0
 8006644:	20017e04 	.word	0x20017e04
 8006648:	bf800000 	.word	0xbf800000
 800664c:	2001797f 	.word	0x2001797f
 8006650:	20017993 	.word	0x20017993
 8006654:	20012294 	.word	0x20012294
		  float xp=-(REAL_PIX_NUM/2.0-meas.num_pix+cal_data.x_corr)*0.008;
 8006658:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 800665c:	ed9b 4a04 	vldr	s8, [fp, #16]
		  float ns=1.75996+((13.6e-6)*(meas.temp-20.0));// n szafiru
 8006660:	4fd1      	ldr	r7, [pc, #836]	; (80069a8 <main+0x698>)
 8006662:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
		  float xp=-(REAL_PIX_NUM/2.0-meas.num_pix+cal_data.x_corr)*0.008;
 8006666:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
		  xp+=cal_data.D*pow(xp, 3.0);
 800666a:	ed9b fa02 	vldr	s30, [fp, #8]
		  float xp=-(REAL_PIX_NUM/2.0-meas.num_pix+cal_data.x_corr)*0.008;
 800666e:	ee38 7b47 	vsub.f64	d7, d8, d7
		  float ns=1.75996+((13.6e-6)*(meas.temp-20.0));// n szafiru
 8006672:	ed97 6a00 	vldr	s12, [r7]
 8006676:	eeb0 eb49 	vmov.f64	d14, d9
 800667a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
		  float xp=-(REAL_PIX_NUM/2.0-meas.num_pix+cal_data.x_corr)*0.008;
 800667e:	ee37 7b04 	vadd.f64	d7, d7, d4
		  xp+=cal_data.D*pow(xp, 3.0);
 8006682:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
		  float ns=1.75996+((13.6e-6)*(meas.temp-20.0));// n szafiru
 8006686:	ee36 6b45 	vsub.f64	d6, d6, d5
		  float xp=-(REAL_PIX_NUM/2.0-meas.num_pix+cal_data.x_corr)*0.008;
 800668a:	ee27 7b4d 	vnmul.f64	d7, d7, d13
		  float ns=1.75996+((13.6e-6)*(meas.temp-20.0));// n szafiru
 800668e:	eea6 eb0a 	vfma.f64	d14, d6, d10
		  float xp=-(REAL_PIX_NUM/2.0-meas.num_pix+cal_data.x_corr)*0.008;
 8006692:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		  xp+=cal_data.D*pow(xp, 3.0);
 8006696:	eeb7 facf 	vcvt.f64.f32	d15, s30
 800669a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800669e:	eeb0 0b47 	vmov.f64	d0, d7
 80066a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80066a6:	f003 f9cb 	bl	8009a40 <pow>
		  float n_gamma=atan(xp/cal_data.f);
 80066aa:	eddb 6a01 	vldr	s13, [fp, #4]
		  float ns=1.75996+((13.6e-6)*(meas.temp-20.0));// n szafiru
 80066ae:	eeb7 ebce 	vcvt.f32.f64	s28, d14
		  xp+=cal_data.D*pow(xp, 3.0);
 80066b2:	ed9d 7b04 	vldr	d7, [sp, #16]
		  float n_beta=asin((sin(n_gamma))/ns);
 80066b6:	eeb7 eace 	vcvt.f64.f32	d14, s28
		  xp+=cal_data.D*pow(xp, 3.0);
 80066ba:	eeaf 7b00 	vfma.f64	d7, d15, d0
 80066be:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		  float n_gamma=atan(xp/cal_data.f);
 80066c2:	ee87 0a26 	vdiv.f32	s0, s14, s13
 80066c6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80066ca:	f003 fc7d 	bl	8009fc8 <atan>
 80066ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		  float n_beta=asin((sin(n_gamma))/ns);
 80066d2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80066d6:	f003 fd7b 	bl	800a1d0 <sin>
 80066da:	ee80 0b0e 	vdiv.f64	d0, d0, d14
 80066de:	f003 fdbf 	bl	800a260 <asin>
 80066e2:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
		  float n_alpha=n_beta+54.0/180.0*M_PI;
 80066e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80066ea:	ee37 7b0c 	vadd.f64	d7, d7, d12
 80066ee:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		  meas.nc=ns*sin(n_alpha);
 80066f2:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
 80066f6:	f003 fd6b 	bl	800a1d0 <sin>
 80066fa:	ee2e 0b00 	vmul.f64	d0, d14, d0
 80066fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006702:	ed87 0a01 	vstr	s0, [r7, #4]
		  meas.led_curr=getLedCurrent();
 8006706:	f7ff fbef 	bl	8005ee8 <getLedCurrent>
		  meas.nc = ((uint32_t)(meas.nc * 100000 + 0.5) / 100000.0);
 800670a:	edd7 7a01 	vldr	s15, [r7, #4]
 800670e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006712:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80069ac <main+0x69c>
		  meas.led_curr=getLedCurrent();
 8006716:	ee10 1a10 	vmov	r1, s0
 800671a:	ed87 0a05 	vstr	s0, [r7, #20]
		  meas.nc = ((uint32_t)(meas.nc * 100000 + 0.5) / 100000.0);
 800671e:	2300      	movs	r3, #0
 8006720:	ee27 7a87 	vmul.f32	s14, s15, s14
		  for(uint16_t i=0; i<(9201*2-1); i++)
 8006724:	f244 70e1 	movw	r0, #18401	; 0x47e1
		  meas.nc = ((uint32_t)(meas.nc * 100000 + 0.5) / 100000.0);
 8006728:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800672c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006730:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8006734:	eeb8 7b47 	vcvt.f64.u32	d7, s14
 8006738:	ee87 5b0b 	vdiv.f64	d5, d7, d11
 800673c:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8006740:	ed87 5a01 	vstr	s10, [r7, #4]
 8006744:	9f01      	ldr	r7, [sp, #4]
 8006746:	e003      	b.n	8006750 <main+0x440>
 8006748:	3301      	adds	r3, #1
		  for(uint16_t i=0; i<(9201*2-1); i++)
 800674a:	4283      	cmp	r3, r0
 800674c:	f000 80f3 	beq.w	8006936 <main+0x626>
			if(meas.nc-n_brix[i]<=0.0)
 8006750:	4a97      	ldr	r2, [pc, #604]	; (80069b0 <main+0x6a0>)
 8006752:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006756:	edd2 7a00 	vldr	s15, [r2]
 800675a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800675e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006766:	d8ef      	bhi.n	8006748 <main+0x438>
				brix=-2.00+i*0.005;
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8006770:	9701      	str	r7, [sp, #4]
 8006772:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006776:	ed9f 4b86 	vldr	d4, [pc, #536]	; 8006990 <main+0x680>
 800677a:	eea7 6b04 	vfma.f64	d6, d7, d4
 800677e:	eef7 5bc6 	vcvt.f32.f64	s11, d6
		  if(brix<0)
 8006782:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8006786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678a:	f100 80ca 	bmi.w	8006922 <main+0x612>
 800678e:	eefc 6ae5 	vcvt.u32.f32	s13, s11
 8006792:	4888      	ldr	r0, [pc, #544]	; (80069b4 <main+0x6a4>)
 8006794:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8006798:	ee15 3a90 	vmov	r3, s11
 800679c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a0:	edcd 6a04 	vstr	s13, [sp, #16]
 80067a4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80067a8:	fba0 0202 	umull	r0, r2, r0, r2
 80067ac:	0892      	lsrs	r2, r2, #2
 80067ae:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80067b2:	f102 0c01 	add.w	ip, r2, #1
 80067b6:	ee06 0a90 	vmov	s13, r0
 80067ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80067be:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80067c2:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80067c6:	ee37 7a64 	vsub.f32	s14, s14, s9
		  y=(uint8_t)meas.temp-10;
 80067ca:	4877      	ldr	r0, [pc, #476]	; (80069a8 <main+0x698>)
		  memcpy(&uart_out[14], (uint8_t*)&(meas.nc), 4);
 80067cc:	ee15 ea10 	vmov	lr, s10
		  meas.brix=realbrix;
 80067d0:	4f75      	ldr	r7, [pc, #468]	; (80069a8 <main+0x698>)
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 80067d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
		  y=(uint8_t)meas.temp-10;
 80067d6:	edd0 7a00 	vldr	s15, [r0]
		  memcpy(&uart_out[2], (uint8_t*)&(meas.brix), 4);
 80067da:	9802      	ldr	r0, [sp, #8]
		  y=(uint8_t)meas.temp-10;
 80067dc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
		  meas.brix=realbrix;
 80067e0:	edc7 5a03 	vstr	s11, [r7, #12]
		  memcpy(&uart_out[14], (uint8_t*)&(meas.nc), 4);
 80067e4:	f8c0 e00e 	str.w	lr, [r0, #14]
		  memcpy(&uart_out[22], (uint8_t*)&(meas.temp), 4);
 80067e8:	ee17 ea90 	vmov	lr, s15
		  memcpy(&uart_out[2], (uint8_t*)&(meas.brix), 4);
 80067ec:	f8c0 3002 	str.w	r3, [r0, #2]
		  uart_out[0]='!';
 80067f0:	2321      	movs	r3, #33	; 0x21
		  y=(uint8_t)meas.temp-10;
 80067f2:	edcd 6a02 	vstr	s13, [sp, #8]
		  memcpy(&uart_out[10], (uint8_t*)&(meas.led_curr), 4);
 80067f6:	f8c0 100a 	str.w	r1, [r0, #10]
		  y=(uint8_t)meas.temp-10;
 80067fa:	f89d 1008 	ldrb.w	r1, [sp, #8]
		  uart_out[0]='!';
 80067fe:	7003      	strb	r3, [r0, #0]
		  memcpy(&uart_out[22], (uint8_t*)&(meas.temp), 4);
 8006800:	f8c0 e016 	str.w	lr, [r0, #22]
		  float py=meas.temp-(uint8_t)meas.temp;
 8006804:	ee06 1a90 	vmov	s13, r1
		  uart_out[0]='!';
 8006808:	9002      	str	r0, [sp, #8]
		  y=(uint8_t)meas.temp-10;
 800680a:	f1a1 000a 	sub.w	r0, r1, #10
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 800680e:	4f6a      	ldr	r7, [pc, #424]	; (80069b8 <main+0x6a8>)
		  float py=meas.temp-(uint8_t)meas.temp;
 8006810:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 8006814:	b2c0      	uxtb	r0, r0
 8006816:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
 800681a:	1c41      	adds	r1, r0, #1
		  float py=meas.temp-(uint8_t)meas.temp;
 800681c:	ee37 5ae6 	vsub.f32	s10, s15, s13
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 8006820:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 8006824:	eb00 0e0c 	add.w	lr, r0, ip
 8006828:	4410      	add	r0, r2
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 800682a:	ee76 6a45 	vsub.f32	s13, s12, s10
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 800682e:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
 8006832:	eb07 0080 	add.w	r0, r7, r0, lsl #2
		  uart_out[1]='M';
 8006836:	9f02      	ldr	r7, [sp, #8]
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 8006838:	edde 7a00 	vldr	s15, [lr]
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 800683c:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 8006840:	ed90 6a00 	vldr	s12, [r0]
		  uart_out[1]='M';
 8006844:	204d      	movs	r0, #77	; 0x4d
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 8006846:	ee64 7aa7 	vmul.f32	s15, s9, s15
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 800684a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
		  uart_out[1]='M';
 800684e:	7078      	strb	r0, [r7, #1]
 8006850:	46be      	mov	lr, r7
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 8006852:	ee27 6a06 	vmul.f32	s12, s14, s12
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 8006856:	4f58      	ldr	r7, [pc, #352]	; (80069b8 <main+0x6a8>)
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 8006858:	ee67 7aa6 	vmul.f32	s15, s15, s13
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 800685c:	440a      	add	r2, r1
 800685e:	4461      	add	r1, ip
		  memcpy(&uart_out[26], (uint8_t*)&(cal_data.D), 4);
 8006860:	f8db 0008 	ldr.w	r0, [fp, #8]
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 8006864:	eb07 0282 	add.w	r2, r7, r2, lsl #2
		  uint8_t sum=0;
 8006868:	f04f 0c00 	mov.w	ip, #0
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 800686c:	eee6 7a26 	vfma.f32	s15, s12, s13
		  float f00=temp_brix[y][x], f11=temp_brix[y+1][x+1], f01=temp_brix[y+1][x], f10=temp_brix[y][x+1];
 8006870:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8006874:	ed92 6a00 	vldr	s12, [r2]
 8006878:	edd1 6a00 	vldr	s13, [r1]
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 800687c:	ee26 6a07 	vmul.f32	s12, s12, s14
		  memcpy(&uart_out[34], (uint8_t*)&(cal_data.serial), 2);
 8006880:	f8bb 2000 	ldrh.w	r2, [fp]
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 8006884:	ee26 7aa4 	vmul.f32	s14, s13, s9
		  memcpy(&uart_out[30], (uint8_t*)&(cal_data.f), 4);
 8006888:	f8db 7004 	ldr.w	r7, [fp, #4]
		  memcpy(&uart_out[36], (uint8_t*)&(cal_data.temp_corr), 4);
 800688c:	f8db 100c 	ldr.w	r1, [fp, #12]
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 8006890:	eee6 7a05 	vfma.f32	s15, s12, s10
		  memcpy(&uart_out[34], (uint8_t*)&(cal_data.serial), 2);
 8006894:	f8ae 2022 	strh.w	r2, [lr, #34]	; 0x22
		  memcpy(&uart_out[40], (uint8_t*)&(cal_data.x_corr), 4);
 8006898:	f8db 2010 	ldr.w	r2, [fp, #16]
		  memcpy(&uart_out[26], (uint8_t*)&(cal_data.D), 4);
 800689c:	f8ce 001a 	str.w	r0, [lr, #26]
		  memcpy(&uart_out[30], (uint8_t*)&(cal_data.f), 4);
 80068a0:	4670      	mov	r0, lr
 80068a2:	f8ce 701e 	str.w	r7, [lr, #30]
		  memcpy(&uart_out[36], (uint8_t*)&(cal_data.temp_corr), 4);
 80068a6:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
		  memcpy(&uart_out[40], (uint8_t*)&(cal_data.x_corr), 4);
 80068aa:	4671      	mov	r1, lr
 80068ac:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
		  float corr=f00*(1-px)*(1-py) + f10*px*(1-py) + f01*(1-px)*py + f11*px*py;
 80068b0:	eee7 7a05 	vfma.f32	s15, s14, s10
		  meas.nck=n_brix[(uint16_t)(meas.brixk*200.0+400.0)];
 80068b4:	4f3e      	ldr	r7, [pc, #248]	; (80069b0 <main+0x6a0>)
 80068b6:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8006998 <main+0x688>
 80068ba:	ed9f 4b39 	vldr	d4, [pc, #228]	; 80069a0 <main+0x690>
		  brix=realbrix-corr;
 80068be:	ee75 7ae7 	vsub.f32	s15, s11, s15
		  memcpy(&uart_out[6], (uint8_t*)&(meas.brixk), 4);
 80068c2:	ee17 ea90 	vmov	lr, s15
		  meas.nck=n_brix[(uint16_t)(meas.brixk*200.0+400.0)];
 80068c6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		  memcpy(&uart_out[6], (uint8_t*)&(meas.brixk), 4);
 80068ca:	f8c0 e006 	str.w	lr, [r0, #6]
		  meas.brixk=brix;
 80068ce:	4836      	ldr	r0, [pc, #216]	; (80069a8 <main+0x698>)
 80068d0:	edc0 7a04 	vstr	s15, [r0, #16]
		  meas.nck=n_brix[(uint16_t)(meas.brixk*200.0+400.0)];
 80068d4:	eeb0 7b46 	vmov.f64	d7, d6
 80068d8:	eea5 7b04 	vfma.f64	d7, d5, d4
 80068dc:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80068e0:	ee17 2a10 	vmov	r2, s14
 80068e4:	b292      	uxth	r2, r2
 80068e6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80068ea:	6812      	ldr	r2, [r2, #0]
		  memcpy(&uart_out[18], (uint8_t*)&(meas.nck), 4);
 80068ec:	f8c1 2012 	str.w	r2, [r1, #18]
 80068f0:	4932      	ldr	r1, [pc, #200]	; (80069bc <main+0x6ac>)
 80068f2:	9102      	str	r1, [sp, #8]
		  meas.nck=n_brix[(uint16_t)(meas.brixk*200.0+400.0)];
 80068f4:	6082      	str	r2, [r0, #8]
		  for(uint8_t i=0; i<44; i++)
 80068f6:	460a      	mov	r2, r1
 80068f8:	9f01      	ldr	r7, [sp, #4]
 80068fa:	e001      	b.n	8006900 <main+0x5f0>
 80068fc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
			  sum+=uart_out[i];
 8006900:	449c      	add	ip, r3
		  for(uint8_t i=0; i<44; i++)
 8006902:	4b2f      	ldr	r3, [pc, #188]	; (80069c0 <main+0x6b0>)
 8006904:	4293      	cmp	r3, r2
			  sum+=uart_out[i];
 8006906:	fa5f fc8c 	uxtb.w	ip, ip
		  for(uint8_t i=0; i<44; i++)
 800690a:	d1f7      	bne.n	80068fc <main+0x5ec>
 800690c:	9701      	str	r7, [sp, #4]
		  HAL_UART_Transmit(&huart1, uart_out, 45, 100);
 800690e:	2364      	movs	r3, #100	; 0x64
		  uart_out[44]=sum;
 8006910:	9f02      	ldr	r7, [sp, #8]
		  HAL_UART_Transmit(&huart1, uart_out, 45, 100);
 8006912:	222d      	movs	r2, #45	; 0x2d
 8006914:	4929      	ldr	r1, [pc, #164]	; (80069bc <main+0x6ac>)
 8006916:	482b      	ldr	r0, [pc, #172]	; (80069c4 <main+0x6b4>)
		  uart_out[44]=sum;
 8006918:	f887 c02c 	strb.w	ip, [r7, #44]	; 0x2c
		  HAL_UART_Transmit(&huart1, uart_out, 45, 100);
 800691c:	f7fe fd86 	bl	800542c <HAL_UART_Transmit>
 8006920:	e62b      	b.n	800657a <main+0x26a>
		  if(brix<0)
 8006922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006926:	ee15 3a90 	vmov	r3, s11
 800692a:	eddf 4a27 	vldr	s9, [pc, #156]	; 80069c8 <main+0x6b8>
 800692e:	f04f 0c01 	mov.w	ip, #1
 8006932:	2200      	movs	r2, #0
 8006934:	e749      	b.n	80067ca <main+0x4ba>
 8006936:	eddf 4a24 	vldr	s9, [pc, #144]	; 80069c8 <main+0x6b8>
 800693a:	2300      	movs	r3, #0
 800693c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006940:	f04f 0c01 	mov.w	ip, #1
		  float brix=0.0, realbrix=0.0;
 8006944:	eef0 5a64 	vmov.f32	s11, s9
 8006948:	461a      	mov	r2, r3
 800694a:	9701      	str	r7, [sp, #4]
 800694c:	e73d      	b.n	80067ca <main+0x4ba>
	  float pn=0.0;
 800694e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80069c8 <main+0x6b8>
 8006952:	e5ed      	b.n	8006530 <main+0x220>
		  if(uart_in[0]=='!' && uart_in[1]=='C' && sum==uart_in[20])
 8006954:	7d13      	ldrb	r3, [r2, #20]
 8006956:	4553      	cmp	r3, sl
 8006958:	f47f ae27 	bne.w	80065aa <main+0x29a>
			  memcpy((uint8_t*)&(cal_data.serial), &uart_in[2], 2);
 800695c:	4610      	mov	r0, r2
 800695e:	8851      	ldrh	r1, [r2, #2]
			  memcpy((uint8_t*)&(cal_data.f), &uart_in[4], 4);
 8006960:	6852      	ldr	r2, [r2, #4]
			  memset(uart_in, 0, 25);
 8006962:	2300      	movs	r3, #0
			  memcpy((uint8_t*)&(cal_data.serial), &uart_in[2], 2);
 8006964:	f8ab 1000 	strh.w	r1, [fp]
			  memcpy((uint8_t*)&(cal_data.f), &uart_in[4], 4);
 8006968:	f8cb 2004 	str.w	r2, [fp, #4]
			  memcpy((uint8_t*)&(cal_data.D), &uart_in[8], 4);
 800696c:	6881      	ldr	r1, [r0, #8]
			  memcpy((uint8_t*)&(cal_data.temp_corr), &uart_in[12], 4);
 800696e:	68c2      	ldr	r2, [r0, #12]
			  memset(uart_in, 0, 25);
 8006970:	6003      	str	r3, [r0, #0]
 8006972:	6043      	str	r3, [r0, #4]
 8006974:	6083      	str	r3, [r0, #8]
 8006976:	60c3      	str	r3, [r0, #12]
 8006978:	6143      	str	r3, [r0, #20]
 800697a:	7603      	strb	r3, [r0, #24]
			  memcpy((uint8_t*)&(cal_data.temp_corr), &uart_in[12], 4);
 800697c:	e9cb 1202 	strd	r1, r2, [fp, #8]
			  memcpy((uint8_t*)&(cal_data.x_corr), &uart_in[16], 4);
 8006980:	6902      	ldr	r2, [r0, #16]
			  memset(uart_in, 0, 25);
 8006982:	6103      	str	r3, [r0, #16]
			  memcpy((uint8_t*)&(cal_data.x_corr), &uart_in[16], 4);
 8006984:	f8cb 2010 	str.w	r2, [fp, #16]
			  saveCalData();
 8006988:	f7ff fbfe 	bl	8006188 <saveCalData>
 800698c:	e60d      	b.n	80065aa <main+0x29a>
 800698e:	bf00      	nop
 8006990:	47ae147b 	.word	0x47ae147b
 8006994:	3f747ae1 	.word	0x3f747ae1
 8006998:	00000000 	.word	0x00000000
 800699c:	40790000 	.word	0x40790000
 80069a0:	00000000 	.word	0x00000000
 80069a4:	40690000 	.word	0x40690000
 80069a8:	20017964 	.word	0x20017964
 80069ac:	47c35000 	.word	0x47c35000
 80069b0:	20000008 	.word	0x20000008
 80069b4:	cccccccd 	.word	0xcccccccd
 80069b8:	0800b374 	.word	0x0800b374
 80069bc:	20017b7c 	.word	0x20017b7c
 80069c0:	20017ba7 	.word	0x20017ba7
 80069c4:	2001b6c8 	.word	0x2001b6c8
 80069c8:	00000000 	.word	0x00000000

080069cc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80069d0:	b538      	push	{r3, r4, r5, lr}

  hspi4.Instance = SPI4;
 80069d2:	4815      	ldr	r0, [pc, #84]	; (8006a28 <MX_SPI4_Init+0x58>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80069d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi4.Instance = SPI4;
 80069d8:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <MX_SPI4_Init+0x5c>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80069da:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80069de:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 7;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80069e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi4.Instance = SPI4;
 80069e6:	6003      	str	r3, [r0, #0]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80069e8:	2300      	movs	r3, #0
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80069ea:	6042      	str	r2, [r0, #4]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80069ec:	2207      	movs	r2, #7
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80069ee:	6341      	str	r1, [r0, #52]	; 0x34
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80069f0:	6083      	str	r3, [r0, #8]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80069f4:	6583      	str	r3, [r0, #88]	; 0x58
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80069f6:	60c2      	str	r2, [r0, #12]
  hspi4.Init.CRCPolynomial = 7;
 80069f8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80069fa:	e9c0 5406 	strd	r5, r4, [r0, #24]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80069fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a02:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006a06:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006a0a:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006a0e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006a12:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8006a16:	f7fc fbc5 	bl	80031a4 <HAL_SPI_Init>
 8006a1a:	b900      	cbnz	r0, 8006a1e <MX_SPI4_Init+0x4e>
  {
    Error_Handler();
  }

}
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8006a22:	f7ff bfd3 	b.w	80069cc <Error_Handler>
 8006a26:	bf00      	nop
 8006a28:	2001b580 	.word	0x2001b580
 8006a2c:	40013400 	.word	0x40013400

08006a30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI4)
 8006a30:	4a1a      	ldr	r2, [pc, #104]	; (8006a9c <HAL_SPI_MspInit+0x6c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a32:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI4)
 8006a34:	6801      	ldr	r1, [r0, #0]
{
 8006a36:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(spiHandle->Instance==SPI4)
 8006a38:	4291      	cmp	r1, r2
{
 8006a3a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a3c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006a40:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006a44:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI4)
 8006a46:	d001      	beq.n	8006a4c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8006a48:	b009      	add	sp, #36	; 0x24
 8006a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006a4c:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Pin = SCLK_Pin|SDO_Pin|SDI_Pin;
 8006a4e:	2664      	movs	r6, #100	; 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a50:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a52:	2502      	movs	r5, #2
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006a54:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a58:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006a5a:	2705      	movs	r7, #5
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006a5c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8006a60:	f8c2 00f0 	str.w	r0, [r2, #240]	; 0xf0
 8006a64:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8006a68:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8006a6c:	9001      	str	r0, [sp, #4]
 8006a6e:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a70:	f8d2 00e0 	ldr.w	r0, [r2, #224]	; 0xe0
 8006a74:	f040 0010 	orr.w	r0, r0, #16
 8006a78:	f8c2 00e0 	str.w	r0, [r2, #224]	; 0xe0
 8006a7c:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a80:	4808      	ldr	r0, [pc, #32]	; (8006aa4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a82:	f002 0210 	and.w	r2, r2, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = SCLK_Pin|SDO_Pin|SDI_Pin;
 8006a88:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a8a:	9202      	str	r2, [sp, #8]
 8006a8c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a8e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006a90:	e9cd 4706 	strd	r4, r7, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a94:	f7fa fde4 	bl	8001660 <HAL_GPIO_Init>
}
 8006a98:	b009      	add	sp, #36	; 0x24
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	40013400 	.word	0x40013400
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	58021000 	.word	0x58021000

08006aa8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <HAL_MspInit+0x20>)
{
 8006aaa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006ab0:	f042 0202 	orr.w	r2, r2, #2
 8006ab4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ac4:	b002      	add	sp, #8
 8006ac6:	4770      	bx	lr
 8006ac8:	58024400 	.word	0x58024400

08006acc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop

08006ad0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ad0:	e7fe      	b.n	8006ad0 <HardFault_Handler>
 8006ad2:	bf00      	nop

08006ad4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ad4:	e7fe      	b.n	8006ad4 <MemManage_Handler>
 8006ad6:	bf00      	nop

08006ad8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ad8:	e7fe      	b.n	8006ad8 <BusFault_Handler>
 8006ada:	bf00      	nop

08006adc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006adc:	e7fe      	b.n	8006adc <UsageFault_Handler>
 8006ade:	bf00      	nop

08006ae0 <SVC_Handler>:
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop

08006ae4 <DebugMon_Handler>:
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop

08006ae8 <PendSV_Handler>:
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop

08006aec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006aec:	f7f9 bdfc 	b.w	80006e8 <HAL_IncTick>

08006af0 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <TIM1_CC_IRQHandler+0x8>)
 8006af2:	f7fd bb21 	b.w	8004138 <HAL_TIM_IRQHandler>
 8006af6:	bf00      	nop
 8006af8:	2001b648 	.word	0x2001b648

08006afc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <TIM2_IRQHandler+0x8>)
 8006afe:	f7fd bb1b 	b.w	8004138 <HAL_TIM_IRQHandler>
 8006b02:	bf00      	nop
 8006b04:	2001b688 	.word	0x2001b688

08006b08 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <USART1_IRQHandler+0x8>)
 8006b0a:	f7fd bf1b 	b.w	8004944 <HAL_UART_IRQHandler>
 8006b0e:	bf00      	nop
 8006b10:	2001b6c8 	.word	0x2001b6c8

08006b14 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <UART4_IRQHandler+0x8>)
 8006b16:	f7fd bf15 	b.w	8004944 <HAL_UART_IRQHandler>
 8006b1a:	bf00      	nop
 8006b1c:	2001b748 	.word	0x2001b748

08006b20 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b20:	4914      	ldr	r1, [pc, #80]	; (8006b74 <SystemInit+0x54>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b22:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8006b24:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <SystemInit+0x58>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8006b26:	4815      	ldr	r0, [pc, #84]	; (8006b7c <SystemInit+0x5c>)
{
 8006b28:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b2a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8006b2e:	2601      	movs	r6, #1
 8006b30:	4d13      	ldr	r5, [pc, #76]	; (8006b80 <SystemInit+0x60>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b32:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8006b36:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8006b3a:	681c      	ldr	r4, [r3, #0]
 8006b3c:	4334      	orrs	r4, r6
 8006b3e:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006b40:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8006b42:	681c      	ldr	r4, [r3, #0]
 8006b44:	4020      	ands	r0, r4

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006b46:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8006b4a:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8006b4c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006b4e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006b50:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8006b54:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8006b58:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8006b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8006b68:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006b6a:	661a      	str	r2, [r3, #96]	; 0x60
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8006b6c:	602e      	str	r6, [r5, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006b6e:	608c      	str	r4, [r1, #8]
#endif

}
 8006b70:	bc70      	pop	{r4, r5, r6}
 8006b72:	4770      	bx	lr
 8006b74:	e000ed00 	.word	0xe000ed00
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006b80:	51008108 	.word	0x51008108

08006b84 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006b84:	b510      	push	{r4, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 99;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b86:	2300      	movs	r3, #0
{
 8006b88:	b08c      	sub	sp, #48	; 0x30
  htim2.Instance = TIM2;
 8006b8a:	4820      	ldr	r0, [pc, #128]	; (8006c0c <MX_TIM2_Init+0x88>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b90:	2263      	movs	r2, #99	; 0x63
 8006b92:	f643 14cf 	movw	r4, #14799	; 0x39cf
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b96:	9303      	str	r3, [sp, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006b98:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b9a:	9300      	str	r3, [sp, #0]
  htim2.Init.Period = 14799;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b9c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b9e:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ba0:	9306      	str	r3, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ba2:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ba6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006baa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006bae:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bb2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006bb6:	f7fd fbf3 	bl	80043a0 <HAL_TIM_Base_Init>
 8006bba:	b9d0      	cbnz	r0, 8006bf2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006bc0:	a903      	add	r1, sp, #12
 8006bc2:	4812      	ldr	r0, [pc, #72]	; (8006c0c <MX_TIM2_Init+0x88>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006bc4:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006bc6:	f7fd f9c5 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8006bca:	b9e0      	cbnz	r0, 8006c06 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8006bcc:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8006bce:	2320      	movs	r3, #32
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8006bd0:	a907      	add	r1, sp, #28
 8006bd2:	480e      	ldr	r0, [pc, #56]	; (8006c0c <MX_TIM2_Init+0x88>)
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8006bd4:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8006bd8:	f7fd fa88 	bl	80040ec <HAL_TIM_SlaveConfigSynchronization>
 8006bdc:	b980      	cbnz	r0, 8006c00 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bde:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006be0:	4669      	mov	r1, sp
 8006be2:	480a      	ldr	r0, [pc, #40]	; (8006c0c <MX_TIM2_Init+0x88>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006be4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006be6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006be8:	f7fd fda2 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8006bec:	b920      	cbnz	r0, 8006bf8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
  }

}
 8006bee:	b00c      	add	sp, #48	; 0x30
 8006bf0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006bf2:	f7ff feeb 	bl	80069cc <Error_Handler>
 8006bf6:	e7e1      	b.n	8006bbc <MX_TIM2_Init+0x38>
    Error_Handler();
 8006bf8:	f7ff fee8 	bl	80069cc <Error_Handler>
}
 8006bfc:	b00c      	add	sp, #48	; 0x30
 8006bfe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006c00:	f7ff fee4 	bl	80069cc <Error_Handler>
 8006c04:	e7eb      	b.n	8006bde <MX_TIM2_Init+0x5a>
    Error_Handler();
 8006c06:	f7ff fee1 	bl	80069cc <Error_Handler>
 8006c0a:	e7df      	b.n	8006bcc <MX_TIM2_Init+0x48>
 8006c0c:	2001b688 	.word	0x2001b688

08006c10 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8006c10:	4a25      	ldr	r2, [pc, #148]	; (8006ca8 <HAL_TIM_Base_MspInit+0x98>)
 8006c12:	6803      	ldr	r3, [r0, #0]
 8006c14:	4293      	cmp	r3, r2
{
 8006c16:	b510      	push	{r4, lr}
 8006c18:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 8006c1a:	d016      	beq.n	8006c4a <HAL_TIM_Base_MspInit+0x3a>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c20:	d029      	beq.n	8006c76 <HAL_TIM_Base_MspInit+0x66>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8006c22:	4a22      	ldr	r2, [pc, #136]	; (8006cac <HAL_TIM_Base_MspInit+0x9c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d001      	beq.n	8006c2c <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006c28:	b004      	add	sp, #16
 8006c2a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c2c:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8006c2e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006c32:	f042 0202 	orr.w	r2, r2, #2
 8006c36:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	9303      	str	r3, [sp, #12]
 8006c44:	9b03      	ldr	r3, [sp, #12]
}
 8006c46:	b004      	add	sp, #16
 8006c48:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c4a:	4b19      	ldr	r3, [pc, #100]	; (8006cb0 <HAL_TIM_Base_MspInit+0xa0>)
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	2200      	movs	r2, #0
 8006c50:	201b      	movs	r0, #27
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c52:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
 8006c56:	430c      	orrs	r4, r1
 8006c58:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c60:	400b      	ands	r3, r1
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8006c66:	f7fa fb69 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006c6a:	201b      	movs	r0, #27
}
 8006c6c:	b004      	add	sp, #16
 8006c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006c72:	f7fa bb9d 	b.w	80013b0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c76:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <HAL_TIM_Base_MspInit+0xa0>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006c78:	2200      	movs	r2, #0
 8006c7a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c7c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006c80:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c82:	f044 0401 	orr.w	r4, r4, #1
 8006c86:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	9302      	str	r3, [sp, #8]
 8006c94:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006c96:	f7fa fb51 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006c9a:	201c      	movs	r0, #28
}
 8006c9c:	b004      	add	sp, #16
 8006c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ca2:	f7fa bb85 	b.w	80013b0 <HAL_NVIC_EnableIRQ>
 8006ca6:	bf00      	nop
 8006ca8:	40010000 	.word	0x40010000
 8006cac:	40000400 	.word	0x40000400
 8006cb0:	58024400 	.word	0x58024400

08006cb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8006cb4:	4923      	ldr	r1, [pc, #140]	; (8006d44 <HAL_TIM_MspPostInit+0x90>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cb6:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8006cb8:	6802      	ldr	r2, [r0, #0]
{
 8006cba:	b570      	push	{r4, r5, r6, lr}
  if(timHandle->Instance==TIM1)
 8006cbc:	428a      	cmp	r2, r1
{
 8006cbe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006cc4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006cc8:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8006cca:	d004      	beq.n	8006cd6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8006ccc:	491e      	ldr	r1, [pc, #120]	; (8006d48 <HAL_TIM_MspPostInit+0x94>)
 8006cce:	428a      	cmp	r2, r1
 8006cd0:	d01d      	beq.n	8006d0e <HAL_TIM_MspPostInit+0x5a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006cd2:	b008      	add	sp, #32
 8006cd4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cd6:	4a1d      	ldr	r2, [pc, #116]	; (8006d4c <HAL_TIM_MspPostInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006cd8:	f44f 7600 	mov.w	r6, #512	; 0x200
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cdc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cde:	2502      	movs	r5, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ce0:	f8d2 00e0 	ldr.w	r0, [r2, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ce4:	2401      	movs	r4, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ce6:	f040 0010 	orr.w	r0, r0, #16
 8006cea:	f8c2 00e0 	str.w	r0, [r2, #224]	; 0xe0
 8006cee:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cf2:	4817      	ldr	r0, [pc, #92]	; (8006d50 <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cf4:	f002 0210 	and.w	r2, r2, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfa:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cfc:	9201      	str	r2, [sp, #4]
 8006cfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d00:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d02:	e9cd 6503 	strd	r6, r5, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d06:	f7fa fcab 	bl	8001660 <HAL_GPIO_Init>
}
 8006d0a:	b008      	add	sp, #32
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d0e:	4a0f      	ldr	r2, [pc, #60]	; (8006d4c <HAL_TIM_MspPostInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d10:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006d12:	2680      	movs	r6, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d14:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d16:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d1a:	480e      	ldr	r0, [pc, #56]	; (8006d54 <HAL_TIM_MspPostInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d1c:	f044 0401 	orr.w	r4, r4, #1
 8006d20:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8006d24:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d28:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d2a:	f002 0201 	and.w	r2, r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d2e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006d30:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d32:	9202      	str	r2, [sp, #8]
 8006d34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d36:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d38:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d3a:	f7fa fc91 	bl	8001660 <HAL_GPIO_Init>
}
 8006d3e:	b008      	add	sp, #32
 8006d40:	bd70      	pop	{r4, r5, r6, pc}
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	58024400 	.word	0x58024400
 8006d50:	58021000 	.word	0x58021000
 8006d54:	58020000 	.word	0x58020000

08006d58 <MX_TIM1_Init>:
{
 8006d58:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d5a:	2400      	movs	r4, #0
{
 8006d5c:	b09a      	sub	sp, #104	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006d5e:	222c      	movs	r2, #44	; 0x2c
 8006d60:	4621      	mov	r1, r4
 8006d62:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d64:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d66:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d68:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d6a:	9407      	str	r4, [sp, #28]
 8006d6c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d70:	e9cd 4402 	strd	r4, r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d74:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8006d78:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006d7c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006d80:	f000 f9ee 	bl	8007160 <memset>
  htim1.Instance = TIM1;
 8006d84:	4832      	ldr	r0, [pc, #200]	; (8006e50 <MX_TIM1_Init+0xf8>)
  htim1.Init.Period = 399;
 8006d86:	f240 138f 	movw	r3, #399	; 0x18f
  htim1.Instance = TIM1;
 8006d8a:	4a32      	ldr	r2, [pc, #200]	; (8006e54 <MX_TIM1_Init+0xfc>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d8c:	6184      	str	r4, [r0, #24]
  htim1.Instance = TIM1;
 8006d8e:	6002      	str	r2, [r0, #0]
  htim1.Init.Period = 399;
 8006d90:	60c3      	str	r3, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d92:	e9c0 4401 	strd	r4, r4, [r0, #4]
  htim1.Init.RepetitionCounter = 0;
 8006d96:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006d9a:	f7fd fb01 	bl	80043a0 <HAL_TIM_Base_Init>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d140      	bne.n	8006e24 <MX_TIM1_Init+0xcc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006da6:	a904      	add	r1, sp, #16
 8006da8:	4829      	ldr	r0, [pc, #164]	; (8006e50 <MX_TIM1_Init+0xf8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006daa:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006dac:	f7fd f8d2 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d14a      	bne.n	8006e4a <MX_TIM1_Init+0xf2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006db4:	4826      	ldr	r0, [pc, #152]	; (8006e50 <MX_TIM1_Init+0xf8>)
 8006db6:	f7fd fb0f 	bl	80043d8 <HAL_TIM_PWM_Init>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d142      	bne.n	8006e44 <MX_TIM1_Init+0xec>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dbe:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006dc0:	a901      	add	r1, sp, #4
 8006dc2:	4823      	ldr	r0, [pc, #140]	; (8006e50 <MX_TIM1_Init+0xf8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dc4:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006dc6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006dca:	f7fd fcb1 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d135      	bne.n	8006e3e <MX_TIM1_Init+0xe6>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006dd2:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006dd4:	2460      	movs	r4, #96	; 0x60
  sConfigOC.Pulse = 199;
 8006dd6:	23c7      	movs	r3, #199	; 0xc7
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006dd8:	a908      	add	r1, sp, #32
 8006dda:	481d      	ldr	r0, [pc, #116]	; (8006e50 <MX_TIM1_Init+0xf8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006ddc:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006dde:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006de2:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
  sConfigOC.Pulse = 199;
 8006de6:	e9cd 4308 	strd	r4, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006dea:	f7fd fc0b 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8006dee:	bb18      	cbnz	r0, 8006e38 <MX_TIM1_Init+0xe0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006df0:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006df2:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006dfa:	a90f      	add	r1, sp, #60	; 0x3c
 8006dfc:	4814      	ldr	r0, [pc, #80]	; (8006e50 <MX_TIM1_Init+0xf8>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006dfe:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006e00:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006e02:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006e04:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8006e08:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006e0c:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006e10:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006e14:	f7fd fcb6 	bl	8004784 <HAL_TIMEx_ConfigBreakDeadTime>
 8006e18:	b938      	cbnz	r0, 8006e2a <MX_TIM1_Init+0xd2>
  HAL_TIM_MspPostInit(&htim1);
 8006e1a:	480d      	ldr	r0, [pc, #52]	; (8006e50 <MX_TIM1_Init+0xf8>)
 8006e1c:	f7ff ff4a 	bl	8006cb4 <HAL_TIM_MspPostInit>
}
 8006e20:	b01a      	add	sp, #104	; 0x68
 8006e22:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006e24:	f7ff fdd2 	bl	80069cc <Error_Handler>
 8006e28:	e7bb      	b.n	8006da2 <MX_TIM1_Init+0x4a>
    Error_Handler();
 8006e2a:	f7ff fdcf 	bl	80069cc <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8006e2e:	4808      	ldr	r0, [pc, #32]	; (8006e50 <MX_TIM1_Init+0xf8>)
 8006e30:	f7ff ff40 	bl	8006cb4 <HAL_TIM_MspPostInit>
}
 8006e34:	b01a      	add	sp, #104	; 0x68
 8006e36:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006e38:	f7ff fdc8 	bl	80069cc <Error_Handler>
 8006e3c:	e7d8      	b.n	8006df0 <MX_TIM1_Init+0x98>
    Error_Handler();
 8006e3e:	f7ff fdc5 	bl	80069cc <Error_Handler>
 8006e42:	e7c6      	b.n	8006dd2 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8006e44:	f7ff fdc2 	bl	80069cc <Error_Handler>
 8006e48:	e7b9      	b.n	8006dbe <MX_TIM1_Init+0x66>
    Error_Handler();
 8006e4a:	f7ff fdbf 	bl	80069cc <Error_Handler>
 8006e4e:	e7b1      	b.n	8006db4 <MX_TIM1_Init+0x5c>
 8006e50:	2001b648 	.word	0x2001b648
 8006e54:	40010000 	.word	0x40010000

08006e58 <MX_TIM3_Init>:
{
 8006e58:	b530      	push	{r4, r5, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e5a:	2300      	movs	r3, #0
{
 8006e5c:	b08f      	sub	sp, #60	; 0x3c
  htim3.Instance = TIM3;
 8006e5e:	482a      	ldr	r0, [pc, #168]	; (8006f08 <MX_TIM3_Init+0xb0>)
  htim3.Init.Period = 99;
 8006e60:	2263      	movs	r2, #99	; 0x63
  htim3.Instance = TIM3;
 8006e62:	492a      	ldr	r1, [pc, #168]	; (8006f0c <MX_TIM3_Init+0xb4>)
  htim3.Init.Period = 99;
 8006e64:	60c2      	str	r2, [r0, #12]
  htim3.Instance = TIM3;
 8006e66:	6001      	str	r1, [r0, #0]
  htim3.Init.Prescaler = 0;
 8006e68:	6043      	str	r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e6a:	9303      	str	r3, [sp, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e6c:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006e6e:	9307      	str	r3, [sp, #28]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e70:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e72:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e74:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e76:	9306      	str	r3, [sp, #24]
 8006e78:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e7c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006e80:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006e84:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8006e88:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006e8c:	f7fd fa88 	bl	80043a0 <HAL_TIM_Base_Init>
 8006e90:	bb30      	cbnz	r0, 8006ee0 <MX_TIM3_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006e96:	a903      	add	r1, sp, #12
 8006e98:	481b      	ldr	r0, [pc, #108]	; (8006f08 <MX_TIM3_Init+0xb0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e9a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006e9c:	f7fd f85a 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8006ea0:	bb70      	cbnz	r0, 8006f00 <MX_TIM3_Init+0xa8>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006ea2:	4819      	ldr	r0, [pc, #100]	; (8006f08 <MX_TIM3_Init+0xb0>)
 8006ea4:	f7fd fa98 	bl	80043d8 <HAL_TIM_PWM_Init>
 8006ea8:	bb38      	cbnz	r0, 8006efa <MX_TIM3_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006eaa:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8006eac:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006eae:	4669      	mov	r1, sp
 8006eb0:	4815      	ldr	r0, [pc, #84]	; (8006f08 <MX_TIM3_Init+0xb0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006eb2:	9200      	str	r2, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8006eb4:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006eb6:	f7fd fc3b 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8006eba:	b9d8      	cbnz	r0, 8006ef4 <MX_TIM3_Init+0x9c>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ebc:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ebe:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 49;
 8006ec0:	2431      	movs	r4, #49	; 0x31
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006ec2:	a907      	add	r1, sp, #28
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	4810      	ldr	r0, [pc, #64]	; (8006f08 <MX_TIM3_Init+0xb0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ec8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006eca:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 49;
 8006ecc:	e9cd 5407 	strd	r5, r4, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006ed0:	f7fd fb98 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8006ed4:	b938      	cbnz	r0, 8006ee6 <MX_TIM3_Init+0x8e>
  HAL_TIM_MspPostInit(&htim3);
 8006ed6:	480c      	ldr	r0, [pc, #48]	; (8006f08 <MX_TIM3_Init+0xb0>)
 8006ed8:	f7ff feec 	bl	8006cb4 <HAL_TIM_MspPostInit>
}
 8006edc:	b00f      	add	sp, #60	; 0x3c
 8006ede:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8006ee0:	f7ff fd74 	bl	80069cc <Error_Handler>
 8006ee4:	e7d5      	b.n	8006e92 <MX_TIM3_Init+0x3a>
    Error_Handler();
 8006ee6:	f7ff fd71 	bl	80069cc <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8006eea:	4807      	ldr	r0, [pc, #28]	; (8006f08 <MX_TIM3_Init+0xb0>)
 8006eec:	f7ff fee2 	bl	8006cb4 <HAL_TIM_MspPostInit>
}
 8006ef0:	b00f      	add	sp, #60	; 0x3c
 8006ef2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8006ef4:	f7ff fd6a 	bl	80069cc <Error_Handler>
 8006ef8:	e7e0      	b.n	8006ebc <MX_TIM3_Init+0x64>
    Error_Handler();
 8006efa:	f7ff fd67 	bl	80069cc <Error_Handler>
 8006efe:	e7d4      	b.n	8006eaa <MX_TIM3_Init+0x52>
    Error_Handler();
 8006f00:	f7ff fd64 	bl	80069cc <Error_Handler>
 8006f04:	e7cd      	b.n	8006ea2 <MX_TIM3_Init+0x4a>
 8006f06:	bf00      	nop
 8006f08:	2001b608 	.word	0x2001b608
 8006f0c:	40000400 	.word	0x40000400

08006f10 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006f10:	b510      	push	{r4, lr}

  huart4.Instance = UART4;
 8006f12:	480e      	ldr	r0, [pc, #56]	; (8006f4c <MX_UART4_Init+0x3c>)
  huart4.Init.BaudRate = 9600;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006f14:	2300      	movs	r3, #0
  huart4.Init.BaudRate = 9600;
 8006f16:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart4.Instance = UART4;
 8006f1a:	4c0d      	ldr	r4, [pc, #52]	; (8006f50 <MX_UART4_Init+0x40>)
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006f1c:	220c      	movs	r2, #12
  huart4.Init.Parity = UART_PARITY_NONE;
 8006f1e:	6103      	str	r3, [r0, #16]
  huart4.Init.BaudRate = 9600;
 8006f20:	e9c0 4100 	strd	r4, r1, [r0]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006f24:	6142      	str	r2, [r0, #20]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006f26:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f2a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.Init.Prescaler = UART_PRESCALER_DIV1;
 8006f2e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart4.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart4.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8006f32:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  huart4.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f36:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006f3a:	f7fe fb1f 	bl	800557c <HAL_UART_Init>
 8006f3e:	b900      	cbnz	r0, 8006f42 <MX_UART4_Init+0x32>
  {
    Error_Handler();
  }

}
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006f46:	f7ff bd41 	b.w	80069cc <Error_Handler>
 8006f4a:	bf00      	nop
 8006f4c:	2001b748 	.word	0x2001b748
 8006f50:	40004c00 	.word	0x40004c00

08006f54 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006f54:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 8006f56:	480e      	ldr	r0, [pc, #56]	; (8006f90 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f58:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8006f5a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Instance = USART1;
 8006f5e:	4c0d      	ldr	r4, [pc, #52]	; (8006f94 <MX_USART1_UART_Init+0x40>)
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f60:	220c      	movs	r2, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f62:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8006f64:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f68:	6142      	str	r2, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f6e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.Prescaler = UART_PRESCALER_DIV1;
 8006f72:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart1.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8006f76:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  huart1.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f7a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f7e:	f7fe fafd 	bl	800557c <HAL_UART_Init>
 8006f82:	b900      	cbnz	r0, 8006f86 <MX_USART1_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 8006f84:	bd10      	pop	{r4, pc}
 8006f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006f8a:	f7ff bd1f 	b.w	80069cc <Error_Handler>
 8006f8e:	bf00      	nop
 8006f90:	2001b6c8 	.word	0x2001b6c8
 8006f94:	40011000 	.word	0x40011000

08006f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART4)
 8006f98:	4a3e      	ldr	r2, [pc, #248]	; (8007094 <HAL_UART_MspInit+0xfc>)
 8006f9a:	6803      	ldr	r3, [r0, #0]
{
 8006f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(uartHandle->Instance==UART4)
 8006fa0:	4293      	cmp	r3, r2
{
 8006fa2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa4:	f04f 0400 	mov.w	r4, #0
 8006fa8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006fac:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8006fb0:	9409      	str	r4, [sp, #36]	; 0x24
  if(uartHandle->Instance==UART4)
 8006fb2:	d005      	beq.n	8006fc0 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8006fb4:	4a38      	ldr	r2, [pc, #224]	; (8007098 <HAL_UART_MspInit+0x100>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03c      	beq.n	8007034 <HAL_UART_MspInit+0x9c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006fba:	b00a      	add	sp, #40	; 0x28
 8006fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 8006fc0:	4b36      	ldr	r3, [pc, #216]	; (800709c <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pin = DS18B20_TX_Pin;
 8006fc2:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc4:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fc6:	f04f 0812 	mov.w	r8, #18
    __HAL_RCC_UART4_CLK_ENABLE();
 8006fca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006fce:	2608      	movs	r6, #8
    HAL_GPIO_Init(DS18B20_TX_GPIO_Port, &GPIO_InitStruct);
 8006fd0:	a905      	add	r1, sp, #20
 8006fd2:	4833      	ldr	r0, [pc, #204]	; (80070a0 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8006fd4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006fd8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006fdc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006fe0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8006fe4:	9201      	str	r2, [sp, #4]
 8006fe6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006fec:	433a      	orrs	r2, r7
 8006fee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff8:	403b      	ands	r3, r7
 8006ffa:	9302      	str	r3, [sp, #8]
 8006ffc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ffe:	e9cd 7805 	strd	r7, r8, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007002:	e9cd 5608 	strd	r5, r6, [sp, #32]
    HAL_GPIO_Init(DS18B20_TX_GPIO_Port, &GPIO_InitStruct);
 8007006:	f7fa fb2b 	bl	8001660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DS18B20_RX_Pin;
 800700a:	2302      	movs	r3, #2
    HAL_GPIO_Init(DS18B20_RX_GPIO_Port, &GPIO_InitStruct);
 800700c:	a905      	add	r1, sp, #20
 800700e:	4824      	ldr	r0, [pc, #144]	; (80070a0 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Pin = DS18B20_RX_Pin;
 8007010:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007012:	e9cd 8706 	strd	r8, r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007016:	e9cd 5608 	strd	r5, r6, [sp, #32]
    HAL_GPIO_Init(DS18B20_RX_GPIO_Port, &GPIO_InitStruct);
 800701a:	f7fa fb21 	bl	8001660 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 3, 0);
 800701e:	4622      	mov	r2, r4
 8007020:	4629      	mov	r1, r5
 8007022:	2034      	movs	r0, #52	; 0x34
 8007024:	f7fa f98a 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007028:	2034      	movs	r0, #52	; 0x34
 800702a:	f7fa f9c1 	bl	80013b0 <HAL_NVIC_EnableIRQ>
}
 800702e:	b00a      	add	sp, #40	; 0x28
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8007034:	4b19      	ldr	r3, [pc, #100]	; (800709c <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007036:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007038:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800703c:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800703e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007042:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 8007044:	f042 0210 	orr.w	r2, r2, #16
 8007048:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800704c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007050:	f002 0210 	and.w	r2, r2, #16
 8007054:	9203      	str	r2, [sp, #12]
 8007056:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007058:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800705c:	4302      	orrs	r2, r0
 800705e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007062:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007068:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800706a:	4003      	ands	r3, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800706c:	e9cd 6005 	strd	r6, r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007070:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007072:	480c      	ldr	r0, [pc, #48]	; (80070a4 <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007074:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007076:	e9cd 5208 	strd	r5, r2, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800707a:	f7fa faf1 	bl	8001660 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800707e:	4622      	mov	r2, r4
 8007080:	4621      	mov	r1, r4
 8007082:	2025      	movs	r0, #37	; 0x25
 8007084:	f7fa f95a 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007088:	2025      	movs	r0, #37	; 0x25
 800708a:	f7fa f991 	bl	80013b0 <HAL_NVIC_EnableIRQ>
}
 800708e:	b00a      	add	sp, #40	; 0x28
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007094:	40004c00 	.word	0x40004c00
 8007098:	40011000 	.word	0x40011000
 800709c:	58024400 	.word	0x58024400
 80070a0:	58020000 	.word	0x58020000
 80070a4:	58020400 	.word	0x58020400

080070a8 <Reset_Handler>:
 80070a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070e0 <LoopFillZerobss+0x14>
 80070ac:	2100      	movs	r1, #0
 80070ae:	e003      	b.n	80070b8 <LoopCopyDataInit>

080070b0 <CopyDataInit>:
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <LoopFillZerobss+0x18>)
 80070b2:	585b      	ldr	r3, [r3, r1]
 80070b4:	5043      	str	r3, [r0, r1]
 80070b6:	3104      	adds	r1, #4

080070b8 <LoopCopyDataInit>:
 80070b8:	480b      	ldr	r0, [pc, #44]	; (80070e8 <LoopFillZerobss+0x1c>)
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <LoopFillZerobss+0x20>)
 80070bc:	1842      	adds	r2, r0, r1
 80070be:	429a      	cmp	r2, r3
 80070c0:	d3f6      	bcc.n	80070b0 <CopyDataInit>
 80070c2:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <LoopFillZerobss+0x24>)
 80070c4:	e002      	b.n	80070cc <LoopFillZerobss>

080070c6 <FillZerobss>:
 80070c6:	2300      	movs	r3, #0
 80070c8:	f842 3b04 	str.w	r3, [r2], #4

080070cc <LoopFillZerobss>:
 80070cc:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <LoopFillZerobss+0x28>)
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d3f9      	bcc.n	80070c6 <FillZerobss>
 80070d2:	f7ff fd25 	bl	8006b20 <SystemInit>
 80070d6:	f000 f811 	bl	80070fc <__libc_init_array>
 80070da:	f7ff f919 	bl	8006310 <main>
 80070de:	4770      	bx	lr
 80070e0:	20020000 	.word	0x20020000
 80070e4:	0800db80 	.word	0x0800db80
 80070e8:	20000000 	.word	0x20000000
 80070ec:	20012168 	.word	0x20012168
 80070f0:	20012168 	.word	0x20012168
 80070f4:	2001b7d8 	.word	0x2001b7d8

080070f8 <ADC3_IRQHandler>:
 80070f8:	e7fe      	b.n	80070f8 <ADC3_IRQHandler>
	...

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4d0d      	ldr	r5, [pc, #52]	; (8007134 <__libc_init_array+0x38>)
 8007100:	4c0d      	ldr	r4, [pc, #52]	; (8007138 <__libc_init_array+0x3c>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	2600      	movs	r6, #0
 8007108:	42a6      	cmp	r6, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	4d0b      	ldr	r5, [pc, #44]	; (800713c <__libc_init_array+0x40>)
 800710e:	4c0c      	ldr	r4, [pc, #48]	; (8007140 <__libc_init_array+0x44>)
 8007110:	f004 f87a 	bl	800b208 <_init>
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	2600      	movs	r6, #0
 800711a:	42a6      	cmp	r6, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f855 3b04 	ldr.w	r3, [r5], #4
 8007124:	4798      	blx	r3
 8007126:	3601      	adds	r6, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	3601      	adds	r6, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	0800db78 	.word	0x0800db78
 8007138:	0800db78 	.word	0x0800db78
 800713c:	0800db78 	.word	0x0800db78
 8007140:	0800db7c 	.word	0x0800db7c

08007144 <memcpy>:
 8007144:	440a      	add	r2, r1
 8007146:	4291      	cmp	r1, r2
 8007148:	f100 33ff 	add.w	r3, r0, #4294967295
 800714c:	d100      	bne.n	8007150 <memcpy+0xc>
 800714e:	4770      	bx	lr
 8007150:	b510      	push	{r4, lr}
 8007152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800715a:	4291      	cmp	r1, r2
 800715c:	d1f9      	bne.n	8007152 <memcpy+0xe>
 800715e:	bd10      	pop	{r4, pc}

08007160 <memset>:
 8007160:	4402      	add	r2, r0
 8007162:	4603      	mov	r3, r0
 8007164:	4293      	cmp	r3, r2
 8007166:	d100      	bne.n	800716a <memset+0xa>
 8007168:	4770      	bx	lr
 800716a:	f803 1b01 	strb.w	r1, [r3], #1
 800716e:	e7f9      	b.n	8007164 <memset+0x4>

08007170 <__cvt>:
 8007170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007172:	ed2d 8b02 	vpush	{d8}
 8007176:	eeb0 8b40 	vmov.f64	d8, d0
 800717a:	b085      	sub	sp, #20
 800717c:	4617      	mov	r7, r2
 800717e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007180:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007182:	ee18 2a90 	vmov	r2, s17
 8007186:	f025 0520 	bic.w	r5, r5, #32
 800718a:	2a00      	cmp	r2, #0
 800718c:	bfb6      	itet	lt
 800718e:	222d      	movlt	r2, #45	; 0x2d
 8007190:	2200      	movge	r2, #0
 8007192:	eeb1 8b40 	vneglt.f64	d8, d0
 8007196:	2d46      	cmp	r5, #70	; 0x46
 8007198:	460c      	mov	r4, r1
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	d004      	beq.n	80071a8 <__cvt+0x38>
 800719e:	2d45      	cmp	r5, #69	; 0x45
 80071a0:	d100      	bne.n	80071a4 <__cvt+0x34>
 80071a2:	3401      	adds	r4, #1
 80071a4:	2102      	movs	r1, #2
 80071a6:	e000      	b.n	80071aa <__cvt+0x3a>
 80071a8:	2103      	movs	r1, #3
 80071aa:	ab03      	add	r3, sp, #12
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	ab02      	add	r3, sp, #8
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	4622      	mov	r2, r4
 80071b4:	4633      	mov	r3, r6
 80071b6:	eeb0 0b48 	vmov.f64	d0, d8
 80071ba:	f000 fca9 	bl	8007b10 <_dtoa_r>
 80071be:	2d47      	cmp	r5, #71	; 0x47
 80071c0:	d109      	bne.n	80071d6 <__cvt+0x66>
 80071c2:	07fb      	lsls	r3, r7, #31
 80071c4:	d407      	bmi.n	80071d6 <__cvt+0x66>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ca:	1a1b      	subs	r3, r3, r0
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	b005      	add	sp, #20
 80071d0:	ecbd 8b02 	vpop	{d8}
 80071d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d6:	2d46      	cmp	r5, #70	; 0x46
 80071d8:	eb00 0204 	add.w	r2, r0, r4
 80071dc:	d10c      	bne.n	80071f8 <__cvt+0x88>
 80071de:	7803      	ldrb	r3, [r0, #0]
 80071e0:	2b30      	cmp	r3, #48	; 0x30
 80071e2:	d107      	bne.n	80071f4 <__cvt+0x84>
 80071e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ec:	bf1c      	itt	ne
 80071ee:	f1c4 0401 	rsbne	r4, r4, #1
 80071f2:	6034      	strne	r4, [r6, #0]
 80071f4:	6833      	ldr	r3, [r6, #0]
 80071f6:	441a      	add	r2, r3
 80071f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007200:	bf08      	it	eq
 8007202:	9203      	streq	r2, [sp, #12]
 8007204:	2130      	movs	r1, #48	; 0x30
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	4293      	cmp	r3, r2
 800720a:	d2dc      	bcs.n	80071c6 <__cvt+0x56>
 800720c:	1c5c      	adds	r4, r3, #1
 800720e:	9403      	str	r4, [sp, #12]
 8007210:	7019      	strb	r1, [r3, #0]
 8007212:	e7f8      	b.n	8007206 <__cvt+0x96>

08007214 <__exponent>:
 8007214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007216:	4603      	mov	r3, r0
 8007218:	2900      	cmp	r1, #0
 800721a:	bfb8      	it	lt
 800721c:	4249      	neglt	r1, r1
 800721e:	f803 2b02 	strb.w	r2, [r3], #2
 8007222:	bfb4      	ite	lt
 8007224:	222d      	movlt	r2, #45	; 0x2d
 8007226:	222b      	movge	r2, #43	; 0x2b
 8007228:	2909      	cmp	r1, #9
 800722a:	7042      	strb	r2, [r0, #1]
 800722c:	dd2a      	ble.n	8007284 <__exponent+0x70>
 800722e:	f10d 0407 	add.w	r4, sp, #7
 8007232:	46a4      	mov	ip, r4
 8007234:	270a      	movs	r7, #10
 8007236:	46a6      	mov	lr, r4
 8007238:	460a      	mov	r2, r1
 800723a:	fb91 f6f7 	sdiv	r6, r1, r7
 800723e:	fb07 1516 	mls	r5, r7, r6, r1
 8007242:	3530      	adds	r5, #48	; 0x30
 8007244:	2a63      	cmp	r2, #99	; 0x63
 8007246:	f104 34ff 	add.w	r4, r4, #4294967295
 800724a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800724e:	4631      	mov	r1, r6
 8007250:	dcf1      	bgt.n	8007236 <__exponent+0x22>
 8007252:	3130      	adds	r1, #48	; 0x30
 8007254:	f1ae 0502 	sub.w	r5, lr, #2
 8007258:	f804 1c01 	strb.w	r1, [r4, #-1]
 800725c:	1c44      	adds	r4, r0, #1
 800725e:	4629      	mov	r1, r5
 8007260:	4561      	cmp	r1, ip
 8007262:	d30a      	bcc.n	800727a <__exponent+0x66>
 8007264:	f10d 0209 	add.w	r2, sp, #9
 8007268:	eba2 020e 	sub.w	r2, r2, lr
 800726c:	4565      	cmp	r5, ip
 800726e:	bf88      	it	hi
 8007270:	2200      	movhi	r2, #0
 8007272:	4413      	add	r3, r2
 8007274:	1a18      	subs	r0, r3, r0
 8007276:	b003      	add	sp, #12
 8007278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800727e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007282:	e7ed      	b.n	8007260 <__exponent+0x4c>
 8007284:	2330      	movs	r3, #48	; 0x30
 8007286:	3130      	adds	r1, #48	; 0x30
 8007288:	7083      	strb	r3, [r0, #2]
 800728a:	70c1      	strb	r1, [r0, #3]
 800728c:	1d03      	adds	r3, r0, #4
 800728e:	e7f1      	b.n	8007274 <__exponent+0x60>

08007290 <_printf_float>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	b08b      	sub	sp, #44	; 0x2c
 8007296:	460c      	mov	r4, r1
 8007298:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800729c:	4616      	mov	r6, r2
 800729e:	461f      	mov	r7, r3
 80072a0:	4605      	mov	r5, r0
 80072a2:	f001 f9b7 	bl	8008614 <_localeconv_r>
 80072a6:	f8d0 b000 	ldr.w	fp, [r0]
 80072aa:	4658      	mov	r0, fp
 80072ac:	f7f9 f818 	bl	80002e0 <strlen>
 80072b0:	2300      	movs	r3, #0
 80072b2:	9308      	str	r3, [sp, #32]
 80072b4:	f8d8 3000 	ldr.w	r3, [r8]
 80072b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	3307      	adds	r3, #7
 80072c0:	f023 0307 	bic.w	r3, r3, #7
 80072c4:	f103 0108 	add.w	r1, r3, #8
 80072c8:	f8c8 1000 	str.w	r1, [r8]
 80072cc:	4682      	mov	sl, r0
 80072ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80072d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007538 <_printf_float+0x2a8>
 80072da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80072de:	eeb0 6bc0 	vabs.f64	d6, d0
 80072e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80072e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ea:	dd24      	ble.n	8007336 <_printf_float+0xa6>
 80072ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80072f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f4:	d502      	bpl.n	80072fc <_printf_float+0x6c>
 80072f6:	232d      	movs	r3, #45	; 0x2d
 80072f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072fc:	4b90      	ldr	r3, [pc, #576]	; (8007540 <_printf_float+0x2b0>)
 80072fe:	4891      	ldr	r0, [pc, #580]	; (8007544 <_printf_float+0x2b4>)
 8007300:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007304:	bf94      	ite	ls
 8007306:	4698      	movls	r8, r3
 8007308:	4680      	movhi	r8, r0
 800730a:	2303      	movs	r3, #3
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	f022 0204 	bic.w	r2, r2, #4
 8007312:	2300      	movs	r3, #0
 8007314:	6022      	str	r2, [r4, #0]
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	9700      	str	r7, [sp, #0]
 800731a:	4633      	mov	r3, r6
 800731c:	aa09      	add	r2, sp, #36	; 0x24
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f9d3 	bl	80076cc <_printf_common>
 8007326:	3001      	adds	r0, #1
 8007328:	f040 808a 	bne.w	8007440 <_printf_float+0x1b0>
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b00b      	add	sp, #44	; 0x2c
 8007332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007336:	eeb4 0b40 	vcmp.f64	d0, d0
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	d709      	bvc.n	8007354 <_printf_float+0xc4>
 8007340:	ee10 3a90 	vmov	r3, s1
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfbc      	itt	lt
 8007348:	232d      	movlt	r3, #45	; 0x2d
 800734a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800734e:	487e      	ldr	r0, [pc, #504]	; (8007548 <_printf_float+0x2b8>)
 8007350:	4b7e      	ldr	r3, [pc, #504]	; (800754c <_printf_float+0x2bc>)
 8007352:	e7d5      	b.n	8007300 <_printf_float+0x70>
 8007354:	6863      	ldr	r3, [r4, #4]
 8007356:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800735a:	9104      	str	r1, [sp, #16]
 800735c:	1c59      	adds	r1, r3, #1
 800735e:	d13c      	bne.n	80073da <_printf_float+0x14a>
 8007360:	2306      	movs	r3, #6
 8007362:	6063      	str	r3, [r4, #4]
 8007364:	2300      	movs	r3, #0
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	ab08      	add	r3, sp, #32
 800736a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800736e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007372:	ab07      	add	r3, sp, #28
 8007374:	6861      	ldr	r1, [r4, #4]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	6022      	str	r2, [r4, #0]
 800737a:	f10d 031b 	add.w	r3, sp, #27
 800737e:	4628      	mov	r0, r5
 8007380:	f7ff fef6 	bl	8007170 <__cvt>
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	9907      	ldr	r1, [sp, #28]
 8007388:	2b47      	cmp	r3, #71	; 0x47
 800738a:	4680      	mov	r8, r0
 800738c:	d108      	bne.n	80073a0 <_printf_float+0x110>
 800738e:	1cc8      	adds	r0, r1, #3
 8007390:	db02      	blt.n	8007398 <_printf_float+0x108>
 8007392:	6863      	ldr	r3, [r4, #4]
 8007394:	4299      	cmp	r1, r3
 8007396:	dd41      	ble.n	800741c <_printf_float+0x18c>
 8007398:	f1a9 0902 	sub.w	r9, r9, #2
 800739c:	fa5f f989 	uxtb.w	r9, r9
 80073a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073a4:	d820      	bhi.n	80073e8 <_printf_float+0x158>
 80073a6:	3901      	subs	r1, #1
 80073a8:	464a      	mov	r2, r9
 80073aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073ae:	9107      	str	r1, [sp, #28]
 80073b0:	f7ff ff30 	bl	8007214 <__exponent>
 80073b4:	9a08      	ldr	r2, [sp, #32]
 80073b6:	9004      	str	r0, [sp, #16]
 80073b8:	1813      	adds	r3, r2, r0
 80073ba:	2a01      	cmp	r2, #1
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	dc02      	bgt.n	80073c6 <_printf_float+0x136>
 80073c0:	6822      	ldr	r2, [r4, #0]
 80073c2:	07d2      	lsls	r2, r2, #31
 80073c4:	d501      	bpl.n	80073ca <_printf_float+0x13a>
 80073c6:	3301      	adds	r3, #1
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0a2      	beq.n	8007318 <_printf_float+0x88>
 80073d2:	232d      	movs	r3, #45	; 0x2d
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d8:	e79e      	b.n	8007318 <_printf_float+0x88>
 80073da:	9904      	ldr	r1, [sp, #16]
 80073dc:	2947      	cmp	r1, #71	; 0x47
 80073de:	d1c1      	bne.n	8007364 <_printf_float+0xd4>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1bf      	bne.n	8007364 <_printf_float+0xd4>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e7bc      	b.n	8007362 <_printf_float+0xd2>
 80073e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80073ec:	d118      	bne.n	8007420 <_printf_float+0x190>
 80073ee:	2900      	cmp	r1, #0
 80073f0:	6863      	ldr	r3, [r4, #4]
 80073f2:	dd0b      	ble.n	800740c <_printf_float+0x17c>
 80073f4:	6121      	str	r1, [r4, #16]
 80073f6:	b913      	cbnz	r3, 80073fe <_printf_float+0x16e>
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	07d0      	lsls	r0, r2, #31
 80073fc:	d502      	bpl.n	8007404 <_printf_float+0x174>
 80073fe:	3301      	adds	r3, #1
 8007400:	440b      	add	r3, r1
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	2300      	movs	r3, #0
 8007406:	65a1      	str	r1, [r4, #88]	; 0x58
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	e7de      	b.n	80073ca <_printf_float+0x13a>
 800740c:	b913      	cbnz	r3, 8007414 <_printf_float+0x184>
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	07d2      	lsls	r2, r2, #31
 8007412:	d501      	bpl.n	8007418 <_printf_float+0x188>
 8007414:	3302      	adds	r3, #2
 8007416:	e7f4      	b.n	8007402 <_printf_float+0x172>
 8007418:	2301      	movs	r3, #1
 800741a:	e7f2      	b.n	8007402 <_printf_float+0x172>
 800741c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	4299      	cmp	r1, r3
 8007424:	db05      	blt.n	8007432 <_printf_float+0x1a2>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	6121      	str	r1, [r4, #16]
 800742a:	07d8      	lsls	r0, r3, #31
 800742c:	d5ea      	bpl.n	8007404 <_printf_float+0x174>
 800742e:	1c4b      	adds	r3, r1, #1
 8007430:	e7e7      	b.n	8007402 <_printf_float+0x172>
 8007432:	2900      	cmp	r1, #0
 8007434:	bfd4      	ite	le
 8007436:	f1c1 0202 	rsble	r2, r1, #2
 800743a:	2201      	movgt	r2, #1
 800743c:	4413      	add	r3, r2
 800743e:	e7e0      	b.n	8007402 <_printf_float+0x172>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	055a      	lsls	r2, r3, #21
 8007444:	d407      	bmi.n	8007456 <_printf_float+0x1c6>
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	4642      	mov	r2, r8
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	47b8      	blx	r7
 8007450:	3001      	adds	r0, #1
 8007452:	d12a      	bne.n	80074aa <_printf_float+0x21a>
 8007454:	e76a      	b.n	800732c <_printf_float+0x9c>
 8007456:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800745a:	f240 80e2 	bls.w	8007622 <_printf_float+0x392>
 800745e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007462:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746a:	d133      	bne.n	80074d4 <_printf_float+0x244>
 800746c:	4a38      	ldr	r2, [pc, #224]	; (8007550 <_printf_float+0x2c0>)
 800746e:	2301      	movs	r3, #1
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f af58 	beq.w	800732c <_printf_float+0x9c>
 800747c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007480:	429a      	cmp	r2, r3
 8007482:	db02      	blt.n	800748a <_printf_float+0x1fa>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07d8      	lsls	r0, r3, #31
 8007488:	d50f      	bpl.n	80074aa <_printf_float+0x21a>
 800748a:	4653      	mov	r3, sl
 800748c:	465a      	mov	r2, fp
 800748e:	4631      	mov	r1, r6
 8007490:	4628      	mov	r0, r5
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	f43f af49 	beq.w	800732c <_printf_float+0x9c>
 800749a:	f04f 0800 	mov.w	r8, #0
 800749e:	f104 091a 	add.w	r9, r4, #26
 80074a2:	9b08      	ldr	r3, [sp, #32]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	4543      	cmp	r3, r8
 80074a8:	dc09      	bgt.n	80074be <_printf_float+0x22e>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	079b      	lsls	r3, r3, #30
 80074ae:	f100 8108 	bmi.w	80076c2 <_printf_float+0x432>
 80074b2:	68e0      	ldr	r0, [r4, #12]
 80074b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b6:	4298      	cmp	r0, r3
 80074b8:	bfb8      	it	lt
 80074ba:	4618      	movlt	r0, r3
 80074bc:	e738      	b.n	8007330 <_printf_float+0xa0>
 80074be:	2301      	movs	r3, #1
 80074c0:	464a      	mov	r2, r9
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	f43f af2f 	beq.w	800732c <_printf_float+0x9c>
 80074ce:	f108 0801 	add.w	r8, r8, #1
 80074d2:	e7e6      	b.n	80074a2 <_printf_float+0x212>
 80074d4:	9b07      	ldr	r3, [sp, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	dc3c      	bgt.n	8007554 <_printf_float+0x2c4>
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <_printf_float+0x2c0>)
 80074dc:	2301      	movs	r3, #1
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f af21 	beq.w	800732c <_printf_float+0x9c>
 80074ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	d102      	bne.n	80074f8 <_printf_float+0x268>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	07d9      	lsls	r1, r3, #31
 80074f6:	d5d8      	bpl.n	80074aa <_printf_float+0x21a>
 80074f8:	4653      	mov	r3, sl
 80074fa:	465a      	mov	r2, fp
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	f43f af12 	beq.w	800732c <_printf_float+0x9c>
 8007508:	f04f 0900 	mov.w	r9, #0
 800750c:	f104 0a1a 	add.w	sl, r4, #26
 8007510:	9b07      	ldr	r3, [sp, #28]
 8007512:	425b      	negs	r3, r3
 8007514:	454b      	cmp	r3, r9
 8007516:	dc01      	bgt.n	800751c <_printf_float+0x28c>
 8007518:	9b08      	ldr	r3, [sp, #32]
 800751a:	e795      	b.n	8007448 <_printf_float+0x1b8>
 800751c:	2301      	movs	r3, #1
 800751e:	4652      	mov	r2, sl
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	f43f af00 	beq.w	800732c <_printf_float+0x9c>
 800752c:	f109 0901 	add.w	r9, r9, #1
 8007530:	e7ee      	b.n	8007510 <_printf_float+0x280>
 8007532:	bf00      	nop
 8007534:	f3af 8000 	nop.w
 8007538:	ffffffff 	.word	0xffffffff
 800753c:	7fefffff 	.word	0x7fefffff
 8007540:	0800bcbc 	.word	0x0800bcbc
 8007544:	0800bcc0 	.word	0x0800bcc0
 8007548:	0800bcc8 	.word	0x0800bcc8
 800754c:	0800bcc4 	.word	0x0800bcc4
 8007550:	0800bccc 	.word	0x0800bccc
 8007554:	9a08      	ldr	r2, [sp, #32]
 8007556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007558:	429a      	cmp	r2, r3
 800755a:	bfa8      	it	ge
 800755c:	461a      	movge	r2, r3
 800755e:	2a00      	cmp	r2, #0
 8007560:	4691      	mov	r9, r2
 8007562:	dc38      	bgt.n	80075d6 <_printf_float+0x346>
 8007564:	2300      	movs	r3, #0
 8007566:	9305      	str	r3, [sp, #20]
 8007568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800756c:	f104 021a 	add.w	r2, r4, #26
 8007570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007572:	9905      	ldr	r1, [sp, #20]
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	eba3 0309 	sub.w	r3, r3, r9
 800757a:	428b      	cmp	r3, r1
 800757c:	dc33      	bgt.n	80075e6 <_printf_float+0x356>
 800757e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007582:	429a      	cmp	r2, r3
 8007584:	db3c      	blt.n	8007600 <_printf_float+0x370>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	07da      	lsls	r2, r3, #31
 800758a:	d439      	bmi.n	8007600 <_printf_float+0x370>
 800758c:	9a08      	ldr	r2, [sp, #32]
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	9907      	ldr	r1, [sp, #28]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	eba2 0901 	sub.w	r9, r2, r1
 8007598:	4599      	cmp	r9, r3
 800759a:	bfa8      	it	ge
 800759c:	4699      	movge	r9, r3
 800759e:	f1b9 0f00 	cmp.w	r9, #0
 80075a2:	dc35      	bgt.n	8007610 <_printf_float+0x380>
 80075a4:	f04f 0800 	mov.w	r8, #0
 80075a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ac:	f104 0a1a 	add.w	sl, r4, #26
 80075b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	eba3 0309 	sub.w	r3, r3, r9
 80075ba:	4543      	cmp	r3, r8
 80075bc:	f77f af75 	ble.w	80074aa <_printf_float+0x21a>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4652      	mov	r2, sl
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f aeae 	beq.w	800732c <_printf_float+0x9c>
 80075d0:	f108 0801 	add.w	r8, r8, #1
 80075d4:	e7ec      	b.n	80075b0 <_printf_float+0x320>
 80075d6:	4613      	mov	r3, r2
 80075d8:	4631      	mov	r1, r6
 80075da:	4642      	mov	r2, r8
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	d1bf      	bne.n	8007564 <_printf_float+0x2d4>
 80075e4:	e6a2      	b.n	800732c <_printf_float+0x9c>
 80075e6:	2301      	movs	r3, #1
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	9204      	str	r2, [sp, #16]
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	f43f ae9b 	beq.w	800732c <_printf_float+0x9c>
 80075f6:	9b05      	ldr	r3, [sp, #20]
 80075f8:	9a04      	ldr	r2, [sp, #16]
 80075fa:	3301      	adds	r3, #1
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	e7b7      	b.n	8007570 <_printf_float+0x2e0>
 8007600:	4653      	mov	r3, sl
 8007602:	465a      	mov	r2, fp
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	d1be      	bne.n	800758c <_printf_float+0x2fc>
 800760e:	e68d      	b.n	800732c <_printf_float+0x9c>
 8007610:	9a04      	ldr	r2, [sp, #16]
 8007612:	464b      	mov	r3, r9
 8007614:	4442      	add	r2, r8
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	d1c1      	bne.n	80075a4 <_printf_float+0x314>
 8007620:	e684      	b.n	800732c <_printf_float+0x9c>
 8007622:	9a08      	ldr	r2, [sp, #32]
 8007624:	2a01      	cmp	r2, #1
 8007626:	dc01      	bgt.n	800762c <_printf_float+0x39c>
 8007628:	07db      	lsls	r3, r3, #31
 800762a:	d537      	bpl.n	800769c <_printf_float+0x40c>
 800762c:	2301      	movs	r3, #1
 800762e:	4642      	mov	r2, r8
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f ae78 	beq.w	800732c <_printf_float+0x9c>
 800763c:	4653      	mov	r3, sl
 800763e:	465a      	mov	r2, fp
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f ae70 	beq.w	800732c <_printf_float+0x9c>
 800764c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007650:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	d01b      	beq.n	8007692 <_printf_float+0x402>
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	f108 0201 	add.w	r2, r8, #1
 8007660:	3b01      	subs	r3, #1
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	d10e      	bne.n	800768a <_printf_float+0x3fa>
 800766c:	e65e      	b.n	800732c <_printf_float+0x9c>
 800766e:	2301      	movs	r3, #1
 8007670:	464a      	mov	r2, r9
 8007672:	4631      	mov	r1, r6
 8007674:	4628      	mov	r0, r5
 8007676:	47b8      	blx	r7
 8007678:	3001      	adds	r0, #1
 800767a:	f43f ae57 	beq.w	800732c <_printf_float+0x9c>
 800767e:	f108 0801 	add.w	r8, r8, #1
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	3b01      	subs	r3, #1
 8007686:	4543      	cmp	r3, r8
 8007688:	dcf1      	bgt.n	800766e <_printf_float+0x3de>
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007690:	e6db      	b.n	800744a <_printf_float+0x1ba>
 8007692:	f04f 0800 	mov.w	r8, #0
 8007696:	f104 091a 	add.w	r9, r4, #26
 800769a:	e7f2      	b.n	8007682 <_printf_float+0x3f2>
 800769c:	2301      	movs	r3, #1
 800769e:	4642      	mov	r2, r8
 80076a0:	e7df      	b.n	8007662 <_printf_float+0x3d2>
 80076a2:	2301      	movs	r3, #1
 80076a4:	464a      	mov	r2, r9
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f ae3d 	beq.w	800732c <_printf_float+0x9c>
 80076b2:	f108 0801 	add.w	r8, r8, #1
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ba:	1a5b      	subs	r3, r3, r1
 80076bc:	4543      	cmp	r3, r8
 80076be:	dcf0      	bgt.n	80076a2 <_printf_float+0x412>
 80076c0:	e6f7      	b.n	80074b2 <_printf_float+0x222>
 80076c2:	f04f 0800 	mov.w	r8, #0
 80076c6:	f104 0919 	add.w	r9, r4, #25
 80076ca:	e7f4      	b.n	80076b6 <_printf_float+0x426>

080076cc <_printf_common>:
 80076cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	4616      	mov	r6, r2
 80076d2:	4699      	mov	r9, r3
 80076d4:	688a      	ldr	r2, [r1, #8]
 80076d6:	690b      	ldr	r3, [r1, #16]
 80076d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076dc:	4293      	cmp	r3, r2
 80076de:	bfb8      	it	lt
 80076e0:	4613      	movlt	r3, r2
 80076e2:	6033      	str	r3, [r6, #0]
 80076e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076e8:	4607      	mov	r7, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	b10a      	cbz	r2, 80076f2 <_printf_common+0x26>
 80076ee:	3301      	adds	r3, #1
 80076f0:	6033      	str	r3, [r6, #0]
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	0699      	lsls	r1, r3, #26
 80076f6:	bf42      	ittt	mi
 80076f8:	6833      	ldrmi	r3, [r6, #0]
 80076fa:	3302      	addmi	r3, #2
 80076fc:	6033      	strmi	r3, [r6, #0]
 80076fe:	6825      	ldr	r5, [r4, #0]
 8007700:	f015 0506 	ands.w	r5, r5, #6
 8007704:	d106      	bne.n	8007714 <_printf_common+0x48>
 8007706:	f104 0a19 	add.w	sl, r4, #25
 800770a:	68e3      	ldr	r3, [r4, #12]
 800770c:	6832      	ldr	r2, [r6, #0]
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	42ab      	cmp	r3, r5
 8007712:	dc26      	bgt.n	8007762 <_printf_common+0x96>
 8007714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007718:	1e13      	subs	r3, r2, #0
 800771a:	6822      	ldr	r2, [r4, #0]
 800771c:	bf18      	it	ne
 800771e:	2301      	movne	r3, #1
 8007720:	0692      	lsls	r2, r2, #26
 8007722:	d42b      	bmi.n	800777c <_printf_common+0xb0>
 8007724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007728:	4649      	mov	r1, r9
 800772a:	4638      	mov	r0, r7
 800772c:	47c0      	blx	r8
 800772e:	3001      	adds	r0, #1
 8007730:	d01e      	beq.n	8007770 <_printf_common+0xa4>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	68e5      	ldr	r5, [r4, #12]
 8007736:	6832      	ldr	r2, [r6, #0]
 8007738:	f003 0306 	and.w	r3, r3, #6
 800773c:	2b04      	cmp	r3, #4
 800773e:	bf08      	it	eq
 8007740:	1aad      	subeq	r5, r5, r2
 8007742:	68a3      	ldr	r3, [r4, #8]
 8007744:	6922      	ldr	r2, [r4, #16]
 8007746:	bf0c      	ite	eq
 8007748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800774c:	2500      	movne	r5, #0
 800774e:	4293      	cmp	r3, r2
 8007750:	bfc4      	itt	gt
 8007752:	1a9b      	subgt	r3, r3, r2
 8007754:	18ed      	addgt	r5, r5, r3
 8007756:	2600      	movs	r6, #0
 8007758:	341a      	adds	r4, #26
 800775a:	42b5      	cmp	r5, r6
 800775c:	d11a      	bne.n	8007794 <_printf_common+0xc8>
 800775e:	2000      	movs	r0, #0
 8007760:	e008      	b.n	8007774 <_printf_common+0xa8>
 8007762:	2301      	movs	r3, #1
 8007764:	4652      	mov	r2, sl
 8007766:	4649      	mov	r1, r9
 8007768:	4638      	mov	r0, r7
 800776a:	47c0      	blx	r8
 800776c:	3001      	adds	r0, #1
 800776e:	d103      	bne.n	8007778 <_printf_common+0xac>
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007778:	3501      	adds	r5, #1
 800777a:	e7c6      	b.n	800770a <_printf_common+0x3e>
 800777c:	18e1      	adds	r1, r4, r3
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	2030      	movs	r0, #48	; 0x30
 8007782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007786:	4422      	add	r2, r4
 8007788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800778c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007790:	3302      	adds	r3, #2
 8007792:	e7c7      	b.n	8007724 <_printf_common+0x58>
 8007794:	2301      	movs	r3, #1
 8007796:	4622      	mov	r2, r4
 8007798:	4649      	mov	r1, r9
 800779a:	4638      	mov	r0, r7
 800779c:	47c0      	blx	r8
 800779e:	3001      	adds	r0, #1
 80077a0:	d0e6      	beq.n	8007770 <_printf_common+0xa4>
 80077a2:	3601      	adds	r6, #1
 80077a4:	e7d9      	b.n	800775a <_printf_common+0x8e>
	...

080077a8 <_printf_i>:
 80077a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077ac:	460c      	mov	r4, r1
 80077ae:	4691      	mov	r9, r2
 80077b0:	7e27      	ldrb	r7, [r4, #24]
 80077b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077b4:	2f78      	cmp	r7, #120	; 0x78
 80077b6:	4680      	mov	r8, r0
 80077b8:	469a      	mov	sl, r3
 80077ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077be:	d807      	bhi.n	80077d0 <_printf_i+0x28>
 80077c0:	2f62      	cmp	r7, #98	; 0x62
 80077c2:	d80a      	bhi.n	80077da <_printf_i+0x32>
 80077c4:	2f00      	cmp	r7, #0
 80077c6:	f000 80d8 	beq.w	800797a <_printf_i+0x1d2>
 80077ca:	2f58      	cmp	r7, #88	; 0x58
 80077cc:	f000 80a3 	beq.w	8007916 <_printf_i+0x16e>
 80077d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077d8:	e03a      	b.n	8007850 <_printf_i+0xa8>
 80077da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077de:	2b15      	cmp	r3, #21
 80077e0:	d8f6      	bhi.n	80077d0 <_printf_i+0x28>
 80077e2:	a001      	add	r0, pc, #4	; (adr r0, 80077e8 <_printf_i+0x40>)
 80077e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80077e8:	08007841 	.word	0x08007841
 80077ec:	08007855 	.word	0x08007855
 80077f0:	080077d1 	.word	0x080077d1
 80077f4:	080077d1 	.word	0x080077d1
 80077f8:	080077d1 	.word	0x080077d1
 80077fc:	080077d1 	.word	0x080077d1
 8007800:	08007855 	.word	0x08007855
 8007804:	080077d1 	.word	0x080077d1
 8007808:	080077d1 	.word	0x080077d1
 800780c:	080077d1 	.word	0x080077d1
 8007810:	080077d1 	.word	0x080077d1
 8007814:	08007961 	.word	0x08007961
 8007818:	08007885 	.word	0x08007885
 800781c:	08007943 	.word	0x08007943
 8007820:	080077d1 	.word	0x080077d1
 8007824:	080077d1 	.word	0x080077d1
 8007828:	08007983 	.word	0x08007983
 800782c:	080077d1 	.word	0x080077d1
 8007830:	08007885 	.word	0x08007885
 8007834:	080077d1 	.word	0x080077d1
 8007838:	080077d1 	.word	0x080077d1
 800783c:	0800794b 	.word	0x0800794b
 8007840:	680b      	ldr	r3, [r1, #0]
 8007842:	1d1a      	adds	r2, r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	600a      	str	r2, [r1, #0]
 8007848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800784c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007850:	2301      	movs	r3, #1
 8007852:	e0a3      	b.n	800799c <_printf_i+0x1f4>
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	6808      	ldr	r0, [r1, #0]
 8007858:	062e      	lsls	r6, r5, #24
 800785a:	f100 0304 	add.w	r3, r0, #4
 800785e:	d50a      	bpl.n	8007876 <_printf_i+0xce>
 8007860:	6805      	ldr	r5, [r0, #0]
 8007862:	600b      	str	r3, [r1, #0]
 8007864:	2d00      	cmp	r5, #0
 8007866:	da03      	bge.n	8007870 <_printf_i+0xc8>
 8007868:	232d      	movs	r3, #45	; 0x2d
 800786a:	426d      	negs	r5, r5
 800786c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007870:	485e      	ldr	r0, [pc, #376]	; (80079ec <_printf_i+0x244>)
 8007872:	230a      	movs	r3, #10
 8007874:	e019      	b.n	80078aa <_printf_i+0x102>
 8007876:	f015 0f40 	tst.w	r5, #64	; 0x40
 800787a:	6805      	ldr	r5, [r0, #0]
 800787c:	600b      	str	r3, [r1, #0]
 800787e:	bf18      	it	ne
 8007880:	b22d      	sxthne	r5, r5
 8007882:	e7ef      	b.n	8007864 <_printf_i+0xbc>
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	6825      	ldr	r5, [r4, #0]
 8007888:	1d18      	adds	r0, r3, #4
 800788a:	6008      	str	r0, [r1, #0]
 800788c:	0628      	lsls	r0, r5, #24
 800788e:	d501      	bpl.n	8007894 <_printf_i+0xec>
 8007890:	681d      	ldr	r5, [r3, #0]
 8007892:	e002      	b.n	800789a <_printf_i+0xf2>
 8007894:	0669      	lsls	r1, r5, #25
 8007896:	d5fb      	bpl.n	8007890 <_printf_i+0xe8>
 8007898:	881d      	ldrh	r5, [r3, #0]
 800789a:	4854      	ldr	r0, [pc, #336]	; (80079ec <_printf_i+0x244>)
 800789c:	2f6f      	cmp	r7, #111	; 0x6f
 800789e:	bf0c      	ite	eq
 80078a0:	2308      	moveq	r3, #8
 80078a2:	230a      	movne	r3, #10
 80078a4:	2100      	movs	r1, #0
 80078a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078aa:	6866      	ldr	r6, [r4, #4]
 80078ac:	60a6      	str	r6, [r4, #8]
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	bfa2      	ittt	ge
 80078b2:	6821      	ldrge	r1, [r4, #0]
 80078b4:	f021 0104 	bicge.w	r1, r1, #4
 80078b8:	6021      	strge	r1, [r4, #0]
 80078ba:	b90d      	cbnz	r5, 80078c0 <_printf_i+0x118>
 80078bc:	2e00      	cmp	r6, #0
 80078be:	d04d      	beq.n	800795c <_printf_i+0x1b4>
 80078c0:	4616      	mov	r6, r2
 80078c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80078c6:	fb03 5711 	mls	r7, r3, r1, r5
 80078ca:	5dc7      	ldrb	r7, [r0, r7]
 80078cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078d0:	462f      	mov	r7, r5
 80078d2:	42bb      	cmp	r3, r7
 80078d4:	460d      	mov	r5, r1
 80078d6:	d9f4      	bls.n	80078c2 <_printf_i+0x11a>
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d10b      	bne.n	80078f4 <_printf_i+0x14c>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	07df      	lsls	r7, r3, #31
 80078e0:	d508      	bpl.n	80078f4 <_printf_i+0x14c>
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	6861      	ldr	r1, [r4, #4]
 80078e6:	4299      	cmp	r1, r3
 80078e8:	bfde      	ittt	le
 80078ea:	2330      	movle	r3, #48	; 0x30
 80078ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078f4:	1b92      	subs	r2, r2, r6
 80078f6:	6122      	str	r2, [r4, #16]
 80078f8:	f8cd a000 	str.w	sl, [sp]
 80078fc:	464b      	mov	r3, r9
 80078fe:	aa03      	add	r2, sp, #12
 8007900:	4621      	mov	r1, r4
 8007902:	4640      	mov	r0, r8
 8007904:	f7ff fee2 	bl	80076cc <_printf_common>
 8007908:	3001      	adds	r0, #1
 800790a:	d14c      	bne.n	80079a6 <_printf_i+0x1fe>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	b004      	add	sp, #16
 8007912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007916:	4835      	ldr	r0, [pc, #212]	; (80079ec <_printf_i+0x244>)
 8007918:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	680e      	ldr	r6, [r1, #0]
 8007920:	061f      	lsls	r7, r3, #24
 8007922:	f856 5b04 	ldr.w	r5, [r6], #4
 8007926:	600e      	str	r6, [r1, #0]
 8007928:	d514      	bpl.n	8007954 <_printf_i+0x1ac>
 800792a:	07d9      	lsls	r1, r3, #31
 800792c:	bf44      	itt	mi
 800792e:	f043 0320 	orrmi.w	r3, r3, #32
 8007932:	6023      	strmi	r3, [r4, #0]
 8007934:	b91d      	cbnz	r5, 800793e <_printf_i+0x196>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	f023 0320 	bic.w	r3, r3, #32
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	2310      	movs	r3, #16
 8007940:	e7b0      	b.n	80078a4 <_printf_i+0xfc>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	f043 0320 	orr.w	r3, r3, #32
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	2378      	movs	r3, #120	; 0x78
 800794c:	4828      	ldr	r0, [pc, #160]	; (80079f0 <_printf_i+0x248>)
 800794e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007952:	e7e3      	b.n	800791c <_printf_i+0x174>
 8007954:	065e      	lsls	r6, r3, #25
 8007956:	bf48      	it	mi
 8007958:	b2ad      	uxthmi	r5, r5
 800795a:	e7e6      	b.n	800792a <_printf_i+0x182>
 800795c:	4616      	mov	r6, r2
 800795e:	e7bb      	b.n	80078d8 <_printf_i+0x130>
 8007960:	680b      	ldr	r3, [r1, #0]
 8007962:	6826      	ldr	r6, [r4, #0]
 8007964:	6960      	ldr	r0, [r4, #20]
 8007966:	1d1d      	adds	r5, r3, #4
 8007968:	600d      	str	r5, [r1, #0]
 800796a:	0635      	lsls	r5, r6, #24
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	d501      	bpl.n	8007974 <_printf_i+0x1cc>
 8007970:	6018      	str	r0, [r3, #0]
 8007972:	e002      	b.n	800797a <_printf_i+0x1d2>
 8007974:	0671      	lsls	r1, r6, #25
 8007976:	d5fb      	bpl.n	8007970 <_printf_i+0x1c8>
 8007978:	8018      	strh	r0, [r3, #0]
 800797a:	2300      	movs	r3, #0
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	4616      	mov	r6, r2
 8007980:	e7ba      	b.n	80078f8 <_printf_i+0x150>
 8007982:	680b      	ldr	r3, [r1, #0]
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	600a      	str	r2, [r1, #0]
 8007988:	681e      	ldr	r6, [r3, #0]
 800798a:	6862      	ldr	r2, [r4, #4]
 800798c:	2100      	movs	r1, #0
 800798e:	4630      	mov	r0, r6
 8007990:	f7f8 fcae 	bl	80002f0 <memchr>
 8007994:	b108      	cbz	r0, 800799a <_printf_i+0x1f2>
 8007996:	1b80      	subs	r0, r0, r6
 8007998:	6060      	str	r0, [r4, #4]
 800799a:	6863      	ldr	r3, [r4, #4]
 800799c:	6123      	str	r3, [r4, #16]
 800799e:	2300      	movs	r3, #0
 80079a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a4:	e7a8      	b.n	80078f8 <_printf_i+0x150>
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	4632      	mov	r2, r6
 80079aa:	4649      	mov	r1, r9
 80079ac:	4640      	mov	r0, r8
 80079ae:	47d0      	blx	sl
 80079b0:	3001      	adds	r0, #1
 80079b2:	d0ab      	beq.n	800790c <_printf_i+0x164>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	079b      	lsls	r3, r3, #30
 80079b8:	d413      	bmi.n	80079e2 <_printf_i+0x23a>
 80079ba:	68e0      	ldr	r0, [r4, #12]
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	4298      	cmp	r0, r3
 80079c0:	bfb8      	it	lt
 80079c2:	4618      	movlt	r0, r3
 80079c4:	e7a4      	b.n	8007910 <_printf_i+0x168>
 80079c6:	2301      	movs	r3, #1
 80079c8:	4632      	mov	r2, r6
 80079ca:	4649      	mov	r1, r9
 80079cc:	4640      	mov	r0, r8
 80079ce:	47d0      	blx	sl
 80079d0:	3001      	adds	r0, #1
 80079d2:	d09b      	beq.n	800790c <_printf_i+0x164>
 80079d4:	3501      	adds	r5, #1
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	9903      	ldr	r1, [sp, #12]
 80079da:	1a5b      	subs	r3, r3, r1
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dcf2      	bgt.n	80079c6 <_printf_i+0x21e>
 80079e0:	e7eb      	b.n	80079ba <_printf_i+0x212>
 80079e2:	2500      	movs	r5, #0
 80079e4:	f104 0619 	add.w	r6, r4, #25
 80079e8:	e7f5      	b.n	80079d6 <_printf_i+0x22e>
 80079ea:	bf00      	nop
 80079ec:	0800bcce 	.word	0x0800bcce
 80079f0:	0800bcdf 	.word	0x0800bcdf

080079f4 <quorem>:
 80079f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	6903      	ldr	r3, [r0, #16]
 80079fa:	690c      	ldr	r4, [r1, #16]
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	4607      	mov	r7, r0
 8007a00:	f2c0 8081 	blt.w	8007b06 <quorem+0x112>
 8007a04:	3c01      	subs	r4, #1
 8007a06:	f101 0814 	add.w	r8, r1, #20
 8007a0a:	f100 0514 	add.w	r5, r0, #20
 8007a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a28:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a2c:	d331      	bcc.n	8007a92 <quorem+0x9e>
 8007a2e:	f04f 0e00 	mov.w	lr, #0
 8007a32:	4640      	mov	r0, r8
 8007a34:	46ac      	mov	ip, r5
 8007a36:	46f2      	mov	sl, lr
 8007a38:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a3c:	b293      	uxth	r3, r2
 8007a3e:	fb06 e303 	mla	r3, r6, r3, lr
 8007a42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	ebaa 0303 	sub.w	r3, sl, r3
 8007a4c:	0c12      	lsrs	r2, r2, #16
 8007a4e:	f8dc a000 	ldr.w	sl, [ip]
 8007a52:	fb06 e202 	mla	r2, r6, r2, lr
 8007a56:	fa13 f38a 	uxtah	r3, r3, sl
 8007a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a5e:	fa1f fa82 	uxth.w	sl, r2
 8007a62:	f8dc 2000 	ldr.w	r2, [ip]
 8007a66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a74:	4581      	cmp	r9, r0
 8007a76:	f84c 3b04 	str.w	r3, [ip], #4
 8007a7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a7e:	d2db      	bcs.n	8007a38 <quorem+0x44>
 8007a80:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a84:	b92b      	cbnz	r3, 8007a92 <quorem+0x9e>
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	3b04      	subs	r3, #4
 8007a8a:	429d      	cmp	r5, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	d32e      	bcc.n	8007aee <quorem+0xfa>
 8007a90:	613c      	str	r4, [r7, #16]
 8007a92:	4638      	mov	r0, r7
 8007a94:	f001 f848 	bl	8008b28 <__mcmp>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	db24      	blt.n	8007ae6 <quorem+0xf2>
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f04f 0c00 	mov.w	ip, #0
 8007aa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aa8:	f8d0 e000 	ldr.w	lr, [r0]
 8007aac:	b293      	uxth	r3, r2
 8007aae:	ebac 0303 	sub.w	r3, ip, r3
 8007ab2:	0c12      	lsrs	r2, r2, #16
 8007ab4:	fa13 f38e 	uxtah	r3, r3, lr
 8007ab8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac6:	45c1      	cmp	r9, r8
 8007ac8:	f840 3b04 	str.w	r3, [r0], #4
 8007acc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ad0:	d2e8      	bcs.n	8007aa4 <quorem+0xb0>
 8007ad2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ada:	b922      	cbnz	r2, 8007ae6 <quorem+0xf2>
 8007adc:	3b04      	subs	r3, #4
 8007ade:	429d      	cmp	r5, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	d30a      	bcc.n	8007afa <quorem+0x106>
 8007ae4:	613c      	str	r4, [r7, #16]
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	b003      	add	sp, #12
 8007aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d1cc      	bne.n	8007a90 <quorem+0x9c>
 8007af6:	3c01      	subs	r4, #1
 8007af8:	e7c7      	b.n	8007a8a <quorem+0x96>
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	d1f0      	bne.n	8007ae4 <quorem+0xf0>
 8007b02:	3c01      	subs	r4, #1
 8007b04:	e7eb      	b.n	8007ade <quorem+0xea>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e7ee      	b.n	8007ae8 <quorem+0xf4>
 8007b0a:	0000      	movs	r0, r0
 8007b0c:	0000      	movs	r0, r0
	...

08007b10 <_dtoa_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	ec59 8b10 	vmov	r8, r9, d0
 8007b18:	b095      	sub	sp, #84	; 0x54
 8007b1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b1c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007b1e:	9107      	str	r1, [sp, #28]
 8007b20:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007b24:	4606      	mov	r6, r0
 8007b26:	9209      	str	r2, [sp, #36]	; 0x24
 8007b28:	9310      	str	r3, [sp, #64]	; 0x40
 8007b2a:	b975      	cbnz	r5, 8007b4a <_dtoa_r+0x3a>
 8007b2c:	2010      	movs	r0, #16
 8007b2e:	f000 fd75 	bl	800861c <malloc>
 8007b32:	4602      	mov	r2, r0
 8007b34:	6270      	str	r0, [r6, #36]	; 0x24
 8007b36:	b920      	cbnz	r0, 8007b42 <_dtoa_r+0x32>
 8007b38:	4bab      	ldr	r3, [pc, #684]	; (8007de8 <_dtoa_r+0x2d8>)
 8007b3a:	21ea      	movs	r1, #234	; 0xea
 8007b3c:	48ab      	ldr	r0, [pc, #684]	; (8007dec <_dtoa_r+0x2dc>)
 8007b3e:	f001 f9bd 	bl	8008ebc <__assert_func>
 8007b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b46:	6005      	str	r5, [r0, #0]
 8007b48:	60c5      	str	r5, [r0, #12]
 8007b4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b4c:	6819      	ldr	r1, [r3, #0]
 8007b4e:	b151      	cbz	r1, 8007b66 <_dtoa_r+0x56>
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	604a      	str	r2, [r1, #4]
 8007b54:	2301      	movs	r3, #1
 8007b56:	4093      	lsls	r3, r2
 8007b58:	608b      	str	r3, [r1, #8]
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f000 fda6 	bl	80086ac <_Bfree>
 8007b60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	f1b9 0300 	subs.w	r3, r9, #0
 8007b6a:	bfbb      	ittet	lt
 8007b6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b70:	9303      	strlt	r3, [sp, #12]
 8007b72:	2300      	movge	r3, #0
 8007b74:	2201      	movlt	r2, #1
 8007b76:	bfac      	ite	ge
 8007b78:	6023      	strge	r3, [r4, #0]
 8007b7a:	6022      	strlt	r2, [r4, #0]
 8007b7c:	4b9c      	ldr	r3, [pc, #624]	; (8007df0 <_dtoa_r+0x2e0>)
 8007b7e:	9c03      	ldr	r4, [sp, #12]
 8007b80:	43a3      	bics	r3, r4
 8007b82:	d11a      	bne.n	8007bba <_dtoa_r+0xaa>
 8007b84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007b90:	ea53 0308 	orrs.w	r3, r3, r8
 8007b94:	f000 8512 	beq.w	80085bc <_dtoa_r+0xaac>
 8007b98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b9a:	b953      	cbnz	r3, 8007bb2 <_dtoa_r+0xa2>
 8007b9c:	4b95      	ldr	r3, [pc, #596]	; (8007df4 <_dtoa_r+0x2e4>)
 8007b9e:	e01f      	b.n	8007be0 <_dtoa_r+0xd0>
 8007ba0:	4b95      	ldr	r3, [pc, #596]	; (8007df8 <_dtoa_r+0x2e8>)
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	9800      	ldr	r0, [sp, #0]
 8007bac:	b015      	add	sp, #84	; 0x54
 8007bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb2:	4b90      	ldr	r3, [pc, #576]	; (8007df4 <_dtoa_r+0x2e4>)
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	3303      	adds	r3, #3
 8007bb8:	e7f5      	b.n	8007ba6 <_dtoa_r+0x96>
 8007bba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007bca:	d10b      	bne.n	8007be4 <_dtoa_r+0xd4>
 8007bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bce:	2301      	movs	r3, #1
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 84ee 	beq.w	80085b6 <_dtoa_r+0xaa6>
 8007bda:	4888      	ldr	r0, [pc, #544]	; (8007dfc <_dtoa_r+0x2ec>)
 8007bdc:	6018      	str	r0, [r3, #0]
 8007bde:	1e43      	subs	r3, r0, #1
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	e7e2      	b.n	8007baa <_dtoa_r+0x9a>
 8007be4:	a913      	add	r1, sp, #76	; 0x4c
 8007be6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007bea:	aa12      	add	r2, sp, #72	; 0x48
 8007bec:	4630      	mov	r0, r6
 8007bee:	f001 f83f 	bl	8008c70 <__d2b>
 8007bf2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d047      	beq.n	8007c8e <_dtoa_r+0x17e>
 8007bfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007c00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c08:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007c0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c10:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007c14:	2400      	movs	r4, #0
 8007c16:	ec43 2b16 	vmov	d6, r2, r3
 8007c1a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007c1e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007dd0 <_dtoa_r+0x2c0>
 8007c22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007c26:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007dd8 <_dtoa_r+0x2c8>
 8007c2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c2e:	eeb0 7b46 	vmov.f64	d7, d6
 8007c32:	ee06 1a90 	vmov	s13, r1
 8007c36:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007c3a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007de0 <_dtoa_r+0x2d0>
 8007c3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007c42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007c46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4e:	ee16 ba90 	vmov	fp, s13
 8007c52:	9411      	str	r4, [sp, #68]	; 0x44
 8007c54:	d508      	bpl.n	8007c68 <_dtoa_r+0x158>
 8007c56:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007c5a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c62:	bf18      	it	ne
 8007c64:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007c68:	f1bb 0f16 	cmp.w	fp, #22
 8007c6c:	d832      	bhi.n	8007cd4 <_dtoa_r+0x1c4>
 8007c6e:	4b64      	ldr	r3, [pc, #400]	; (8007e00 <_dtoa_r+0x2f0>)
 8007c70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c74:	ed93 7b00 	vldr	d7, [r3]
 8007c78:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007c7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c84:	d501      	bpl.n	8007c8a <_dtoa_r+0x17a>
 8007c86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e023      	b.n	8007cd6 <_dtoa_r+0x1c6>
 8007c8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c90:	4401      	add	r1, r0
 8007c92:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	bfc3      	ittte	gt
 8007c9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c9e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007ca2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007ca6:	f1c3 0320 	rsble	r3, r3, #32
 8007caa:	bfc6      	itte	gt
 8007cac:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007cb0:	ea43 0308 	orrgt.w	r3, r3, r8
 8007cb4:	fa08 f303 	lslle.w	r3, r8, r3
 8007cb8:	ee07 3a90 	vmov	s15, r3
 8007cbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007cc0:	3901      	subs	r1, #1
 8007cc2:	ed8d 7b00 	vstr	d7, [sp]
 8007cc6:	9c01      	ldr	r4, [sp, #4]
 8007cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ccc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007cd0:	2401      	movs	r4, #1
 8007cd2:	e7a0      	b.n	8007c16 <_dtoa_r+0x106>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cd8:	1a43      	subs	r3, r0, r1
 8007cda:	1e5a      	subs	r2, r3, #1
 8007cdc:	bf45      	ittet	mi
 8007cde:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ce2:	9305      	strmi	r3, [sp, #20]
 8007ce4:	2300      	movpl	r3, #0
 8007ce6:	2300      	movmi	r3, #0
 8007ce8:	9206      	str	r2, [sp, #24]
 8007cea:	bf54      	ite	pl
 8007cec:	9305      	strpl	r3, [sp, #20]
 8007cee:	9306      	strmi	r3, [sp, #24]
 8007cf0:	f1bb 0f00 	cmp.w	fp, #0
 8007cf4:	db18      	blt.n	8007d28 <_dtoa_r+0x218>
 8007cf6:	9b06      	ldr	r3, [sp, #24]
 8007cf8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007cfc:	445b      	add	r3, fp
 8007cfe:	9306      	str	r3, [sp, #24]
 8007d00:	2300      	movs	r3, #0
 8007d02:	9a07      	ldr	r2, [sp, #28]
 8007d04:	2a09      	cmp	r2, #9
 8007d06:	d849      	bhi.n	8007d9c <_dtoa_r+0x28c>
 8007d08:	2a05      	cmp	r2, #5
 8007d0a:	bfc4      	itt	gt
 8007d0c:	3a04      	subgt	r2, #4
 8007d0e:	9207      	strgt	r2, [sp, #28]
 8007d10:	9a07      	ldr	r2, [sp, #28]
 8007d12:	f1a2 0202 	sub.w	r2, r2, #2
 8007d16:	bfcc      	ite	gt
 8007d18:	2400      	movgt	r4, #0
 8007d1a:	2401      	movle	r4, #1
 8007d1c:	2a03      	cmp	r2, #3
 8007d1e:	d848      	bhi.n	8007db2 <_dtoa_r+0x2a2>
 8007d20:	e8df f002 	tbb	[pc, r2]
 8007d24:	3a2c2e0b 	.word	0x3a2c2e0b
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	eba3 030b 	sub.w	r3, r3, fp
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	920e      	str	r2, [sp, #56]	; 0x38
 8007d34:	f1cb 0300 	rsb	r3, fp, #0
 8007d38:	e7e3      	b.n	8007d02 <_dtoa_r+0x1f2>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	9208      	str	r2, [sp, #32]
 8007d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	dc39      	bgt.n	8007db8 <_dtoa_r+0x2a8>
 8007d44:	f04f 0a01 	mov.w	sl, #1
 8007d48:	46d1      	mov	r9, sl
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007d50:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007d52:	2100      	movs	r1, #0
 8007d54:	6079      	str	r1, [r7, #4]
 8007d56:	2004      	movs	r0, #4
 8007d58:	f100 0c14 	add.w	ip, r0, #20
 8007d5c:	4594      	cmp	ip, r2
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	d92f      	bls.n	8007dc2 <_dtoa_r+0x2b2>
 8007d62:	4630      	mov	r0, r6
 8007d64:	930c      	str	r3, [sp, #48]	; 0x30
 8007d66:	f000 fc61 	bl	800862c <_Balloc>
 8007d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d6c:	9000      	str	r0, [sp, #0]
 8007d6e:	4602      	mov	r2, r0
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d149      	bne.n	8007e08 <_dtoa_r+0x2f8>
 8007d74:	4b23      	ldr	r3, [pc, #140]	; (8007e04 <_dtoa_r+0x2f4>)
 8007d76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d7a:	e6df      	b.n	8007b3c <_dtoa_r+0x2c>
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	e7dd      	b.n	8007d3c <_dtoa_r+0x22c>
 8007d80:	2200      	movs	r2, #0
 8007d82:	9208      	str	r2, [sp, #32]
 8007d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d86:	eb0b 0a02 	add.w	sl, fp, r2
 8007d8a:	f10a 0901 	add.w	r9, sl, #1
 8007d8e:	464a      	mov	r2, r9
 8007d90:	2a01      	cmp	r2, #1
 8007d92:	bfb8      	it	lt
 8007d94:	2201      	movlt	r2, #1
 8007d96:	e7db      	b.n	8007d50 <_dtoa_r+0x240>
 8007d98:	2201      	movs	r2, #1
 8007d9a:	e7f2      	b.n	8007d82 <_dtoa_r+0x272>
 8007d9c:	2401      	movs	r4, #1
 8007d9e:	2200      	movs	r2, #0
 8007da0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007da4:	f04f 3aff 	mov.w	sl, #4294967295
 8007da8:	2100      	movs	r1, #0
 8007daa:	46d1      	mov	r9, sl
 8007dac:	2212      	movs	r2, #18
 8007dae:	9109      	str	r1, [sp, #36]	; 0x24
 8007db0:	e7ce      	b.n	8007d50 <_dtoa_r+0x240>
 8007db2:	2201      	movs	r2, #1
 8007db4:	9208      	str	r2, [sp, #32]
 8007db6:	e7f5      	b.n	8007da4 <_dtoa_r+0x294>
 8007db8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007dbc:	46d1      	mov	r9, sl
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	e7c6      	b.n	8007d50 <_dtoa_r+0x240>
 8007dc2:	3101      	adds	r1, #1
 8007dc4:	6079      	str	r1, [r7, #4]
 8007dc6:	0040      	lsls	r0, r0, #1
 8007dc8:	e7c6      	b.n	8007d58 <_dtoa_r+0x248>
 8007dca:	bf00      	nop
 8007dcc:	f3af 8000 	nop.w
 8007dd0:	636f4361 	.word	0x636f4361
 8007dd4:	3fd287a7 	.word	0x3fd287a7
 8007dd8:	8b60c8b3 	.word	0x8b60c8b3
 8007ddc:	3fc68a28 	.word	0x3fc68a28
 8007de0:	509f79fb 	.word	0x509f79fb
 8007de4:	3fd34413 	.word	0x3fd34413
 8007de8:	0800bcfd 	.word	0x0800bcfd
 8007dec:	0800bd14 	.word	0x0800bd14
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	0800bcf9 	.word	0x0800bcf9
 8007df8:	0800bcf0 	.word	0x0800bcf0
 8007dfc:	0800bccd 	.word	0x0800bccd
 8007e00:	0800be10 	.word	0x0800be10
 8007e04:	0800bd73 	.word	0x0800bd73
 8007e08:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007e0a:	9900      	ldr	r1, [sp, #0]
 8007e0c:	6011      	str	r1, [r2, #0]
 8007e0e:	f1b9 0f0e 	cmp.w	r9, #14
 8007e12:	d872      	bhi.n	8007efa <_dtoa_r+0x3ea>
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	d070      	beq.n	8007efa <_dtoa_r+0x3ea>
 8007e18:	f1bb 0f00 	cmp.w	fp, #0
 8007e1c:	f340 80a6 	ble.w	8007f6c <_dtoa_r+0x45c>
 8007e20:	49ca      	ldr	r1, [pc, #808]	; (800814c <_dtoa_r+0x63c>)
 8007e22:	f00b 020f 	and.w	r2, fp, #15
 8007e26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007e2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e2e:	ed92 7b00 	vldr	d7, [r2]
 8007e32:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007e36:	f000 808d 	beq.w	8007f54 <_dtoa_r+0x444>
 8007e3a:	4ac5      	ldr	r2, [pc, #788]	; (8008150 <_dtoa_r+0x640>)
 8007e3c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007e40:	ed92 6b08 	vldr	d6, [r2, #32]
 8007e44:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007e48:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007e4c:	f001 010f 	and.w	r1, r1, #15
 8007e50:	2203      	movs	r2, #3
 8007e52:	48bf      	ldr	r0, [pc, #764]	; (8008150 <_dtoa_r+0x640>)
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d17f      	bne.n	8007f58 <_dtoa_r+0x448>
 8007e58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e5c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e66:	2900      	cmp	r1, #0
 8007e68:	f000 80b2 	beq.w	8007fd0 <_dtoa_r+0x4c0>
 8007e6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007e70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7c:	f140 80a8 	bpl.w	8007fd0 <_dtoa_r+0x4c0>
 8007e80:	f1b9 0f00 	cmp.w	r9, #0
 8007e84:	f000 80a4 	beq.w	8007fd0 <_dtoa_r+0x4c0>
 8007e88:	f1ba 0f00 	cmp.w	sl, #0
 8007e8c:	dd31      	ble.n	8007ef2 <_dtoa_r+0x3e2>
 8007e8e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007e92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e9a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007e9e:	3201      	adds	r2, #1
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ea6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007eaa:	ee07 2a90 	vmov	s15, r2
 8007eae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007eb2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007eb6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007eba:	9c03      	ldr	r4, [sp, #12]
 8007ebc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007ec0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 8086 	bne.w	8007fd6 <_dtoa_r+0x4c6>
 8007eca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007ece:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007ed2:	ec42 1b17 	vmov	d7, r1, r2
 8007ed6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	f300 8272 	bgt.w	80083c6 <_dtoa_r+0x8b6>
 8007ee2:	eeb1 7b47 	vneg.f64	d7, d7
 8007ee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eee:	f100 8267 	bmi.w	80083c0 <_dtoa_r+0x8b0>
 8007ef2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007ef6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007efa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007efc:	2a00      	cmp	r2, #0
 8007efe:	f2c0 8129 	blt.w	8008154 <_dtoa_r+0x644>
 8007f02:	f1bb 0f0e 	cmp.w	fp, #14
 8007f06:	f300 8125 	bgt.w	8008154 <_dtoa_r+0x644>
 8007f0a:	4b90      	ldr	r3, [pc, #576]	; (800814c <_dtoa_r+0x63c>)
 8007f0c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f10:	ed93 6b00 	vldr	d6, [r3]
 8007f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f280 80c3 	bge.w	80080a2 <_dtoa_r+0x592>
 8007f1c:	f1b9 0f00 	cmp.w	r9, #0
 8007f20:	f300 80bf 	bgt.w	80080a2 <_dtoa_r+0x592>
 8007f24:	f040 824c 	bne.w	80083c0 <_dtoa_r+0x8b0>
 8007f28:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007f2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3c:	464c      	mov	r4, r9
 8007f3e:	464f      	mov	r7, r9
 8007f40:	f280 8222 	bge.w	8008388 <_dtoa_r+0x878>
 8007f44:	f8dd 8000 	ldr.w	r8, [sp]
 8007f48:	2331      	movs	r3, #49	; 0x31
 8007f4a:	f808 3b01 	strb.w	r3, [r8], #1
 8007f4e:	f10b 0b01 	add.w	fp, fp, #1
 8007f52:	e21e      	b.n	8008392 <_dtoa_r+0x882>
 8007f54:	2202      	movs	r2, #2
 8007f56:	e77c      	b.n	8007e52 <_dtoa_r+0x342>
 8007f58:	07cc      	lsls	r4, r1, #31
 8007f5a:	d504      	bpl.n	8007f66 <_dtoa_r+0x456>
 8007f5c:	ed90 6b00 	vldr	d6, [r0]
 8007f60:	3201      	adds	r2, #1
 8007f62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f66:	1049      	asrs	r1, r1, #1
 8007f68:	3008      	adds	r0, #8
 8007f6a:	e773      	b.n	8007e54 <_dtoa_r+0x344>
 8007f6c:	d02e      	beq.n	8007fcc <_dtoa_r+0x4bc>
 8007f6e:	f1cb 0100 	rsb	r1, fp, #0
 8007f72:	4a76      	ldr	r2, [pc, #472]	; (800814c <_dtoa_r+0x63c>)
 8007f74:	f001 000f 	and.w	r0, r1, #15
 8007f78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007f7c:	ed92 7b00 	vldr	d7, [r2]
 8007f80:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007f84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007f88:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007f8c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007f90:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007f94:	486e      	ldr	r0, [pc, #440]	; (8008150 <_dtoa_r+0x640>)
 8007f96:	1109      	asrs	r1, r1, #4
 8007f98:	2400      	movs	r4, #0
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	b939      	cbnz	r1, 8007fae <_dtoa_r+0x49e>
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	f43f af60 	beq.w	8007e64 <_dtoa_r+0x354>
 8007fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fac:	e75a      	b.n	8007e64 <_dtoa_r+0x354>
 8007fae:	07cf      	lsls	r7, r1, #31
 8007fb0:	d509      	bpl.n	8007fc6 <_dtoa_r+0x4b6>
 8007fb2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007fb6:	ed90 7b00 	vldr	d7, [r0]
 8007fba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007fbe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007fc2:	3201      	adds	r2, #1
 8007fc4:	2401      	movs	r4, #1
 8007fc6:	1049      	asrs	r1, r1, #1
 8007fc8:	3008      	adds	r0, #8
 8007fca:	e7e7      	b.n	8007f9c <_dtoa_r+0x48c>
 8007fcc:	2202      	movs	r2, #2
 8007fce:	e749      	b.n	8007e64 <_dtoa_r+0x354>
 8007fd0:	465f      	mov	r7, fp
 8007fd2:	4648      	mov	r0, r9
 8007fd4:	e765      	b.n	8007ea2 <_dtoa_r+0x392>
 8007fd6:	ec42 1b17 	vmov	d7, r1, r2
 8007fda:	4a5c      	ldr	r2, [pc, #368]	; (800814c <_dtoa_r+0x63c>)
 8007fdc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007fe0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007fe4:	9a00      	ldr	r2, [sp, #0]
 8007fe6:	1814      	adds	r4, r2, r0
 8007fe8:	9a08      	ldr	r2, [sp, #32]
 8007fea:	b352      	cbz	r2, 8008042 <_dtoa_r+0x532>
 8007fec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007ff0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007ff4:	f8dd 8000 	ldr.w	r8, [sp]
 8007ff8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007ffc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008000:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008004:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008008:	ee14 2a90 	vmov	r2, s9
 800800c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008010:	3230      	adds	r2, #48	; 0x30
 8008012:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801e:	f808 2b01 	strb.w	r2, [r8], #1
 8008022:	d439      	bmi.n	8008098 <_dtoa_r+0x588>
 8008024:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008028:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	d472      	bmi.n	8008118 <_dtoa_r+0x608>
 8008032:	45a0      	cmp	r8, r4
 8008034:	f43f af5d 	beq.w	8007ef2 <_dtoa_r+0x3e2>
 8008038:	ee27 7b03 	vmul.f64	d7, d7, d3
 800803c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008040:	e7e0      	b.n	8008004 <_dtoa_r+0x4f4>
 8008042:	f8dd 8000 	ldr.w	r8, [sp]
 8008046:	ee27 7b04 	vmul.f64	d7, d7, d4
 800804a:	4621      	mov	r1, r4
 800804c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008050:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008054:	ee14 2a90 	vmov	r2, s9
 8008058:	3230      	adds	r2, #48	; 0x30
 800805a:	f808 2b01 	strb.w	r2, [r8], #1
 800805e:	45a0      	cmp	r8, r4
 8008060:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008064:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008068:	d118      	bne.n	800809c <_dtoa_r+0x58c>
 800806a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800806e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008072:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807a:	dc4d      	bgt.n	8008118 <_dtoa_r+0x608>
 800807c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008080:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008088:	f57f af33 	bpl.w	8007ef2 <_dtoa_r+0x3e2>
 800808c:	4688      	mov	r8, r1
 800808e:	3901      	subs	r1, #1
 8008090:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008094:	2b30      	cmp	r3, #48	; 0x30
 8008096:	d0f9      	beq.n	800808c <_dtoa_r+0x57c>
 8008098:	46bb      	mov	fp, r7
 800809a:	e02a      	b.n	80080f2 <_dtoa_r+0x5e2>
 800809c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80080a0:	e7d6      	b.n	8008050 <_dtoa_r+0x540>
 80080a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80080aa:	f8dd 8000 	ldr.w	r8, [sp]
 80080ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80080b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80080b6:	ee15 3a10 	vmov	r3, s10
 80080ba:	3330      	adds	r3, #48	; 0x30
 80080bc:	f808 3b01 	strb.w	r3, [r8], #1
 80080c0:	9b00      	ldr	r3, [sp, #0]
 80080c2:	eba8 0303 	sub.w	r3, r8, r3
 80080c6:	4599      	cmp	r9, r3
 80080c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80080cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80080d0:	d133      	bne.n	800813a <_dtoa_r+0x62a>
 80080d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80080d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080de:	dc1a      	bgt.n	8008116 <_dtoa_r+0x606>
 80080e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80080e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e8:	d103      	bne.n	80080f2 <_dtoa_r+0x5e2>
 80080ea:	ee15 3a10 	vmov	r3, s10
 80080ee:	07d9      	lsls	r1, r3, #31
 80080f0:	d411      	bmi.n	8008116 <_dtoa_r+0x606>
 80080f2:	4629      	mov	r1, r5
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 fad9 	bl	80086ac <_Bfree>
 80080fa:	2300      	movs	r3, #0
 80080fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080fe:	f888 3000 	strb.w	r3, [r8]
 8008102:	f10b 0301 	add.w	r3, fp, #1
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800810a:	2b00      	cmp	r3, #0
 800810c:	f43f ad4d 	beq.w	8007baa <_dtoa_r+0x9a>
 8008110:	f8c3 8000 	str.w	r8, [r3]
 8008114:	e549      	b.n	8007baa <_dtoa_r+0x9a>
 8008116:	465f      	mov	r7, fp
 8008118:	4643      	mov	r3, r8
 800811a:	4698      	mov	r8, r3
 800811c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008120:	2a39      	cmp	r2, #57	; 0x39
 8008122:	d106      	bne.n	8008132 <_dtoa_r+0x622>
 8008124:	9a00      	ldr	r2, [sp, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d1f7      	bne.n	800811a <_dtoa_r+0x60a>
 800812a:	9900      	ldr	r1, [sp, #0]
 800812c:	2230      	movs	r2, #48	; 0x30
 800812e:	3701      	adds	r7, #1
 8008130:	700a      	strb	r2, [r1, #0]
 8008132:	781a      	ldrb	r2, [r3, #0]
 8008134:	3201      	adds	r2, #1
 8008136:	701a      	strb	r2, [r3, #0]
 8008138:	e7ae      	b.n	8008098 <_dtoa_r+0x588>
 800813a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800813e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008146:	d1b2      	bne.n	80080ae <_dtoa_r+0x59e>
 8008148:	e7d3      	b.n	80080f2 <_dtoa_r+0x5e2>
 800814a:	bf00      	nop
 800814c:	0800be10 	.word	0x0800be10
 8008150:	0800bde8 	.word	0x0800bde8
 8008154:	9908      	ldr	r1, [sp, #32]
 8008156:	2900      	cmp	r1, #0
 8008158:	f000 80d1 	beq.w	80082fe <_dtoa_r+0x7ee>
 800815c:	9907      	ldr	r1, [sp, #28]
 800815e:	2901      	cmp	r1, #1
 8008160:	f300 80b4 	bgt.w	80082cc <_dtoa_r+0x7bc>
 8008164:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008166:	2900      	cmp	r1, #0
 8008168:	f000 80ac 	beq.w	80082c4 <_dtoa_r+0x7b4>
 800816c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008170:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008174:	461c      	mov	r4, r3
 8008176:	930a      	str	r3, [sp, #40]	; 0x28
 8008178:	9b05      	ldr	r3, [sp, #20]
 800817a:	4413      	add	r3, r2
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	9b06      	ldr	r3, [sp, #24]
 8008180:	2101      	movs	r1, #1
 8008182:	4413      	add	r3, r2
 8008184:	4630      	mov	r0, r6
 8008186:	9306      	str	r3, [sp, #24]
 8008188:	f000 fb4c 	bl	8008824 <__i2b>
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	4607      	mov	r7, r0
 8008190:	f1b8 0f00 	cmp.w	r8, #0
 8008194:	dd0d      	ble.n	80081b2 <_dtoa_r+0x6a2>
 8008196:	9a06      	ldr	r2, [sp, #24]
 8008198:	2a00      	cmp	r2, #0
 800819a:	dd0a      	ble.n	80081b2 <_dtoa_r+0x6a2>
 800819c:	4542      	cmp	r2, r8
 800819e:	9905      	ldr	r1, [sp, #20]
 80081a0:	bfa8      	it	ge
 80081a2:	4642      	movge	r2, r8
 80081a4:	1a89      	subs	r1, r1, r2
 80081a6:	9105      	str	r1, [sp, #20]
 80081a8:	9906      	ldr	r1, [sp, #24]
 80081aa:	eba8 0802 	sub.w	r8, r8, r2
 80081ae:	1a8a      	subs	r2, r1, r2
 80081b0:	9206      	str	r2, [sp, #24]
 80081b2:	b303      	cbz	r3, 80081f6 <_dtoa_r+0x6e6>
 80081b4:	9a08      	ldr	r2, [sp, #32]
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	f000 80a6 	beq.w	8008308 <_dtoa_r+0x7f8>
 80081bc:	2c00      	cmp	r4, #0
 80081be:	dd13      	ble.n	80081e8 <_dtoa_r+0x6d8>
 80081c0:	4639      	mov	r1, r7
 80081c2:	4622      	mov	r2, r4
 80081c4:	4630      	mov	r0, r6
 80081c6:	930c      	str	r3, [sp, #48]	; 0x30
 80081c8:	f000 fbe8 	bl	800899c <__pow5mult>
 80081cc:	462a      	mov	r2, r5
 80081ce:	4601      	mov	r1, r0
 80081d0:	4607      	mov	r7, r0
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 fb3c 	bl	8008850 <__multiply>
 80081d8:	4629      	mov	r1, r5
 80081da:	900a      	str	r0, [sp, #40]	; 0x28
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 fa65 	bl	80086ac <_Bfree>
 80081e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081e6:	4615      	mov	r5, r2
 80081e8:	1b1a      	subs	r2, r3, r4
 80081ea:	d004      	beq.n	80081f6 <_dtoa_r+0x6e6>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 fbd4 	bl	800899c <__pow5mult>
 80081f4:	4605      	mov	r5, r0
 80081f6:	2101      	movs	r1, #1
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 fb13 	bl	8008824 <__i2b>
 80081fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008200:	2b00      	cmp	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	f340 8082 	ble.w	800830c <_dtoa_r+0x7fc>
 8008208:	461a      	mov	r2, r3
 800820a:	4601      	mov	r1, r0
 800820c:	4630      	mov	r0, r6
 800820e:	f000 fbc5 	bl	800899c <__pow5mult>
 8008212:	9b07      	ldr	r3, [sp, #28]
 8008214:	2b01      	cmp	r3, #1
 8008216:	4604      	mov	r4, r0
 8008218:	dd7b      	ble.n	8008312 <_dtoa_r+0x802>
 800821a:	2300      	movs	r3, #0
 800821c:	930a      	str	r3, [sp, #40]	; 0x28
 800821e:	6922      	ldr	r2, [r4, #16]
 8008220:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008224:	6910      	ldr	r0, [r2, #16]
 8008226:	f000 faad 	bl	8008784 <__hi0bits>
 800822a:	f1c0 0020 	rsb	r0, r0, #32
 800822e:	9b06      	ldr	r3, [sp, #24]
 8008230:	4418      	add	r0, r3
 8008232:	f010 001f 	ands.w	r0, r0, #31
 8008236:	f000 808d 	beq.w	8008354 <_dtoa_r+0x844>
 800823a:	f1c0 0220 	rsb	r2, r0, #32
 800823e:	2a04      	cmp	r2, #4
 8008240:	f340 8086 	ble.w	8008350 <_dtoa_r+0x840>
 8008244:	f1c0 001c 	rsb	r0, r0, #28
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	4403      	add	r3, r0
 800824c:	9305      	str	r3, [sp, #20]
 800824e:	9b06      	ldr	r3, [sp, #24]
 8008250:	4403      	add	r3, r0
 8008252:	4480      	add	r8, r0
 8008254:	9306      	str	r3, [sp, #24]
 8008256:	9b05      	ldr	r3, [sp, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	dd05      	ble.n	8008268 <_dtoa_r+0x758>
 800825c:	4629      	mov	r1, r5
 800825e:	461a      	mov	r2, r3
 8008260:	4630      	mov	r0, r6
 8008262:	f000 fbf5 	bl	8008a50 <__lshift>
 8008266:	4605      	mov	r5, r0
 8008268:	9b06      	ldr	r3, [sp, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	dd05      	ble.n	800827a <_dtoa_r+0x76a>
 800826e:	4621      	mov	r1, r4
 8008270:	461a      	mov	r2, r3
 8008272:	4630      	mov	r0, r6
 8008274:	f000 fbec 	bl	8008a50 <__lshift>
 8008278:	4604      	mov	r4, r0
 800827a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d06b      	beq.n	8008358 <_dtoa_r+0x848>
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f000 fc50 	bl	8008b28 <__mcmp>
 8008288:	2800      	cmp	r0, #0
 800828a:	da65      	bge.n	8008358 <_dtoa_r+0x848>
 800828c:	2300      	movs	r3, #0
 800828e:	4629      	mov	r1, r5
 8008290:	220a      	movs	r2, #10
 8008292:	4630      	mov	r0, r6
 8008294:	f000 fa2c 	bl	80086f0 <__multadd>
 8008298:	9b08      	ldr	r3, [sp, #32]
 800829a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800829e:	4605      	mov	r5, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8192 	beq.w	80085ca <_dtoa_r+0xaba>
 80082a6:	4639      	mov	r1, r7
 80082a8:	2300      	movs	r3, #0
 80082aa:	220a      	movs	r2, #10
 80082ac:	4630      	mov	r0, r6
 80082ae:	f000 fa1f 	bl	80086f0 <__multadd>
 80082b2:	f1ba 0f00 	cmp.w	sl, #0
 80082b6:	4607      	mov	r7, r0
 80082b8:	f300 808e 	bgt.w	80083d8 <_dtoa_r+0x8c8>
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	dc51      	bgt.n	8008366 <_dtoa_r+0x856>
 80082c2:	e089      	b.n	80083d8 <_dtoa_r+0x8c8>
 80082c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082ca:	e751      	b.n	8008170 <_dtoa_r+0x660>
 80082cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	bfbf      	itttt	lt
 80082d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80082d6:	1ae3      	sublt	r3, r4, r3
 80082d8:	18d2      	addlt	r2, r2, r3
 80082da:	4613      	movlt	r3, r2
 80082dc:	bfb7      	itett	lt
 80082de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80082e0:	1b1c      	subge	r4, r3, r4
 80082e2:	4623      	movlt	r3, r4
 80082e4:	2400      	movlt	r4, #0
 80082e6:	f1b9 0f00 	cmp.w	r9, #0
 80082ea:	bfb5      	itete	lt
 80082ec:	9a05      	ldrlt	r2, [sp, #20]
 80082ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80082f2:	eba2 0809 	sublt.w	r8, r2, r9
 80082f6:	464a      	movge	r2, r9
 80082f8:	bfb8      	it	lt
 80082fa:	2200      	movlt	r2, #0
 80082fc:	e73b      	b.n	8008176 <_dtoa_r+0x666>
 80082fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008302:	9f08      	ldr	r7, [sp, #32]
 8008304:	461c      	mov	r4, r3
 8008306:	e743      	b.n	8008190 <_dtoa_r+0x680>
 8008308:	461a      	mov	r2, r3
 800830a:	e76f      	b.n	80081ec <_dtoa_r+0x6dc>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	2b01      	cmp	r3, #1
 8008310:	dc18      	bgt.n	8008344 <_dtoa_r+0x834>
 8008312:	9b02      	ldr	r3, [sp, #8]
 8008314:	b9b3      	cbnz	r3, 8008344 <_dtoa_r+0x834>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800831c:	b9a2      	cbnz	r2, 8008348 <_dtoa_r+0x838>
 800831e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008322:	0d12      	lsrs	r2, r2, #20
 8008324:	0512      	lsls	r2, r2, #20
 8008326:	b18a      	cbz	r2, 800834c <_dtoa_r+0x83c>
 8008328:	9b05      	ldr	r3, [sp, #20]
 800832a:	3301      	adds	r3, #1
 800832c:	9305      	str	r3, [sp, #20]
 800832e:	9b06      	ldr	r3, [sp, #24]
 8008330:	3301      	adds	r3, #1
 8008332:	9306      	str	r3, [sp, #24]
 8008334:	2301      	movs	r3, #1
 8008336:	930a      	str	r3, [sp, #40]	; 0x28
 8008338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800833a:	2b00      	cmp	r3, #0
 800833c:	f47f af6f 	bne.w	800821e <_dtoa_r+0x70e>
 8008340:	2001      	movs	r0, #1
 8008342:	e774      	b.n	800822e <_dtoa_r+0x71e>
 8008344:	2300      	movs	r3, #0
 8008346:	e7f6      	b.n	8008336 <_dtoa_r+0x826>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	e7f4      	b.n	8008336 <_dtoa_r+0x826>
 800834c:	920a      	str	r2, [sp, #40]	; 0x28
 800834e:	e7f3      	b.n	8008338 <_dtoa_r+0x828>
 8008350:	d081      	beq.n	8008256 <_dtoa_r+0x746>
 8008352:	4610      	mov	r0, r2
 8008354:	301c      	adds	r0, #28
 8008356:	e777      	b.n	8008248 <_dtoa_r+0x738>
 8008358:	f1b9 0f00 	cmp.w	r9, #0
 800835c:	dc37      	bgt.n	80083ce <_dtoa_r+0x8be>
 800835e:	9b07      	ldr	r3, [sp, #28]
 8008360:	2b02      	cmp	r3, #2
 8008362:	dd34      	ble.n	80083ce <_dtoa_r+0x8be>
 8008364:	46ca      	mov	sl, r9
 8008366:	f1ba 0f00 	cmp.w	sl, #0
 800836a:	d10d      	bne.n	8008388 <_dtoa_r+0x878>
 800836c:	4621      	mov	r1, r4
 800836e:	4653      	mov	r3, sl
 8008370:	2205      	movs	r2, #5
 8008372:	4630      	mov	r0, r6
 8008374:	f000 f9bc 	bl	80086f0 <__multadd>
 8008378:	4601      	mov	r1, r0
 800837a:	4604      	mov	r4, r0
 800837c:	4628      	mov	r0, r5
 800837e:	f000 fbd3 	bl	8008b28 <__mcmp>
 8008382:	2800      	cmp	r0, #0
 8008384:	f73f adde 	bgt.w	8007f44 <_dtoa_r+0x434>
 8008388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838a:	f8dd 8000 	ldr.w	r8, [sp]
 800838e:	ea6f 0b03 	mvn.w	fp, r3
 8008392:	f04f 0900 	mov.w	r9, #0
 8008396:	4621      	mov	r1, r4
 8008398:	4630      	mov	r0, r6
 800839a:	f000 f987 	bl	80086ac <_Bfree>
 800839e:	2f00      	cmp	r7, #0
 80083a0:	f43f aea7 	beq.w	80080f2 <_dtoa_r+0x5e2>
 80083a4:	f1b9 0f00 	cmp.w	r9, #0
 80083a8:	d005      	beq.n	80083b6 <_dtoa_r+0x8a6>
 80083aa:	45b9      	cmp	r9, r7
 80083ac:	d003      	beq.n	80083b6 <_dtoa_r+0x8a6>
 80083ae:	4649      	mov	r1, r9
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 f97b 	bl	80086ac <_Bfree>
 80083b6:	4639      	mov	r1, r7
 80083b8:	4630      	mov	r0, r6
 80083ba:	f000 f977 	bl	80086ac <_Bfree>
 80083be:	e698      	b.n	80080f2 <_dtoa_r+0x5e2>
 80083c0:	2400      	movs	r4, #0
 80083c2:	4627      	mov	r7, r4
 80083c4:	e7e0      	b.n	8008388 <_dtoa_r+0x878>
 80083c6:	46bb      	mov	fp, r7
 80083c8:	4604      	mov	r4, r0
 80083ca:	4607      	mov	r7, r0
 80083cc:	e5ba      	b.n	8007f44 <_dtoa_r+0x434>
 80083ce:	9b08      	ldr	r3, [sp, #32]
 80083d0:	46ca      	mov	sl, r9
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8100 	beq.w	80085d8 <_dtoa_r+0xac8>
 80083d8:	f1b8 0f00 	cmp.w	r8, #0
 80083dc:	dd05      	ble.n	80083ea <_dtoa_r+0x8da>
 80083de:	4639      	mov	r1, r7
 80083e0:	4642      	mov	r2, r8
 80083e2:	4630      	mov	r0, r6
 80083e4:	f000 fb34 	bl	8008a50 <__lshift>
 80083e8:	4607      	mov	r7, r0
 80083ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d05d      	beq.n	80084ac <_dtoa_r+0x99c>
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4630      	mov	r0, r6
 80083f4:	f000 f91a 	bl	800862c <_Balloc>
 80083f8:	4680      	mov	r8, r0
 80083fa:	b928      	cbnz	r0, 8008408 <_dtoa_r+0x8f8>
 80083fc:	4b82      	ldr	r3, [pc, #520]	; (8008608 <_dtoa_r+0xaf8>)
 80083fe:	4602      	mov	r2, r0
 8008400:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008404:	f7ff bb9a 	b.w	8007b3c <_dtoa_r+0x2c>
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	3202      	adds	r2, #2
 800840c:	0092      	lsls	r2, r2, #2
 800840e:	f107 010c 	add.w	r1, r7, #12
 8008412:	300c      	adds	r0, #12
 8008414:	f7fe fe96 	bl	8007144 <memcpy>
 8008418:	2201      	movs	r2, #1
 800841a:	4641      	mov	r1, r8
 800841c:	4630      	mov	r0, r6
 800841e:	f000 fb17 	bl	8008a50 <__lshift>
 8008422:	9b00      	ldr	r3, [sp, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	9305      	str	r3, [sp, #20]
 8008428:	9b00      	ldr	r3, [sp, #0]
 800842a:	4453      	add	r3, sl
 800842c:	9309      	str	r3, [sp, #36]	; 0x24
 800842e:	9b02      	ldr	r3, [sp, #8]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	46b9      	mov	r9, r7
 8008436:	9308      	str	r3, [sp, #32]
 8008438:	4607      	mov	r7, r0
 800843a:	9b05      	ldr	r3, [sp, #20]
 800843c:	4621      	mov	r1, r4
 800843e:	3b01      	subs	r3, #1
 8008440:	4628      	mov	r0, r5
 8008442:	9302      	str	r3, [sp, #8]
 8008444:	f7ff fad6 	bl	80079f4 <quorem>
 8008448:	4603      	mov	r3, r0
 800844a:	3330      	adds	r3, #48	; 0x30
 800844c:	9006      	str	r0, [sp, #24]
 800844e:	4649      	mov	r1, r9
 8008450:	4628      	mov	r0, r5
 8008452:	930a      	str	r3, [sp, #40]	; 0x28
 8008454:	f000 fb68 	bl	8008b28 <__mcmp>
 8008458:	463a      	mov	r2, r7
 800845a:	4682      	mov	sl, r0
 800845c:	4621      	mov	r1, r4
 800845e:	4630      	mov	r0, r6
 8008460:	f000 fb7e 	bl	8008b60 <__mdiff>
 8008464:	68c2      	ldr	r2, [r0, #12]
 8008466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008468:	4680      	mov	r8, r0
 800846a:	bb0a      	cbnz	r2, 80084b0 <_dtoa_r+0x9a0>
 800846c:	4601      	mov	r1, r0
 800846e:	4628      	mov	r0, r5
 8008470:	f000 fb5a 	bl	8008b28 <__mcmp>
 8008474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008476:	4602      	mov	r2, r0
 8008478:	4641      	mov	r1, r8
 800847a:	4630      	mov	r0, r6
 800847c:	920e      	str	r2, [sp, #56]	; 0x38
 800847e:	930a      	str	r3, [sp, #40]	; 0x28
 8008480:	f000 f914 	bl	80086ac <_Bfree>
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008488:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800848c:	ea43 0102 	orr.w	r1, r3, r2
 8008490:	9b08      	ldr	r3, [sp, #32]
 8008492:	430b      	orrs	r3, r1
 8008494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008496:	d10d      	bne.n	80084b4 <_dtoa_r+0x9a4>
 8008498:	2b39      	cmp	r3, #57	; 0x39
 800849a:	d029      	beq.n	80084f0 <_dtoa_r+0x9e0>
 800849c:	f1ba 0f00 	cmp.w	sl, #0
 80084a0:	dd01      	ble.n	80084a6 <_dtoa_r+0x996>
 80084a2:	9b06      	ldr	r3, [sp, #24]
 80084a4:	3331      	adds	r3, #49	; 0x31
 80084a6:	9a02      	ldr	r2, [sp, #8]
 80084a8:	7013      	strb	r3, [r2, #0]
 80084aa:	e774      	b.n	8008396 <_dtoa_r+0x886>
 80084ac:	4638      	mov	r0, r7
 80084ae:	e7b8      	b.n	8008422 <_dtoa_r+0x912>
 80084b0:	2201      	movs	r2, #1
 80084b2:	e7e1      	b.n	8008478 <_dtoa_r+0x968>
 80084b4:	f1ba 0f00 	cmp.w	sl, #0
 80084b8:	db06      	blt.n	80084c8 <_dtoa_r+0x9b8>
 80084ba:	9907      	ldr	r1, [sp, #28]
 80084bc:	ea41 0a0a 	orr.w	sl, r1, sl
 80084c0:	9908      	ldr	r1, [sp, #32]
 80084c2:	ea5a 0101 	orrs.w	r1, sl, r1
 80084c6:	d120      	bne.n	800850a <_dtoa_r+0x9fa>
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	ddec      	ble.n	80084a6 <_dtoa_r+0x996>
 80084cc:	4629      	mov	r1, r5
 80084ce:	2201      	movs	r2, #1
 80084d0:	4630      	mov	r0, r6
 80084d2:	9305      	str	r3, [sp, #20]
 80084d4:	f000 fabc 	bl	8008a50 <__lshift>
 80084d8:	4621      	mov	r1, r4
 80084da:	4605      	mov	r5, r0
 80084dc:	f000 fb24 	bl	8008b28 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	9b05      	ldr	r3, [sp, #20]
 80084e4:	dc02      	bgt.n	80084ec <_dtoa_r+0x9dc>
 80084e6:	d1de      	bne.n	80084a6 <_dtoa_r+0x996>
 80084e8:	07da      	lsls	r2, r3, #31
 80084ea:	d5dc      	bpl.n	80084a6 <_dtoa_r+0x996>
 80084ec:	2b39      	cmp	r3, #57	; 0x39
 80084ee:	d1d8      	bne.n	80084a2 <_dtoa_r+0x992>
 80084f0:	9a02      	ldr	r2, [sp, #8]
 80084f2:	2339      	movs	r3, #57	; 0x39
 80084f4:	7013      	strb	r3, [r2, #0]
 80084f6:	4643      	mov	r3, r8
 80084f8:	4698      	mov	r8, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008500:	2a39      	cmp	r2, #57	; 0x39
 8008502:	d051      	beq.n	80085a8 <_dtoa_r+0xa98>
 8008504:	3201      	adds	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e745      	b.n	8008396 <_dtoa_r+0x886>
 800850a:	2a00      	cmp	r2, #0
 800850c:	dd03      	ble.n	8008516 <_dtoa_r+0xa06>
 800850e:	2b39      	cmp	r3, #57	; 0x39
 8008510:	d0ee      	beq.n	80084f0 <_dtoa_r+0x9e0>
 8008512:	3301      	adds	r3, #1
 8008514:	e7c7      	b.n	80084a6 <_dtoa_r+0x996>
 8008516:	9a05      	ldr	r2, [sp, #20]
 8008518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800851a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800851e:	428a      	cmp	r2, r1
 8008520:	d02b      	beq.n	800857a <_dtoa_r+0xa6a>
 8008522:	4629      	mov	r1, r5
 8008524:	2300      	movs	r3, #0
 8008526:	220a      	movs	r2, #10
 8008528:	4630      	mov	r0, r6
 800852a:	f000 f8e1 	bl	80086f0 <__multadd>
 800852e:	45b9      	cmp	r9, r7
 8008530:	4605      	mov	r5, r0
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	f04f 020a 	mov.w	r2, #10
 800853a:	4649      	mov	r1, r9
 800853c:	4630      	mov	r0, r6
 800853e:	d107      	bne.n	8008550 <_dtoa_r+0xa40>
 8008540:	f000 f8d6 	bl	80086f0 <__multadd>
 8008544:	4681      	mov	r9, r0
 8008546:	4607      	mov	r7, r0
 8008548:	9b05      	ldr	r3, [sp, #20]
 800854a:	3301      	adds	r3, #1
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	e774      	b.n	800843a <_dtoa_r+0x92a>
 8008550:	f000 f8ce 	bl	80086f0 <__multadd>
 8008554:	4639      	mov	r1, r7
 8008556:	4681      	mov	r9, r0
 8008558:	2300      	movs	r3, #0
 800855a:	220a      	movs	r2, #10
 800855c:	4630      	mov	r0, r6
 800855e:	f000 f8c7 	bl	80086f0 <__multadd>
 8008562:	4607      	mov	r7, r0
 8008564:	e7f0      	b.n	8008548 <_dtoa_r+0xa38>
 8008566:	f1ba 0f00 	cmp.w	sl, #0
 800856a:	9a00      	ldr	r2, [sp, #0]
 800856c:	bfcc      	ite	gt
 800856e:	46d0      	movgt	r8, sl
 8008570:	f04f 0801 	movle.w	r8, #1
 8008574:	4490      	add	r8, r2
 8008576:	f04f 0900 	mov.w	r9, #0
 800857a:	4629      	mov	r1, r5
 800857c:	2201      	movs	r2, #1
 800857e:	4630      	mov	r0, r6
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	f000 fa65 	bl	8008a50 <__lshift>
 8008586:	4621      	mov	r1, r4
 8008588:	4605      	mov	r5, r0
 800858a:	f000 facd 	bl	8008b28 <__mcmp>
 800858e:	2800      	cmp	r0, #0
 8008590:	dcb1      	bgt.n	80084f6 <_dtoa_r+0x9e6>
 8008592:	d102      	bne.n	800859a <_dtoa_r+0xa8a>
 8008594:	9b02      	ldr	r3, [sp, #8]
 8008596:	07db      	lsls	r3, r3, #31
 8008598:	d4ad      	bmi.n	80084f6 <_dtoa_r+0x9e6>
 800859a:	4643      	mov	r3, r8
 800859c:	4698      	mov	r8, r3
 800859e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085a2:	2a30      	cmp	r2, #48	; 0x30
 80085a4:	d0fa      	beq.n	800859c <_dtoa_r+0xa8c>
 80085a6:	e6f6      	b.n	8008396 <_dtoa_r+0x886>
 80085a8:	9a00      	ldr	r2, [sp, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d1a4      	bne.n	80084f8 <_dtoa_r+0x9e8>
 80085ae:	f10b 0b01 	add.w	fp, fp, #1
 80085b2:	2331      	movs	r3, #49	; 0x31
 80085b4:	e778      	b.n	80084a8 <_dtoa_r+0x998>
 80085b6:	4b15      	ldr	r3, [pc, #84]	; (800860c <_dtoa_r+0xafc>)
 80085b8:	f7ff bb12 	b.w	8007be0 <_dtoa_r+0xd0>
 80085bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f47f aaee 	bne.w	8007ba0 <_dtoa_r+0x90>
 80085c4:	4b12      	ldr	r3, [pc, #72]	; (8008610 <_dtoa_r+0xb00>)
 80085c6:	f7ff bb0b 	b.w	8007be0 <_dtoa_r+0xd0>
 80085ca:	f1ba 0f00 	cmp.w	sl, #0
 80085ce:	dc03      	bgt.n	80085d8 <_dtoa_r+0xac8>
 80085d0:	9b07      	ldr	r3, [sp, #28]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	f73f aec7 	bgt.w	8008366 <_dtoa_r+0x856>
 80085d8:	f8dd 8000 	ldr.w	r8, [sp]
 80085dc:	4621      	mov	r1, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	f7ff fa08 	bl	80079f4 <quorem>
 80085e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085e8:	f808 3b01 	strb.w	r3, [r8], #1
 80085ec:	9a00      	ldr	r2, [sp, #0]
 80085ee:	eba8 0202 	sub.w	r2, r8, r2
 80085f2:	4592      	cmp	sl, r2
 80085f4:	ddb7      	ble.n	8008566 <_dtoa_r+0xa56>
 80085f6:	4629      	mov	r1, r5
 80085f8:	2300      	movs	r3, #0
 80085fa:	220a      	movs	r2, #10
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 f877 	bl	80086f0 <__multadd>
 8008602:	4605      	mov	r5, r0
 8008604:	e7ea      	b.n	80085dc <_dtoa_r+0xacc>
 8008606:	bf00      	nop
 8008608:	0800bd73 	.word	0x0800bd73
 800860c:	0800bccc 	.word	0x0800bccc
 8008610:	0800bcf0 	.word	0x0800bcf0

08008614 <_localeconv_r>:
 8008614:	4800      	ldr	r0, [pc, #0]	; (8008618 <_localeconv_r+0x4>)
 8008616:	4770      	bx	lr
 8008618:	200120e8 	.word	0x200120e8

0800861c <malloc>:
 800861c:	4b02      	ldr	r3, [pc, #8]	; (8008628 <malloc+0xc>)
 800861e:	4601      	mov	r1, r0
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	f000 bbe1 	b.w	8008de8 <_malloc_r>
 8008626:	bf00      	nop
 8008628:	20011f94 	.word	0x20011f94

0800862c <_Balloc>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008630:	4604      	mov	r4, r0
 8008632:	460d      	mov	r5, r1
 8008634:	b976      	cbnz	r6, 8008654 <_Balloc+0x28>
 8008636:	2010      	movs	r0, #16
 8008638:	f7ff fff0 	bl	800861c <malloc>
 800863c:	4602      	mov	r2, r0
 800863e:	6260      	str	r0, [r4, #36]	; 0x24
 8008640:	b920      	cbnz	r0, 800864c <_Balloc+0x20>
 8008642:	4b18      	ldr	r3, [pc, #96]	; (80086a4 <_Balloc+0x78>)
 8008644:	4818      	ldr	r0, [pc, #96]	; (80086a8 <_Balloc+0x7c>)
 8008646:	2166      	movs	r1, #102	; 0x66
 8008648:	f000 fc38 	bl	8008ebc <__assert_func>
 800864c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008650:	6006      	str	r6, [r0, #0]
 8008652:	60c6      	str	r6, [r0, #12]
 8008654:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008656:	68f3      	ldr	r3, [r6, #12]
 8008658:	b183      	cbz	r3, 800867c <_Balloc+0x50>
 800865a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008662:	b9b8      	cbnz	r0, 8008694 <_Balloc+0x68>
 8008664:	2101      	movs	r1, #1
 8008666:	fa01 f605 	lsl.w	r6, r1, r5
 800866a:	1d72      	adds	r2, r6, #5
 800866c:	0092      	lsls	r2, r2, #2
 800866e:	4620      	mov	r0, r4
 8008670:	f000 fb5a 	bl	8008d28 <_calloc_r>
 8008674:	b160      	cbz	r0, 8008690 <_Balloc+0x64>
 8008676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800867a:	e00e      	b.n	800869a <_Balloc+0x6e>
 800867c:	2221      	movs	r2, #33	; 0x21
 800867e:	2104      	movs	r1, #4
 8008680:	4620      	mov	r0, r4
 8008682:	f000 fb51 	bl	8008d28 <_calloc_r>
 8008686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008688:	60f0      	str	r0, [r6, #12]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e4      	bne.n	800865a <_Balloc+0x2e>
 8008690:	2000      	movs	r0, #0
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	6802      	ldr	r2, [r0, #0]
 8008696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800869a:	2300      	movs	r3, #0
 800869c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086a0:	e7f7      	b.n	8008692 <_Balloc+0x66>
 80086a2:	bf00      	nop
 80086a4:	0800bcfd 	.word	0x0800bcfd
 80086a8:	0800bd84 	.word	0x0800bd84

080086ac <_Bfree>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086b0:	4605      	mov	r5, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	b976      	cbnz	r6, 80086d4 <_Bfree+0x28>
 80086b6:	2010      	movs	r0, #16
 80086b8:	f7ff ffb0 	bl	800861c <malloc>
 80086bc:	4602      	mov	r2, r0
 80086be:	6268      	str	r0, [r5, #36]	; 0x24
 80086c0:	b920      	cbnz	r0, 80086cc <_Bfree+0x20>
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <_Bfree+0x3c>)
 80086c4:	4809      	ldr	r0, [pc, #36]	; (80086ec <_Bfree+0x40>)
 80086c6:	218a      	movs	r1, #138	; 0x8a
 80086c8:	f000 fbf8 	bl	8008ebc <__assert_func>
 80086cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d0:	6006      	str	r6, [r0, #0]
 80086d2:	60c6      	str	r6, [r0, #12]
 80086d4:	b13c      	cbz	r4, 80086e6 <_Bfree+0x3a>
 80086d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086d8:	6862      	ldr	r2, [r4, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086e0:	6021      	str	r1, [r4, #0]
 80086e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	0800bcfd 	.word	0x0800bcfd
 80086ec:	0800bd84 	.word	0x0800bd84

080086f0 <__multadd>:
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	690e      	ldr	r6, [r1, #16]
 80086f6:	4607      	mov	r7, r0
 80086f8:	4698      	mov	r8, r3
 80086fa:	460c      	mov	r4, r1
 80086fc:	f101 0014 	add.w	r0, r1, #20
 8008700:	2300      	movs	r3, #0
 8008702:	6805      	ldr	r5, [r0, #0]
 8008704:	b2a9      	uxth	r1, r5
 8008706:	fb02 8101 	mla	r1, r2, r1, r8
 800870a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800870e:	0c2d      	lsrs	r5, r5, #16
 8008710:	fb02 c505 	mla	r5, r2, r5, ip
 8008714:	b289      	uxth	r1, r1
 8008716:	3301      	adds	r3, #1
 8008718:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800871c:	429e      	cmp	r6, r3
 800871e:	f840 1b04 	str.w	r1, [r0], #4
 8008722:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008726:	dcec      	bgt.n	8008702 <__multadd+0x12>
 8008728:	f1b8 0f00 	cmp.w	r8, #0
 800872c:	d022      	beq.n	8008774 <__multadd+0x84>
 800872e:	68a3      	ldr	r3, [r4, #8]
 8008730:	42b3      	cmp	r3, r6
 8008732:	dc19      	bgt.n	8008768 <__multadd+0x78>
 8008734:	6861      	ldr	r1, [r4, #4]
 8008736:	4638      	mov	r0, r7
 8008738:	3101      	adds	r1, #1
 800873a:	f7ff ff77 	bl	800862c <_Balloc>
 800873e:	4605      	mov	r5, r0
 8008740:	b928      	cbnz	r0, 800874e <__multadd+0x5e>
 8008742:	4602      	mov	r2, r0
 8008744:	4b0d      	ldr	r3, [pc, #52]	; (800877c <__multadd+0x8c>)
 8008746:	480e      	ldr	r0, [pc, #56]	; (8008780 <__multadd+0x90>)
 8008748:	21b5      	movs	r1, #181	; 0xb5
 800874a:	f000 fbb7 	bl	8008ebc <__assert_func>
 800874e:	6922      	ldr	r2, [r4, #16]
 8008750:	3202      	adds	r2, #2
 8008752:	f104 010c 	add.w	r1, r4, #12
 8008756:	0092      	lsls	r2, r2, #2
 8008758:	300c      	adds	r0, #12
 800875a:	f7fe fcf3 	bl	8007144 <memcpy>
 800875e:	4621      	mov	r1, r4
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff ffa3 	bl	80086ac <_Bfree>
 8008766:	462c      	mov	r4, r5
 8008768:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800876c:	3601      	adds	r6, #1
 800876e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008772:	6126      	str	r6, [r4, #16]
 8008774:	4620      	mov	r0, r4
 8008776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800877a:	bf00      	nop
 800877c:	0800bd73 	.word	0x0800bd73
 8008780:	0800bd84 	.word	0x0800bd84

08008784 <__hi0bits>:
 8008784:	0c03      	lsrs	r3, r0, #16
 8008786:	041b      	lsls	r3, r3, #16
 8008788:	b9d3      	cbnz	r3, 80087c0 <__hi0bits+0x3c>
 800878a:	0400      	lsls	r0, r0, #16
 800878c:	2310      	movs	r3, #16
 800878e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008792:	bf04      	itt	eq
 8008794:	0200      	lsleq	r0, r0, #8
 8008796:	3308      	addeq	r3, #8
 8008798:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800879c:	bf04      	itt	eq
 800879e:	0100      	lsleq	r0, r0, #4
 80087a0:	3304      	addeq	r3, #4
 80087a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087a6:	bf04      	itt	eq
 80087a8:	0080      	lsleq	r0, r0, #2
 80087aa:	3302      	addeq	r3, #2
 80087ac:	2800      	cmp	r0, #0
 80087ae:	db05      	blt.n	80087bc <__hi0bits+0x38>
 80087b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80087b4:	f103 0301 	add.w	r3, r3, #1
 80087b8:	bf08      	it	eq
 80087ba:	2320      	moveq	r3, #32
 80087bc:	4618      	mov	r0, r3
 80087be:	4770      	bx	lr
 80087c0:	2300      	movs	r3, #0
 80087c2:	e7e4      	b.n	800878e <__hi0bits+0xa>

080087c4 <__lo0bits>:
 80087c4:	6803      	ldr	r3, [r0, #0]
 80087c6:	f013 0207 	ands.w	r2, r3, #7
 80087ca:	4601      	mov	r1, r0
 80087cc:	d00b      	beq.n	80087e6 <__lo0bits+0x22>
 80087ce:	07da      	lsls	r2, r3, #31
 80087d0:	d424      	bmi.n	800881c <__lo0bits+0x58>
 80087d2:	0798      	lsls	r0, r3, #30
 80087d4:	bf49      	itett	mi
 80087d6:	085b      	lsrmi	r3, r3, #1
 80087d8:	089b      	lsrpl	r3, r3, #2
 80087da:	2001      	movmi	r0, #1
 80087dc:	600b      	strmi	r3, [r1, #0]
 80087de:	bf5c      	itt	pl
 80087e0:	600b      	strpl	r3, [r1, #0]
 80087e2:	2002      	movpl	r0, #2
 80087e4:	4770      	bx	lr
 80087e6:	b298      	uxth	r0, r3
 80087e8:	b9b0      	cbnz	r0, 8008818 <__lo0bits+0x54>
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	2010      	movs	r0, #16
 80087ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087f2:	bf04      	itt	eq
 80087f4:	0a1b      	lsreq	r3, r3, #8
 80087f6:	3008      	addeq	r0, #8
 80087f8:	071a      	lsls	r2, r3, #28
 80087fa:	bf04      	itt	eq
 80087fc:	091b      	lsreq	r3, r3, #4
 80087fe:	3004      	addeq	r0, #4
 8008800:	079a      	lsls	r2, r3, #30
 8008802:	bf04      	itt	eq
 8008804:	089b      	lsreq	r3, r3, #2
 8008806:	3002      	addeq	r0, #2
 8008808:	07da      	lsls	r2, r3, #31
 800880a:	d403      	bmi.n	8008814 <__lo0bits+0x50>
 800880c:	085b      	lsrs	r3, r3, #1
 800880e:	f100 0001 	add.w	r0, r0, #1
 8008812:	d005      	beq.n	8008820 <__lo0bits+0x5c>
 8008814:	600b      	str	r3, [r1, #0]
 8008816:	4770      	bx	lr
 8008818:	4610      	mov	r0, r2
 800881a:	e7e8      	b.n	80087ee <__lo0bits+0x2a>
 800881c:	2000      	movs	r0, #0
 800881e:	4770      	bx	lr
 8008820:	2020      	movs	r0, #32
 8008822:	4770      	bx	lr

08008824 <__i2b>:
 8008824:	b510      	push	{r4, lr}
 8008826:	460c      	mov	r4, r1
 8008828:	2101      	movs	r1, #1
 800882a:	f7ff feff 	bl	800862c <_Balloc>
 800882e:	4602      	mov	r2, r0
 8008830:	b928      	cbnz	r0, 800883e <__i2b+0x1a>
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <__i2b+0x24>)
 8008834:	4805      	ldr	r0, [pc, #20]	; (800884c <__i2b+0x28>)
 8008836:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800883a:	f000 fb3f 	bl	8008ebc <__assert_func>
 800883e:	2301      	movs	r3, #1
 8008840:	6144      	str	r4, [r0, #20]
 8008842:	6103      	str	r3, [r0, #16]
 8008844:	bd10      	pop	{r4, pc}
 8008846:	bf00      	nop
 8008848:	0800bd73 	.word	0x0800bd73
 800884c:	0800bd84 	.word	0x0800bd84

08008850 <__multiply>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	4614      	mov	r4, r2
 8008856:	690a      	ldr	r2, [r1, #16]
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	429a      	cmp	r2, r3
 800885c:	bfb8      	it	lt
 800885e:	460b      	movlt	r3, r1
 8008860:	460d      	mov	r5, r1
 8008862:	bfbc      	itt	lt
 8008864:	4625      	movlt	r5, r4
 8008866:	461c      	movlt	r4, r3
 8008868:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800886c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008870:	68ab      	ldr	r3, [r5, #8]
 8008872:	6869      	ldr	r1, [r5, #4]
 8008874:	eb0a 0709 	add.w	r7, sl, r9
 8008878:	42bb      	cmp	r3, r7
 800887a:	b085      	sub	sp, #20
 800887c:	bfb8      	it	lt
 800887e:	3101      	addlt	r1, #1
 8008880:	f7ff fed4 	bl	800862c <_Balloc>
 8008884:	b930      	cbnz	r0, 8008894 <__multiply+0x44>
 8008886:	4602      	mov	r2, r0
 8008888:	4b42      	ldr	r3, [pc, #264]	; (8008994 <__multiply+0x144>)
 800888a:	4843      	ldr	r0, [pc, #268]	; (8008998 <__multiply+0x148>)
 800888c:	f240 115d 	movw	r1, #349	; 0x15d
 8008890:	f000 fb14 	bl	8008ebc <__assert_func>
 8008894:	f100 0614 	add.w	r6, r0, #20
 8008898:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800889c:	4633      	mov	r3, r6
 800889e:	2200      	movs	r2, #0
 80088a0:	4543      	cmp	r3, r8
 80088a2:	d31e      	bcc.n	80088e2 <__multiply+0x92>
 80088a4:	f105 0c14 	add.w	ip, r5, #20
 80088a8:	f104 0314 	add.w	r3, r4, #20
 80088ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80088b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80088b4:	9202      	str	r2, [sp, #8]
 80088b6:	ebac 0205 	sub.w	r2, ip, r5
 80088ba:	3a15      	subs	r2, #21
 80088bc:	f022 0203 	bic.w	r2, r2, #3
 80088c0:	3204      	adds	r2, #4
 80088c2:	f105 0115 	add.w	r1, r5, #21
 80088c6:	458c      	cmp	ip, r1
 80088c8:	bf38      	it	cc
 80088ca:	2204      	movcc	r2, #4
 80088cc:	9201      	str	r2, [sp, #4]
 80088ce:	9a02      	ldr	r2, [sp, #8]
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d808      	bhi.n	80088e8 <__multiply+0x98>
 80088d6:	2f00      	cmp	r7, #0
 80088d8:	dc55      	bgt.n	8008986 <__multiply+0x136>
 80088da:	6107      	str	r7, [r0, #16]
 80088dc:	b005      	add	sp, #20
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	f843 2b04 	str.w	r2, [r3], #4
 80088e6:	e7db      	b.n	80088a0 <__multiply+0x50>
 80088e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80088ec:	f1ba 0f00 	cmp.w	sl, #0
 80088f0:	d020      	beq.n	8008934 <__multiply+0xe4>
 80088f2:	f105 0e14 	add.w	lr, r5, #20
 80088f6:	46b1      	mov	r9, r6
 80088f8:	2200      	movs	r2, #0
 80088fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80088fe:	f8d9 b000 	ldr.w	fp, [r9]
 8008902:	b2a1      	uxth	r1, r4
 8008904:	fa1f fb8b 	uxth.w	fp, fp
 8008908:	fb0a b101 	mla	r1, sl, r1, fp
 800890c:	4411      	add	r1, r2
 800890e:	f8d9 2000 	ldr.w	r2, [r9]
 8008912:	0c24      	lsrs	r4, r4, #16
 8008914:	0c12      	lsrs	r2, r2, #16
 8008916:	fb0a 2404 	mla	r4, sl, r4, r2
 800891a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800891e:	b289      	uxth	r1, r1
 8008920:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008924:	45f4      	cmp	ip, lr
 8008926:	f849 1b04 	str.w	r1, [r9], #4
 800892a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800892e:	d8e4      	bhi.n	80088fa <__multiply+0xaa>
 8008930:	9901      	ldr	r1, [sp, #4]
 8008932:	5072      	str	r2, [r6, r1]
 8008934:	9a03      	ldr	r2, [sp, #12]
 8008936:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800893a:	3304      	adds	r3, #4
 800893c:	f1b9 0f00 	cmp.w	r9, #0
 8008940:	d01f      	beq.n	8008982 <__multiply+0x132>
 8008942:	6834      	ldr	r4, [r6, #0]
 8008944:	f105 0114 	add.w	r1, r5, #20
 8008948:	46b6      	mov	lr, r6
 800894a:	f04f 0a00 	mov.w	sl, #0
 800894e:	880a      	ldrh	r2, [r1, #0]
 8008950:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008954:	fb09 b202 	mla	r2, r9, r2, fp
 8008958:	4492      	add	sl, r2
 800895a:	b2a4      	uxth	r4, r4
 800895c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008960:	f84e 4b04 	str.w	r4, [lr], #4
 8008964:	f851 4b04 	ldr.w	r4, [r1], #4
 8008968:	f8be 2000 	ldrh.w	r2, [lr]
 800896c:	0c24      	lsrs	r4, r4, #16
 800896e:	fb09 2404 	mla	r4, r9, r4, r2
 8008972:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008976:	458c      	cmp	ip, r1
 8008978:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800897c:	d8e7      	bhi.n	800894e <__multiply+0xfe>
 800897e:	9a01      	ldr	r2, [sp, #4]
 8008980:	50b4      	str	r4, [r6, r2]
 8008982:	3604      	adds	r6, #4
 8008984:	e7a3      	b.n	80088ce <__multiply+0x7e>
 8008986:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1a5      	bne.n	80088da <__multiply+0x8a>
 800898e:	3f01      	subs	r7, #1
 8008990:	e7a1      	b.n	80088d6 <__multiply+0x86>
 8008992:	bf00      	nop
 8008994:	0800bd73 	.word	0x0800bd73
 8008998:	0800bd84 	.word	0x0800bd84

0800899c <__pow5mult>:
 800899c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a0:	4615      	mov	r5, r2
 80089a2:	f012 0203 	ands.w	r2, r2, #3
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	d007      	beq.n	80089bc <__pow5mult+0x20>
 80089ac:	4c25      	ldr	r4, [pc, #148]	; (8008a44 <__pow5mult+0xa8>)
 80089ae:	3a01      	subs	r2, #1
 80089b0:	2300      	movs	r3, #0
 80089b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089b6:	f7ff fe9b 	bl	80086f0 <__multadd>
 80089ba:	4607      	mov	r7, r0
 80089bc:	10ad      	asrs	r5, r5, #2
 80089be:	d03d      	beq.n	8008a3c <__pow5mult+0xa0>
 80089c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089c2:	b97c      	cbnz	r4, 80089e4 <__pow5mult+0x48>
 80089c4:	2010      	movs	r0, #16
 80089c6:	f7ff fe29 	bl	800861c <malloc>
 80089ca:	4602      	mov	r2, r0
 80089cc:	6270      	str	r0, [r6, #36]	; 0x24
 80089ce:	b928      	cbnz	r0, 80089dc <__pow5mult+0x40>
 80089d0:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <__pow5mult+0xac>)
 80089d2:	481e      	ldr	r0, [pc, #120]	; (8008a4c <__pow5mult+0xb0>)
 80089d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089d8:	f000 fa70 	bl	8008ebc <__assert_func>
 80089dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089e0:	6004      	str	r4, [r0, #0]
 80089e2:	60c4      	str	r4, [r0, #12]
 80089e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089ec:	b94c      	cbnz	r4, 8008a02 <__pow5mult+0x66>
 80089ee:	f240 2171 	movw	r1, #625	; 0x271
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff ff16 	bl	8008824 <__i2b>
 80089f8:	2300      	movs	r3, #0
 80089fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80089fe:	4604      	mov	r4, r0
 8008a00:	6003      	str	r3, [r0, #0]
 8008a02:	f04f 0900 	mov.w	r9, #0
 8008a06:	07eb      	lsls	r3, r5, #31
 8008a08:	d50a      	bpl.n	8008a20 <__pow5mult+0x84>
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7ff ff1e 	bl	8008850 <__multiply>
 8008a14:	4639      	mov	r1, r7
 8008a16:	4680      	mov	r8, r0
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff fe47 	bl	80086ac <_Bfree>
 8008a1e:	4647      	mov	r7, r8
 8008a20:	106d      	asrs	r5, r5, #1
 8008a22:	d00b      	beq.n	8008a3c <__pow5mult+0xa0>
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	b938      	cbnz	r0, 8008a38 <__pow5mult+0x9c>
 8008a28:	4622      	mov	r2, r4
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7ff ff0f 	bl	8008850 <__multiply>
 8008a32:	6020      	str	r0, [r4, #0]
 8008a34:	f8c0 9000 	str.w	r9, [r0]
 8008a38:	4604      	mov	r4, r0
 8008a3a:	e7e4      	b.n	8008a06 <__pow5mult+0x6a>
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a42:	bf00      	nop
 8008a44:	0800bed8 	.word	0x0800bed8
 8008a48:	0800bcfd 	.word	0x0800bcfd
 8008a4c:	0800bd84 	.word	0x0800bd84

08008a50 <__lshift>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	460c      	mov	r4, r1
 8008a56:	6849      	ldr	r1, [r1, #4]
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	4607      	mov	r7, r0
 8008a62:	4691      	mov	r9, r2
 8008a64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a68:	f108 0601 	add.w	r6, r8, #1
 8008a6c:	42b3      	cmp	r3, r6
 8008a6e:	db0b      	blt.n	8008a88 <__lshift+0x38>
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7ff fddb 	bl	800862c <_Balloc>
 8008a76:	4605      	mov	r5, r0
 8008a78:	b948      	cbnz	r0, 8008a8e <__lshift+0x3e>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4b28      	ldr	r3, [pc, #160]	; (8008b20 <__lshift+0xd0>)
 8008a7e:	4829      	ldr	r0, [pc, #164]	; (8008b24 <__lshift+0xd4>)
 8008a80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a84:	f000 fa1a 	bl	8008ebc <__assert_func>
 8008a88:	3101      	adds	r1, #1
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	e7ee      	b.n	8008a6c <__lshift+0x1c>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f100 0114 	add.w	r1, r0, #20
 8008a94:	f100 0210 	add.w	r2, r0, #16
 8008a98:	4618      	mov	r0, r3
 8008a9a:	4553      	cmp	r3, sl
 8008a9c:	db33      	blt.n	8008b06 <__lshift+0xb6>
 8008a9e:	6920      	ldr	r0, [r4, #16]
 8008aa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008aa4:	f104 0314 	add.w	r3, r4, #20
 8008aa8:	f019 091f 	ands.w	r9, r9, #31
 8008aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ab0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ab4:	d02b      	beq.n	8008b0e <__lshift+0xbe>
 8008ab6:	f1c9 0e20 	rsb	lr, r9, #32
 8008aba:	468a      	mov	sl, r1
 8008abc:	2200      	movs	r2, #0
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ac4:	4302      	orrs	r2, r0
 8008ac6:	f84a 2b04 	str.w	r2, [sl], #4
 8008aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ace:	459c      	cmp	ip, r3
 8008ad0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ad4:	d8f3      	bhi.n	8008abe <__lshift+0x6e>
 8008ad6:	ebac 0304 	sub.w	r3, ip, r4
 8008ada:	3b15      	subs	r3, #21
 8008adc:	f023 0303 	bic.w	r3, r3, #3
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	f104 0015 	add.w	r0, r4, #21
 8008ae6:	4584      	cmp	ip, r0
 8008ae8:	bf38      	it	cc
 8008aea:	2304      	movcc	r3, #4
 8008aec:	50ca      	str	r2, [r1, r3]
 8008aee:	b10a      	cbz	r2, 8008af4 <__lshift+0xa4>
 8008af0:	f108 0602 	add.w	r6, r8, #2
 8008af4:	3e01      	subs	r6, #1
 8008af6:	4638      	mov	r0, r7
 8008af8:	612e      	str	r6, [r5, #16]
 8008afa:	4621      	mov	r1, r4
 8008afc:	f7ff fdd6 	bl	80086ac <_Bfree>
 8008b00:	4628      	mov	r0, r5
 8008b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	e7c5      	b.n	8008a9a <__lshift+0x4a>
 8008b0e:	3904      	subs	r1, #4
 8008b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b18:	459c      	cmp	ip, r3
 8008b1a:	d8f9      	bhi.n	8008b10 <__lshift+0xc0>
 8008b1c:	e7ea      	b.n	8008af4 <__lshift+0xa4>
 8008b1e:	bf00      	nop
 8008b20:	0800bd73 	.word	0x0800bd73
 8008b24:	0800bd84 	.word	0x0800bd84

08008b28 <__mcmp>:
 8008b28:	b530      	push	{r4, r5, lr}
 8008b2a:	6902      	ldr	r2, [r0, #16]
 8008b2c:	690c      	ldr	r4, [r1, #16]
 8008b2e:	1b12      	subs	r2, r2, r4
 8008b30:	d10e      	bne.n	8008b50 <__mcmp+0x28>
 8008b32:	f100 0314 	add.w	r3, r0, #20
 8008b36:	3114      	adds	r1, #20
 8008b38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b48:	42a5      	cmp	r5, r4
 8008b4a:	d003      	beq.n	8008b54 <__mcmp+0x2c>
 8008b4c:	d305      	bcc.n	8008b5a <__mcmp+0x32>
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4610      	mov	r0, r2
 8008b52:	bd30      	pop	{r4, r5, pc}
 8008b54:	4283      	cmp	r3, r0
 8008b56:	d3f3      	bcc.n	8008b40 <__mcmp+0x18>
 8008b58:	e7fa      	b.n	8008b50 <__mcmp+0x28>
 8008b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5e:	e7f7      	b.n	8008b50 <__mcmp+0x28>

08008b60 <__mdiff>:
 8008b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	460c      	mov	r4, r1
 8008b66:	4606      	mov	r6, r0
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	4617      	mov	r7, r2
 8008b6e:	f7ff ffdb 	bl	8008b28 <__mcmp>
 8008b72:	1e05      	subs	r5, r0, #0
 8008b74:	d110      	bne.n	8008b98 <__mdiff+0x38>
 8008b76:	4629      	mov	r1, r5
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7ff fd57 	bl	800862c <_Balloc>
 8008b7e:	b930      	cbnz	r0, 8008b8e <__mdiff+0x2e>
 8008b80:	4b39      	ldr	r3, [pc, #228]	; (8008c68 <__mdiff+0x108>)
 8008b82:	4602      	mov	r2, r0
 8008b84:	f240 2132 	movw	r1, #562	; 0x232
 8008b88:	4838      	ldr	r0, [pc, #224]	; (8008c6c <__mdiff+0x10c>)
 8008b8a:	f000 f997 	bl	8008ebc <__assert_func>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b98:	bfa4      	itt	ge
 8008b9a:	463b      	movge	r3, r7
 8008b9c:	4627      	movge	r7, r4
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	bfa6      	itte	ge
 8008ba4:	461c      	movge	r4, r3
 8008ba6:	2500      	movge	r5, #0
 8008ba8:	2501      	movlt	r5, #1
 8008baa:	f7ff fd3f 	bl	800862c <_Balloc>
 8008bae:	b920      	cbnz	r0, 8008bba <__mdiff+0x5a>
 8008bb0:	4b2d      	ldr	r3, [pc, #180]	; (8008c68 <__mdiff+0x108>)
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008bb8:	e7e6      	b.n	8008b88 <__mdiff+0x28>
 8008bba:	693e      	ldr	r6, [r7, #16]
 8008bbc:	60c5      	str	r5, [r0, #12]
 8008bbe:	6925      	ldr	r5, [r4, #16]
 8008bc0:	f107 0114 	add.w	r1, r7, #20
 8008bc4:	f104 0914 	add.w	r9, r4, #20
 8008bc8:	f100 0e14 	add.w	lr, r0, #20
 8008bcc:	f107 0210 	add.w	r2, r7, #16
 8008bd0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008bd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008bd8:	46f2      	mov	sl, lr
 8008bda:	2700      	movs	r7, #0
 8008bdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008be0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008be4:	fa1f f883 	uxth.w	r8, r3
 8008be8:	fa17 f78b 	uxtah	r7, r7, fp
 8008bec:	0c1b      	lsrs	r3, r3, #16
 8008bee:	eba7 0808 	sub.w	r8, r7, r8
 8008bf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bfa:	fa1f f888 	uxth.w	r8, r8
 8008bfe:	141f      	asrs	r7, r3, #16
 8008c00:	454d      	cmp	r5, r9
 8008c02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c06:	f84a 3b04 	str.w	r3, [sl], #4
 8008c0a:	d8e7      	bhi.n	8008bdc <__mdiff+0x7c>
 8008c0c:	1b2b      	subs	r3, r5, r4
 8008c0e:	3b15      	subs	r3, #21
 8008c10:	f023 0303 	bic.w	r3, r3, #3
 8008c14:	3304      	adds	r3, #4
 8008c16:	3415      	adds	r4, #21
 8008c18:	42a5      	cmp	r5, r4
 8008c1a:	bf38      	it	cc
 8008c1c:	2304      	movcc	r3, #4
 8008c1e:	4419      	add	r1, r3
 8008c20:	4473      	add	r3, lr
 8008c22:	469e      	mov	lr, r3
 8008c24:	460d      	mov	r5, r1
 8008c26:	4565      	cmp	r5, ip
 8008c28:	d30e      	bcc.n	8008c48 <__mdiff+0xe8>
 8008c2a:	f10c 0203 	add.w	r2, ip, #3
 8008c2e:	1a52      	subs	r2, r2, r1
 8008c30:	f022 0203 	bic.w	r2, r2, #3
 8008c34:	3903      	subs	r1, #3
 8008c36:	458c      	cmp	ip, r1
 8008c38:	bf38      	it	cc
 8008c3a:	2200      	movcc	r2, #0
 8008c3c:	441a      	add	r2, r3
 8008c3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c42:	b17b      	cbz	r3, 8008c64 <__mdiff+0x104>
 8008c44:	6106      	str	r6, [r0, #16]
 8008c46:	e7a5      	b.n	8008b94 <__mdiff+0x34>
 8008c48:	f855 8b04 	ldr.w	r8, [r5], #4
 8008c4c:	fa17 f488 	uxtah	r4, r7, r8
 8008c50:	1422      	asrs	r2, r4, #16
 8008c52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008c56:	b2a4      	uxth	r4, r4
 8008c58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008c5c:	f84e 4b04 	str.w	r4, [lr], #4
 8008c60:	1417      	asrs	r7, r2, #16
 8008c62:	e7e0      	b.n	8008c26 <__mdiff+0xc6>
 8008c64:	3e01      	subs	r6, #1
 8008c66:	e7ea      	b.n	8008c3e <__mdiff+0xde>
 8008c68:	0800bd73 	.word	0x0800bd73
 8008c6c:	0800bd84 	.word	0x0800bd84

08008c70 <__d2b>:
 8008c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c74:	4689      	mov	r9, r1
 8008c76:	2101      	movs	r1, #1
 8008c78:	ec57 6b10 	vmov	r6, r7, d0
 8008c7c:	4690      	mov	r8, r2
 8008c7e:	f7ff fcd5 	bl	800862c <_Balloc>
 8008c82:	4604      	mov	r4, r0
 8008c84:	b930      	cbnz	r0, 8008c94 <__d2b+0x24>
 8008c86:	4602      	mov	r2, r0
 8008c88:	4b25      	ldr	r3, [pc, #148]	; (8008d20 <__d2b+0xb0>)
 8008c8a:	4826      	ldr	r0, [pc, #152]	; (8008d24 <__d2b+0xb4>)
 8008c8c:	f240 310a 	movw	r1, #778	; 0x30a
 8008c90:	f000 f914 	bl	8008ebc <__assert_func>
 8008c94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c9c:	bb35      	cbnz	r5, 8008cec <__d2b+0x7c>
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	d028      	beq.n	8008cf6 <__d2b+0x86>
 8008ca4:	4668      	mov	r0, sp
 8008ca6:	9600      	str	r6, [sp, #0]
 8008ca8:	f7ff fd8c 	bl	80087c4 <__lo0bits>
 8008cac:	9900      	ldr	r1, [sp, #0]
 8008cae:	b300      	cbz	r0, 8008cf2 <__d2b+0x82>
 8008cb0:	9a01      	ldr	r2, [sp, #4]
 8008cb2:	f1c0 0320 	rsb	r3, r0, #32
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	40c2      	lsrs	r2, r0
 8008cbe:	6163      	str	r3, [r4, #20]
 8008cc0:	9201      	str	r2, [sp, #4]
 8008cc2:	9b01      	ldr	r3, [sp, #4]
 8008cc4:	61a3      	str	r3, [r4, #24]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	bf14      	ite	ne
 8008cca:	2202      	movne	r2, #2
 8008ccc:	2201      	moveq	r2, #1
 8008cce:	6122      	str	r2, [r4, #16]
 8008cd0:	b1d5      	cbz	r5, 8008d08 <__d2b+0x98>
 8008cd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cd6:	4405      	add	r5, r0
 8008cd8:	f8c9 5000 	str.w	r5, [r9]
 8008cdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ce0:	f8c8 0000 	str.w	r0, [r8]
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	b003      	add	sp, #12
 8008ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cf0:	e7d5      	b.n	8008c9e <__d2b+0x2e>
 8008cf2:	6161      	str	r1, [r4, #20]
 8008cf4:	e7e5      	b.n	8008cc2 <__d2b+0x52>
 8008cf6:	a801      	add	r0, sp, #4
 8008cf8:	f7ff fd64 	bl	80087c4 <__lo0bits>
 8008cfc:	9b01      	ldr	r3, [sp, #4]
 8008cfe:	6163      	str	r3, [r4, #20]
 8008d00:	2201      	movs	r2, #1
 8008d02:	6122      	str	r2, [r4, #16]
 8008d04:	3020      	adds	r0, #32
 8008d06:	e7e3      	b.n	8008cd0 <__d2b+0x60>
 8008d08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d10:	f8c9 0000 	str.w	r0, [r9]
 8008d14:	6918      	ldr	r0, [r3, #16]
 8008d16:	f7ff fd35 	bl	8008784 <__hi0bits>
 8008d1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d1e:	e7df      	b.n	8008ce0 <__d2b+0x70>
 8008d20:	0800bd73 	.word	0x0800bd73
 8008d24:	0800bd84 	.word	0x0800bd84

08008d28 <_calloc_r>:
 8008d28:	b513      	push	{r0, r1, r4, lr}
 8008d2a:	434a      	muls	r2, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	9201      	str	r2, [sp, #4]
 8008d30:	f000 f85a 	bl	8008de8 <_malloc_r>
 8008d34:	4604      	mov	r4, r0
 8008d36:	b118      	cbz	r0, 8008d40 <_calloc_r+0x18>
 8008d38:	9a01      	ldr	r2, [sp, #4]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	f7fe fa10 	bl	8007160 <memset>
 8008d40:	4620      	mov	r0, r4
 8008d42:	b002      	add	sp, #8
 8008d44:	bd10      	pop	{r4, pc}
	...

08008d48 <_free_r>:
 8008d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d4a:	2900      	cmp	r1, #0
 8008d4c:	d048      	beq.n	8008de0 <_free_r+0x98>
 8008d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d52:	9001      	str	r0, [sp, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f1a1 0404 	sub.w	r4, r1, #4
 8008d5a:	bfb8      	it	lt
 8008d5c:	18e4      	addlt	r4, r4, r3
 8008d5e:	f000 f8ef 	bl	8008f40 <__malloc_lock>
 8008d62:	4a20      	ldr	r2, [pc, #128]	; (8008de4 <_free_r+0x9c>)
 8008d64:	9801      	ldr	r0, [sp, #4]
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	4615      	mov	r5, r2
 8008d6a:	b933      	cbnz	r3, 8008d7a <_free_r+0x32>
 8008d6c:	6063      	str	r3, [r4, #4]
 8008d6e:	6014      	str	r4, [r2, #0]
 8008d70:	b003      	add	sp, #12
 8008d72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d76:	f000 b8e9 	b.w	8008f4c <__malloc_unlock>
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	d90b      	bls.n	8008d96 <_free_r+0x4e>
 8008d7e:	6821      	ldr	r1, [r4, #0]
 8008d80:	1862      	adds	r2, r4, r1
 8008d82:	4293      	cmp	r3, r2
 8008d84:	bf04      	itt	eq
 8008d86:	681a      	ldreq	r2, [r3, #0]
 8008d88:	685b      	ldreq	r3, [r3, #4]
 8008d8a:	6063      	str	r3, [r4, #4]
 8008d8c:	bf04      	itt	eq
 8008d8e:	1852      	addeq	r2, r2, r1
 8008d90:	6022      	streq	r2, [r4, #0]
 8008d92:	602c      	str	r4, [r5, #0]
 8008d94:	e7ec      	b.n	8008d70 <_free_r+0x28>
 8008d96:	461a      	mov	r2, r3
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b10b      	cbz	r3, 8008da0 <_free_r+0x58>
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d9fa      	bls.n	8008d96 <_free_r+0x4e>
 8008da0:	6811      	ldr	r1, [r2, #0]
 8008da2:	1855      	adds	r5, r2, r1
 8008da4:	42a5      	cmp	r5, r4
 8008da6:	d10b      	bne.n	8008dc0 <_free_r+0x78>
 8008da8:	6824      	ldr	r4, [r4, #0]
 8008daa:	4421      	add	r1, r4
 8008dac:	1854      	adds	r4, r2, r1
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	6011      	str	r1, [r2, #0]
 8008db2:	d1dd      	bne.n	8008d70 <_free_r+0x28>
 8008db4:	681c      	ldr	r4, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	6053      	str	r3, [r2, #4]
 8008dba:	4421      	add	r1, r4
 8008dbc:	6011      	str	r1, [r2, #0]
 8008dbe:	e7d7      	b.n	8008d70 <_free_r+0x28>
 8008dc0:	d902      	bls.n	8008dc8 <_free_r+0x80>
 8008dc2:	230c      	movs	r3, #12
 8008dc4:	6003      	str	r3, [r0, #0]
 8008dc6:	e7d3      	b.n	8008d70 <_free_r+0x28>
 8008dc8:	6825      	ldr	r5, [r4, #0]
 8008dca:	1961      	adds	r1, r4, r5
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	bf04      	itt	eq
 8008dd0:	6819      	ldreq	r1, [r3, #0]
 8008dd2:	685b      	ldreq	r3, [r3, #4]
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	bf04      	itt	eq
 8008dd8:	1949      	addeq	r1, r1, r5
 8008dda:	6021      	streq	r1, [r4, #0]
 8008ddc:	6054      	str	r4, [r2, #4]
 8008dde:	e7c7      	b.n	8008d70 <_free_r+0x28>
 8008de0:	b003      	add	sp, #12
 8008de2:	bd30      	pop	{r4, r5, pc}
 8008de4:	200121ac 	.word	0x200121ac

08008de8 <_malloc_r>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	1ccd      	adds	r5, r1, #3
 8008dec:	f025 0503 	bic.w	r5, r5, #3
 8008df0:	3508      	adds	r5, #8
 8008df2:	2d0c      	cmp	r5, #12
 8008df4:	bf38      	it	cc
 8008df6:	250c      	movcc	r5, #12
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	db01      	blt.n	8008e02 <_malloc_r+0x1a>
 8008dfe:	42a9      	cmp	r1, r5
 8008e00:	d903      	bls.n	8008e0a <_malloc_r+0x22>
 8008e02:	230c      	movs	r3, #12
 8008e04:	6033      	str	r3, [r6, #0]
 8008e06:	2000      	movs	r0, #0
 8008e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e0a:	f000 f899 	bl	8008f40 <__malloc_lock>
 8008e0e:	4921      	ldr	r1, [pc, #132]	; (8008e94 <_malloc_r+0xac>)
 8008e10:	680a      	ldr	r2, [r1, #0]
 8008e12:	4614      	mov	r4, r2
 8008e14:	b99c      	cbnz	r4, 8008e3e <_malloc_r+0x56>
 8008e16:	4f20      	ldr	r7, [pc, #128]	; (8008e98 <_malloc_r+0xb0>)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	b923      	cbnz	r3, 8008e26 <_malloc_r+0x3e>
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f000 f83c 	bl	8008e9c <_sbrk_r>
 8008e24:	6038      	str	r0, [r7, #0]
 8008e26:	4629      	mov	r1, r5
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f000 f837 	bl	8008e9c <_sbrk_r>
 8008e2e:	1c43      	adds	r3, r0, #1
 8008e30:	d123      	bne.n	8008e7a <_malloc_r+0x92>
 8008e32:	230c      	movs	r3, #12
 8008e34:	6033      	str	r3, [r6, #0]
 8008e36:	4630      	mov	r0, r6
 8008e38:	f000 f888 	bl	8008f4c <__malloc_unlock>
 8008e3c:	e7e3      	b.n	8008e06 <_malloc_r+0x1e>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	1b5b      	subs	r3, r3, r5
 8008e42:	d417      	bmi.n	8008e74 <_malloc_r+0x8c>
 8008e44:	2b0b      	cmp	r3, #11
 8008e46:	d903      	bls.n	8008e50 <_malloc_r+0x68>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	441c      	add	r4, r3
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	e004      	b.n	8008e5a <_malloc_r+0x72>
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	42a2      	cmp	r2, r4
 8008e54:	bf0c      	ite	eq
 8008e56:	600b      	streq	r3, [r1, #0]
 8008e58:	6053      	strne	r3, [r2, #4]
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f000 f876 	bl	8008f4c <__malloc_unlock>
 8008e60:	f104 000b 	add.w	r0, r4, #11
 8008e64:	1d23      	adds	r3, r4, #4
 8008e66:	f020 0007 	bic.w	r0, r0, #7
 8008e6a:	1ac2      	subs	r2, r0, r3
 8008e6c:	d0cc      	beq.n	8008e08 <_malloc_r+0x20>
 8008e6e:	1a1b      	subs	r3, r3, r0
 8008e70:	50a3      	str	r3, [r4, r2]
 8008e72:	e7c9      	b.n	8008e08 <_malloc_r+0x20>
 8008e74:	4622      	mov	r2, r4
 8008e76:	6864      	ldr	r4, [r4, #4]
 8008e78:	e7cc      	b.n	8008e14 <_malloc_r+0x2c>
 8008e7a:	1cc4      	adds	r4, r0, #3
 8008e7c:	f024 0403 	bic.w	r4, r4, #3
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d0e3      	beq.n	8008e4c <_malloc_r+0x64>
 8008e84:	1a21      	subs	r1, r4, r0
 8008e86:	4630      	mov	r0, r6
 8008e88:	f000 f808 	bl	8008e9c <_sbrk_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d1dd      	bne.n	8008e4c <_malloc_r+0x64>
 8008e90:	e7cf      	b.n	8008e32 <_malloc_r+0x4a>
 8008e92:	bf00      	nop
 8008e94:	200121ac 	.word	0x200121ac
 8008e98:	200121b0 	.word	0x200121b0

08008e9c <_sbrk_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d06      	ldr	r5, [pc, #24]	; (8008eb8 <_sbrk_r+0x1c>)
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	602b      	str	r3, [r5, #0]
 8008ea8:	f002 f996 	bl	800b1d8 <_sbrk>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d102      	bne.n	8008eb6 <_sbrk_r+0x1a>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	b103      	cbz	r3, 8008eb6 <_sbrk_r+0x1a>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	2001b7c8 	.word	0x2001b7c8

08008ebc <__assert_func>:
 8008ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ebe:	4614      	mov	r4, r2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <__assert_func+0x2c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	68d8      	ldr	r0, [r3, #12]
 8008eca:	b14c      	cbz	r4, 8008ee0 <__assert_func+0x24>
 8008ecc:	4b07      	ldr	r3, [pc, #28]	; (8008eec <__assert_func+0x30>)
 8008ece:	9100      	str	r1, [sp, #0]
 8008ed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ed4:	4906      	ldr	r1, [pc, #24]	; (8008ef0 <__assert_func+0x34>)
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	f000 f80e 	bl	8008ef8 <fiprintf>
 8008edc:	f000 fa64 	bl	80093a8 <abort>
 8008ee0:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <__assert_func+0x38>)
 8008ee2:	461c      	mov	r4, r3
 8008ee4:	e7f3      	b.n	8008ece <__assert_func+0x12>
 8008ee6:	bf00      	nop
 8008ee8:	20011f94 	.word	0x20011f94
 8008eec:	0800bee4 	.word	0x0800bee4
 8008ef0:	0800bef1 	.word	0x0800bef1
 8008ef4:	0800bf1f 	.word	0x0800bf1f

08008ef8 <fiprintf>:
 8008ef8:	b40e      	push	{r1, r2, r3}
 8008efa:	b503      	push	{r0, r1, lr}
 8008efc:	4601      	mov	r1, r0
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	4805      	ldr	r0, [pc, #20]	; (8008f18 <fiprintf+0x20>)
 8008f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f06:	6800      	ldr	r0, [r0, #0]
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	f000 f84f 	bl	8008fac <_vfiprintf_r>
 8008f0e:	b002      	add	sp, #8
 8008f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f14:	b003      	add	sp, #12
 8008f16:	4770      	bx	lr
 8008f18:	20011f94 	.word	0x20011f94

08008f1c <__ascii_mbtowc>:
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	b901      	cbnz	r1, 8008f22 <__ascii_mbtowc+0x6>
 8008f20:	a901      	add	r1, sp, #4
 8008f22:	b142      	cbz	r2, 8008f36 <__ascii_mbtowc+0x1a>
 8008f24:	b14b      	cbz	r3, 8008f3a <__ascii_mbtowc+0x1e>
 8008f26:	7813      	ldrb	r3, [r2, #0]
 8008f28:	600b      	str	r3, [r1, #0]
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	1e10      	subs	r0, r2, #0
 8008f2e:	bf18      	it	ne
 8008f30:	2001      	movne	r0, #1
 8008f32:	b002      	add	sp, #8
 8008f34:	4770      	bx	lr
 8008f36:	4610      	mov	r0, r2
 8008f38:	e7fb      	b.n	8008f32 <__ascii_mbtowc+0x16>
 8008f3a:	f06f 0001 	mvn.w	r0, #1
 8008f3e:	e7f8      	b.n	8008f32 <__ascii_mbtowc+0x16>

08008f40 <__malloc_lock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__malloc_lock+0x8>)
 8008f42:	f000 bbf1 	b.w	8009728 <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	2001b7d0 	.word	0x2001b7d0

08008f4c <__malloc_unlock>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__malloc_unlock+0x8>)
 8008f4e:	f000 bbec 	b.w	800972a <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	2001b7d0 	.word	0x2001b7d0

08008f58 <__sfputc_r>:
 8008f58:	6893      	ldr	r3, [r2, #8]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	b410      	push	{r4}
 8008f60:	6093      	str	r3, [r2, #8]
 8008f62:	da08      	bge.n	8008f76 <__sfputc_r+0x1e>
 8008f64:	6994      	ldr	r4, [r2, #24]
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	db01      	blt.n	8008f6e <__sfputc_r+0x16>
 8008f6a:	290a      	cmp	r1, #10
 8008f6c:	d103      	bne.n	8008f76 <__sfputc_r+0x1e>
 8008f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f72:	f000 b94b 	b.w	800920c <__swbuf_r>
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	1c58      	adds	r0, r3, #1
 8008f7a:	6010      	str	r0, [r2, #0]
 8008f7c:	7019      	strb	r1, [r3, #0]
 8008f7e:	4608      	mov	r0, r1
 8008f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <__sfputs_r>:
 8008f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	18d5      	adds	r5, r2, r3
 8008f90:	42ac      	cmp	r4, r5
 8008f92:	d101      	bne.n	8008f98 <__sfputs_r+0x12>
 8008f94:	2000      	movs	r0, #0
 8008f96:	e007      	b.n	8008fa8 <__sfputs_r+0x22>
 8008f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ffda 	bl	8008f58 <__sfputc_r>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d1f3      	bne.n	8008f90 <__sfputs_r+0xa>
 8008fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fac <_vfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	460d      	mov	r5, r1
 8008fb2:	b09d      	sub	sp, #116	; 0x74
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	4698      	mov	r8, r3
 8008fb8:	4606      	mov	r6, r0
 8008fba:	b118      	cbz	r0, 8008fc4 <_vfiprintf_r+0x18>
 8008fbc:	6983      	ldr	r3, [r0, #24]
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <_vfiprintf_r+0x18>
 8008fc0:	f000 fb14 	bl	80095ec <__sinit>
 8008fc4:	4b89      	ldr	r3, [pc, #548]	; (80091ec <_vfiprintf_r+0x240>)
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	d11b      	bne.n	8009002 <_vfiprintf_r+0x56>
 8008fca:	6875      	ldr	r5, [r6, #4]
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x32>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x32>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fda:	f000 fba5 	bl	8009728 <__retarget_lock_acquire_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	071b      	lsls	r3, r3, #28
 8008fe2:	d501      	bpl.n	8008fe8 <_vfiprintf_r+0x3c>
 8008fe4:	692b      	ldr	r3, [r5, #16]
 8008fe6:	b9eb      	cbnz	r3, 8009024 <_vfiprintf_r+0x78>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4630      	mov	r0, r6
 8008fec:	f000 f96e 	bl	80092cc <__swsetup_r>
 8008ff0:	b1c0      	cbz	r0, 8009024 <_vfiprintf_r+0x78>
 8008ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff4:	07dc      	lsls	r4, r3, #31
 8008ff6:	d50e      	bpl.n	8009016 <_vfiprintf_r+0x6a>
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	b01d      	add	sp, #116	; 0x74
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	4b7b      	ldr	r3, [pc, #492]	; (80091f0 <_vfiprintf_r+0x244>)
 8009004:	429d      	cmp	r5, r3
 8009006:	d101      	bne.n	800900c <_vfiprintf_r+0x60>
 8009008:	68b5      	ldr	r5, [r6, #8]
 800900a:	e7df      	b.n	8008fcc <_vfiprintf_r+0x20>
 800900c:	4b79      	ldr	r3, [pc, #484]	; (80091f4 <_vfiprintf_r+0x248>)
 800900e:	429d      	cmp	r5, r3
 8009010:	bf08      	it	eq
 8009012:	68f5      	ldreq	r5, [r6, #12]
 8009014:	e7da      	b.n	8008fcc <_vfiprintf_r+0x20>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	0598      	lsls	r0, r3, #22
 800901a:	d4ed      	bmi.n	8008ff8 <_vfiprintf_r+0x4c>
 800901c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800901e:	f000 fb84 	bl	800972a <__retarget_lock_release_recursive>
 8009022:	e7e9      	b.n	8008ff8 <_vfiprintf_r+0x4c>
 8009024:	2300      	movs	r3, #0
 8009026:	9309      	str	r3, [sp, #36]	; 0x24
 8009028:	2320      	movs	r3, #32
 800902a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800902e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009032:	2330      	movs	r3, #48	; 0x30
 8009034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091f8 <_vfiprintf_r+0x24c>
 8009038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800903c:	f04f 0901 	mov.w	r9, #1
 8009040:	4623      	mov	r3, r4
 8009042:	469a      	mov	sl, r3
 8009044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009048:	b10a      	cbz	r2, 800904e <_vfiprintf_r+0xa2>
 800904a:	2a25      	cmp	r2, #37	; 0x25
 800904c:	d1f9      	bne.n	8009042 <_vfiprintf_r+0x96>
 800904e:	ebba 0b04 	subs.w	fp, sl, r4
 8009052:	d00b      	beq.n	800906c <_vfiprintf_r+0xc0>
 8009054:	465b      	mov	r3, fp
 8009056:	4622      	mov	r2, r4
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff ff93 	bl	8008f86 <__sfputs_r>
 8009060:	3001      	adds	r0, #1
 8009062:	f000 80aa 	beq.w	80091ba <_vfiprintf_r+0x20e>
 8009066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009068:	445a      	add	r2, fp
 800906a:	9209      	str	r2, [sp, #36]	; 0x24
 800906c:	f89a 3000 	ldrb.w	r3, [sl]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80a2 	beq.w	80091ba <_vfiprintf_r+0x20e>
 8009076:	2300      	movs	r3, #0
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009080:	f10a 0a01 	add.w	sl, sl, #1
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800908c:	931a      	str	r3, [sp, #104]	; 0x68
 800908e:	4654      	mov	r4, sl
 8009090:	2205      	movs	r2, #5
 8009092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009096:	4858      	ldr	r0, [pc, #352]	; (80091f8 <_vfiprintf_r+0x24c>)
 8009098:	f7f7 f92a 	bl	80002f0 <memchr>
 800909c:	9a04      	ldr	r2, [sp, #16]
 800909e:	b9d8      	cbnz	r0, 80090d8 <_vfiprintf_r+0x12c>
 80090a0:	06d1      	lsls	r1, r2, #27
 80090a2:	bf44      	itt	mi
 80090a4:	2320      	movmi	r3, #32
 80090a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090aa:	0713      	lsls	r3, r2, #28
 80090ac:	bf44      	itt	mi
 80090ae:	232b      	movmi	r3, #43	; 0x2b
 80090b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b4:	f89a 3000 	ldrb.w	r3, [sl]
 80090b8:	2b2a      	cmp	r3, #42	; 0x2a
 80090ba:	d015      	beq.n	80090e8 <_vfiprintf_r+0x13c>
 80090bc:	9a07      	ldr	r2, [sp, #28]
 80090be:	4654      	mov	r4, sl
 80090c0:	2000      	movs	r0, #0
 80090c2:	f04f 0c0a 	mov.w	ip, #10
 80090c6:	4621      	mov	r1, r4
 80090c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090cc:	3b30      	subs	r3, #48	; 0x30
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d94e      	bls.n	8009170 <_vfiprintf_r+0x1c4>
 80090d2:	b1b0      	cbz	r0, 8009102 <_vfiprintf_r+0x156>
 80090d4:	9207      	str	r2, [sp, #28]
 80090d6:	e014      	b.n	8009102 <_vfiprintf_r+0x156>
 80090d8:	eba0 0308 	sub.w	r3, r0, r8
 80090dc:	fa09 f303 	lsl.w	r3, r9, r3
 80090e0:	4313      	orrs	r3, r2
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	46a2      	mov	sl, r4
 80090e6:	e7d2      	b.n	800908e <_vfiprintf_r+0xe2>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d19      	adds	r1, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9103      	str	r1, [sp, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfbb      	ittet	lt
 80090f4:	425b      	neglt	r3, r3
 80090f6:	f042 0202 	orrlt.w	r2, r2, #2
 80090fa:	9307      	strge	r3, [sp, #28]
 80090fc:	9307      	strlt	r3, [sp, #28]
 80090fe:	bfb8      	it	lt
 8009100:	9204      	strlt	r2, [sp, #16]
 8009102:	7823      	ldrb	r3, [r4, #0]
 8009104:	2b2e      	cmp	r3, #46	; 0x2e
 8009106:	d10c      	bne.n	8009122 <_vfiprintf_r+0x176>
 8009108:	7863      	ldrb	r3, [r4, #1]
 800910a:	2b2a      	cmp	r3, #42	; 0x2a
 800910c:	d135      	bne.n	800917a <_vfiprintf_r+0x1ce>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	1d1a      	adds	r2, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9203      	str	r2, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfb8      	it	lt
 800911a:	f04f 33ff 	movlt.w	r3, #4294967295
 800911e:	3402      	adds	r4, #2
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009208 <_vfiprintf_r+0x25c>
 8009126:	7821      	ldrb	r1, [r4, #0]
 8009128:	2203      	movs	r2, #3
 800912a:	4650      	mov	r0, sl
 800912c:	f7f7 f8e0 	bl	80002f0 <memchr>
 8009130:	b140      	cbz	r0, 8009144 <_vfiprintf_r+0x198>
 8009132:	2340      	movs	r3, #64	; 0x40
 8009134:	eba0 000a 	sub.w	r0, r0, sl
 8009138:	fa03 f000 	lsl.w	r0, r3, r0
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	4303      	orrs	r3, r0
 8009140:	3401      	adds	r4, #1
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009148:	482c      	ldr	r0, [pc, #176]	; (80091fc <_vfiprintf_r+0x250>)
 800914a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914e:	2206      	movs	r2, #6
 8009150:	f7f7 f8ce 	bl	80002f0 <memchr>
 8009154:	2800      	cmp	r0, #0
 8009156:	d03f      	beq.n	80091d8 <_vfiprintf_r+0x22c>
 8009158:	4b29      	ldr	r3, [pc, #164]	; (8009200 <_vfiprintf_r+0x254>)
 800915a:	bb1b      	cbnz	r3, 80091a4 <_vfiprintf_r+0x1f8>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	3307      	adds	r3, #7
 8009160:	f023 0307 	bic.w	r3, r3, #7
 8009164:	3308      	adds	r3, #8
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916a:	443b      	add	r3, r7
 800916c:	9309      	str	r3, [sp, #36]	; 0x24
 800916e:	e767      	b.n	8009040 <_vfiprintf_r+0x94>
 8009170:	fb0c 3202 	mla	r2, ip, r2, r3
 8009174:	460c      	mov	r4, r1
 8009176:	2001      	movs	r0, #1
 8009178:	e7a5      	b.n	80090c6 <_vfiprintf_r+0x11a>
 800917a:	2300      	movs	r3, #0
 800917c:	3401      	adds	r4, #1
 800917e:	9305      	str	r3, [sp, #20]
 8009180:	4619      	mov	r1, r3
 8009182:	f04f 0c0a 	mov.w	ip, #10
 8009186:	4620      	mov	r0, r4
 8009188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800918c:	3a30      	subs	r2, #48	; 0x30
 800918e:	2a09      	cmp	r2, #9
 8009190:	d903      	bls.n	800919a <_vfiprintf_r+0x1ee>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0c5      	beq.n	8009122 <_vfiprintf_r+0x176>
 8009196:	9105      	str	r1, [sp, #20]
 8009198:	e7c3      	b.n	8009122 <_vfiprintf_r+0x176>
 800919a:	fb0c 2101 	mla	r1, ip, r1, r2
 800919e:	4604      	mov	r4, r0
 80091a0:	2301      	movs	r3, #1
 80091a2:	e7f0      	b.n	8009186 <_vfiprintf_r+0x1da>
 80091a4:	ab03      	add	r3, sp, #12
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	462a      	mov	r2, r5
 80091aa:	4b16      	ldr	r3, [pc, #88]	; (8009204 <_vfiprintf_r+0x258>)
 80091ac:	a904      	add	r1, sp, #16
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7fe f86e 	bl	8007290 <_printf_float>
 80091b4:	4607      	mov	r7, r0
 80091b6:	1c78      	adds	r0, r7, #1
 80091b8:	d1d6      	bne.n	8009168 <_vfiprintf_r+0x1bc>
 80091ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091bc:	07d9      	lsls	r1, r3, #31
 80091be:	d405      	bmi.n	80091cc <_vfiprintf_r+0x220>
 80091c0:	89ab      	ldrh	r3, [r5, #12]
 80091c2:	059a      	lsls	r2, r3, #22
 80091c4:	d402      	bmi.n	80091cc <_vfiprintf_r+0x220>
 80091c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091c8:	f000 faaf 	bl	800972a <__retarget_lock_release_recursive>
 80091cc:	89ab      	ldrh	r3, [r5, #12]
 80091ce:	065b      	lsls	r3, r3, #25
 80091d0:	f53f af12 	bmi.w	8008ff8 <_vfiprintf_r+0x4c>
 80091d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091d6:	e711      	b.n	8008ffc <_vfiprintf_r+0x50>
 80091d8:	ab03      	add	r3, sp, #12
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	462a      	mov	r2, r5
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <_vfiprintf_r+0x258>)
 80091e0:	a904      	add	r1, sp, #16
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7fe fae0 	bl	80077a8 <_printf_i>
 80091e8:	e7e4      	b.n	80091b4 <_vfiprintf_r+0x208>
 80091ea:	bf00      	nop
 80091ec:	0800c05c 	.word	0x0800c05c
 80091f0:	0800c07c 	.word	0x0800c07c
 80091f4:	0800c03c 	.word	0x0800c03c
 80091f8:	0800bf2a 	.word	0x0800bf2a
 80091fc:	0800bf34 	.word	0x0800bf34
 8009200:	08007291 	.word	0x08007291
 8009204:	08008f87 	.word	0x08008f87
 8009208:	0800bf30 	.word	0x0800bf30

0800920c <__swbuf_r>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	460e      	mov	r6, r1
 8009210:	4614      	mov	r4, r2
 8009212:	4605      	mov	r5, r0
 8009214:	b118      	cbz	r0, 800921e <__swbuf_r+0x12>
 8009216:	6983      	ldr	r3, [r0, #24]
 8009218:	b90b      	cbnz	r3, 800921e <__swbuf_r+0x12>
 800921a:	f000 f9e7 	bl	80095ec <__sinit>
 800921e:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <__swbuf_r+0x98>)
 8009220:	429c      	cmp	r4, r3
 8009222:	d12b      	bne.n	800927c <__swbuf_r+0x70>
 8009224:	686c      	ldr	r4, [r5, #4]
 8009226:	69a3      	ldr	r3, [r4, #24]
 8009228:	60a3      	str	r3, [r4, #8]
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	071a      	lsls	r2, r3, #28
 800922e:	d52f      	bpl.n	8009290 <__swbuf_r+0x84>
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	b36b      	cbz	r3, 8009290 <__swbuf_r+0x84>
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	6820      	ldr	r0, [r4, #0]
 8009238:	1ac0      	subs	r0, r0, r3
 800923a:	6963      	ldr	r3, [r4, #20]
 800923c:	b2f6      	uxtb	r6, r6
 800923e:	4283      	cmp	r3, r0
 8009240:	4637      	mov	r7, r6
 8009242:	dc04      	bgt.n	800924e <__swbuf_r+0x42>
 8009244:	4621      	mov	r1, r4
 8009246:	4628      	mov	r0, r5
 8009248:	f000 f93c 	bl	80094c4 <_fflush_r>
 800924c:	bb30      	cbnz	r0, 800929c <__swbuf_r+0x90>
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	3b01      	subs	r3, #1
 8009252:	60a3      	str	r3, [r4, #8]
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	701e      	strb	r6, [r3, #0]
 800925c:	6963      	ldr	r3, [r4, #20]
 800925e:	3001      	adds	r0, #1
 8009260:	4283      	cmp	r3, r0
 8009262:	d004      	beq.n	800926e <__swbuf_r+0x62>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	07db      	lsls	r3, r3, #31
 8009268:	d506      	bpl.n	8009278 <__swbuf_r+0x6c>
 800926a:	2e0a      	cmp	r6, #10
 800926c:	d104      	bne.n	8009278 <__swbuf_r+0x6c>
 800926e:	4621      	mov	r1, r4
 8009270:	4628      	mov	r0, r5
 8009272:	f000 f927 	bl	80094c4 <_fflush_r>
 8009276:	b988      	cbnz	r0, 800929c <__swbuf_r+0x90>
 8009278:	4638      	mov	r0, r7
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <__swbuf_r+0x9c>)
 800927e:	429c      	cmp	r4, r3
 8009280:	d101      	bne.n	8009286 <__swbuf_r+0x7a>
 8009282:	68ac      	ldr	r4, [r5, #8]
 8009284:	e7cf      	b.n	8009226 <__swbuf_r+0x1a>
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <__swbuf_r+0xa0>)
 8009288:	429c      	cmp	r4, r3
 800928a:	bf08      	it	eq
 800928c:	68ec      	ldreq	r4, [r5, #12]
 800928e:	e7ca      	b.n	8009226 <__swbuf_r+0x1a>
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f000 f81a 	bl	80092cc <__swsetup_r>
 8009298:	2800      	cmp	r0, #0
 800929a:	d0cb      	beq.n	8009234 <__swbuf_r+0x28>
 800929c:	f04f 37ff 	mov.w	r7, #4294967295
 80092a0:	e7ea      	b.n	8009278 <__swbuf_r+0x6c>
 80092a2:	bf00      	nop
 80092a4:	0800c05c 	.word	0x0800c05c
 80092a8:	0800c07c 	.word	0x0800c07c
 80092ac:	0800c03c 	.word	0x0800c03c

080092b0 <__ascii_wctomb>:
 80092b0:	b149      	cbz	r1, 80092c6 <__ascii_wctomb+0x16>
 80092b2:	2aff      	cmp	r2, #255	; 0xff
 80092b4:	bf85      	ittet	hi
 80092b6:	238a      	movhi	r3, #138	; 0x8a
 80092b8:	6003      	strhi	r3, [r0, #0]
 80092ba:	700a      	strbls	r2, [r1, #0]
 80092bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80092c0:	bf98      	it	ls
 80092c2:	2001      	movls	r0, #1
 80092c4:	4770      	bx	lr
 80092c6:	4608      	mov	r0, r1
 80092c8:	4770      	bx	lr
	...

080092cc <__swsetup_r>:
 80092cc:	4b32      	ldr	r3, [pc, #200]	; (8009398 <__swsetup_r+0xcc>)
 80092ce:	b570      	push	{r4, r5, r6, lr}
 80092d0:	681d      	ldr	r5, [r3, #0]
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	b125      	cbz	r5, 80092e2 <__swsetup_r+0x16>
 80092d8:	69ab      	ldr	r3, [r5, #24]
 80092da:	b913      	cbnz	r3, 80092e2 <__swsetup_r+0x16>
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 f985 	bl	80095ec <__sinit>
 80092e2:	4b2e      	ldr	r3, [pc, #184]	; (800939c <__swsetup_r+0xd0>)
 80092e4:	429c      	cmp	r4, r3
 80092e6:	d10f      	bne.n	8009308 <__swsetup_r+0x3c>
 80092e8:	686c      	ldr	r4, [r5, #4]
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092f0:	0719      	lsls	r1, r3, #28
 80092f2:	d42c      	bmi.n	800934e <__swsetup_r+0x82>
 80092f4:	06dd      	lsls	r5, r3, #27
 80092f6:	d411      	bmi.n	800931c <__swsetup_r+0x50>
 80092f8:	2309      	movs	r3, #9
 80092fa:	6033      	str	r3, [r6, #0]
 80092fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	f04f 30ff 	mov.w	r0, #4294967295
 8009306:	e03e      	b.n	8009386 <__swsetup_r+0xba>
 8009308:	4b25      	ldr	r3, [pc, #148]	; (80093a0 <__swsetup_r+0xd4>)
 800930a:	429c      	cmp	r4, r3
 800930c:	d101      	bne.n	8009312 <__swsetup_r+0x46>
 800930e:	68ac      	ldr	r4, [r5, #8]
 8009310:	e7eb      	b.n	80092ea <__swsetup_r+0x1e>
 8009312:	4b24      	ldr	r3, [pc, #144]	; (80093a4 <__swsetup_r+0xd8>)
 8009314:	429c      	cmp	r4, r3
 8009316:	bf08      	it	eq
 8009318:	68ec      	ldreq	r4, [r5, #12]
 800931a:	e7e6      	b.n	80092ea <__swsetup_r+0x1e>
 800931c:	0758      	lsls	r0, r3, #29
 800931e:	d512      	bpl.n	8009346 <__swsetup_r+0x7a>
 8009320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009322:	b141      	cbz	r1, 8009336 <__swsetup_r+0x6a>
 8009324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009328:	4299      	cmp	r1, r3
 800932a:	d002      	beq.n	8009332 <__swsetup_r+0x66>
 800932c:	4630      	mov	r0, r6
 800932e:	f7ff fd0b 	bl	8008d48 <_free_r>
 8009332:	2300      	movs	r3, #0
 8009334:	6363      	str	r3, [r4, #52]	; 0x34
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	2300      	movs	r3, #0
 8009340:	6063      	str	r3, [r4, #4]
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f043 0308 	orr.w	r3, r3, #8
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	6923      	ldr	r3, [r4, #16]
 8009350:	b94b      	cbnz	r3, 8009366 <__swsetup_r+0x9a>
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800935c:	d003      	beq.n	8009366 <__swsetup_r+0x9a>
 800935e:	4621      	mov	r1, r4
 8009360:	4630      	mov	r0, r6
 8009362:	f000 fa07 	bl	8009774 <__smakebuf_r>
 8009366:	89a0      	ldrh	r0, [r4, #12]
 8009368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800936c:	f010 0301 	ands.w	r3, r0, #1
 8009370:	d00a      	beq.n	8009388 <__swsetup_r+0xbc>
 8009372:	2300      	movs	r3, #0
 8009374:	60a3      	str	r3, [r4, #8]
 8009376:	6963      	ldr	r3, [r4, #20]
 8009378:	425b      	negs	r3, r3
 800937a:	61a3      	str	r3, [r4, #24]
 800937c:	6923      	ldr	r3, [r4, #16]
 800937e:	b943      	cbnz	r3, 8009392 <__swsetup_r+0xc6>
 8009380:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009384:	d1ba      	bne.n	80092fc <__swsetup_r+0x30>
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	0781      	lsls	r1, r0, #30
 800938a:	bf58      	it	pl
 800938c:	6963      	ldrpl	r3, [r4, #20]
 800938e:	60a3      	str	r3, [r4, #8]
 8009390:	e7f4      	b.n	800937c <__swsetup_r+0xb0>
 8009392:	2000      	movs	r0, #0
 8009394:	e7f7      	b.n	8009386 <__swsetup_r+0xba>
 8009396:	bf00      	nop
 8009398:	20011f94 	.word	0x20011f94
 800939c:	0800c05c 	.word	0x0800c05c
 80093a0:	0800c07c 	.word	0x0800c07c
 80093a4:	0800c03c 	.word	0x0800c03c

080093a8 <abort>:
 80093a8:	b508      	push	{r3, lr}
 80093aa:	2006      	movs	r0, #6
 80093ac:	f000 fa4a 	bl	8009844 <raise>
 80093b0:	2001      	movs	r0, #1
 80093b2:	f001 ff27 	bl	800b204 <_exit>
	...

080093b8 <__sflush_r>:
 80093b8:	898a      	ldrh	r2, [r1, #12]
 80093ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093be:	4605      	mov	r5, r0
 80093c0:	0710      	lsls	r0, r2, #28
 80093c2:	460c      	mov	r4, r1
 80093c4:	d458      	bmi.n	8009478 <__sflush_r+0xc0>
 80093c6:	684b      	ldr	r3, [r1, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc05      	bgt.n	80093d8 <__sflush_r+0x20>
 80093cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dc02      	bgt.n	80093d8 <__sflush_r+0x20>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093da:	2e00      	cmp	r6, #0
 80093dc:	d0f9      	beq.n	80093d2 <__sflush_r+0x1a>
 80093de:	2300      	movs	r3, #0
 80093e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093e4:	682f      	ldr	r7, [r5, #0]
 80093e6:	602b      	str	r3, [r5, #0]
 80093e8:	d032      	beq.n	8009450 <__sflush_r+0x98>
 80093ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	075a      	lsls	r2, r3, #29
 80093f0:	d505      	bpl.n	80093fe <__sflush_r+0x46>
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	1ac0      	subs	r0, r0, r3
 80093f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093f8:	b10b      	cbz	r3, 80093fe <__sflush_r+0x46>
 80093fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093fc:	1ac0      	subs	r0, r0, r3
 80093fe:	2300      	movs	r3, #0
 8009400:	4602      	mov	r2, r0
 8009402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009404:	6a21      	ldr	r1, [r4, #32]
 8009406:	4628      	mov	r0, r5
 8009408:	47b0      	blx	r6
 800940a:	1c43      	adds	r3, r0, #1
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	d106      	bne.n	800941e <__sflush_r+0x66>
 8009410:	6829      	ldr	r1, [r5, #0]
 8009412:	291d      	cmp	r1, #29
 8009414:	d82c      	bhi.n	8009470 <__sflush_r+0xb8>
 8009416:	4a2a      	ldr	r2, [pc, #168]	; (80094c0 <__sflush_r+0x108>)
 8009418:	40ca      	lsrs	r2, r1
 800941a:	07d6      	lsls	r6, r2, #31
 800941c:	d528      	bpl.n	8009470 <__sflush_r+0xb8>
 800941e:	2200      	movs	r2, #0
 8009420:	6062      	str	r2, [r4, #4]
 8009422:	04d9      	lsls	r1, r3, #19
 8009424:	6922      	ldr	r2, [r4, #16]
 8009426:	6022      	str	r2, [r4, #0]
 8009428:	d504      	bpl.n	8009434 <__sflush_r+0x7c>
 800942a:	1c42      	adds	r2, r0, #1
 800942c:	d101      	bne.n	8009432 <__sflush_r+0x7a>
 800942e:	682b      	ldr	r3, [r5, #0]
 8009430:	b903      	cbnz	r3, 8009434 <__sflush_r+0x7c>
 8009432:	6560      	str	r0, [r4, #84]	; 0x54
 8009434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009436:	602f      	str	r7, [r5, #0]
 8009438:	2900      	cmp	r1, #0
 800943a:	d0ca      	beq.n	80093d2 <__sflush_r+0x1a>
 800943c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009440:	4299      	cmp	r1, r3
 8009442:	d002      	beq.n	800944a <__sflush_r+0x92>
 8009444:	4628      	mov	r0, r5
 8009446:	f7ff fc7f 	bl	8008d48 <_free_r>
 800944a:	2000      	movs	r0, #0
 800944c:	6360      	str	r0, [r4, #52]	; 0x34
 800944e:	e7c1      	b.n	80093d4 <__sflush_r+0x1c>
 8009450:	6a21      	ldr	r1, [r4, #32]
 8009452:	2301      	movs	r3, #1
 8009454:	4628      	mov	r0, r5
 8009456:	47b0      	blx	r6
 8009458:	1c41      	adds	r1, r0, #1
 800945a:	d1c7      	bne.n	80093ec <__sflush_r+0x34>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0c4      	beq.n	80093ec <__sflush_r+0x34>
 8009462:	2b1d      	cmp	r3, #29
 8009464:	d001      	beq.n	800946a <__sflush_r+0xb2>
 8009466:	2b16      	cmp	r3, #22
 8009468:	d101      	bne.n	800946e <__sflush_r+0xb6>
 800946a:	602f      	str	r7, [r5, #0]
 800946c:	e7b1      	b.n	80093d2 <__sflush_r+0x1a>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	e7ad      	b.n	80093d4 <__sflush_r+0x1c>
 8009478:	690f      	ldr	r7, [r1, #16]
 800947a:	2f00      	cmp	r7, #0
 800947c:	d0a9      	beq.n	80093d2 <__sflush_r+0x1a>
 800947e:	0793      	lsls	r3, r2, #30
 8009480:	680e      	ldr	r6, [r1, #0]
 8009482:	bf08      	it	eq
 8009484:	694b      	ldreq	r3, [r1, #20]
 8009486:	600f      	str	r7, [r1, #0]
 8009488:	bf18      	it	ne
 800948a:	2300      	movne	r3, #0
 800948c:	eba6 0807 	sub.w	r8, r6, r7
 8009490:	608b      	str	r3, [r1, #8]
 8009492:	f1b8 0f00 	cmp.w	r8, #0
 8009496:	dd9c      	ble.n	80093d2 <__sflush_r+0x1a>
 8009498:	6a21      	ldr	r1, [r4, #32]
 800949a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800949c:	4643      	mov	r3, r8
 800949e:	463a      	mov	r2, r7
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b0      	blx	r6
 80094a4:	2800      	cmp	r0, #0
 80094a6:	dc06      	bgt.n	80094b6 <__sflush_r+0xfe>
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ae:	81a3      	strh	r3, [r4, #12]
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	e78e      	b.n	80093d4 <__sflush_r+0x1c>
 80094b6:	4407      	add	r7, r0
 80094b8:	eba8 0800 	sub.w	r8, r8, r0
 80094bc:	e7e9      	b.n	8009492 <__sflush_r+0xda>
 80094be:	bf00      	nop
 80094c0:	20400001 	.word	0x20400001

080094c4 <_fflush_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	690b      	ldr	r3, [r1, #16]
 80094c8:	4605      	mov	r5, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	b913      	cbnz	r3, 80094d4 <_fflush_r+0x10>
 80094ce:	2500      	movs	r5, #0
 80094d0:	4628      	mov	r0, r5
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	b118      	cbz	r0, 80094de <_fflush_r+0x1a>
 80094d6:	6983      	ldr	r3, [r0, #24]
 80094d8:	b90b      	cbnz	r3, 80094de <_fflush_r+0x1a>
 80094da:	f000 f887 	bl	80095ec <__sinit>
 80094de:	4b14      	ldr	r3, [pc, #80]	; (8009530 <_fflush_r+0x6c>)
 80094e0:	429c      	cmp	r4, r3
 80094e2:	d11b      	bne.n	800951c <_fflush_r+0x58>
 80094e4:	686c      	ldr	r4, [r5, #4]
 80094e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0ef      	beq.n	80094ce <_fflush_r+0xa>
 80094ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094f0:	07d0      	lsls	r0, r2, #31
 80094f2:	d404      	bmi.n	80094fe <_fflush_r+0x3a>
 80094f4:	0599      	lsls	r1, r3, #22
 80094f6:	d402      	bmi.n	80094fe <_fflush_r+0x3a>
 80094f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094fa:	f000 f915 	bl	8009728 <__retarget_lock_acquire_recursive>
 80094fe:	4628      	mov	r0, r5
 8009500:	4621      	mov	r1, r4
 8009502:	f7ff ff59 	bl	80093b8 <__sflush_r>
 8009506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009508:	07da      	lsls	r2, r3, #31
 800950a:	4605      	mov	r5, r0
 800950c:	d4e0      	bmi.n	80094d0 <_fflush_r+0xc>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	059b      	lsls	r3, r3, #22
 8009512:	d4dd      	bmi.n	80094d0 <_fflush_r+0xc>
 8009514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009516:	f000 f908 	bl	800972a <__retarget_lock_release_recursive>
 800951a:	e7d9      	b.n	80094d0 <_fflush_r+0xc>
 800951c:	4b05      	ldr	r3, [pc, #20]	; (8009534 <_fflush_r+0x70>)
 800951e:	429c      	cmp	r4, r3
 8009520:	d101      	bne.n	8009526 <_fflush_r+0x62>
 8009522:	68ac      	ldr	r4, [r5, #8]
 8009524:	e7df      	b.n	80094e6 <_fflush_r+0x22>
 8009526:	4b04      	ldr	r3, [pc, #16]	; (8009538 <_fflush_r+0x74>)
 8009528:	429c      	cmp	r4, r3
 800952a:	bf08      	it	eq
 800952c:	68ec      	ldreq	r4, [r5, #12]
 800952e:	e7da      	b.n	80094e6 <_fflush_r+0x22>
 8009530:	0800c05c 	.word	0x0800c05c
 8009534:	0800c07c 	.word	0x0800c07c
 8009538:	0800c03c 	.word	0x0800c03c

0800953c <std>:
 800953c:	2300      	movs	r3, #0
 800953e:	b510      	push	{r4, lr}
 8009540:	4604      	mov	r4, r0
 8009542:	e9c0 3300 	strd	r3, r3, [r0]
 8009546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800954a:	6083      	str	r3, [r0, #8]
 800954c:	8181      	strh	r1, [r0, #12]
 800954e:	6643      	str	r3, [r0, #100]	; 0x64
 8009550:	81c2      	strh	r2, [r0, #14]
 8009552:	6183      	str	r3, [r0, #24]
 8009554:	4619      	mov	r1, r3
 8009556:	2208      	movs	r2, #8
 8009558:	305c      	adds	r0, #92	; 0x5c
 800955a:	f7fd fe01 	bl	8007160 <memset>
 800955e:	4b05      	ldr	r3, [pc, #20]	; (8009574 <std+0x38>)
 8009560:	6263      	str	r3, [r4, #36]	; 0x24
 8009562:	4b05      	ldr	r3, [pc, #20]	; (8009578 <std+0x3c>)
 8009564:	62a3      	str	r3, [r4, #40]	; 0x28
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <std+0x40>)
 8009568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <std+0x44>)
 800956c:	6224      	str	r4, [r4, #32]
 800956e:	6323      	str	r3, [r4, #48]	; 0x30
 8009570:	bd10      	pop	{r4, pc}
 8009572:	bf00      	nop
 8009574:	0800987d 	.word	0x0800987d
 8009578:	0800989f 	.word	0x0800989f
 800957c:	080098d7 	.word	0x080098d7
 8009580:	080098fb 	.word	0x080098fb

08009584 <_cleanup_r>:
 8009584:	4901      	ldr	r1, [pc, #4]	; (800958c <_cleanup_r+0x8>)
 8009586:	f000 b8af 	b.w	80096e8 <_fwalk_reent>
 800958a:	bf00      	nop
 800958c:	080094c5 	.word	0x080094c5

08009590 <__sfmoreglue>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	1e4a      	subs	r2, r1, #1
 8009594:	2568      	movs	r5, #104	; 0x68
 8009596:	4355      	muls	r5, r2
 8009598:	460e      	mov	r6, r1
 800959a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800959e:	f7ff fc23 	bl	8008de8 <_malloc_r>
 80095a2:	4604      	mov	r4, r0
 80095a4:	b140      	cbz	r0, 80095b8 <__sfmoreglue+0x28>
 80095a6:	2100      	movs	r1, #0
 80095a8:	e9c0 1600 	strd	r1, r6, [r0]
 80095ac:	300c      	adds	r0, #12
 80095ae:	60a0      	str	r0, [r4, #8]
 80095b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095b4:	f7fd fdd4 	bl	8007160 <memset>
 80095b8:	4620      	mov	r0, r4
 80095ba:	bd70      	pop	{r4, r5, r6, pc}

080095bc <__sfp_lock_acquire>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__sfp_lock_acquire+0x8>)
 80095be:	f000 b8b3 	b.w	8009728 <__retarget_lock_acquire_recursive>
 80095c2:	bf00      	nop
 80095c4:	2001b7d4 	.word	0x2001b7d4

080095c8 <__sfp_lock_release>:
 80095c8:	4801      	ldr	r0, [pc, #4]	; (80095d0 <__sfp_lock_release+0x8>)
 80095ca:	f000 b8ae 	b.w	800972a <__retarget_lock_release_recursive>
 80095ce:	bf00      	nop
 80095d0:	2001b7d4 	.word	0x2001b7d4

080095d4 <__sinit_lock_acquire>:
 80095d4:	4801      	ldr	r0, [pc, #4]	; (80095dc <__sinit_lock_acquire+0x8>)
 80095d6:	f000 b8a7 	b.w	8009728 <__retarget_lock_acquire_recursive>
 80095da:	bf00      	nop
 80095dc:	2001b7cf 	.word	0x2001b7cf

080095e0 <__sinit_lock_release>:
 80095e0:	4801      	ldr	r0, [pc, #4]	; (80095e8 <__sinit_lock_release+0x8>)
 80095e2:	f000 b8a2 	b.w	800972a <__retarget_lock_release_recursive>
 80095e6:	bf00      	nop
 80095e8:	2001b7cf 	.word	0x2001b7cf

080095ec <__sinit>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	4604      	mov	r4, r0
 80095f0:	f7ff fff0 	bl	80095d4 <__sinit_lock_acquire>
 80095f4:	69a3      	ldr	r3, [r4, #24]
 80095f6:	b11b      	cbz	r3, 8009600 <__sinit+0x14>
 80095f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095fc:	f7ff bff0 	b.w	80095e0 <__sinit_lock_release>
 8009600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009604:	6523      	str	r3, [r4, #80]	; 0x50
 8009606:	4b13      	ldr	r3, [pc, #76]	; (8009654 <__sinit+0x68>)
 8009608:	4a13      	ldr	r2, [pc, #76]	; (8009658 <__sinit+0x6c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	62a2      	str	r2, [r4, #40]	; 0x28
 800960e:	42a3      	cmp	r3, r4
 8009610:	bf04      	itt	eq
 8009612:	2301      	moveq	r3, #1
 8009614:	61a3      	streq	r3, [r4, #24]
 8009616:	4620      	mov	r0, r4
 8009618:	f000 f820 	bl	800965c <__sfp>
 800961c:	6060      	str	r0, [r4, #4]
 800961e:	4620      	mov	r0, r4
 8009620:	f000 f81c 	bl	800965c <__sfp>
 8009624:	60a0      	str	r0, [r4, #8]
 8009626:	4620      	mov	r0, r4
 8009628:	f000 f818 	bl	800965c <__sfp>
 800962c:	2200      	movs	r2, #0
 800962e:	60e0      	str	r0, [r4, #12]
 8009630:	2104      	movs	r1, #4
 8009632:	6860      	ldr	r0, [r4, #4]
 8009634:	f7ff ff82 	bl	800953c <std>
 8009638:	68a0      	ldr	r0, [r4, #8]
 800963a:	2201      	movs	r2, #1
 800963c:	2109      	movs	r1, #9
 800963e:	f7ff ff7d 	bl	800953c <std>
 8009642:	68e0      	ldr	r0, [r4, #12]
 8009644:	2202      	movs	r2, #2
 8009646:	2112      	movs	r1, #18
 8009648:	f7ff ff78 	bl	800953c <std>
 800964c:	2301      	movs	r3, #1
 800964e:	61a3      	str	r3, [r4, #24]
 8009650:	e7d2      	b.n	80095f8 <__sinit+0xc>
 8009652:	bf00      	nop
 8009654:	0800bcb8 	.word	0x0800bcb8
 8009658:	08009585 	.word	0x08009585

0800965c <__sfp>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	4607      	mov	r7, r0
 8009660:	f7ff ffac 	bl	80095bc <__sfp_lock_acquire>
 8009664:	4b1e      	ldr	r3, [pc, #120]	; (80096e0 <__sfp+0x84>)
 8009666:	681e      	ldr	r6, [r3, #0]
 8009668:	69b3      	ldr	r3, [r6, #24]
 800966a:	b913      	cbnz	r3, 8009672 <__sfp+0x16>
 800966c:	4630      	mov	r0, r6
 800966e:	f7ff ffbd 	bl	80095ec <__sinit>
 8009672:	3648      	adds	r6, #72	; 0x48
 8009674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009678:	3b01      	subs	r3, #1
 800967a:	d503      	bpl.n	8009684 <__sfp+0x28>
 800967c:	6833      	ldr	r3, [r6, #0]
 800967e:	b30b      	cbz	r3, 80096c4 <__sfp+0x68>
 8009680:	6836      	ldr	r6, [r6, #0]
 8009682:	e7f7      	b.n	8009674 <__sfp+0x18>
 8009684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009688:	b9d5      	cbnz	r5, 80096c0 <__sfp+0x64>
 800968a:	4b16      	ldr	r3, [pc, #88]	; (80096e4 <__sfp+0x88>)
 800968c:	60e3      	str	r3, [r4, #12]
 800968e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009692:	6665      	str	r5, [r4, #100]	; 0x64
 8009694:	f000 f847 	bl	8009726 <__retarget_lock_init_recursive>
 8009698:	f7ff ff96 	bl	80095c8 <__sfp_lock_release>
 800969c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096a4:	6025      	str	r5, [r4, #0]
 80096a6:	61a5      	str	r5, [r4, #24]
 80096a8:	2208      	movs	r2, #8
 80096aa:	4629      	mov	r1, r5
 80096ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096b0:	f7fd fd56 	bl	8007160 <memset>
 80096b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096bc:	4620      	mov	r0, r4
 80096be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c0:	3468      	adds	r4, #104	; 0x68
 80096c2:	e7d9      	b.n	8009678 <__sfp+0x1c>
 80096c4:	2104      	movs	r1, #4
 80096c6:	4638      	mov	r0, r7
 80096c8:	f7ff ff62 	bl	8009590 <__sfmoreglue>
 80096cc:	4604      	mov	r4, r0
 80096ce:	6030      	str	r0, [r6, #0]
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d1d5      	bne.n	8009680 <__sfp+0x24>
 80096d4:	f7ff ff78 	bl	80095c8 <__sfp_lock_release>
 80096d8:	230c      	movs	r3, #12
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	e7ee      	b.n	80096bc <__sfp+0x60>
 80096de:	bf00      	nop
 80096e0:	0800bcb8 	.word	0x0800bcb8
 80096e4:	ffff0001 	.word	0xffff0001

080096e8 <_fwalk_reent>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	4606      	mov	r6, r0
 80096ee:	4688      	mov	r8, r1
 80096f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096f4:	2700      	movs	r7, #0
 80096f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096fa:	f1b9 0901 	subs.w	r9, r9, #1
 80096fe:	d505      	bpl.n	800970c <_fwalk_reent+0x24>
 8009700:	6824      	ldr	r4, [r4, #0]
 8009702:	2c00      	cmp	r4, #0
 8009704:	d1f7      	bne.n	80096f6 <_fwalk_reent+0xe>
 8009706:	4638      	mov	r0, r7
 8009708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970c:	89ab      	ldrh	r3, [r5, #12]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d907      	bls.n	8009722 <_fwalk_reent+0x3a>
 8009712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009716:	3301      	adds	r3, #1
 8009718:	d003      	beq.n	8009722 <_fwalk_reent+0x3a>
 800971a:	4629      	mov	r1, r5
 800971c:	4630      	mov	r0, r6
 800971e:	47c0      	blx	r8
 8009720:	4307      	orrs	r7, r0
 8009722:	3568      	adds	r5, #104	; 0x68
 8009724:	e7e9      	b.n	80096fa <_fwalk_reent+0x12>

08009726 <__retarget_lock_init_recursive>:
 8009726:	4770      	bx	lr

08009728 <__retarget_lock_acquire_recursive>:
 8009728:	4770      	bx	lr

0800972a <__retarget_lock_release_recursive>:
 800972a:	4770      	bx	lr

0800972c <__swhatbuf_r>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	460e      	mov	r6, r1
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	2900      	cmp	r1, #0
 8009736:	b096      	sub	sp, #88	; 0x58
 8009738:	4614      	mov	r4, r2
 800973a:	461d      	mov	r5, r3
 800973c:	da07      	bge.n	800974e <__swhatbuf_r+0x22>
 800973e:	2300      	movs	r3, #0
 8009740:	602b      	str	r3, [r5, #0]
 8009742:	89b3      	ldrh	r3, [r6, #12]
 8009744:	061a      	lsls	r2, r3, #24
 8009746:	d410      	bmi.n	800976a <__swhatbuf_r+0x3e>
 8009748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800974c:	e00e      	b.n	800976c <__swhatbuf_r+0x40>
 800974e:	466a      	mov	r2, sp
 8009750:	f000 f8fa 	bl	8009948 <_fstat_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	dbf2      	blt.n	800973e <__swhatbuf_r+0x12>
 8009758:	9a01      	ldr	r2, [sp, #4]
 800975a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800975e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009762:	425a      	negs	r2, r3
 8009764:	415a      	adcs	r2, r3
 8009766:	602a      	str	r2, [r5, #0]
 8009768:	e7ee      	b.n	8009748 <__swhatbuf_r+0x1c>
 800976a:	2340      	movs	r3, #64	; 0x40
 800976c:	2000      	movs	r0, #0
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	b016      	add	sp, #88	; 0x58
 8009772:	bd70      	pop	{r4, r5, r6, pc}

08009774 <__smakebuf_r>:
 8009774:	898b      	ldrh	r3, [r1, #12]
 8009776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009778:	079d      	lsls	r5, r3, #30
 800977a:	4606      	mov	r6, r0
 800977c:	460c      	mov	r4, r1
 800977e:	d507      	bpl.n	8009790 <__smakebuf_r+0x1c>
 8009780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	6123      	str	r3, [r4, #16]
 8009788:	2301      	movs	r3, #1
 800978a:	6163      	str	r3, [r4, #20]
 800978c:	b002      	add	sp, #8
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	ab01      	add	r3, sp, #4
 8009792:	466a      	mov	r2, sp
 8009794:	f7ff ffca 	bl	800972c <__swhatbuf_r>
 8009798:	9900      	ldr	r1, [sp, #0]
 800979a:	4605      	mov	r5, r0
 800979c:	4630      	mov	r0, r6
 800979e:	f7ff fb23 	bl	8008de8 <_malloc_r>
 80097a2:	b948      	cbnz	r0, 80097b8 <__smakebuf_r+0x44>
 80097a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097a8:	059a      	lsls	r2, r3, #22
 80097aa:	d4ef      	bmi.n	800978c <__smakebuf_r+0x18>
 80097ac:	f023 0303 	bic.w	r3, r3, #3
 80097b0:	f043 0302 	orr.w	r3, r3, #2
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	e7e3      	b.n	8009780 <__smakebuf_r+0xc>
 80097b8:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <__smakebuf_r+0x7c>)
 80097ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	6020      	str	r0, [r4, #0]
 80097c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	9b00      	ldr	r3, [sp, #0]
 80097c8:	6163      	str	r3, [r4, #20]
 80097ca:	9b01      	ldr	r3, [sp, #4]
 80097cc:	6120      	str	r0, [r4, #16]
 80097ce:	b15b      	cbz	r3, 80097e8 <__smakebuf_r+0x74>
 80097d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097d4:	4630      	mov	r0, r6
 80097d6:	f000 f8c9 	bl	800996c <_isatty_r>
 80097da:	b128      	cbz	r0, 80097e8 <__smakebuf_r+0x74>
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	f043 0301 	orr.w	r3, r3, #1
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	89a0      	ldrh	r0, [r4, #12]
 80097ea:	4305      	orrs	r5, r0
 80097ec:	81a5      	strh	r5, [r4, #12]
 80097ee:	e7cd      	b.n	800978c <__smakebuf_r+0x18>
 80097f0:	08009585 	.word	0x08009585

080097f4 <_raise_r>:
 80097f4:	291f      	cmp	r1, #31
 80097f6:	b538      	push	{r3, r4, r5, lr}
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	d904      	bls.n	8009808 <_raise_r+0x14>
 80097fe:	2316      	movs	r3, #22
 8009800:	6003      	str	r3, [r0, #0]
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800980a:	b112      	cbz	r2, 8009812 <_raise_r+0x1e>
 800980c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009810:	b94b      	cbnz	r3, 8009826 <_raise_r+0x32>
 8009812:	4620      	mov	r0, r4
 8009814:	f000 f830 	bl	8009878 <_getpid_r>
 8009818:	462a      	mov	r2, r5
 800981a:	4601      	mov	r1, r0
 800981c:	4620      	mov	r0, r4
 800981e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009822:	f000 b817 	b.w	8009854 <_kill_r>
 8009826:	2b01      	cmp	r3, #1
 8009828:	d00a      	beq.n	8009840 <_raise_r+0x4c>
 800982a:	1c59      	adds	r1, r3, #1
 800982c:	d103      	bne.n	8009836 <_raise_r+0x42>
 800982e:	2316      	movs	r3, #22
 8009830:	6003      	str	r3, [r0, #0]
 8009832:	2001      	movs	r0, #1
 8009834:	e7e7      	b.n	8009806 <_raise_r+0x12>
 8009836:	2400      	movs	r4, #0
 8009838:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800983c:	4628      	mov	r0, r5
 800983e:	4798      	blx	r3
 8009840:	2000      	movs	r0, #0
 8009842:	e7e0      	b.n	8009806 <_raise_r+0x12>

08009844 <raise>:
 8009844:	4b02      	ldr	r3, [pc, #8]	; (8009850 <raise+0xc>)
 8009846:	4601      	mov	r1, r0
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	f7ff bfd3 	b.w	80097f4 <_raise_r>
 800984e:	bf00      	nop
 8009850:	20011f94 	.word	0x20011f94

08009854 <_kill_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	; (8009874 <_kill_r+0x20>)
 8009858:	2300      	movs	r3, #0
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f001 fca1 	bl	800b1a8 <_kill>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	d102      	bne.n	8009870 <_kill_r+0x1c>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	b103      	cbz	r3, 8009870 <_kill_r+0x1c>
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	bd38      	pop	{r3, r4, r5, pc}
 8009872:	bf00      	nop
 8009874:	2001b7c8 	.word	0x2001b7c8

08009878 <_getpid_r>:
 8009878:	f001 bc86 	b.w	800b188 <_getpid>

0800987c <__sread>:
 800987c:	b510      	push	{r4, lr}
 800987e:	460c      	mov	r4, r1
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	f000 f894 	bl	80099b0 <_read_r>
 8009888:	2800      	cmp	r0, #0
 800988a:	bfab      	itete	ge
 800988c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800988e:	89a3      	ldrhlt	r3, [r4, #12]
 8009890:	181b      	addge	r3, r3, r0
 8009892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009896:	bfac      	ite	ge
 8009898:	6563      	strge	r3, [r4, #84]	; 0x54
 800989a:	81a3      	strhlt	r3, [r4, #12]
 800989c:	bd10      	pop	{r4, pc}

0800989e <__swrite>:
 800989e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	461f      	mov	r7, r3
 80098a4:	898b      	ldrh	r3, [r1, #12]
 80098a6:	05db      	lsls	r3, r3, #23
 80098a8:	4605      	mov	r5, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	4616      	mov	r6, r2
 80098ae:	d505      	bpl.n	80098bc <__swrite+0x1e>
 80098b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b4:	2302      	movs	r3, #2
 80098b6:	2200      	movs	r2, #0
 80098b8:	f000 f868 	bl	800998c <_lseek_r>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	4632      	mov	r2, r6
 80098ca:	463b      	mov	r3, r7
 80098cc:	4628      	mov	r0, r5
 80098ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d2:	f000 b817 	b.w	8009904 <_write_r>

080098d6 <__sseek>:
 80098d6:	b510      	push	{r4, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098de:	f000 f855 	bl	800998c <_lseek_r>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	bf15      	itete	ne
 80098e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098f2:	81a3      	strheq	r3, [r4, #12]
 80098f4:	bf18      	it	ne
 80098f6:	81a3      	strhne	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__sclose>:
 80098fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fe:	f000 b813 	b.w	8009928 <_close_r>
	...

08009904 <_write_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4d07      	ldr	r5, [pc, #28]	; (8009924 <_write_r+0x20>)
 8009908:	4604      	mov	r4, r0
 800990a:	4608      	mov	r0, r1
 800990c:	4611      	mov	r1, r2
 800990e:	2200      	movs	r2, #0
 8009910:	602a      	str	r2, [r5, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	f001 fc6e 	bl	800b1f4 <_write>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_write_r+0x1e>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_write_r+0x1e>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	2001b7c8 	.word	0x2001b7c8

08009928 <_close_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d06      	ldr	r5, [pc, #24]	; (8009944 <_close_r+0x1c>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	602b      	str	r3, [r5, #0]
 8009934:	f001 fc18 	bl	800b168 <_close>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_close_r+0x1a>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_close_r+0x1a>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	2001b7c8 	.word	0x2001b7c8

08009948 <_fstat_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	; (8009968 <_fstat_r+0x20>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	f001 fc0f 	bl	800b178 <_fstat>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d102      	bne.n	8009964 <_fstat_r+0x1c>
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	b103      	cbz	r3, 8009964 <_fstat_r+0x1c>
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	2001b7c8 	.word	0x2001b7c8

0800996c <_isatty_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d06      	ldr	r5, [pc, #24]	; (8009988 <_isatty_r+0x1c>)
 8009970:	2300      	movs	r3, #0
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	602b      	str	r3, [r5, #0]
 8009978:	f001 fc0e 	bl	800b198 <_isatty>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_isatty_r+0x1a>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_isatty_r+0x1a>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	2001b7c8 	.word	0x2001b7c8

0800998c <_lseek_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d07      	ldr	r5, [pc, #28]	; (80099ac <_lseek_r+0x20>)
 8009990:	4604      	mov	r4, r0
 8009992:	4608      	mov	r0, r1
 8009994:	4611      	mov	r1, r2
 8009996:	2200      	movs	r2, #0
 8009998:	602a      	str	r2, [r5, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f001 fc0c 	bl	800b1b8 <_lseek>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_lseek_r+0x1e>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_lseek_r+0x1e>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	2001b7c8 	.word	0x2001b7c8

080099b0 <_read_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	; (80099d0 <_read_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f001 fc02 	bl	800b1c8 <_read>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_read_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_read_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	2001b7c8 	.word	0x2001b7c8

080099d4 <checkint>:
 80099d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80099d8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80099dc:	429a      	cmp	r2, r3
 80099de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e0:	dd2b      	ble.n	8009a3a <checkint+0x66>
 80099e2:	f240 4333 	movw	r3, #1075	; 0x433
 80099e6:	429a      	cmp	r2, r3
 80099e8:	dc25      	bgt.n	8009a36 <checkint+0x62>
 80099ea:	1a9b      	subs	r3, r3, r2
 80099ec:	f1a3 0620 	sub.w	r6, r3, #32
 80099f0:	f04f 32ff 	mov.w	r2, #4294967295
 80099f4:	fa02 f606 	lsl.w	r6, r2, r6
 80099f8:	fa02 f403 	lsl.w	r4, r2, r3
 80099fc:	f1c3 0520 	rsb	r5, r3, #32
 8009a00:	4334      	orrs	r4, r6
 8009a02:	fa22 f505 	lsr.w	r5, r2, r5
 8009a06:	432c      	orrs	r4, r5
 8009a08:	409a      	lsls	r2, r3
 8009a0a:	ea20 0602 	bic.w	r6, r0, r2
 8009a0e:	ea21 0704 	bic.w	r7, r1, r4
 8009a12:	ea56 0207 	orrs.w	r2, r6, r7
 8009a16:	f1a3 0420 	sub.w	r4, r3, #32
 8009a1a:	f1c3 0220 	rsb	r2, r3, #32
 8009a1e:	d10c      	bne.n	8009a3a <checkint+0x66>
 8009a20:	40d8      	lsrs	r0, r3
 8009a22:	fa01 f302 	lsl.w	r3, r1, r2
 8009a26:	4318      	orrs	r0, r3
 8009a28:	40e1      	lsrs	r1, r4
 8009a2a:	4308      	orrs	r0, r1
 8009a2c:	f000 0301 	and.w	r3, r0, #1
 8009a30:	f1c3 0002 	rsb	r0, r3, #2
 8009a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a36:	2002      	movs	r0, #2
 8009a38:	e7fc      	b.n	8009a34 <checkint+0x60>
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	e7fa      	b.n	8009a34 <checkint+0x60>
	...

08009a40 <pow>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	ed2d 8b0a 	vpush	{d8-d12}
 8009a48:	b09b      	sub	sp, #108	; 0x6c
 8009a4a:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a52:	ed8d 1b00 	vstr	d1, [sp]
 8009a56:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8009a5a:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a5e:	f109 30ff 	add.w	r0, r9, #4294967295
 8009a62:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8009a66:	4288      	cmp	r0, r1
 8009a68:	46cc      	mov	ip, r9
 8009a6a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8009a6e:	d806      	bhi.n	8009a7e <pow+0x3e>
 8009a70:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8009a74:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8009a78:	297f      	cmp	r1, #127	; 0x7f
 8009a7a:	f240 81ab 	bls.w	8009dd4 <pow+0x394>
 8009a7e:	19b1      	adds	r1, r6, r6
 8009a80:	9104      	str	r1, [sp, #16]
 8009a82:	eb47 0107 	adc.w	r1, r7, r7
 8009a86:	9105      	str	r1, [sp, #20]
 8009a88:	9904      	ldr	r1, [sp, #16]
 8009a8a:	f111 31ff 	adds.w	r1, r1, #4294967295
 8009a8e:	460a      	mov	r2, r1
 8009a90:	9905      	ldr	r1, [sp, #20]
 8009a92:	f141 31ff 	adc.w	r1, r1, #4294967295
 8009a96:	460b      	mov	r3, r1
 8009a98:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8009a9c:	f06f 0001 	mvn.w	r0, #1
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	bf08      	it	eq
 8009aa4:	4290      	cmpeq	r0, r2
 8009aa6:	d260      	bcs.n	8009b6a <pow+0x12a>
 8009aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	d11a      	bne.n	8009ae6 <pow+0xa6>
 8009ab0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8009ab4:	1923      	adds	r3, r4, r4
 8009ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ab8:	eb42 0302 	adc.w	r3, r2, r2
 8009abc:	930d      	str	r3, [sp, #52]	; 0x34
 8009abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ac2:	4bcf      	ldr	r3, [pc, #828]	; (8009e00 <pow+0x3c0>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	428b      	cmp	r3, r1
 8009ac8:	bf08      	it	eq
 8009aca:	4282      	cmpeq	r2, r0
 8009acc:	f080 8265 	bcs.w	8009f9a <pow+0x55a>
 8009ad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ad4:	ed9d 6b00 	vldr	d6, [sp]
 8009ad8:	ee37 0b06 	vadd.f64	d0, d7, d6
 8009adc:	b01b      	add	sp, #108	; 0x6c
 8009ade:	ecbd 8b0a 	vpop	{d8-d12}
 8009ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae6:	49c7      	ldr	r1, [pc, #796]	; (8009e04 <pow+0x3c4>)
 8009ae8:	2000      	movs	r0, #0
 8009aea:	428d      	cmp	r5, r1
 8009aec:	bf08      	it	eq
 8009aee:	4284      	cmpeq	r4, r0
 8009af0:	d10b      	bne.n	8009b0a <pow+0xca>
 8009af2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009af6:	19b3      	adds	r3, r6, r6
 8009af8:	930e      	str	r3, [sp, #56]	; 0x38
 8009afa:	eb42 0302 	adc.w	r3, r2, r2
 8009afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009b04:	4bbe      	ldr	r3, [pc, #760]	; (8009e00 <pow+0x3c0>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	e7dd      	b.n	8009ac6 <pow+0x86>
 8009b0a:	1921      	adds	r1, r4, r4
 8009b0c:	9106      	str	r1, [sp, #24]
 8009b0e:	eb45 0105 	adc.w	r1, r5, r5
 8009b12:	9107      	str	r1, [sp, #28]
 8009b14:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009b18:	49bb      	ldr	r1, [pc, #748]	; (8009e08 <pow+0x3c8>)
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	42a1      	cmp	r1, r4
 8009b1e:	bf08      	it	eq
 8009b20:	4298      	cmpeq	r0, r3
 8009b22:	d3d5      	bcc.n	8009ad0 <pow+0x90>
 8009b24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b28:	428c      	cmp	r4, r1
 8009b2a:	bf08      	it	eq
 8009b2c:	4283      	cmpeq	r3, r0
 8009b2e:	d1cf      	bne.n	8009ad0 <pow+0x90>
 8009b30:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009b34:	49b5      	ldr	r1, [pc, #724]	; (8009e0c <pow+0x3cc>)
 8009b36:	2000      	movs	r0, #0
 8009b38:	428c      	cmp	r4, r1
 8009b3a:	bf08      	it	eq
 8009b3c:	4283      	cmpeq	r3, r0
 8009b3e:	f000 822c 	beq.w	8009f9a <pow+0x55a>
 8009b42:	49b3      	ldr	r1, [pc, #716]	; (8009e10 <pow+0x3d0>)
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	42a1      	cmp	r1, r4
 8009b4a:	bf08      	it	eq
 8009b4c:	4298      	cmpeq	r0, r3
 8009b4e:	ea6f 0307 	mvn.w	r3, r7
 8009b52:	bf34      	ite	cc
 8009b54:	2201      	movcc	r2, #1
 8009b56:	2200      	movcs	r2, #0
 8009b58:	0fdb      	lsrs	r3, r3, #31
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	f040 821a 	bne.w	8009f94 <pow+0x554>
 8009b60:	ed9d 7b00 	vldr	d7, [sp]
 8009b64:	ee27 0b07 	vmul.f64	d0, d7, d7
 8009b68:	e7b8      	b.n	8009adc <pow+0x9c>
 8009b6a:	1923      	adds	r3, r4, r4
 8009b6c:	9308      	str	r3, [sp, #32]
 8009b6e:	eb45 0305 	adc.w	r3, r5, r5
 8009b72:	9309      	str	r3, [sp, #36]	; 0x24
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009b7a:	9310      	str	r3, [sp, #64]	; 0x40
 8009b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8009b82:	9311      	str	r3, [sp, #68]	; 0x44
 8009b84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	bf08      	it	eq
 8009b8c:	4290      	cmpeq	r0, r2
 8009b8e:	d22d      	bcs.n	8009bec <pow+0x1ac>
 8009b90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b94:	2c00      	cmp	r4, #0
 8009b96:	f175 0300 	sbcs.w	r3, r5, #0
 8009b9a:	ee27 0b07 	vmul.f64	d0, d7, d7
 8009b9e:	da16      	bge.n	8009bce <pow+0x18e>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7ff ff16 	bl	80099d4 <checkint>
 8009ba8:	2801      	cmp	r0, #1
 8009baa:	d110      	bne.n	8009bce <pow+0x18e>
 8009bac:	eeb1 0b40 	vneg.f64	d0, d0
 8009bb0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8009bb4:	4323      	orrs	r3, r4
 8009bb6:	d10c      	bne.n	8009bd2 <pow+0x192>
 8009bb8:	2e00      	cmp	r6, #0
 8009bba:	f177 0300 	sbcs.w	r3, r7, #0
 8009bbe:	da8d      	bge.n	8009adc <pow+0x9c>
 8009bc0:	b01b      	add	sp, #108	; 0x6c
 8009bc2:	ecbd 8b0a 	vpop	{d8-d12}
 8009bc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	f001 b975 	b.w	800aeb8 <__math_divzero>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e7ee      	b.n	8009bb0 <pow+0x170>
 8009bd2:	2e00      	cmp	r6, #0
 8009bd4:	f177 0300 	sbcs.w	r3, r7, #0
 8009bd8:	da80      	bge.n	8009adc <pow+0x9c>
 8009bda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009bde:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009be2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8009be6:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8009bea:	e777      	b.n	8009adc <pow+0x9c>
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	f175 0300 	sbcs.w	r3, r5, #0
 8009bf2:	da35      	bge.n	8009c60 <pow+0x220>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	f7ff feec 	bl	80099d4 <checkint>
 8009bfc:	b940      	cbnz	r0, 8009c10 <pow+0x1d0>
 8009bfe:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009c02:	b01b      	add	sp, #108	; 0x6c
 8009c04:	ecbd 8b0a 	vpop	{d8-d12}
 8009c08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	f001 b96c 	b.w	800aee8 <__math_invalid>
 8009c10:	2801      	cmp	r0, #1
 8009c12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c16:	bf14      	ite	ne
 8009c18:	2000      	movne	r0, #0
 8009c1a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8009c1e:	461d      	mov	r5, r3
 8009c20:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8009c24:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8009c28:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8009c2c:	2a7f      	cmp	r2, #127	; 0x7f
 8009c2e:	d933      	bls.n	8009c98 <pow+0x258>
 8009c30:	4974      	ldr	r1, [pc, #464]	; (8009e04 <pow+0x3c4>)
 8009c32:	2000      	movs	r0, #0
 8009c34:	428d      	cmp	r5, r1
 8009c36:	bf08      	it	eq
 8009c38:	4284      	cmpeq	r4, r0
 8009c3a:	f000 81ae 	beq.w	8009f9a <pow+0x55a>
 8009c3e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d80e      	bhi.n	8009c64 <pow+0x224>
 8009c46:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009c4a:	ed9d 7b00 	vldr	d7, [sp]
 8009c4e:	42a9      	cmp	r1, r5
 8009c50:	bf08      	it	eq
 8009c52:	42a0      	cmpeq	r0, r4
 8009c54:	bf34      	ite	cc
 8009c56:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8009c5a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8009c5e:	e73d      	b.n	8009adc <pow+0x9c>
 8009c60:	2000      	movs	r0, #0
 8009c62:	e7df      	b.n	8009c24 <pow+0x1e4>
 8009c64:	42a9      	cmp	r1, r5
 8009c66:	bf08      	it	eq
 8009c68:	42a0      	cmpeq	r0, r4
 8009c6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009c6e:	bf2c      	ite	cs
 8009c70:	2301      	movcs	r3, #1
 8009c72:	2300      	movcc	r3, #0
 8009c74:	4590      	cmp	r8, r2
 8009c76:	bf8c      	ite	hi
 8009c78:	f04f 0800 	movhi.w	r8, #0
 8009c7c:	f04f 0801 	movls.w	r8, #1
 8009c80:	4543      	cmp	r3, r8
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f000 80af 	beq.w	8009de8 <pow+0x3a8>
 8009c8a:	b01b      	add	sp, #108	; 0x6c
 8009c8c:	ecbd 8b0a 	vpop	{d8-d12}
 8009c90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	f001 b908 	b.w	800aea8 <__math_oflow>
 8009c98:	f1bc 0f00 	cmp.w	ip, #0
 8009c9c:	d10e      	bne.n	8009cbc <pow+0x27c>
 8009c9e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8009df8 <pow+0x3b8>
 8009ca2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ca6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009caa:	ec57 6b17 	vmov	r6, r7, d7
 8009cae:	4b59      	ldr	r3, [pc, #356]	; (8009e14 <pow+0x3d4>)
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009cb6:	1874      	adds	r4, r6, r1
 8009cb8:	eb42 0503 	adc.w	r5, r2, r3
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	18e3      	adds	r3, r4, r3
 8009cc0:	4b55      	ldr	r3, [pc, #340]	; (8009e18 <pow+0x3d8>)
 8009cc2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009cc6:	eb45 0303 	adc.w	r3, r5, r3
 8009cca:	1519      	asrs	r1, r3, #20
 8009ccc:	ee03 1a10 	vmov	s6, r1
 8009cd0:	0d1e      	lsrs	r6, r3, #20
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8009cd8:	0536      	lsls	r6, r6, #20
 8009cda:	1a63      	subs	r3, r4, r1
 8009cdc:	9312      	str	r3, [sp, #72]	; 0x48
 8009cde:	eb65 0306 	sbc.w	r3, r5, r6
 8009ce2:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ce4:	4b4d      	ldr	r3, [pc, #308]	; (8009e1c <pow+0x3dc>)
 8009ce6:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8009cea:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009cee:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8009cf2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009cf6:	ed93 7b00 	vldr	d7, [r3]
 8009cfa:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8009cfe:	ed93 4b02 	vldr	d4, [r3, #8]
 8009d02:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8009d06:	eea3 5b07 	vfma.f64	d5, d3, d7
 8009d0a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8009d0e:	ee36 9b05 	vadd.f64	d9, d6, d5
 8009d12:	ee35 5b49 	vsub.f64	d5, d5, d9
 8009d16:	eea3 7b04 	vfma.f64	d7, d3, d4
 8009d1a:	ed93 4b04 	vldr	d4, [r3, #16]
 8009d1e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8009d22:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009d26:	ee26 4b04 	vmul.f64	d4, d6, d4
 8009d2a:	ed93 3b08 	vldr	d3, [r3, #32]
 8009d2e:	ee26 0b04 	vmul.f64	d0, d6, d4
 8009d32:	eeb0 8b40 	vmov.f64	d8, d0
 8009d36:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8009d3a:	ed93 4b06 	vldr	d4, [r3, #24]
 8009d3e:	ee26 ab00 	vmul.f64	d10, d6, d0
 8009d42:	ee39 1b00 	vadd.f64	d1, d9, d0
 8009d46:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8009d4a:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009d4e:	ee39 9b41 	vsub.f64	d9, d9, d1
 8009d52:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8009d56:	ee37 8b08 	vadd.f64	d8, d7, d8
 8009d5a:	ee39 9b00 	vadd.f64	d9, d9, d0
 8009d5e:	eea6 3b02 	vfma.f64	d3, d6, d2
 8009d62:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8009d66:	ee38 9b09 	vadd.f64	d9, d8, d9
 8009d6a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8009d6e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8009d72:	ed9d 6b00 	vldr	d6, [sp]
 8009d76:	eea0 3b02 	vfma.f64	d3, d0, d2
 8009d7a:	eea0 4b03 	vfma.f64	d4, d0, d3
 8009d7e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8009d82:	ee31 7b09 	vadd.f64	d7, d1, d9
 8009d86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d8a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009d8e:	eeb0 3b46 	vmov.f64	d3, d6
 8009d92:	ee31 1b47 	vsub.f64	d1, d1, d7
 8009d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d9a:	ee31 9b09 	vadd.f64	d9, d1, d9
 8009d9e:	ed9d 6b00 	vldr	d6, [sp]
 8009da2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8009da6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8009daa:	193c      	adds	r4, r7, r4
 8009dac:	2c3e      	cmp	r4, #62	; 0x3e
 8009dae:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8009db2:	eea6 3b09 	vfma.f64	d3, d6, d9
 8009db6:	d934      	bls.n	8009e22 <pow+0x3e2>
 8009db8:	428c      	cmp	r4, r1
 8009dba:	da0d      	bge.n	8009dd8 <pow+0x398>
 8009dbc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dc4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f43f ae87 	beq.w	8009adc <pow+0x9c>
 8009dce:	eeb1 0b40 	vneg.f64	d0, d0
 8009dd2:	e683      	b.n	8009adc <pow+0x9c>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	e771      	b.n	8009cbc <pow+0x27c>
 8009dd8:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8009ddc:	d920      	bls.n	8009e20 <pow+0x3e0>
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	f173 0300 	sbcs.w	r3, r3, #0
 8009de4:	f6bf af51 	bge.w	8009c8a <pow+0x24a>
 8009de8:	b01b      	add	sp, #108	; 0x6c
 8009dea:	ecbd 8b0a 	vpop	{d8-d12}
 8009dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df2:	f001 b851 	b.w	800ae98 <__math_uflow>
 8009df6:	bf00      	nop
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	43300000 	.word	0x43300000
 8009e00:	fff00000 	.word	0xfff00000
 8009e04:	3ff00000 	.word	0x3ff00000
 8009e08:	ffe00000 	.word	0xffe00000
 8009e0c:	7fe00000 	.word	0x7fe00000
 8009e10:	7fdfffff 	.word	0x7fdfffff
 8009e14:	fcc00000 	.word	0xfcc00000
 8009e18:	c0196aab 	.word	0xc0196aab
 8009e1c:	0800c0a0 	.word	0x0800c0a0
 8009e20:	460f      	mov	r7, r1
 8009e22:	4e65      	ldr	r6, [pc, #404]	; (8009fb8 <pow+0x578>)
 8009e24:	ed9d 4b02 	vldr	d4, [sp, #8]
 8009e28:	ed96 6b02 	vldr	d6, [r6, #8]
 8009e2c:	ed96 7b00 	vldr	d7, [r6]
 8009e30:	eeb0 5b46 	vmov.f64	d5, d6
 8009e34:	eea4 5b07 	vfma.f64	d5, d4, d7
 8009e38:	ed8d 5b00 	vstr	d5, [sp]
 8009e3c:	ee35 6b46 	vsub.f64	d6, d5, d6
 8009e40:	eeb0 5b44 	vmov.f64	d5, d4
 8009e44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e48:	ed96 7b04 	vldr	d7, [r6, #16]
 8009e4c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8009e50:	eea6 5b07 	vfma.f64	d5, d6, d7
 8009e54:	eeb0 7b45 	vmov.f64	d7, d5
 8009e58:	ed96 5b06 	vldr	d5, [r6, #24]
 8009e5c:	1849      	adds	r1, r1, r1
 8009e5e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8009e62:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8009e66:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009e6a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8009e6e:	ee33 3b07 	vadd.f64	d3, d3, d7
 8009e72:	ee23 6b03 	vmul.f64	d6, d3, d3
 8009e76:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8009e7a:	ed96 5b08 	vldr	d5, [r6, #32]
 8009e7e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8009e82:	1814      	adds	r4, r2, r0
 8009e84:	0365      	lsls	r5, r4, #13
 8009e86:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8009e8a:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009e8e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009e92:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8009e96:	ee26 6b06 	vmul.f64	d6, d6, d6
 8009e9a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	eb10 0a04 	adds.w	sl, r0, r4
 8009ea4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009ea8:	eb45 0b0c 	adc.w	fp, r5, ip
 8009eac:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009eb0:	2f00      	cmp	r7, #0
 8009eb2:	d16a      	bne.n	8009f8a <pow+0x54a>
 8009eb4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8009eb8:	4639      	mov	r1, r7
 8009eba:	ea50 0301 	orrs.w	r3, r0, r1
 8009ebe:	f04f 0300 	mov.w	r3, #0
 8009ec2:	d115      	bne.n	8009ef0 <pow+0x4b0>
 8009ec4:	eb1a 0303 	adds.w	r3, sl, r3
 8009ec8:	ee0b 3a10 	vmov	s22, r3
 8009ecc:	4b3b      	ldr	r3, [pc, #236]	; (8009fbc <pow+0x57c>)
 8009ece:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8009fa0 <pow+0x560>
 8009ed2:	eb4b 0303 	adc.w	r3, fp, r3
 8009ed6:	ee0b 3a90 	vmov	s23, r3
 8009eda:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8009ede:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8009ee2:	b01b      	add	sp, #108	; 0x6c
 8009ee4:	ecbd 8b0a 	vpop	{d8-d12}
 8009ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	f001 b814 	b.w	800af18 <__math_check_oflow>
 8009ef0:	eb1a 0303 	adds.w	r3, sl, r3
 8009ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef6:	4b32      	ldr	r3, [pc, #200]	; (8009fc0 <pow+0x580>)
 8009ef8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009efc:	eb4b 0303 	adc.w	r3, fp, r3
 8009f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f02:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009f06:	ee27 6b05 	vmul.f64	d6, d7, d5
 8009f0a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8009f0e:	eeb0 3bc7 	vabs.f64	d3, d7
 8009f12:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8009f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8009fa8 <pow+0x568>
 8009f1e:	d52b      	bpl.n	8009f78 <pow+0x538>
 8009f20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009f24:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8009f30:	ee35 6b06 	vadd.f64	d6, d5, d6
 8009f34:	bf48      	it	mi
 8009f36:	eeb0 4b43 	vmovmi.f64	d4, d3
 8009f3a:	ee37 3b04 	vadd.f64	d3, d7, d4
 8009f3e:	ee34 5b43 	vsub.f64	d5, d4, d3
 8009f42:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009f46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f4a:	ee37 7b03 	vadd.f64	d7, d7, d3
 8009f4e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8009f52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5a:	d105      	bne.n	8009f68 <pow+0x528>
 8009f5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f5e:	463a      	mov	r2, r7
 8009f60:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009f64:	ec43 2b17 	vmov	d7, r2, r3
 8009f68:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8009f6c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8009f70:	ee26 6b00 	vmul.f64	d6, d6, d0
 8009f74:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8009f78:	ee27 0b00 	vmul.f64	d0, d7, d0
 8009f7c:	b01b      	add	sp, #108	; 0x6c
 8009f7e:	ecbd 8b0a 	vpop	{d8-d12}
 8009f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f86:	f000 bfbe 	b.w	800af06 <__math_check_uflow>
 8009f8a:	ec4b ab10 	vmov	d0, sl, fp
 8009f8e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009f92:	e5a3      	b.n	8009adc <pow+0x9c>
 8009f94:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8009fb0 <pow+0x570>
 8009f98:	e5a0      	b.n	8009adc <pow+0x9c>
 8009f9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009f9e:	e59d      	b.n	8009adc <pow+0x9c>
 8009fa0:	00000000 	.word	0x00000000
 8009fa4:	7f000000 	.word	0x7f000000
 8009fa8:	00000000 	.word	0x00000000
 8009fac:	00100000 	.word	0x00100000
	...
 8009fb8:	0800d2b0 	.word	0x0800d2b0
 8009fbc:	c0f00000 	.word	0xc0f00000
 8009fc0:	3fe00000 	.word	0x3fe00000
 8009fc4:	00000000 	.word	0x00000000

08009fc8 <atan>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	eeb0 7b40 	vmov.f64	d7, d0
 8009fce:	ee17 5a90 	vmov	r5, s15
 8009fd2:	4b73      	ldr	r3, [pc, #460]	; (800a1a0 <atan+0x1d8>)
 8009fd4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	dd13      	ble.n	800a004 <atan+0x3c>
 8009fdc:	4b71      	ldr	r3, [pc, #452]	; (800a1a4 <atan+0x1dc>)
 8009fde:	429c      	cmp	r4, r3
 8009fe0:	dc03      	bgt.n	8009fea <atan+0x22>
 8009fe2:	d107      	bne.n	8009ff4 <atan+0x2c>
 8009fe4:	ee10 3a10 	vmov	r3, s0
 8009fe8:	b123      	cbz	r3, 8009ff4 <atan+0x2c>
 8009fea:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009fee:	eeb0 0b47 	vmov.f64	d0, d7
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
 8009ff4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800a130 <atan+0x168>
 8009ff8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800a138 <atan+0x170>
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800a002:	e7f4      	b.n	8009fee <atan+0x26>
 800a004:	4b68      	ldr	r3, [pc, #416]	; (800a1a8 <atan+0x1e0>)
 800a006:	429c      	cmp	r4, r3
 800a008:	dc11      	bgt.n	800a02e <atan+0x66>
 800a00a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a00e:	429c      	cmp	r4, r3
 800a010:	dc0a      	bgt.n	800a028 <atan+0x60>
 800a012:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800a016:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800a140 <atan+0x178>
 800a01a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a01e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a026:	dce2      	bgt.n	8009fee <atan+0x26>
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	e013      	b.n	800a056 <atan+0x8e>
 800a02e:	f000 f8c5 	bl	800a1bc <fabs>
 800a032:	4b5e      	ldr	r3, [pc, #376]	; (800a1ac <atan+0x1e4>)
 800a034:	429c      	cmp	r4, r3
 800a036:	dc4f      	bgt.n	800a0d8 <atan+0x110>
 800a038:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a03c:	429c      	cmp	r4, r3
 800a03e:	dc41      	bgt.n	800a0c4 <atan+0xfc>
 800a040:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a044:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a048:	2300      	movs	r3, #0
 800a04a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a04e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a052:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a056:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a148 <atan+0x180>
 800a05a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a05e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800a062:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a150 <atan+0x188>
 800a066:	eea5 3b06 	vfma.f64	d3, d5, d6
 800a06a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800a158 <atan+0x190>
 800a06e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a072:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a160 <atan+0x198>
 800a076:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a07a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800a168 <atan+0x1a0>
 800a07e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a082:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a170 <atan+0x1a8>
 800a086:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800a178 <atan+0x1b0>
 800a08a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a08e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a180 <atan+0x1b8>
 800a092:	eea5 2b06 	vfma.f64	d2, d5, d6
 800a096:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a188 <atan+0x1c0>
 800a09a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a09e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800a190 <atan+0x1c8>
 800a0a2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800a0a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a198 <atan+0x1d0>
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a0b0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a0b4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a0b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a0bc:	d121      	bne.n	800a102 <atan+0x13a>
 800a0be:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a0c2:	e794      	b.n	8009fee <atan+0x26>
 800a0c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a0ce:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a0d2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a0d6:	e7be      	b.n	800a056 <atan+0x8e>
 800a0d8:	4b35      	ldr	r3, [pc, #212]	; (800a1b0 <atan+0x1e8>)
 800a0da:	429c      	cmp	r4, r3
 800a0dc:	da0b      	bge.n	800a0f6 <atan+0x12e>
 800a0de:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a0e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a0e6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a0ea:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a0f4:	e7af      	b.n	800a056 <atan+0x8e>
 800a0f6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a100:	e7a9      	b.n	800a056 <atan+0x8e>
 800a102:	4a2c      	ldr	r2, [pc, #176]	; (800a1b4 <atan+0x1ec>)
 800a104:	492c      	ldr	r1, [pc, #176]	; (800a1b8 <atan+0x1f0>)
 800a106:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a10a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a10e:	ed93 5b00 	vldr	d5, [r3]
 800a112:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a116:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a11a:	ed92 6b00 	vldr	d6, [r2]
 800a11e:	2d00      	cmp	r5, #0
 800a120:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a124:	bfb8      	it	lt
 800a126:	eeb1 7b47 	vneglt.f64	d7, d7
 800a12a:	e760      	b.n	8009fee <atan+0x26>
 800a12c:	f3af 8000 	nop.w
 800a130:	54442d18 	.word	0x54442d18
 800a134:	3ff921fb 	.word	0x3ff921fb
 800a138:	54442d18 	.word	0x54442d18
 800a13c:	bff921fb 	.word	0xbff921fb
 800a140:	8800759c 	.word	0x8800759c
 800a144:	7e37e43c 	.word	0x7e37e43c
 800a148:	e322da11 	.word	0xe322da11
 800a14c:	3f90ad3a 	.word	0x3f90ad3a
 800a150:	24760deb 	.word	0x24760deb
 800a154:	3fa97b4b 	.word	0x3fa97b4b
 800a158:	a0d03d51 	.word	0xa0d03d51
 800a15c:	3fb10d66 	.word	0x3fb10d66
 800a160:	c54c206e 	.word	0xc54c206e
 800a164:	3fb745cd 	.word	0x3fb745cd
 800a168:	920083ff 	.word	0x920083ff
 800a16c:	3fc24924 	.word	0x3fc24924
 800a170:	5555550d 	.word	0x5555550d
 800a174:	3fd55555 	.word	0x3fd55555
 800a178:	52defd9a 	.word	0x52defd9a
 800a17c:	bfadde2d 	.word	0xbfadde2d
 800a180:	2c6a6c2f 	.word	0x2c6a6c2f
 800a184:	bfa2b444 	.word	0xbfa2b444
 800a188:	af749a6d 	.word	0xaf749a6d
 800a18c:	bfb3b0f2 	.word	0xbfb3b0f2
 800a190:	fe231671 	.word	0xfe231671
 800a194:	bfbc71c6 	.word	0xbfbc71c6
 800a198:	9998ebc4 	.word	0x9998ebc4
 800a19c:	bfc99999 	.word	0xbfc99999
 800a1a0:	440fffff 	.word	0x440fffff
 800a1a4:	7ff00000 	.word	0x7ff00000
 800a1a8:	3fdbffff 	.word	0x3fdbffff
 800a1ac:	3ff2ffff 	.word	0x3ff2ffff
 800a1b0:	40038000 	.word	0x40038000
 800a1b4:	0800d0e8 	.word	0x0800d0e8
 800a1b8:	0800d108 	.word	0x0800d108

0800a1bc <fabs>:
 800a1bc:	ec51 0b10 	vmov	r0, r1, d0
 800a1c0:	ee10 2a10 	vmov	r2, s0
 800a1c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1c8:	ec43 2b10 	vmov	d0, r2, r3
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <sin>:
 800a1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1d2:	eeb0 7b40 	vmov.f64	d7, d0
 800a1d6:	ee17 3a90 	vmov	r3, s15
 800a1da:	4a1f      	ldr	r2, [pc, #124]	; (800a258 <sin+0x88>)
 800a1dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	dc05      	bgt.n	800a1f0 <sin+0x20>
 800a1e4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800a250 <sin+0x80>
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f000 fde1 	bl	800adb0 <__kernel_sin>
 800a1ee:	e004      	b.n	800a1fa <sin+0x2a>
 800a1f0:	4a1a      	ldr	r2, [pc, #104]	; (800a25c <sin+0x8c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	dd04      	ble.n	800a200 <sin+0x30>
 800a1f6:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a1fa:	b005      	add	sp, #20
 800a1fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a200:	4668      	mov	r0, sp
 800a202:	f000 f9a5 	bl	800a550 <__ieee754_rem_pio2>
 800a206:	f000 0003 	and.w	r0, r0, #3
 800a20a:	2801      	cmp	r0, #1
 800a20c:	d008      	beq.n	800a220 <sin+0x50>
 800a20e:	2802      	cmp	r0, #2
 800a210:	d00d      	beq.n	800a22e <sin+0x5e>
 800a212:	b9b0      	cbnz	r0, 800a242 <sin+0x72>
 800a214:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a218:	ed9d 0b00 	vldr	d0, [sp]
 800a21c:	2001      	movs	r0, #1
 800a21e:	e7e4      	b.n	800a1ea <sin+0x1a>
 800a220:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a224:	ed9d 0b00 	vldr	d0, [sp]
 800a228:	f000 fad6 	bl	800a7d8 <__kernel_cos>
 800a22c:	e7e5      	b.n	800a1fa <sin+0x2a>
 800a22e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a232:	ed9d 0b00 	vldr	d0, [sp]
 800a236:	2001      	movs	r0, #1
 800a238:	f000 fdba 	bl	800adb0 <__kernel_sin>
 800a23c:	eeb1 0b40 	vneg.f64	d0, d0
 800a240:	e7db      	b.n	800a1fa <sin+0x2a>
 800a242:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a246:	ed9d 0b00 	vldr	d0, [sp]
 800a24a:	f000 fac5 	bl	800a7d8 <__kernel_cos>
 800a24e:	e7f5      	b.n	800a23c <sin+0x6c>
	...
 800a258:	3fe921fb 	.word	0x3fe921fb
 800a25c:	7fefffff 	.word	0x7fefffff

0800a260 <asin>:
 800a260:	b508      	push	{r3, lr}
 800a262:	ed2d 8b04 	vpush	{d8-d9}
 800a266:	eeb0 8b40 	vmov.f64	d8, d0
 800a26a:	f000 f859 	bl	800a320 <__ieee754_asin>
 800a26e:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <asin+0x5c>)
 800a270:	eeb0 9b40 	vmov.f64	d9, d0
 800a274:	f993 3000 	ldrsb.w	r3, [r3]
 800a278:	3301      	adds	r3, #1
 800a27a:	d01a      	beq.n	800a2b2 <asin+0x52>
 800a27c:	eeb4 8b48 	vcmp.f64	d8, d8
 800a280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a284:	d615      	bvs.n	800a2b2 <asin+0x52>
 800a286:	eeb0 0b48 	vmov.f64	d0, d8
 800a28a:	f7ff ff97 	bl	800a1bc <fabs>
 800a28e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a292:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29a:	dd0a      	ble.n	800a2b2 <asin+0x52>
 800a29c:	f000 ff5e 	bl	800b15c <__errno>
 800a2a0:	ecbd 8b04 	vpop	{d8-d9}
 800a2a4:	2321      	movs	r3, #33	; 0x21
 800a2a6:	6003      	str	r3, [r0, #0]
 800a2a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2ac:	4804      	ldr	r0, [pc, #16]	; (800a2c0 <asin+0x60>)
 800a2ae:	f000 bebb 	b.w	800b028 <nan>
 800a2b2:	eeb0 0b49 	vmov.f64	d0, d9
 800a2b6:	ecbd 8b04 	vpop	{d8-d9}
 800a2ba:	bd08      	pop	{r3, pc}
 800a2bc:	20012164 	.word	0x20012164
 800a2c0:	0800bf1f 	.word	0x0800bf1f
 800a2c4:	00000000 	.word	0x00000000

0800a2c8 <sqrt>:
 800a2c8:	b508      	push	{r3, lr}
 800a2ca:	ed2d 8b04 	vpush	{d8-d9}
 800a2ce:	eeb0 8b40 	vmov.f64	d8, d0
 800a2d2:	f000 fa7d 	bl	800a7d0 <__ieee754_sqrt>
 800a2d6:	4b10      	ldr	r3, [pc, #64]	; (800a318 <sqrt+0x50>)
 800a2d8:	f993 3000 	ldrsb.w	r3, [r3]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	d011      	beq.n	800a304 <sqrt+0x3c>
 800a2e0:	eeb4 8b48 	vcmp.f64	d8, d8
 800a2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e8:	d60c      	bvs.n	800a304 <sqrt+0x3c>
 800a2ea:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800a310 <sqrt+0x48>
 800a2ee:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f6:	d505      	bpl.n	800a304 <sqrt+0x3c>
 800a2f8:	f000 ff30 	bl	800b15c <__errno>
 800a2fc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a300:	2321      	movs	r3, #33	; 0x21
 800a302:	6003      	str	r3, [r0, #0]
 800a304:	ecbd 8b04 	vpop	{d8-d9}
 800a308:	bd08      	pop	{r3, pc}
 800a30a:	bf00      	nop
 800a30c:	f3af 8000 	nop.w
	...
 800a318:	20012164 	.word	0x20012164
 800a31c:	00000000 	.word	0x00000000

0800a320 <__ieee754_asin>:
 800a320:	b530      	push	{r4, r5, lr}
 800a322:	ee10 5a90 	vmov	r5, s1
 800a326:	ed2d 8b06 	vpush	{d8-d10}
 800a32a:	4b85      	ldr	r3, [pc, #532]	; (800a540 <__ieee754_asin+0x220>)
 800a32c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a330:	429c      	cmp	r4, r3
 800a332:	b083      	sub	sp, #12
 800a334:	dd1a      	ble.n	800a36c <__ieee754_asin+0x4c>
 800a336:	ee10 3a10 	vmov	r3, s0
 800a33a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a33e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a342:	4323      	orrs	r3, r4
 800a344:	d10d      	bne.n	800a362 <__ieee754_asin+0x42>
 800a346:	ed9f 7b60 	vldr	d7, [pc, #384]	; 800a4c8 <__ieee754_asin+0x1a8>
 800a34a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 800a4d0 <__ieee754_asin+0x1b0>
 800a34e:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a352:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a356:	eeb0 0b47 	vmov.f64	d0, d7
 800a35a:	b003      	add	sp, #12
 800a35c:	ecbd 8b06 	vpop	{d8-d10}
 800a360:	bd30      	pop	{r4, r5, pc}
 800a362:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a366:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800a36a:	e7f6      	b.n	800a35a <__ieee754_asin+0x3a>
 800a36c:	4b75      	ldr	r3, [pc, #468]	; (800a544 <__ieee754_asin+0x224>)
 800a36e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800a372:	429c      	cmp	r4, r3
 800a374:	dc0b      	bgt.n	800a38e <__ieee754_asin+0x6e>
 800a376:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800a37a:	da56      	bge.n	800a42a <__ieee754_asin+0x10a>
 800a37c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800a4d8 <__ieee754_asin+0x1b8>
 800a380:	ee30 7b07 	vadd.f64	d7, d0, d7
 800a384:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800a388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38c:	dce5      	bgt.n	800a35a <__ieee754_asin+0x3a>
 800a38e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a392:	f7ff ff13 	bl	800a1bc <fabs>
 800a396:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800a4e0 <__ieee754_asin+0x1c0>
 800a39a:	ee39 0b40 	vsub.f64	d0, d9, d0
 800a39e:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a3a2:	ed9f 6b51 	vldr	d6, [pc, #324]	; 800a4e8 <__ieee754_asin+0x1c8>
 800a3a6:	eeb0 0b48 	vmov.f64	d0, d8
 800a3aa:	eea8 6b07 	vfma.f64	d6, d8, d7
 800a3ae:	ed9f 7b50 	vldr	d7, [pc, #320]	; 800a4f0 <__ieee754_asin+0x1d0>
 800a3b2:	eea6 7b08 	vfma.f64	d7, d6, d8
 800a3b6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800a4f8 <__ieee754_asin+0x1d8>
 800a3ba:	ed9f ab51 	vldr	d10, [pc, #324]	; 800a500 <__ieee754_asin+0x1e0>
 800a3be:	eea7 6b08 	vfma.f64	d6, d7, d8
 800a3c2:	ed9f 7b51 	vldr	d7, [pc, #324]	; 800a508 <__ieee754_asin+0x1e8>
 800a3c6:	eea6 7b08 	vfma.f64	d7, d6, d8
 800a3ca:	ed9f 6b51 	vldr	d6, [pc, #324]	; 800a510 <__ieee754_asin+0x1f0>
 800a3ce:	eea7 ab08 	vfma.f64	d10, d7, d8
 800a3d2:	ee2a ab08 	vmul.f64	d10, d10, d8
 800a3d6:	ed9f 7b50 	vldr	d7, [pc, #320]	; 800a518 <__ieee754_asin+0x1f8>
 800a3da:	eea8 7b06 	vfma.f64	d7, d8, d6
 800a3de:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800a520 <__ieee754_asin+0x200>
 800a3e2:	eea7 6b08 	vfma.f64	d6, d7, d8
 800a3e6:	ed9f 7b50 	vldr	d7, [pc, #320]	; 800a528 <__ieee754_asin+0x208>
 800a3ea:	eea6 7b08 	vfma.f64	d7, d6, d8
 800a3ee:	eea7 9b08 	vfma.f64	d9, d7, d8
 800a3f2:	f000 f9ed 	bl	800a7d0 <__ieee754_sqrt>
 800a3f6:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 800a3fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a3fe:	4b52      	ldr	r3, [pc, #328]	; (800a548 <__ieee754_asin+0x228>)
 800a400:	429c      	cmp	r4, r3
 800a402:	ed8d 0b00 	vstr	d0, [sp]
 800a406:	dd3f      	ble.n	800a488 <__ieee754_asin+0x168>
 800a408:	eeb0 7b40 	vmov.f64	d7, d0
 800a40c:	eea0 7b04 	vfma.f64	d7, d0, d4
 800a410:	ed9f 0b47 	vldr	d0, [pc, #284]	; 800a530 <__ieee754_asin+0x210>
 800a414:	eea7 0b05 	vfma.f64	d0, d7, d5
 800a418:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a4d0 <__ieee754_asin+0x1b0>
 800a41c:	ee37 0b40 	vsub.f64	d0, d7, d0
 800a420:	2d00      	cmp	r5, #0
 800a422:	bfd8      	it	le
 800a424:	eeb1 0b40 	vnegle.f64	d0, d0
 800a428:	e797      	b.n	800a35a <__ieee754_asin+0x3a>
 800a42a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800a4e0 <__ieee754_asin+0x1c0>
 800a42e:	ee20 7b00 	vmul.f64	d7, d0, d0
 800a432:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 800a4e8 <__ieee754_asin+0x1c8>
 800a436:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a43a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800a4f0 <__ieee754_asin+0x1d0>
 800a43e:	eea6 5b07 	vfma.f64	d5, d6, d7
 800a442:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 800a4f8 <__ieee754_asin+0x1d8>
 800a446:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a44a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800a508 <__ieee754_asin+0x1e8>
 800a44e:	eea6 5b07 	vfma.f64	d5, d6, d7
 800a452:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 800a500 <__ieee754_asin+0x1e0>
 800a456:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 800a510 <__ieee754_asin+0x1f0>
 800a45a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a45e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a462:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800a518 <__ieee754_asin+0x1f8>
 800a466:	eea7 5b04 	vfma.f64	d5, d7, d4
 800a46a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800a520 <__ieee754_asin+0x200>
 800a46e:	eea5 4b07 	vfma.f64	d4, d5, d7
 800a472:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800a528 <__ieee754_asin+0x208>
 800a476:	eea4 5b07 	vfma.f64	d5, d4, d7
 800a47a:	eea5 9b07 	vfma.f64	d9, d5, d7
 800a47e:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800a482:	eea0 0b07 	vfma.f64	d0, d0, d7
 800a486:	e768      	b.n	800a35a <__ieee754_asin+0x3a>
 800a488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a48c:	ed9d 7b00 	vldr	d7, [sp]
 800a490:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800a4c8 <__ieee754_asin+0x1a8>
 800a494:	2200      	movs	r2, #0
 800a496:	ec43 2b16 	vmov	d6, r2, r3
 800a49a:	eea6 8b46 	vfms.f64	d8, d6, d6
 800a49e:	ee37 3b06 	vadd.f64	d3, d7, d6
 800a4a2:	ee88 7b03 	vdiv.f64	d7, d8, d3
 800a4a6:	eea7 0b45 	vfms.f64	d0, d7, d5
 800a4aa:	ed9d 7b00 	vldr	d7, [sp]
 800a4ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a4b2:	ee97 0b04 	vfnms.f64	d0, d7, d4
 800a4b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a538 <__ieee754_asin+0x218>
 800a4ba:	eeb0 4b47 	vmov.f64	d4, d7
 800a4be:	eea6 4b45 	vfms.f64	d4, d6, d5
 800a4c2:	ee30 0b44 	vsub.f64	d0, d0, d4
 800a4c6:	e7a9      	b.n	800a41c <__ieee754_asin+0xfc>
 800a4c8:	33145c07 	.word	0x33145c07
 800a4cc:	3c91a626 	.word	0x3c91a626
 800a4d0:	54442d18 	.word	0x54442d18
 800a4d4:	3ff921fb 	.word	0x3ff921fb
 800a4d8:	8800759c 	.word	0x8800759c
 800a4dc:	7e37e43c 	.word	0x7e37e43c
 800a4e0:	0dfdf709 	.word	0x0dfdf709
 800a4e4:	3f023de1 	.word	0x3f023de1
 800a4e8:	7501b288 	.word	0x7501b288
 800a4ec:	3f49efe0 	.word	0x3f49efe0
 800a4f0:	b5688f3b 	.word	0xb5688f3b
 800a4f4:	bfa48228 	.word	0xbfa48228
 800a4f8:	0e884455 	.word	0x0e884455
 800a4fc:	3fc9c155 	.word	0x3fc9c155
 800a500:	55555555 	.word	0x55555555
 800a504:	3fc55555 	.word	0x3fc55555
 800a508:	03eb6f7d 	.word	0x03eb6f7d
 800a50c:	bfd4d612 	.word	0xbfd4d612
 800a510:	b12e9282 	.word	0xb12e9282
 800a514:	3fb3b8c5 	.word	0x3fb3b8c5
 800a518:	1b8d0159 	.word	0x1b8d0159
 800a51c:	bfe6066c 	.word	0xbfe6066c
 800a520:	9c598ac8 	.word	0x9c598ac8
 800a524:	40002ae5 	.word	0x40002ae5
 800a528:	1c8a2d4b 	.word	0x1c8a2d4b
 800a52c:	c0033a27 	.word	0xc0033a27
 800a530:	33145c07 	.word	0x33145c07
 800a534:	bc91a626 	.word	0xbc91a626
 800a538:	54442d18 	.word	0x54442d18
 800a53c:	3fe921fb 	.word	0x3fe921fb
 800a540:	3fefffff 	.word	0x3fefffff
 800a544:	3fdfffff 	.word	0x3fdfffff
 800a548:	3fef3332 	.word	0x3fef3332
 800a54c:	00000000 	.word	0x00000000

0800a550 <__ieee754_rem_pio2>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	eeb0 7b40 	vmov.f64	d7, d0
 800a556:	ee17 5a90 	vmov	r5, s15
 800a55a:	4b97      	ldr	r3, [pc, #604]	; (800a7b8 <__ieee754_rem_pio2+0x268>)
 800a55c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a560:	429e      	cmp	r6, r3
 800a562:	b088      	sub	sp, #32
 800a564:	4604      	mov	r4, r0
 800a566:	dc07      	bgt.n	800a578 <__ieee754_rem_pio2+0x28>
 800a568:	2200      	movs	r2, #0
 800a56a:	2300      	movs	r3, #0
 800a56c:	ed84 0b00 	vstr	d0, [r4]
 800a570:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a574:	2000      	movs	r0, #0
 800a576:	e01b      	b.n	800a5b0 <__ieee754_rem_pio2+0x60>
 800a578:	4b90      	ldr	r3, [pc, #576]	; (800a7bc <__ieee754_rem_pio2+0x26c>)
 800a57a:	429e      	cmp	r6, r3
 800a57c:	dc3b      	bgt.n	800a5f6 <__ieee754_rem_pio2+0xa6>
 800a57e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a582:	2d00      	cmp	r5, #0
 800a584:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800a778 <__ieee754_rem_pio2+0x228>
 800a588:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a58c:	dd19      	ble.n	800a5c2 <__ieee754_rem_pio2+0x72>
 800a58e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a592:	429e      	cmp	r6, r3
 800a594:	d00e      	beq.n	800a5b4 <__ieee754_rem_pio2+0x64>
 800a596:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800a780 <__ieee754_rem_pio2+0x230>
 800a59a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a59e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a5a2:	ed84 5b00 	vstr	d5, [r4]
 800a5a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a5aa:	ed84 7b02 	vstr	d7, [r4, #8]
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	b008      	add	sp, #32
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800a788 <__ieee754_rem_pio2+0x238>
 800a5b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a5bc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800a790 <__ieee754_rem_pio2+0x240>
 800a5c0:	e7eb      	b.n	800a59a <__ieee754_rem_pio2+0x4a>
 800a5c2:	429e      	cmp	r6, r3
 800a5c4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a5c8:	d00e      	beq.n	800a5e8 <__ieee754_rem_pio2+0x98>
 800a5ca:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800a780 <__ieee754_rem_pio2+0x230>
 800a5ce:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a5d2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a5d6:	ed84 5b00 	vstr	d5, [r4]
 800a5da:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a5de:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e2:	ed84 7b02 	vstr	d7, [r4, #8]
 800a5e6:	e7e3      	b.n	800a5b0 <__ieee754_rem_pio2+0x60>
 800a5e8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800a788 <__ieee754_rem_pio2+0x238>
 800a5ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a5f0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800a790 <__ieee754_rem_pio2+0x240>
 800a5f4:	e7eb      	b.n	800a5ce <__ieee754_rem_pio2+0x7e>
 800a5f6:	4b72      	ldr	r3, [pc, #456]	; (800a7c0 <__ieee754_rem_pio2+0x270>)
 800a5f8:	429e      	cmp	r6, r3
 800a5fa:	dc6e      	bgt.n	800a6da <__ieee754_rem_pio2+0x18a>
 800a5fc:	f7ff fdde 	bl	800a1bc <fabs>
 800a600:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a604:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800a798 <__ieee754_rem_pio2+0x248>
 800a608:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a60c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a610:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a614:	ee17 0a90 	vmov	r0, s15
 800a618:	eeb1 4b45 	vneg.f64	d4, d5
 800a61c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800a778 <__ieee754_rem_pio2+0x228>
 800a620:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a624:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800a780 <__ieee754_rem_pio2+0x230>
 800a628:	281f      	cmp	r0, #31
 800a62a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a62e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a632:	dc08      	bgt.n	800a646 <__ieee754_rem_pio2+0xf6>
 800a634:	4b63      	ldr	r3, [pc, #396]	; (800a7c4 <__ieee754_rem_pio2+0x274>)
 800a636:	1e42      	subs	r2, r0, #1
 800a638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63c:	42b3      	cmp	r3, r6
 800a63e:	d002      	beq.n	800a646 <__ieee754_rem_pio2+0xf6>
 800a640:	ed84 6b00 	vstr	d6, [r4]
 800a644:	e024      	b.n	800a690 <__ieee754_rem_pio2+0x140>
 800a646:	ee16 3a90 	vmov	r3, s13
 800a64a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a64e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a652:	2b10      	cmp	r3, #16
 800a654:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a658:	ddf2      	ble.n	800a640 <__ieee754_rem_pio2+0xf0>
 800a65a:	eeb0 6b40 	vmov.f64	d6, d0
 800a65e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800a788 <__ieee754_rem_pio2+0x238>
 800a662:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a666:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a66a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a66e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800a790 <__ieee754_rem_pio2+0x240>
 800a672:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a676:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a67a:	ee13 3a90 	vmov	r3, s7
 800a67e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b31      	cmp	r3, #49	; 0x31
 800a686:	dc17      	bgt.n	800a6b8 <__ieee754_rem_pio2+0x168>
 800a688:	eeb0 0b46 	vmov.f64	d0, d6
 800a68c:	ed84 3b00 	vstr	d3, [r4]
 800a690:	ed94 6b00 	vldr	d6, [r4]
 800a694:	2d00      	cmp	r5, #0
 800a696:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a69a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a69e:	ed84 7b02 	vstr	d7, [r4, #8]
 800a6a2:	da85      	bge.n	800a5b0 <__ieee754_rem_pio2+0x60>
 800a6a4:	eeb1 6b46 	vneg.f64	d6, d6
 800a6a8:	ed84 6b00 	vstr	d6, [r4]
 800a6ac:	eeb1 7b47 	vneg.f64	d7, d7
 800a6b0:	4240      	negs	r0, r0
 800a6b2:	ed84 7b02 	vstr	d7, [r4, #8]
 800a6b6:	e77b      	b.n	800a5b0 <__ieee754_rem_pio2+0x60>
 800a6b8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800a7a0 <__ieee754_rem_pio2+0x250>
 800a6bc:	eeb0 0b46 	vmov.f64	d0, d6
 800a6c0:	eea4 0b03 	vfma.f64	d0, d4, d3
 800a6c4:	ee36 7b40 	vsub.f64	d7, d6, d0
 800a6c8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800a7a8 <__ieee754_rem_pio2+0x258>
 800a6cc:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a6d0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800a6d4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a6d8:	e7b2      	b.n	800a640 <__ieee754_rem_pio2+0xf0>
 800a6da:	4b3b      	ldr	r3, [pc, #236]	; (800a7c8 <__ieee754_rem_pio2+0x278>)
 800a6dc:	429e      	cmp	r6, r3
 800a6de:	dd06      	ble.n	800a6ee <__ieee754_rem_pio2+0x19e>
 800a6e0:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a6e4:	ed80 7b02 	vstr	d7, [r0, #8]
 800a6e8:	ed80 7b00 	vstr	d7, [r0]
 800a6ec:	e742      	b.n	800a574 <__ieee754_rem_pio2+0x24>
 800a6ee:	1532      	asrs	r2, r6, #20
 800a6f0:	ee10 0a10 	vmov	r0, s0
 800a6f4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a6f8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a6fc:	ec41 0b17 	vmov	d7, r0, r1
 800a700:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a704:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800a7b0 <__ieee754_rem_pio2+0x260>
 800a708:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a70c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a710:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a714:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a718:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a71c:	a902      	add	r1, sp, #8
 800a71e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a722:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a726:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a72a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a72e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a732:	2603      	movs	r6, #3
 800a734:	4608      	mov	r0, r1
 800a736:	ed91 7b04 	vldr	d7, [r1, #16]
 800a73a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a742:	4633      	mov	r3, r6
 800a744:	f1a1 0108 	sub.w	r1, r1, #8
 800a748:	f106 36ff 	add.w	r6, r6, #4294967295
 800a74c:	d0f3      	beq.n	800a736 <__ieee754_rem_pio2+0x1e6>
 800a74e:	491f      	ldr	r1, [pc, #124]	; (800a7cc <__ieee754_rem_pio2+0x27c>)
 800a750:	9101      	str	r1, [sp, #4]
 800a752:	2102      	movs	r1, #2
 800a754:	9100      	str	r1, [sp, #0]
 800a756:	4621      	mov	r1, r4
 800a758:	f000 f8aa 	bl	800a8b0 <__kernel_rem_pio2>
 800a75c:	2d00      	cmp	r5, #0
 800a75e:	f6bf af27 	bge.w	800a5b0 <__ieee754_rem_pio2+0x60>
 800a762:	ed94 7b00 	vldr	d7, [r4]
 800a766:	eeb1 7b47 	vneg.f64	d7, d7
 800a76a:	ed84 7b00 	vstr	d7, [r4]
 800a76e:	ed94 7b02 	vldr	d7, [r4, #8]
 800a772:	e79b      	b.n	800a6ac <__ieee754_rem_pio2+0x15c>
 800a774:	f3af 8000 	nop.w
 800a778:	54400000 	.word	0x54400000
 800a77c:	3ff921fb 	.word	0x3ff921fb
 800a780:	1a626331 	.word	0x1a626331
 800a784:	3dd0b461 	.word	0x3dd0b461
 800a788:	1a600000 	.word	0x1a600000
 800a78c:	3dd0b461 	.word	0x3dd0b461
 800a790:	2e037073 	.word	0x2e037073
 800a794:	3ba3198a 	.word	0x3ba3198a
 800a798:	6dc9c883 	.word	0x6dc9c883
 800a79c:	3fe45f30 	.word	0x3fe45f30
 800a7a0:	2e000000 	.word	0x2e000000
 800a7a4:	3ba3198a 	.word	0x3ba3198a
 800a7a8:	252049c1 	.word	0x252049c1
 800a7ac:	397b839a 	.word	0x397b839a
 800a7b0:	00000000 	.word	0x00000000
 800a7b4:	41700000 	.word	0x41700000
 800a7b8:	3fe921fb 	.word	0x3fe921fb
 800a7bc:	4002d97b 	.word	0x4002d97b
 800a7c0:	413921fb 	.word	0x413921fb
 800a7c4:	0800d128 	.word	0x0800d128
 800a7c8:	7fefffff 	.word	0x7fefffff
 800a7cc:	0800d1a8 	.word	0x0800d1a8

0800a7d0 <__ieee754_sqrt>:
 800a7d0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a7d4:	4770      	bx	lr
	...

0800a7d8 <__kernel_cos>:
 800a7d8:	ee10 1a90 	vmov	r1, s1
 800a7dc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a7e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a7e4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800a7e8:	da05      	bge.n	800a7f6 <__kernel_cos+0x1e>
 800a7ea:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a7ee:	ee17 3a90 	vmov	r3, s15
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d03d      	beq.n	800a872 <__kernel_cos+0x9a>
 800a7f6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800a7fa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a878 <__kernel_cos+0xa0>
 800a7fe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a880 <__kernel_cos+0xa8>
 800a802:	eea3 6b07 	vfma.f64	d6, d3, d7
 800a806:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a888 <__kernel_cos+0xb0>
 800a80a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a80e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a890 <__kernel_cos+0xb8>
 800a812:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a816:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a898 <__kernel_cos+0xc0>
 800a81a:	4b23      	ldr	r3, [pc, #140]	; (800a8a8 <__kernel_cos+0xd0>)
 800a81c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a820:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800a8a0 <__kernel_cos+0xc8>
 800a824:	4299      	cmp	r1, r3
 800a826:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a82a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a82e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800a832:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a836:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800a83a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a83e:	dc04      	bgt.n	800a84a <__kernel_cos+0x72>
 800a840:	ee37 6b46 	vsub.f64	d6, d7, d6
 800a844:	ee34 0b46 	vsub.f64	d0, d4, d6
 800a848:	4770      	bx	lr
 800a84a:	4b18      	ldr	r3, [pc, #96]	; (800a8ac <__kernel_cos+0xd4>)
 800a84c:	4299      	cmp	r1, r3
 800a84e:	dc0d      	bgt.n	800a86c <__kernel_cos+0x94>
 800a850:	2200      	movs	r2, #0
 800a852:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800a856:	ec43 2b15 	vmov	d5, r2, r3
 800a85a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800a85e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a862:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a866:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a86a:	4770      	bx	lr
 800a86c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a870:	e7f3      	b.n	800a85a <__kernel_cos+0x82>
 800a872:	eeb0 0b44 	vmov.f64	d0, d4
 800a876:	4770      	bx	lr
 800a878:	be8838d4 	.word	0xbe8838d4
 800a87c:	bda8fae9 	.word	0xbda8fae9
 800a880:	bdb4b1c4 	.word	0xbdb4b1c4
 800a884:	3e21ee9e 	.word	0x3e21ee9e
 800a888:	809c52ad 	.word	0x809c52ad
 800a88c:	be927e4f 	.word	0xbe927e4f
 800a890:	19cb1590 	.word	0x19cb1590
 800a894:	3efa01a0 	.word	0x3efa01a0
 800a898:	16c15177 	.word	0x16c15177
 800a89c:	bf56c16c 	.word	0xbf56c16c
 800a8a0:	5555554c 	.word	0x5555554c
 800a8a4:	3fa55555 	.word	0x3fa55555
 800a8a8:	3fd33332 	.word	0x3fd33332
 800a8ac:	3fe90000 	.word	0x3fe90000

0800a8b0 <__kernel_rem_pio2>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	ed2d 8b06 	vpush	{d8-d10}
 800a8b8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800a8bc:	469b      	mov	fp, r3
 800a8be:	460f      	mov	r7, r1
 800a8c0:	4bcf      	ldr	r3, [pc, #828]	; (800ac00 <__kernel_rem_pio2+0x350>)
 800a8c2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800a8c4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800a8c8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800a8cc:	9000      	str	r0, [sp, #0]
 800a8ce:	f112 0f14 	cmn.w	r2, #20
 800a8d2:	bfa8      	it	ge
 800a8d4:	2318      	movge	r3, #24
 800a8d6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a8da:	bfb8      	it	lt
 800a8dc:	2300      	movlt	r3, #0
 800a8de:	f06f 0417 	mvn.w	r4, #23
 800a8e2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800abe8 <__kernel_rem_pio2+0x338>
 800a8e6:	bfa4      	itt	ge
 800a8e8:	f1a2 0a03 	subge.w	sl, r2, #3
 800a8ec:	fb9a f3f3 	sdivge	r3, sl, r3
 800a8f0:	fb03 4404 	mla	r4, r3, r4, r4
 800a8f4:	1a5d      	subs	r5, r3, r1
 800a8f6:	4414      	add	r4, r2
 800a8f8:	eb09 0601 	add.w	r6, r9, r1
 800a8fc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800a900:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800a904:	2200      	movs	r2, #0
 800a906:	42b2      	cmp	r2, r6
 800a908:	dd12      	ble.n	800a930 <__kernel_rem_pio2+0x80>
 800a90a:	aa18      	add	r2, sp, #96	; 0x60
 800a90c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800a910:	460e      	mov	r6, r1
 800a912:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800a916:	f1cb 0a01 	rsb	sl, fp, #1
 800a91a:	eb0a 0006 	add.w	r0, sl, r6
 800a91e:	4581      	cmp	r9, r0
 800a920:	db25      	blt.n	800a96e <__kernel_rem_pio2+0xbe>
 800a922:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800abe8 <__kernel_rem_pio2+0x338>
 800a926:	f8dd e000 	ldr.w	lr, [sp]
 800a92a:	4615      	mov	r5, r2
 800a92c:	2000      	movs	r0, #0
 800a92e:	e015      	b.n	800a95c <__kernel_rem_pio2+0xac>
 800a930:	42d5      	cmn	r5, r2
 800a932:	d409      	bmi.n	800a948 <__kernel_rem_pio2+0x98>
 800a934:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800a938:	ee07 0a90 	vmov	s15, r0
 800a93c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a940:	eca8 7b02 	vstmia	r8!, {d7}
 800a944:	3201      	adds	r2, #1
 800a946:	e7de      	b.n	800a906 <__kernel_rem_pio2+0x56>
 800a948:	eeb0 7b46 	vmov.f64	d7, d6
 800a94c:	e7f8      	b.n	800a940 <__kernel_rem_pio2+0x90>
 800a94e:	ecbe 5b02 	vldmia	lr!, {d5}
 800a952:	ed95 6b00 	vldr	d6, [r5]
 800a956:	3001      	adds	r0, #1
 800a958:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a95c:	4288      	cmp	r0, r1
 800a95e:	f1a5 0508 	sub.w	r5, r5, #8
 800a962:	ddf4      	ble.n	800a94e <__kernel_rem_pio2+0x9e>
 800a964:	eca8 7b02 	vstmia	r8!, {d7}
 800a968:	3208      	adds	r2, #8
 800a96a:	3601      	adds	r6, #1
 800a96c:	e7d5      	b.n	800a91a <__kernel_rem_pio2+0x6a>
 800a96e:	aa04      	add	r2, sp, #16
 800a970:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800abf0 <__kernel_rem_pio2+0x340>
 800a974:	ed9f aba0 	vldr	d10, [pc, #640]	; 800abf8 <__kernel_rem_pio2+0x348>
 800a978:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800a97c:	9201      	str	r2, [sp, #4]
 800a97e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800a982:	464e      	mov	r6, r9
 800a984:	ab90      	add	r3, sp, #576	; 0x240
 800a986:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a98a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800a98e:	ab04      	add	r3, sp, #16
 800a990:	4618      	mov	r0, r3
 800a992:	4632      	mov	r2, r6
 800a994:	2a00      	cmp	r2, #0
 800a996:	dc4e      	bgt.n	800aa36 <__kernel_rem_pio2+0x186>
 800a998:	4620      	mov	r0, r4
 800a99a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800a99e:	f000 fb4b 	bl	800b038 <scalbn>
 800a9a2:	eeb0 8b40 	vmov.f64	d8, d0
 800a9a6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800a9aa:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a9ae:	f000 fac7 	bl	800af40 <floor>
 800a9b2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800a9b6:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a9ba:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a9be:	2c00      	cmp	r4, #0
 800a9c0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800a9c4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800a9c8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a9cc:	ee17 8a90 	vmov	r8, s15
 800a9d0:	dd46      	ble.n	800aa60 <__kernel_rem_pio2+0x1b0>
 800a9d2:	1e70      	subs	r0, r6, #1
 800a9d4:	aa04      	add	r2, sp, #16
 800a9d6:	f1c4 0c18 	rsb	ip, r4, #24
 800a9da:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800a9de:	fa45 f20c 	asr.w	r2, r5, ip
 800a9e2:	4490      	add	r8, r2
 800a9e4:	fa02 f20c 	lsl.w	r2, r2, ip
 800a9e8:	1aad      	subs	r5, r5, r2
 800a9ea:	aa04      	add	r2, sp, #16
 800a9ec:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800a9f0:	f1c4 0217 	rsb	r2, r4, #23
 800a9f4:	4115      	asrs	r5, r2
 800a9f6:	2d00      	cmp	r5, #0
 800a9f8:	dd41      	ble.n	800aa7e <__kernel_rem_pio2+0x1ce>
 800a9fa:	f04f 0c00 	mov.w	ip, #0
 800a9fe:	f108 0801 	add.w	r8, r8, #1
 800aa02:	4660      	mov	r0, ip
 800aa04:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800aa08:	4566      	cmp	r6, ip
 800aa0a:	dc69      	bgt.n	800aae0 <__kernel_rem_pio2+0x230>
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	dd03      	ble.n	800aa18 <__kernel_rem_pio2+0x168>
 800aa10:	2c01      	cmp	r4, #1
 800aa12:	d076      	beq.n	800ab02 <__kernel_rem_pio2+0x252>
 800aa14:	2c02      	cmp	r4, #2
 800aa16:	d07f      	beq.n	800ab18 <__kernel_rem_pio2+0x268>
 800aa18:	2d02      	cmp	r5, #2
 800aa1a:	d130      	bne.n	800aa7e <__kernel_rem_pio2+0x1ce>
 800aa1c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800aa20:	ee30 8b48 	vsub.f64	d8, d0, d8
 800aa24:	b358      	cbz	r0, 800aa7e <__kernel_rem_pio2+0x1ce>
 800aa26:	4620      	mov	r0, r4
 800aa28:	9102      	str	r1, [sp, #8]
 800aa2a:	f000 fb05 	bl	800b038 <scalbn>
 800aa2e:	9902      	ldr	r1, [sp, #8]
 800aa30:	ee38 8b40 	vsub.f64	d8, d8, d0
 800aa34:	e023      	b.n	800aa7e <__kernel_rem_pio2+0x1ce>
 800aa36:	ee20 7b09 	vmul.f64	d7, d0, d9
 800aa3a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800aa3e:	3a01      	subs	r2, #1
 800aa40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800aa44:	ad68      	add	r5, sp, #416	; 0x1a0
 800aa46:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800aa4a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aa4e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800aa52:	eca0 0a01 	vstmia	r0!, {s0}
 800aa56:	ed95 0b00 	vldr	d0, [r5]
 800aa5a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800aa5e:	e799      	b.n	800a994 <__kernel_rem_pio2+0xe4>
 800aa60:	d105      	bne.n	800aa6e <__kernel_rem_pio2+0x1be>
 800aa62:	1e72      	subs	r2, r6, #1
 800aa64:	a804      	add	r0, sp, #16
 800aa66:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800aa6a:	15ed      	asrs	r5, r5, #23
 800aa6c:	e7c3      	b.n	800a9f6 <__kernel_rem_pio2+0x146>
 800aa6e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800aa72:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa7a:	da2f      	bge.n	800aadc <__kernel_rem_pio2+0x22c>
 800aa7c:	2500      	movs	r5, #0
 800aa7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa86:	f040 8087 	bne.w	800ab98 <__kernel_rem_pio2+0x2e8>
 800aa8a:	1e73      	subs	r3, r6, #1
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f04f 0c00 	mov.w	ip, #0
 800aa92:	4548      	cmp	r0, r9
 800aa94:	da47      	bge.n	800ab26 <__kernel_rem_pio2+0x276>
 800aa96:	f1bc 0f00 	cmp.w	ip, #0
 800aa9a:	d070      	beq.n	800ab7e <__kernel_rem_pio2+0x2ce>
 800aa9c:	aa04      	add	r2, sp, #16
 800aa9e:	3c18      	subs	r4, #24
 800aaa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d075      	beq.n	800ab94 <__kernel_rem_pio2+0x2e4>
 800aaa8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800aaac:	4620      	mov	r0, r4
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	f000 fac2 	bl	800b038 <scalbn>
 800aab4:	9b00      	ldr	r3, [sp, #0]
 800aab6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800abf0 <__kernel_rem_pio2+0x340>
 800aaba:	461a      	mov	r2, r3
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	f280 80ac 	bge.w	800ac1a <__kernel_rem_pio2+0x36a>
 800aac2:	4619      	mov	r1, r3
 800aac4:	2000      	movs	r0, #0
 800aac6:	2900      	cmp	r1, #0
 800aac8:	f2c0 80cd 	blt.w	800ac66 <__kernel_rem_pio2+0x3b6>
 800aacc:	aa68      	add	r2, sp, #416	; 0x1a0
 800aace:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800aad2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800abe8 <__kernel_rem_pio2+0x338>
 800aad6:	4e4b      	ldr	r6, [pc, #300]	; (800ac04 <__kernel_rem_pio2+0x354>)
 800aad8:	2200      	movs	r2, #0
 800aada:	e0b8      	b.n	800ac4e <__kernel_rem_pio2+0x39e>
 800aadc:	2502      	movs	r5, #2
 800aade:	e78c      	b.n	800a9fa <__kernel_rem_pio2+0x14a>
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	b948      	cbnz	r0, 800aaf8 <__kernel_rem_pio2+0x248>
 800aae4:	b11a      	cbz	r2, 800aaee <__kernel_rem_pio2+0x23e>
 800aae6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f10c 0c01 	add.w	ip, ip, #1
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	e787      	b.n	800aa08 <__kernel_rem_pio2+0x158>
 800aaf8:	ebae 0202 	sub.w	r2, lr, r2
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	4602      	mov	r2, r0
 800ab00:	e7f5      	b.n	800aaee <__kernel_rem_pio2+0x23e>
 800ab02:	1e72      	subs	r2, r6, #1
 800ab04:	ab04      	add	r3, sp, #16
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab0e:	f10d 0c10 	add.w	ip, sp, #16
 800ab12:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800ab16:	e77f      	b.n	800aa18 <__kernel_rem_pio2+0x168>
 800ab18:	1e72      	subs	r2, r6, #1
 800ab1a:	ab04      	add	r3, sp, #16
 800ab1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ab24:	e7f3      	b.n	800ab0e <__kernel_rem_pio2+0x25e>
 800ab26:	aa04      	add	r2, sp, #16
 800ab28:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ab2c:	3801      	subs	r0, #1
 800ab2e:	ea4c 0c02 	orr.w	ip, ip, r2
 800ab32:	e7ae      	b.n	800aa92 <__kernel_rem_pio2+0x1e2>
 800ab34:	3001      	adds	r0, #1
 800ab36:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	d0fa      	beq.n	800ab34 <__kernel_rem_pio2+0x284>
 800ab3e:	eb06 020b 	add.w	r2, r6, fp
 800ab42:	ad18      	add	r5, sp, #96	; 0x60
 800ab44:	1c73      	adds	r3, r6, #1
 800ab46:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ab4a:	4406      	add	r6, r0
 800ab4c:	429e      	cmp	r6, r3
 800ab4e:	f6ff af19 	blt.w	800a984 <__kernel_rem_pio2+0xd4>
 800ab52:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ab56:	9d00      	ldr	r5, [sp, #0]
 800ab58:	ee07 0a90 	vmov	s15, r0
 800ab5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab60:	2000      	movs	r0, #0
 800ab62:	eca2 7b02 	vstmia	r2!, {d7}
 800ab66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800abe8 <__kernel_rem_pio2+0x338>
 800ab6a:	4694      	mov	ip, r2
 800ab6c:	4288      	cmp	r0, r1
 800ab6e:	dd09      	ble.n	800ab84 <__kernel_rem_pio2+0x2d4>
 800ab70:	a868      	add	r0, sp, #416	; 0x1a0
 800ab72:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800ab76:	ed80 7b00 	vstr	d7, [r0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	e7e6      	b.n	800ab4c <__kernel_rem_pio2+0x29c>
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	2001      	movs	r0, #1
 800ab82:	e7d8      	b.n	800ab36 <__kernel_rem_pio2+0x286>
 800ab84:	ecb5 5b02 	vldmia	r5!, {d5}
 800ab88:	ed3c 6b02 	vldmdb	ip!, {d6}
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ab92:	e7eb      	b.n	800ab6c <__kernel_rem_pio2+0x2bc>
 800ab94:	3b01      	subs	r3, #1
 800ab96:	e781      	b.n	800aa9c <__kernel_rem_pio2+0x1ec>
 800ab98:	4260      	negs	r0, r4
 800ab9a:	eeb0 0b48 	vmov.f64	d0, d8
 800ab9e:	f000 fa4b 	bl	800b038 <scalbn>
 800aba2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800abf8 <__kernel_rem_pio2+0x348>
 800aba6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800abaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abae:	db2b      	blt.n	800ac08 <__kernel_rem_pio2+0x358>
 800abb0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800abf0 <__kernel_rem_pio2+0x340>
 800abb4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800abb8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800abbc:	aa04      	add	r2, sp, #16
 800abbe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800abc2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800abc6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800abca:	a904      	add	r1, sp, #16
 800abcc:	ee10 3a10 	vmov	r3, s0
 800abd0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800abd4:	ee17 2a10 	vmov	r2, s14
 800abd8:	1c73      	adds	r3, r6, #1
 800abda:	3418      	adds	r4, #24
 800abdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800abe0:	e762      	b.n	800aaa8 <__kernel_rem_pio2+0x1f8>
 800abe2:	bf00      	nop
 800abe4:	f3af 8000 	nop.w
	...
 800abf4:	3e700000 	.word	0x3e700000
 800abf8:	00000000 	.word	0x00000000
 800abfc:	41700000 	.word	0x41700000
 800ac00:	0800db60 	.word	0x0800db60
 800ac04:	0800db20 	.word	0x0800db20
 800ac08:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ac0c:	aa04      	add	r2, sp, #16
 800ac0e:	ee10 3a10 	vmov	r3, s0
 800ac12:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ac16:	4633      	mov	r3, r6
 800ac18:	e746      	b.n	800aaa8 <__kernel_rem_pio2+0x1f8>
 800ac1a:	a804      	add	r0, sp, #16
 800ac1c:	a968      	add	r1, sp, #416	; 0x1a0
 800ac1e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ac22:	9000      	str	r0, [sp, #0]
 800ac24:	ee07 0a90 	vmov	s15, r0
 800ac28:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ac2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac30:	3a01      	subs	r2, #1
 800ac32:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ac36:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ac3a:	ed81 7b00 	vstr	d7, [r1]
 800ac3e:	e73d      	b.n	800aabc <__kernel_rem_pio2+0x20c>
 800ac40:	ecb6 5b02 	vldmia	r6!, {d5}
 800ac44:	ecb4 6b02 	vldmia	r4!, {d6}
 800ac48:	3201      	adds	r2, #1
 800ac4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac4e:	454a      	cmp	r2, r9
 800ac50:	dc01      	bgt.n	800ac56 <__kernel_rem_pio2+0x3a6>
 800ac52:	4290      	cmp	r0, r2
 800ac54:	daf4      	bge.n	800ac40 <__kernel_rem_pio2+0x390>
 800ac56:	aa40      	add	r2, sp, #256	; 0x100
 800ac58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ac5c:	ed82 7b00 	vstr	d7, [r2]
 800ac60:	3901      	subs	r1, #1
 800ac62:	3001      	adds	r0, #1
 800ac64:	e72f      	b.n	800aac6 <__kernel_rem_pio2+0x216>
 800ac66:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ac68:	2a02      	cmp	r2, #2
 800ac6a:	dc0a      	bgt.n	800ac82 <__kernel_rem_pio2+0x3d2>
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	dc5a      	bgt.n	800ad26 <__kernel_rem_pio2+0x476>
 800ac70:	d039      	beq.n	800ace6 <__kernel_rem_pio2+0x436>
 800ac72:	f008 0007 	and.w	r0, r8, #7
 800ac76:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800ac7a:	ecbd 8b06 	vpop	{d8-d10}
 800ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac82:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ac84:	2a03      	cmp	r2, #3
 800ac86:	d1f4      	bne.n	800ac72 <__kernel_rem_pio2+0x3c2>
 800ac88:	aa40      	add	r2, sp, #256	; 0x100
 800ac8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ac8e:	4611      	mov	r1, r2
 800ac90:	4618      	mov	r0, r3
 800ac92:	2800      	cmp	r0, #0
 800ac94:	f1a1 0108 	sub.w	r1, r1, #8
 800ac98:	dc52      	bgt.n	800ad40 <__kernel_rem_pio2+0x490>
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	2901      	cmp	r1, #1
 800ac9e:	f1a2 0208 	sub.w	r2, r2, #8
 800aca2:	dc5d      	bgt.n	800ad60 <__kernel_rem_pio2+0x4b0>
 800aca4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800ada8 <__kernel_rem_pio2+0x4f8>
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	dc69      	bgt.n	800ad80 <__kernel_rem_pio2+0x4d0>
 800acac:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800acb0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800acb4:	2d00      	cmp	r5, #0
 800acb6:	d16c      	bne.n	800ad92 <__kernel_rem_pio2+0x4e2>
 800acb8:	ed87 5b00 	vstr	d5, [r7]
 800acbc:	ed87 6b02 	vstr	d6, [r7, #8]
 800acc0:	ed87 7b04 	vstr	d7, [r7, #16]
 800acc4:	e7d5      	b.n	800ac72 <__kernel_rem_pio2+0x3c2>
 800acc6:	aa40      	add	r2, sp, #256	; 0x100
 800acc8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800accc:	ed92 6b00 	vldr	d6, [r2]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	daf5      	bge.n	800acc6 <__kernel_rem_pio2+0x416>
 800acda:	b10d      	cbz	r5, 800ace0 <__kernel_rem_pio2+0x430>
 800acdc:	eeb1 7b47 	vneg.f64	d7, d7
 800ace0:	ed87 7b00 	vstr	d7, [r7]
 800ace4:	e7c5      	b.n	800ac72 <__kernel_rem_pio2+0x3c2>
 800ace6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ada8 <__kernel_rem_pio2+0x4f8>
 800acea:	e7f4      	b.n	800acd6 <__kernel_rem_pio2+0x426>
 800acec:	a940      	add	r1, sp, #256	; 0x100
 800acee:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800acf2:	ed91 7b00 	vldr	d7, [r1]
 800acf6:	3a01      	subs	r2, #1
 800acf8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	daf5      	bge.n	800acec <__kernel_rem_pio2+0x43c>
 800ad00:	b1ad      	cbz	r5, 800ad2e <__kernel_rem_pio2+0x47e>
 800ad02:	eeb1 7b46 	vneg.f64	d7, d6
 800ad06:	ed87 7b00 	vstr	d7, [r7]
 800ad0a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800ad0e:	a942      	add	r1, sp, #264	; 0x108
 800ad10:	2201      	movs	r2, #1
 800ad12:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad16:	4293      	cmp	r3, r2
 800ad18:	da0c      	bge.n	800ad34 <__kernel_rem_pio2+0x484>
 800ad1a:	b10d      	cbz	r5, 800ad20 <__kernel_rem_pio2+0x470>
 800ad1c:	eeb1 7b47 	vneg.f64	d7, d7
 800ad20:	ed87 7b02 	vstr	d7, [r7, #8]
 800ad24:	e7a5      	b.n	800ac72 <__kernel_rem_pio2+0x3c2>
 800ad26:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ada8 <__kernel_rem_pio2+0x4f8>
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	e7e6      	b.n	800acfc <__kernel_rem_pio2+0x44c>
 800ad2e:	eeb0 7b46 	vmov.f64	d7, d6
 800ad32:	e7e8      	b.n	800ad06 <__kernel_rem_pio2+0x456>
 800ad34:	ecb1 6b02 	vldmia	r1!, {d6}
 800ad38:	3201      	adds	r2, #1
 800ad3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ad3e:	e7ea      	b.n	800ad16 <__kernel_rem_pio2+0x466>
 800ad40:	ed91 7b00 	vldr	d7, [r1]
 800ad44:	ed91 5b02 	vldr	d5, [r1, #8]
 800ad48:	3801      	subs	r0, #1
 800ad4a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ad4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad52:	ed81 6b00 	vstr	d6, [r1]
 800ad56:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ad5a:	ed81 7b02 	vstr	d7, [r1, #8]
 800ad5e:	e798      	b.n	800ac92 <__kernel_rem_pio2+0x3e2>
 800ad60:	ed92 7b00 	vldr	d7, [r2]
 800ad64:	ed92 5b02 	vldr	d5, [r2, #8]
 800ad68:	3901      	subs	r1, #1
 800ad6a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ad6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad72:	ed82 6b00 	vstr	d6, [r2]
 800ad76:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ad7a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ad7e:	e78d      	b.n	800ac9c <__kernel_rem_pio2+0x3ec>
 800ad80:	aa40      	add	r2, sp, #256	; 0x100
 800ad82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ad86:	ed92 6b00 	vldr	d6, [r2]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ad90:	e78a      	b.n	800aca8 <__kernel_rem_pio2+0x3f8>
 800ad92:	eeb1 5b45 	vneg.f64	d5, d5
 800ad96:	eeb1 6b46 	vneg.f64	d6, d6
 800ad9a:	ed87 5b00 	vstr	d5, [r7]
 800ad9e:	eeb1 7b47 	vneg.f64	d7, d7
 800ada2:	ed87 6b02 	vstr	d6, [r7, #8]
 800ada6:	e78b      	b.n	800acc0 <__kernel_rem_pio2+0x410>
	...

0800adb0 <__kernel_sin>:
 800adb0:	ee10 3a90 	vmov	r3, s1
 800adb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adb8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800adbc:	da04      	bge.n	800adc8 <__kernel_sin+0x18>
 800adbe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800adc2:	ee17 3a90 	vmov	r3, s15
 800adc6:	b35b      	cbz	r3, 800ae20 <__kernel_sin+0x70>
 800adc8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800adcc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800add0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ae28 <__kernel_sin+0x78>
 800add4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ae30 <__kernel_sin+0x80>
 800add8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800addc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ae38 <__kernel_sin+0x88>
 800ade0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ade4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ae40 <__kernel_sin+0x90>
 800ade8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800adec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ae48 <__kernel_sin+0x98>
 800adf0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800adf4:	b930      	cbnz	r0, 800ae04 <__kernel_sin+0x54>
 800adf6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ae50 <__kernel_sin+0xa0>
 800adfa:	eea6 4b07 	vfma.f64	d4, d6, d7
 800adfe:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ae02:	4770      	bx	lr
 800ae04:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ae08:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ae0c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ae10:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ae14:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ae58 <__kernel_sin+0xa8>
 800ae18:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ae1c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	f3af 8000 	nop.w
 800ae28:	5acfd57c 	.word	0x5acfd57c
 800ae2c:	3de5d93a 	.word	0x3de5d93a
 800ae30:	8a2b9ceb 	.word	0x8a2b9ceb
 800ae34:	be5ae5e6 	.word	0xbe5ae5e6
 800ae38:	57b1fe7d 	.word	0x57b1fe7d
 800ae3c:	3ec71de3 	.word	0x3ec71de3
 800ae40:	19c161d5 	.word	0x19c161d5
 800ae44:	bf2a01a0 	.word	0xbf2a01a0
 800ae48:	1110f8a6 	.word	0x1110f8a6
 800ae4c:	3f811111 	.word	0x3f811111
 800ae50:	55555549 	.word	0x55555549
 800ae54:	bfc55555 	.word	0xbfc55555
 800ae58:	55555549 	.word	0x55555549
 800ae5c:	3fc55555 	.word	0x3fc55555

0800ae60 <with_errno>:
 800ae60:	b513      	push	{r0, r1, r4, lr}
 800ae62:	4604      	mov	r4, r0
 800ae64:	ed8d 0b00 	vstr	d0, [sp]
 800ae68:	f000 f978 	bl	800b15c <__errno>
 800ae6c:	ed9d 0b00 	vldr	d0, [sp]
 800ae70:	6004      	str	r4, [r0, #0]
 800ae72:	b002      	add	sp, #8
 800ae74:	bd10      	pop	{r4, pc}

0800ae76 <xflow>:
 800ae76:	b082      	sub	sp, #8
 800ae78:	b158      	cbz	r0, 800ae92 <xflow+0x1c>
 800ae7a:	eeb1 7b40 	vneg.f64	d7, d0
 800ae7e:	ed8d 7b00 	vstr	d7, [sp]
 800ae82:	ed9d 7b00 	vldr	d7, [sp]
 800ae86:	2022      	movs	r0, #34	; 0x22
 800ae88:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ae8c:	b002      	add	sp, #8
 800ae8e:	f7ff bfe7 	b.w	800ae60 <with_errno>
 800ae92:	eeb0 7b40 	vmov.f64	d7, d0
 800ae96:	e7f2      	b.n	800ae7e <xflow+0x8>

0800ae98 <__math_uflow>:
 800ae98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aea0 <__math_uflow+0x8>
 800ae9c:	f7ff bfeb 	b.w	800ae76 <xflow>
 800aea0:	00000000 	.word	0x00000000
 800aea4:	10000000 	.word	0x10000000

0800aea8 <__math_oflow>:
 800aea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aeb0 <__math_oflow+0x8>
 800aeac:	f7ff bfe3 	b.w	800ae76 <xflow>
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	70000000 	.word	0x70000000

0800aeb8 <__math_divzero>:
 800aeb8:	b082      	sub	sp, #8
 800aeba:	2800      	cmp	r0, #0
 800aebc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aec0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800aec4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800aec8:	ed8d 7b00 	vstr	d7, [sp]
 800aecc:	ed9d 0b00 	vldr	d0, [sp]
 800aed0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800aee0 <__math_divzero+0x28>
 800aed4:	2022      	movs	r0, #34	; 0x22
 800aed6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800aeda:	b002      	add	sp, #8
 800aedc:	f7ff bfc0 	b.w	800ae60 <with_errno>
	...

0800aee8 <__math_invalid>:
 800aee8:	eeb0 7b40 	vmov.f64	d7, d0
 800aeec:	eeb4 7b47 	vcmp.f64	d7, d7
 800aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800aef8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800aefc:	d602      	bvs.n	800af04 <__math_invalid+0x1c>
 800aefe:	2021      	movs	r0, #33	; 0x21
 800af00:	f7ff bfae 	b.w	800ae60 <with_errno>
 800af04:	4770      	bx	lr

0800af06 <__math_check_uflow>:
 800af06:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800af0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0e:	d102      	bne.n	800af16 <__math_check_uflow+0x10>
 800af10:	2022      	movs	r0, #34	; 0x22
 800af12:	f7ff bfa5 	b.w	800ae60 <with_errno>
 800af16:	4770      	bx	lr

0800af18 <__math_check_oflow>:
 800af18:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800af38 <__math_check_oflow+0x20>
 800af1c:	eeb0 7bc0 	vabs.f64	d7, d0
 800af20:	eeb4 7b46 	vcmp.f64	d7, d6
 800af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af28:	dd02      	ble.n	800af30 <__math_check_oflow+0x18>
 800af2a:	2022      	movs	r0, #34	; 0x22
 800af2c:	f7ff bf98 	b.w	800ae60 <with_errno>
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	f3af 8000 	nop.w
 800af38:	ffffffff 	.word	0xffffffff
 800af3c:	7fefffff 	.word	0x7fefffff

0800af40 <floor>:
 800af40:	ee10 1a90 	vmov	r1, s1
 800af44:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800af48:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800af4c:	2b13      	cmp	r3, #19
 800af4e:	b530      	push	{r4, r5, lr}
 800af50:	ee10 0a10 	vmov	r0, s0
 800af54:	ee10 5a10 	vmov	r5, s0
 800af58:	dc31      	bgt.n	800afbe <floor+0x7e>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	da15      	bge.n	800af8a <floor+0x4a>
 800af5e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b018 <floor+0xd8>
 800af62:	ee30 0b07 	vadd.f64	d0, d0, d7
 800af66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800af6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6e:	dd07      	ble.n	800af80 <floor+0x40>
 800af70:	2900      	cmp	r1, #0
 800af72:	da4e      	bge.n	800b012 <floor+0xd2>
 800af74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af78:	4318      	orrs	r0, r3
 800af7a:	d001      	beq.n	800af80 <floor+0x40>
 800af7c:	4928      	ldr	r1, [pc, #160]	; (800b020 <floor+0xe0>)
 800af7e:	2000      	movs	r0, #0
 800af80:	460b      	mov	r3, r1
 800af82:	4602      	mov	r2, r0
 800af84:	ec43 2b10 	vmov	d0, r2, r3
 800af88:	e020      	b.n	800afcc <floor+0x8c>
 800af8a:	4a26      	ldr	r2, [pc, #152]	; (800b024 <floor+0xe4>)
 800af8c:	411a      	asrs	r2, r3
 800af8e:	ea01 0402 	and.w	r4, r1, r2
 800af92:	4304      	orrs	r4, r0
 800af94:	d01a      	beq.n	800afcc <floor+0x8c>
 800af96:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b018 <floor+0xd8>
 800af9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800af9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800afa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa6:	ddeb      	ble.n	800af80 <floor+0x40>
 800afa8:	2900      	cmp	r1, #0
 800afaa:	bfbe      	ittt	lt
 800afac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800afb0:	fa40 f303 	asrlt.w	r3, r0, r3
 800afb4:	18c9      	addlt	r1, r1, r3
 800afb6:	ea21 0102 	bic.w	r1, r1, r2
 800afba:	2000      	movs	r0, #0
 800afbc:	e7e0      	b.n	800af80 <floor+0x40>
 800afbe:	2b33      	cmp	r3, #51	; 0x33
 800afc0:	dd05      	ble.n	800afce <floor+0x8e>
 800afc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afc6:	d101      	bne.n	800afcc <floor+0x8c>
 800afc8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800afcc:	bd30      	pop	{r4, r5, pc}
 800afce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800afd2:	f04f 32ff 	mov.w	r2, #4294967295
 800afd6:	40e2      	lsrs	r2, r4
 800afd8:	4202      	tst	r2, r0
 800afda:	d0f7      	beq.n	800afcc <floor+0x8c>
 800afdc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b018 <floor+0xd8>
 800afe0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800afe4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800afe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afec:	ddc8      	ble.n	800af80 <floor+0x40>
 800afee:	2900      	cmp	r1, #0
 800aff0:	da02      	bge.n	800aff8 <floor+0xb8>
 800aff2:	2b14      	cmp	r3, #20
 800aff4:	d103      	bne.n	800affe <floor+0xbe>
 800aff6:	3101      	adds	r1, #1
 800aff8:	ea20 0002 	bic.w	r0, r0, r2
 800affc:	e7c0      	b.n	800af80 <floor+0x40>
 800affe:	2401      	movs	r4, #1
 800b000:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b004:	fa04 f303 	lsl.w	r3, r4, r3
 800b008:	4418      	add	r0, r3
 800b00a:	42a8      	cmp	r0, r5
 800b00c:	bf38      	it	cc
 800b00e:	1909      	addcc	r1, r1, r4
 800b010:	e7f2      	b.n	800aff8 <floor+0xb8>
 800b012:	2000      	movs	r0, #0
 800b014:	4601      	mov	r1, r0
 800b016:	e7b3      	b.n	800af80 <floor+0x40>
 800b018:	8800759c 	.word	0x8800759c
 800b01c:	7e37e43c 	.word	0x7e37e43c
 800b020:	bff00000 	.word	0xbff00000
 800b024:	000fffff 	.word	0x000fffff

0800b028 <nan>:
 800b028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b030 <nan+0x8>
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	00000000 	.word	0x00000000
 800b034:	7ff80000 	.word	0x7ff80000

0800b038 <scalbn>:
 800b038:	b082      	sub	sp, #8
 800b03a:	ed8d 0b00 	vstr	d0, [sp]
 800b03e:	9b01      	ldr	r3, [sp, #4]
 800b040:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b044:	b9a2      	cbnz	r2, 800b070 <scalbn+0x38>
 800b046:	9a00      	ldr	r2, [sp, #0]
 800b048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b04c:	4313      	orrs	r3, r2
 800b04e:	d03a      	beq.n	800b0c6 <scalbn+0x8e>
 800b050:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800b128 <scalbn+0xf0>
 800b054:	4b40      	ldr	r3, [pc, #256]	; (800b158 <scalbn+0x120>)
 800b056:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b05a:	4298      	cmp	r0, r3
 800b05c:	ed8d 7b00 	vstr	d7, [sp]
 800b060:	da11      	bge.n	800b086 <scalbn+0x4e>
 800b062:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800b130 <scalbn+0xf8>
 800b066:	ed9d 6b00 	vldr	d6, [sp]
 800b06a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b06e:	e007      	b.n	800b080 <scalbn+0x48>
 800b070:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b074:	428a      	cmp	r2, r1
 800b076:	d10a      	bne.n	800b08e <scalbn+0x56>
 800b078:	ed9d 7b00 	vldr	d7, [sp]
 800b07c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b080:	ed8d 7b00 	vstr	d7, [sp]
 800b084:	e01f      	b.n	800b0c6 <scalbn+0x8e>
 800b086:	9b01      	ldr	r3, [sp, #4]
 800b088:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b08c:	3a36      	subs	r2, #54	; 0x36
 800b08e:	4402      	add	r2, r0
 800b090:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b094:	428a      	cmp	r2, r1
 800b096:	dd0a      	ble.n	800b0ae <scalbn+0x76>
 800b098:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800b138 <scalbn+0x100>
 800b09c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800b140 <scalbn+0x108>
 800b0a0:	eeb0 6b47 	vmov.f64	d6, d7
 800b0a4:	9b01      	ldr	r3, [sp, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b0ac:	e7dd      	b.n	800b06a <scalbn+0x32>
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	dd0d      	ble.n	800b0ce <scalbn+0x96>
 800b0b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0be:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b0c2:	e9cd 0100 	strd	r0, r1, [sp]
 800b0c6:	ed9d 0b00 	vldr	d0, [sp]
 800b0ca:	b002      	add	sp, #8
 800b0cc:	4770      	bx	lr
 800b0ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b0d2:	da18      	bge.n	800b106 <scalbn+0xce>
 800b0d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0d8:	4298      	cmp	r0, r3
 800b0da:	9b01      	ldr	r3, [sp, #4]
 800b0dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0e0:	dd09      	ble.n	800b0f6 <scalbn+0xbe>
 800b0e2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b138 <scalbn+0x100>
 800b0e6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800b140 <scalbn+0x108>
 800b0ea:	eeb0 6b47 	vmov.f64	d6, d7
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800b0f4:	e7b9      	b.n	800b06a <scalbn+0x32>
 800b0f6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b130 <scalbn+0xf8>
 800b0fa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800b148 <scalbn+0x110>
 800b0fe:	eeb0 6b47 	vmov.f64	d6, d7
 800b102:	2b00      	cmp	r3, #0
 800b104:	e7f4      	b.n	800b0f0 <scalbn+0xb8>
 800b106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b10a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b10e:	3236      	adds	r2, #54	; 0x36
 800b110:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b114:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b118:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800b150 <scalbn+0x118>
 800b11c:	ec41 0b17 	vmov	d7, r0, r1
 800b120:	e7a3      	b.n	800b06a <scalbn+0x32>
 800b122:	bf00      	nop
 800b124:	f3af 8000 	nop.w
 800b128:	00000000 	.word	0x00000000
 800b12c:	43500000 	.word	0x43500000
 800b130:	c2f8f359 	.word	0xc2f8f359
 800b134:	01a56e1f 	.word	0x01a56e1f
 800b138:	8800759c 	.word	0x8800759c
 800b13c:	7e37e43c 	.word	0x7e37e43c
 800b140:	8800759c 	.word	0x8800759c
 800b144:	fe37e43c 	.word	0xfe37e43c
 800b148:	c2f8f359 	.word	0xc2f8f359
 800b14c:	81a56e1f 	.word	0x81a56e1f
 800b150:	00000000 	.word	0x00000000
 800b154:	3c900000 	.word	0x3c900000
 800b158:	ffff3cb0 	.word	0xffff3cb0

0800b15c <__errno>:
 800b15c:	4b01      	ldr	r3, [pc, #4]	; (800b164 <__errno+0x8>)
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20011f94 	.word	0x20011f94

0800b168 <_close>:
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <_close+0xc>)
 800b16a:	2258      	movs	r2, #88	; 0x58
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	f04f 30ff 	mov.w	r0, #4294967295
 800b172:	4770      	bx	lr
 800b174:	2001b7c8 	.word	0x2001b7c8

0800b178 <_fstat>:
 800b178:	4b02      	ldr	r3, [pc, #8]	; (800b184 <_fstat+0xc>)
 800b17a:	2258      	movs	r2, #88	; 0x58
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	f04f 30ff 	mov.w	r0, #4294967295
 800b182:	4770      	bx	lr
 800b184:	2001b7c8 	.word	0x2001b7c8

0800b188 <_getpid>:
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <_getpid+0xc>)
 800b18a:	2258      	movs	r2, #88	; 0x58
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295
 800b192:	4770      	bx	lr
 800b194:	2001b7c8 	.word	0x2001b7c8

0800b198 <_isatty>:
 800b198:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <_isatty+0xc>)
 800b19a:	2258      	movs	r2, #88	; 0x58
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	2000      	movs	r0, #0
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	2001b7c8 	.word	0x2001b7c8

0800b1a8 <_kill>:
 800b1a8:	4b02      	ldr	r3, [pc, #8]	; (800b1b4 <_kill+0xc>)
 800b1aa:	2258      	movs	r2, #88	; 0x58
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b2:	4770      	bx	lr
 800b1b4:	2001b7c8 	.word	0x2001b7c8

0800b1b8 <_lseek>:
 800b1b8:	4b02      	ldr	r3, [pc, #8]	; (800b1c4 <_lseek+0xc>)
 800b1ba:	2258      	movs	r2, #88	; 0x58
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c2:	4770      	bx	lr
 800b1c4:	2001b7c8 	.word	0x2001b7c8

0800b1c8 <_read>:
 800b1c8:	4b02      	ldr	r3, [pc, #8]	; (800b1d4 <_read+0xc>)
 800b1ca:	2258      	movs	r2, #88	; 0x58
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d2:	4770      	bx	lr
 800b1d4:	2001b7c8 	.word	0x2001b7c8

0800b1d8 <_sbrk>:
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <_sbrk+0x14>)
 800b1da:	6819      	ldr	r1, [r3, #0]
 800b1dc:	4602      	mov	r2, r0
 800b1de:	b909      	cbnz	r1, 800b1e4 <_sbrk+0xc>
 800b1e0:	4903      	ldr	r1, [pc, #12]	; (800b1f0 <_sbrk+0x18>)
 800b1e2:	6019      	str	r1, [r3, #0]
 800b1e4:	6818      	ldr	r0, [r3, #0]
 800b1e6:	4402      	add	r2, r0
 800b1e8:	601a      	str	r2, [r3, #0]
 800b1ea:	4770      	bx	lr
 800b1ec:	200121b4 	.word	0x200121b4
 800b1f0:	2001b7d8 	.word	0x2001b7d8

0800b1f4 <_write>:
 800b1f4:	4b02      	ldr	r3, [pc, #8]	; (800b200 <_write+0xc>)
 800b1f6:	2258      	movs	r2, #88	; 0x58
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fe:	4770      	bx	lr
 800b200:	2001b7c8 	.word	0x2001b7c8

0800b204 <_exit>:
 800b204:	e7fe      	b.n	800b204 <_exit>
	...

0800b208 <_init>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	bf00      	nop
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr

0800b214 <_fini>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	bf00      	nop
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr
