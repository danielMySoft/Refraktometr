
REF_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000587c  0800ad88  0800ad88  0001ad88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010604  08010604  00020604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801060c  0801060c  0002060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010610  08010610  00020610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000660  20000000  08010614  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001124  20000660  08010c74  00030660  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001784  08010c74  00031784  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030660  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001efb7  00000000  00000000  00030690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000326d  00000000  00000000  0004f647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000e4f4  00000000  00000000  000528b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000011f8  00000000  00000000  00060da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001188  00000000  00000000  00061fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023f7b  00000000  00000000  00063128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a881  00000000  00000000  000870a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d886f  00000000  00000000  000a1924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0017a193  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000432c  00000000  00000000  0017a1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000660 	.word	0x20000660
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ad6c 	.word	0x0800ad6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000664 	.word	0x20000664
 800021c:	0800ad6c 	.word	0x0800ad6c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_InitTick+0x40>)
 8000ef6:	7818      	ldrb	r0, [r3, #0]
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_InitTick+0x44>)
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f08:	f000 f8aa 	bl	8001060 <HAL_SYSTICK_Config>
 8000f0c:	b968      	cbnz	r0, 8000f2a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	2c0f      	cmp	r4, #15
 8000f10:	d901      	bls.n	8000f16 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
 8000f14:	e00a      	b.n	8000f2c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	2200      	movs	r2, #0
 8000f18:	4621      	mov	r1, r4
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	f000 f85d 	bl	8000fdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f22:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_InitTick+0x40>)
 8000f24:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
}
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000
 8000f34:	2000048c 	.word	0x2000048c

08000f38 <HAL_Init>:
{
 8000f38:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x30>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f52:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f82f 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ffc8 	bl	8000ef0 <HAL_InitTick>
  HAL_MspInit();
 8000f60:	f006 fd7c 	bl	8007a5c <HAL_MspInit>
}
 8000f64:	2000      	movs	r0, #0
 8000f66:	bd08      	pop	{r3, pc}
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <HAL_IncTick+0x10>)
 8000f6e:	6811      	ldr	r1, [r2, #0]
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_IncTick+0x14>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	440b      	add	r3, r1
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200006c0 	.word	0x200006c0
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f84:	4b01      	ldr	r3, [pc, #4]	; (8000f8c <HAL_GetTick+0x8>)
 8000f86:	6818      	ldr	r0, [r3, #0]
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200006c0 	.word	0x200006c0

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff fff6 	bl	8000f84 <HAL_GetTick>
 8000f98:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f9e:	d002      	beq.n	8000fa6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_Delay+0x24>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	f7ff ffed 	bl	8000f84 <HAL_GetTick>
 8000faa:	1b40      	subs	r0, r0, r5
 8000fac:	42a0      	cmp	r0, r4
 8000fae:	d3fa      	bcc.n	8000fa6 <HAL_Delay+0x16>
  {
  }
}
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	0200      	lsls	r0, r0, #8
 8000fc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000fd4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_NVIC_SetPriority+0x60>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe6:	f1c3 0407 	rsb	r4, r3, #7
 8000fea:	2c04      	cmp	r4, #4
 8000fec:	bf28      	it	cs
 8000fee:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff0:	1d1d      	adds	r5, r3, #4
 8000ff2:	2d06      	cmp	r5, #6
 8000ff4:	d918      	bls.n	8001028 <HAL_NVIC_SetPriority+0x4c>
 8000ff6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8000ffc:	fa05 f404 	lsl.w	r4, r5, r4
 8001000:	ea21 0104 	bic.w	r1, r1, r4
 8001004:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001006:	fa05 f303 	lsl.w	r3, r5, r3
 800100a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001010:	2800      	cmp	r0, #0
 8001012:	db0b      	blt.n	800102c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	0109      	lsls	r1, r1, #4
 8001016:	b2c9      	uxtb	r1, r1
 8001018:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800101c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001020:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001024:	bc30      	pop	{r4, r5}
 8001026:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001028:	2300      	movs	r3, #0
 800102a:	e7e5      	b.n	8000ff8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	f000 000f 	and.w	r0, r0, #15
 8001030:	0109      	lsls	r1, r1, #4
 8001032:	b2c9      	uxtb	r1, r1
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <HAL_NVIC_SetPriority+0x64>)
 8001036:	5419      	strb	r1, [r3, r0]
 8001038:	e7f4      	b.n	8001024 <HAL_NVIC_SetPriority+0x48>
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	e000ed14 	.word	0xe000ed14

08001044 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001044:	2800      	cmp	r0, #0
 8001046:	db07      	blt.n	8001058 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001048:	f000 021f 	and.w	r2, r0, #31
 800104c:	0940      	lsrs	r0, r0, #5
 800104e:	2301      	movs	r3, #1
 8001050:	4093      	lsls	r3, r2
 8001052:	4a02      	ldr	r2, [pc, #8]	; (800105c <HAL_NVIC_EnableIRQ+0x18>)
 8001054:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	3801      	subs	r0, #1
 8001062:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001066:	d20a      	bcs.n	800107e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_SYSTICK_Config+0x24>)
 800106a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_SYSTICK_Config+0x28>)
 800106e:	21f0      	movs	r1, #240	; 0xf0
 8001070:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	2000      	movs	r0, #0
 8001076:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800108c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800108e:	6805      	ldr	r5, [r0, #0]
 8001090:	682c      	ldr	r4, [r5, #0]
 8001092:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001096:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001098:	6804      	ldr	r4, [r0, #0]
 800109a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800109c:	6883      	ldr	r3, [r0, #8]
 800109e:	2b40      	cmp	r3, #64	; 0x40
 80010a0:	d005      	beq.n	80010ae <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80010a2:	6803      	ldr	r3, [r0, #0]
 80010a4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80010a6:	6803      	ldr	r3, [r0, #0]
 80010a8:	60da      	str	r2, [r3, #12]
  }
}
 80010aa:	bc30      	pop	{r4, r5}
 80010ac:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80010ae:	6803      	ldr	r3, [r0, #0]
 80010b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80010b2:	6803      	ldr	r3, [r0, #0]
 80010b4:	60d9      	str	r1, [r3, #12]
 80010b6:	e7f8      	b.n	80010aa <DMA_SetConfig+0x1e>

080010b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010b8:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80010ba:	6803      	ldr	r3, [r0, #0]
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	3910      	subs	r1, #16
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <DMA_CalcBaseAndBitshift+0x3c>)
 80010c2:	fba2 4201 	umull	r4, r2, r2, r1
 80010c6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010c8:	4c0b      	ldr	r4, [pc, #44]	; (80010f8 <DMA_CalcBaseAndBitshift+0x40>)
 80010ca:	5ca2      	ldrb	r2, [r4, r2]
 80010cc:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80010ce:	295f      	cmp	r1, #95	; 0x5f
 80010d0:	d909      	bls.n	80010e6 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80010d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	3304      	adds	r3, #4
 80010dc:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80010de:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80010e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80010e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80010ea:	f023 0303 	bic.w	r3, r3, #3
 80010ee:	6583      	str	r3, [r0, #88]	; 0x58
 80010f0:	e7f5      	b.n	80010de <DMA_CalcBaseAndBitshift+0x26>
 80010f2:	bf00      	nop
 80010f4:	aaaaaaab 	.word	0xaaaaaaab
 80010f8:	0800ad88 	.word	0x0800ad88

080010fc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80010fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80010fe:	6982      	ldr	r2, [r0, #24]
 8001100:	b992      	cbnz	r2, 8001128 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001102:	2b01      	cmp	r3, #1
 8001104:	d00a      	beq.n	800111c <DMA_CheckFifoParam+0x20>
 8001106:	2b02      	cmp	r3, #2
 8001108:	d002      	beq.n	8001110 <DMA_CheckFifoParam+0x14>
 800110a:	b10b      	cbz	r3, 8001110 <DMA_CheckFifoParam+0x14>
 800110c:	2000      	movs	r0, #0
 800110e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001110:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001112:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001116:	d128      	bne.n	800116a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001118:	2000      	movs	r0, #0
 800111a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800111c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800111e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001122:	d024      	beq.n	800116e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2000      	movs	r0, #0
 8001126:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001128:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800112c:	d009      	beq.n	8001142 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800112e:	2b02      	cmp	r3, #2
 8001130:	d925      	bls.n	800117e <DMA_CheckFifoParam+0x82>
 8001132:	2b03      	cmp	r3, #3
 8001134:	d125      	bne.n	8001182 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001136:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001138:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800113c:	d123      	bne.n	8001186 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800113e:	2000      	movs	r0, #0
 8001140:	4770      	bx	lr
    switch (tmp)
 8001142:	2b03      	cmp	r3, #3
 8001144:	d803      	bhi.n	800114e <DMA_CheckFifoParam+0x52>
 8001146:	e8df f003 	tbb	[pc, r3]
 800114a:	0414      	.short	0x0414
 800114c:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800114e:	2000      	movs	r0, #0
 8001150:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001152:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001154:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001158:	d10d      	bne.n	8001176 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2000      	movs	r0, #0
 800115c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800115e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001164:	d009      	beq.n	800117a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001166:	2000      	movs	r0, #0
 8001168:	4770      	bx	lr
        status = HAL_ERROR;
 800116a:	2001      	movs	r0, #1
 800116c:	4770      	bx	lr
        status = HAL_ERROR;
 800116e:	2001      	movs	r0, #1
 8001170:	4770      	bx	lr
      status = HAL_ERROR;
 8001172:	2001      	movs	r0, #1
 8001174:	4770      	bx	lr
        status = HAL_ERROR;
 8001176:	2001      	movs	r0, #1
 8001178:	4770      	bx	lr
        status = HAL_ERROR;
 800117a:	2001      	movs	r0, #1
 800117c:	4770      	bx	lr
      status = HAL_ERROR;
 800117e:	2001      	movs	r0, #1
 8001180:	4770      	bx	lr
    switch (tmp)
 8001182:	2000      	movs	r0, #0
 8001184:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001186:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001188:	4770      	bx	lr
	...

0800118c <HAL_DMA_Init>:
{
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff fef8 	bl	8000f84 <HAL_GetTick>
  if(hdma == NULL)
 8001194:	2c00      	cmp	r4, #0
 8001196:	d05b      	beq.n	8001250 <HAL_DMA_Init+0xc4>
 8001198:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800119a:	2300      	movs	r3, #0
 800119c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f012 0f01 	tst.w	r2, #1
 80011b8:	d00a      	beq.n	80011d0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ba:	f7ff fee3 	bl	8000f84 <HAL_GetTick>
 80011be:	1b43      	subs	r3, r0, r5
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d9f5      	bls.n	80011b0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c4:	2320      	movs	r3, #32
 80011c6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c8:	2003      	movs	r0, #3
 80011ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80011d0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011d2:	4820      	ldr	r0, [pc, #128]	; (8001254 <HAL_DMA_Init+0xc8>)
 80011d4:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	6861      	ldr	r1, [r4, #4]
 80011d8:	68a2      	ldr	r2, [r4, #8]
 80011da:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011dc:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011de:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e0:	6921      	ldr	r1, [r4, #16]
 80011e2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e4:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e8:	69a1      	ldr	r1, [r4, #24]
 80011ea:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ec:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f0:	6a21      	ldr	r1, [r4, #32]
 80011f2:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011f8:	2904      	cmp	r1, #4
 80011fa:	d01e      	beq.n	800123a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80011fc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80011fe:	6826      	ldr	r6, [r4, #0]
 8001200:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001202:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001208:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800120a:	2b04      	cmp	r3, #4
 800120c:	d107      	bne.n	800121e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800120e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001210:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001214:	b11b      	cbz	r3, 800121e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff ff70 	bl	80010fc <DMA_CheckFifoParam>
 800121c:	b990      	cbnz	r0, 8001244 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800121e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff ff49 	bl	80010b8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001226:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001228:	233f      	movs	r3, #63	; 0x3f
 800122a:	4093      	lsls	r3, r2
 800122c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122e:	2000      	movs	r0, #0
 8001230:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001232:	2301      	movs	r3, #1
 8001234:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001238:	e7c9      	b.n	80011ce <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800123a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800123c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800123e:	4301      	orrs	r1, r0
 8001240:	430a      	orrs	r2, r1
 8001242:	e7db      	b.n	80011fc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001248:	2001      	movs	r0, #1
 800124a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800124e:	e7be      	b.n	80011ce <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	e7bc      	b.n	80011ce <HAL_DMA_Init+0x42>
 8001254:	e010803f 	.word	0xe010803f

08001258 <HAL_DMA_Start_IT>:
{
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800125e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001262:	2801      	cmp	r0, #1
 8001264:	d02b      	beq.n	80012be <HAL_DMA_Start_IT+0x66>
 8001266:	2001      	movs	r0, #1
 8001268:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800126c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001270:	b2c0      	uxtb	r0, r0
 8001272:	2801      	cmp	r0, #1
 8001274:	d004      	beq.n	8001280 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001276:	2300      	movs	r3, #0
 8001278:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800127c:	2002      	movs	r0, #2
}
 800127e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001280:	2002      	movs	r0, #2
 8001282:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001286:	2000      	movs	r0, #0
 8001288:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff fefe 	bl	800108c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001290:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001292:	233f      	movs	r3, #63	; 0x3f
 8001294:	4093      	lsls	r3, r2
 8001296:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	f043 0316 	orr.w	r3, r3, #22
 80012a0:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80012a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012a4:	b123      	cbz	r3, 80012b0 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	6813      	ldr	r3, [r2, #0]
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2000      	movs	r0, #0
 80012bc:	e7df      	b.n	800127e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80012be:	2002      	movs	r0, #2
 80012c0:	e7dd      	b.n	800127e <HAL_DMA_Start_IT+0x26>

080012c2 <HAL_DMA_Abort>:
{
 80012c2:	b570      	push	{r4, r5, r6, lr}
 80012c4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff fe5c 	bl	8000f84 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012cc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d006      	beq.n	80012e4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80012da:	2300      	movs	r3, #0
 80012dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
}
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e6:	6822      	ldr	r2, [r4, #0]
 80012e8:	6813      	ldr	r3, [r2, #0]
 80012ea:	f023 0316 	bic.w	r3, r3, #22
 80012ee:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	6953      	ldr	r3, [r2, #20]
 80012f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012fc:	b1e3      	cbz	r3, 8001338 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012fe:	6822      	ldr	r2, [r4, #0]
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f023 0308 	bic.w	r3, r3, #8
 8001306:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f013 0f01 	tst.w	r3, #1
 800131a:	d011      	beq.n	8001340 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131c:	f7ff fe32 	bl	8000f84 <HAL_GetTick>
 8001320:	1b43      	subs	r3, r0, r5
 8001322:	2b05      	cmp	r3, #5
 8001324:	d9f5      	bls.n	8001312 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001326:	2320      	movs	r3, #32
 8001328:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800132a:	2300      	movs	r3, #0
 800132c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001330:	2003      	movs	r0, #3
 8001332:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001336:	e7d4      	b.n	80012e2 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001338:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1df      	bne.n	80012fe <HAL_DMA_Abort+0x3c>
 800133e:	e7e3      	b.n	8001308 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001340:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001342:	233f      	movs	r3, #63	; 0x3f
 8001344:	4093      	lsls	r3, r2
 8001346:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001348:	2000      	movs	r0, #0
 800134a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	2301      	movs	r3, #1
 8001350:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001354:	e7c5      	b.n	80012e2 <HAL_DMA_Abort+0x20>

08001356 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001356:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d003      	beq.n	8001368 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
 8001366:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001368:	2305      	movs	r3, #5
 800136a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800136e:	6802      	ldr	r2, [r0, #0]
 8001370:	6813      	ldr	r3, [r2, #0]
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001378:	2000      	movs	r0, #0
}
 800137a:	4770      	bx	lr

0800137c <HAL_DMA_IRQHandler>:
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b083      	sub	sp, #12
 8001380:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_DMA_IRQHandler+0x1d4>)
 8001388:	681d      	ldr	r5, [r3, #0]
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_DMA_IRQHandler+0x1d8>)
 800138c:	fba3 3505 	umull	r3, r5, r3, r5
 8001390:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001392:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001394:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001396:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001398:	2308      	movs	r3, #8
 800139a:	4093      	lsls	r3, r2
 800139c:	4233      	tst	r3, r6
 800139e:	d010      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f012 0f04 	tst.w	r2, #4
 80013a8:	d00b      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	f022 0204 	bic.w	r2, r2, #4
 80013b0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80013b4:	2308      	movs	r3, #8
 80013b6:	4093      	lsls	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013c4:	2301      	movs	r3, #1
 80013c6:	4093      	lsls	r3, r2
 80013c8:	4233      	tst	r3, r6
 80013ca:	d009      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013cc:	6822      	ldr	r2, [r4, #0]
 80013ce:	6952      	ldr	r2, [r2, #20]
 80013d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80013d4:	d004      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013d6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013e2:	2304      	movs	r3, #4
 80013e4:	4093      	lsls	r3, r2
 80013e6:	4233      	tst	r3, r6
 80013e8:	d009      	beq.n	80013fe <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ea:	6822      	ldr	r2, [r4, #0]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f012 0f02 	tst.w	r2, #2
 80013f2:	d004      	beq.n	80013fe <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013f4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001400:	2310      	movs	r3, #16
 8001402:	4093      	lsls	r3, r2
 8001404:	4233      	tst	r3, r6
 8001406:	d024      	beq.n	8001452 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f012 0f08 	tst.w	r2, #8
 8001410:	d01f      	beq.n	8001452 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001412:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800141c:	d00d      	beq.n	800143a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001424:	d104      	bne.n	8001430 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001428:	b19b      	cbz	r3, 8001452 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800142a:	4620      	mov	r0, r4
 800142c:	4798      	blx	r3
 800142e:	e010      	b.n	8001452 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001430:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001432:	b173      	cbz	r3, 8001452 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001434:	4620      	mov	r0, r4
 8001436:	4798      	blx	r3
 8001438:	e00b      	b.n	8001452 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001440:	d103      	bne.n	800144a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f022 0208 	bic.w	r2, r2, #8
 8001448:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800144a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800144c:	b10b      	cbz	r3, 8001452 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800144e:	4620      	mov	r0, r4
 8001450:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001452:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001454:	2320      	movs	r3, #32
 8001456:	4093      	lsls	r3, r2
 8001458:	4233      	tst	r3, r6
 800145a:	d055      	beq.n	8001508 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145c:	6822      	ldr	r2, [r4, #0]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	f012 0f10 	tst.w	r2, #16
 8001464:	d050      	beq.n	8001508 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001466:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001468:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b05      	cmp	r3, #5
 8001470:	d00e      	beq.n	8001490 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800147a:	d033      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001482:	d12a      	bne.n	80014da <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001484:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001486:	2b00      	cmp	r3, #0
 8001488:	d03e      	beq.n	8001508 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800148a:	4620      	mov	r0, r4
 800148c:	4798      	blx	r3
 800148e:	e03b      	b.n	8001508 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001490:	6822      	ldr	r2, [r4, #0]
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	f023 0316 	bic.w	r3, r3, #22
 8001498:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	6953      	ldr	r3, [r2, #20]
 800149e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014a2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014a6:	b1a3      	cbz	r3, 80014d2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a8:	6822      	ldr	r2, [r4, #0]
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	f023 0308 	bic.w	r3, r3, #8
 80014b0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014b4:	233f      	movs	r3, #63	; 0x3f
 80014b6:	4093      	lsls	r3, r2
 80014b8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80014ba:	2300      	movs	r3, #0
 80014bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80014c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d03f      	beq.n	800154c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80014cc:	4620      	mov	r0, r4
 80014ce:	4798      	blx	r3
        return;
 80014d0:	e03c      	b.n	800154c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e7      	bne.n	80014a8 <HAL_DMA_IRQHandler+0x12c>
 80014d8:	e7eb      	b.n	80014b2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80014da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014dc:	b1a3      	cbz	r3, 8001508 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80014de:	4620      	mov	r0, r4
 80014e0:	4798      	blx	r3
 80014e2:	e011      	b.n	8001508 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80014ea:	d109      	bne.n	8001500 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	f022 0210 	bic.w	r2, r2, #16
 80014f2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80014f4:	2300      	movs	r3, #0
 80014f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80014fa:	2301      	movs	r3, #1
 80014fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001502:	b10b      	cbz	r3, 8001508 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001504:	4620      	mov	r0, r4
 8001506:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001508:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800150a:	b1fb      	cbz	r3, 800154c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800150c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800150e:	f013 0f01 	tst.w	r3, #1
 8001512:	d017      	beq.n	8001544 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001514:	2305      	movs	r3, #5
 8001516:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	6813      	ldr	r3, [r2, #0]
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	42ab      	cmp	r3, r5
 800152c:	d804      	bhi.n	8001538 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f013 0f01 	tst.w	r3, #1
 8001536:	d1f5      	bne.n	8001524 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001538:	2300      	movs	r3, #0
 800153a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800153e:	2301      	movs	r3, #1
 8001540:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001544:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001546:	b10b      	cbz	r3, 800154c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001548:	4620      	mov	r0, r4
 800154a:	4798      	blx	r3
}
 800154c:	b003      	add	sp, #12
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001550:	2000048c 	.word	0x2000048c
 8001554:	1b4e81b5 	.word	0x1b4e81b5

08001558 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001558:	2300      	movs	r3, #0
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f200 80d3 	bhi.w	8001706 <HAL_GPIO_Init+0x1ae>
{
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	e039      	b.n	80015da <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	2206      	movs	r2, #6
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x14>
 800156a:	2200      	movs	r2, #0
 800156c:	40b2      	lsls	r2, r6
 800156e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	3402      	adds	r4, #2
 8001572:	4e65      	ldr	r6, [pc, #404]	; (8001708 <HAL_GPIO_Init+0x1b0>)
 8001574:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001578:	4a64      	ldr	r2, [pc, #400]	; (800170c <HAL_GPIO_Init+0x1b4>)
 800157a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800157c:	43ea      	mvns	r2, r5
 800157e:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001582:	684f      	ldr	r7, [r1, #4]
 8001584:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001588:	d001      	beq.n	800158e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800158a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800158e:	4c5f      	ldr	r4, [pc, #380]	; (800170c <HAL_GPIO_Init+0x1b4>)
 8001590:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001592:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001594:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001598:	684f      	ldr	r7, [r1, #4]
 800159a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800159e:	d001      	beq.n	80015a4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80015a0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80015a4:	4c59      	ldr	r4, [pc, #356]	; (800170c <HAL_GPIO_Init+0x1b4>)
 80015a6:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ae:	684f      	ldr	r7, [r1, #4]
 80015b0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80015b4:	d001      	beq.n	80015ba <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80015b6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80015ba:	4c54      	ldr	r4, [pc, #336]	; (800170c <HAL_GPIO_Init+0x1b4>)
 80015bc:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80015be:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c2:	684e      	ldr	r6, [r1, #4]
 80015c4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80015c8:	d001      	beq.n	80015ce <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80015ca:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80015ce:	4c4f      	ldr	r4, [pc, #316]	; (800170c <HAL_GPIO_Init+0x1b4>)
 80015d0:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	3301      	adds	r3, #1
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	f200 8094 	bhi.w	8001702 <HAL_GPIO_Init+0x1aa>
    ioposition = 0x01U << position;
 80015da:	2201      	movs	r2, #1
 80015dc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	680c      	ldr	r4, [r1, #0]
 80015e0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80015e4:	ea32 0404 	bics.w	r4, r2, r4
 80015e8:	d1f3      	bne.n	80015d2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ea:	684c      	ldr	r4, [r1, #4]
 80015ec:	1e66      	subs	r6, r4, #1
 80015ee:	2e01      	cmp	r6, #1
 80015f0:	d903      	bls.n	80015fa <HAL_GPIO_Init+0xa2>
 80015f2:	2c11      	cmp	r4, #17
 80015f4:	d001      	beq.n	80015fa <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f6:	2c12      	cmp	r4, #18
 80015f8:	d112      	bne.n	8001620 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80015fa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	005f      	lsls	r7, r3, #1
 80015fe:	2403      	movs	r4, #3
 8001600:	40bc      	lsls	r4, r7
 8001602:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001606:	68cc      	ldr	r4, [r1, #12]
 8001608:	40bc      	lsls	r4, r7
 800160a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800160c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800160e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001610:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001614:	684c      	ldr	r4, [r1, #4]
 8001616:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800161a:	409a      	lsls	r2, r3
 800161c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800161e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001620:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001622:	005e      	lsls	r6, r3, #1
 8001624:	2403      	movs	r4, #3
 8001626:	40b4      	lsls	r4, r6
 8001628:	43e2      	mvns	r2, r4
 800162a:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162e:	688c      	ldr	r4, [r1, #8]
 8001630:	40b4      	lsls	r4, r6
 8001632:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001634:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001636:	684c      	ldr	r4, [r1, #4]
 8001638:	2c02      	cmp	r4, #2
 800163a:	d001      	beq.n	8001640 <HAL_GPIO_Init+0xe8>
 800163c:	2c12      	cmp	r4, #18
 800163e:	d113      	bne.n	8001668 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8001640:	08df      	lsrs	r7, r3, #3
 8001642:	3708      	adds	r7, #8
 8001644:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001648:	f003 0407 	and.w	r4, r3, #7
 800164c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001650:	240f      	movs	r4, #15
 8001652:	fa04 f40c 	lsl.w	r4, r4, ip
 8001656:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165a:	690c      	ldr	r4, [r1, #16]
 800165c:	fa04 f40c 	lsl.w	r4, r4, ip
 8001660:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001664:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001668:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166c:	684a      	ldr	r2, [r1, #4]
 800166e:	f002 0203 	and.w	r2, r2, #3
 8001672:	40b2      	lsls	r2, r6
 8001674:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001676:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001678:	684a      	ldr	r2, [r1, #4]
 800167a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800167e:	d0a8      	beq.n	80015d2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	2200      	movs	r2, #0
 8001682:	9201      	str	r2, [sp, #4]
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_GPIO_Init+0x1b8>)
 8001686:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001688:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800168c:	6454      	str	r4, [r2, #68]	; 0x44
 800168e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001690:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001694:	9201      	str	r2, [sp, #4]
 8001696:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001698:	089c      	lsrs	r4, r3, #2
 800169a:	1ca6      	adds	r6, r4, #2
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_GPIO_Init+0x1b0>)
 800169e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a2:	f003 0203 	and.w	r2, r3, #3
 80016a6:	0096      	lsls	r6, r2, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	40b2      	lsls	r2, r6
 80016ac:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_GPIO_Init+0x1bc>)
 80016b2:	4290      	cmp	r0, r2
 80016b4:	f43f af59 	beq.w	800156a <HAL_GPIO_Init+0x12>
 80016b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016bc:	4290      	cmp	r0, r2
 80016be:	d016      	beq.n	80016ee <HAL_GPIO_Init+0x196>
 80016c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016c4:	4290      	cmp	r0, r2
 80016c6:	d014      	beq.n	80016f2 <HAL_GPIO_Init+0x19a>
 80016c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016cc:	4290      	cmp	r0, r2
 80016ce:	d012      	beq.n	80016f6 <HAL_GPIO_Init+0x19e>
 80016d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016d4:	4290      	cmp	r0, r2
 80016d6:	d010      	beq.n	80016fa <HAL_GPIO_Init+0x1a2>
 80016d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016dc:	4290      	cmp	r0, r2
 80016de:	d00e      	beq.n	80016fe <HAL_GPIO_Init+0x1a6>
 80016e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e4:	4290      	cmp	r0, r2
 80016e6:	f43f af3e 	beq.w	8001566 <HAL_GPIO_Init+0xe>
 80016ea:	2207      	movs	r2, #7
 80016ec:	e73e      	b.n	800156c <HAL_GPIO_Init+0x14>
 80016ee:	2201      	movs	r2, #1
 80016f0:	e73c      	b.n	800156c <HAL_GPIO_Init+0x14>
 80016f2:	2202      	movs	r2, #2
 80016f4:	e73a      	b.n	800156c <HAL_GPIO_Init+0x14>
 80016f6:	2203      	movs	r2, #3
 80016f8:	e738      	b.n	800156c <HAL_GPIO_Init+0x14>
 80016fa:	2204      	movs	r2, #4
 80016fc:	e736      	b.n	800156c <HAL_GPIO_Init+0x14>
 80016fe:	2205      	movs	r2, #5
 8001700:	e734      	b.n	800156c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001702:	b003      	add	sp, #12
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	4770      	bx	lr
 8001708:	40013800 	.word	0x40013800
 800170c:	40013c00 	.word	0x40013c00
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001718:	b10a      	cbz	r2, 800171e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171a:	6181      	str	r1, [r0, #24]
 800171c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171e:	0409      	lsls	r1, r1, #16
 8001720:	6181      	str	r1, [r0, #24]
  }
}
 8001722:	4770      	bx	lr

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b04      	cmp	r3, #4
 8001730:	d03d      	beq.n	80017ae <HAL_RCC_GetSysClockFreq+0x8a>
 8001732:	2b08      	cmp	r3, #8
 8001734:	d13d      	bne.n	80017b2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001744:	d012      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001748:	6859      	ldr	r1, [r3, #4]
 800174a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800174e:	2300      	movs	r3, #0
 8001750:	481a      	ldr	r0, [pc, #104]	; (80017bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001752:	fba1 0100 	umull	r0, r1, r1, r0
 8001756:	f7ff fa4f 	bl	8000bf8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001766:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800176a:	e023      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001774:	015c      	lsls	r4, r3, #5
 8001776:	2500      	movs	r5, #0
 8001778:	1ae4      	subs	r4, r4, r3
 800177a:	f165 0500 	sbc.w	r5, r5, #0
 800177e:	01ae      	lsls	r6, r5, #6
 8001780:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001784:	01a7      	lsls	r7, r4, #6
 8001786:	1b38      	subs	r0, r7, r4
 8001788:	eb66 0105 	sbc.w	r1, r6, r5
 800178c:	00cc      	lsls	r4, r1, #3
 800178e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001792:	00c5      	lsls	r5, r0, #3
 8001794:	18e8      	adds	r0, r5, r3
 8001796:	f144 0100 	adc.w	r1, r4, #0
 800179a:	028b      	lsls	r3, r1, #10
 800179c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80017a0:	0284      	lsls	r4, r0, #10
 80017a2:	4620      	mov	r0, r4
 80017a4:	4619      	mov	r1, r3
 80017a6:	2300      	movs	r3, #0
 80017a8:	f7ff fa26 	bl	8000bf8 <__aeabi_uldivmod>
 80017ac:	e7d5      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <HAL_RCC_GetSysClockFreq+0x98>)
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80017b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	00b71b00 	.word	0x00b71b00
 80017c0:	00f42400 	.word	0x00f42400

080017c4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80017c4:	2800      	cmp	r0, #0
 80017c6:	f000 809b 	beq.w	8001900 <HAL_RCC_ClockConfig+0x13c>
{
 80017ca:	b570      	push	{r4, r5, r6, lr}
 80017cc:	460d      	mov	r5, r1
 80017ce:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCC_ClockConfig+0x14c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	428b      	cmp	r3, r1
 80017da:	d208      	bcs.n	80017ee <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017dc:	b2cb      	uxtb	r3, r1
 80017de:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <HAL_RCC_ClockConfig+0x14c>)
 80017e0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	6813      	ldr	r3, [r2, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	428b      	cmp	r3, r1
 80017ea:	f040 808b 	bne.w	8001904 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	f013 0f02 	tst.w	r3, #2
 80017f4:	d017      	beq.n	8001826 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f6:	f013 0f04 	tst.w	r3, #4
 80017fa:	d004      	beq.n	8001806 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 80017fe:	6893      	ldr	r3, [r2, #8]
 8001800:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001804:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	f013 0f08 	tst.w	r3, #8
 800180c:	d004      	beq.n	8001818 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800180e:	4a41      	ldr	r2, [pc, #260]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 8001810:	6893      	ldr	r3, [r2, #8]
 8001812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001816:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001818:	4a3e      	ldr	r2, [pc, #248]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 800181a:	6893      	ldr	r3, [r2, #8]
 800181c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001820:	68a1      	ldr	r1, [r4, #8]
 8001822:	430b      	orrs	r3, r1
 8001824:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	f013 0f01 	tst.w	r3, #1
 800182c:	d032      	beq.n	8001894 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	6863      	ldr	r3, [r4, #4]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d021      	beq.n	8001878 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001834:	1e9a      	subs	r2, r3, #2
 8001836:	2a01      	cmp	r2, #1
 8001838:	d925      	bls.n	8001886 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4a36      	ldr	r2, [pc, #216]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	f012 0f02 	tst.w	r2, #2
 8001842:	d061      	beq.n	8001908 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001844:	4933      	ldr	r1, [pc, #204]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 8001846:	688a      	ldr	r2, [r1, #8]
 8001848:	f022 0203 	bic.w	r2, r2, #3
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001850:	f7ff fb98 	bl	8000f84 <HAL_GetTick>
 8001854:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	6862      	ldr	r2, [r4, #4]
 8001860:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001864:	d016      	beq.n	8001894 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001866:	f7ff fb8d 	bl	8000f84 <HAL_GetTick>
 800186a:	1b80      	subs	r0, r0, r6
 800186c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001870:	4298      	cmp	r0, r3
 8001872:	d9f0      	bls.n	8001856 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001874:	2003      	movs	r0, #3
 8001876:	e042      	b.n	80018fe <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001880:	d1e0      	bne.n	8001844 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	e03b      	b.n	80018fe <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4a23      	ldr	r2, [pc, #140]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800188e:	d1d9      	bne.n	8001844 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
 8001892:	e034      	b.n	80018fe <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_RCC_ClockConfig+0x14c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	42ab      	cmp	r3, r5
 800189e:	d907      	bls.n	80018b0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a0:	b2ea      	uxtb	r2, r5
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_ClockConfig+0x14c>)
 80018a4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	42ab      	cmp	r3, r5
 80018ae:	d12d      	bne.n	800190c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	f013 0f04 	tst.w	r3, #4
 80018b6:	d006      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 80018ba:	6893      	ldr	r3, [r2, #8]
 80018bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018c0:	68e1      	ldr	r1, [r4, #12]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	f013 0f08 	tst.w	r3, #8
 80018cc:	d007      	beq.n	80018de <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 80018d0:	6893      	ldr	r3, [r2, #8]
 80018d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80018d6:	6921      	ldr	r1, [r4, #16]
 80018d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018dc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018de:	f7ff ff21 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_RCC_ClockConfig+0x150>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x154>)
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x158>)
 80018f2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_RCC_ClockConfig+0x15c>)
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f7ff fafa 	bl	8000ef0 <HAL_InitTick>
  return HAL_OK;
 80018fc:	2000      	movs	r0, #0
}
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
}
 8001902:	4770      	bx	lr
      return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
 8001906:	e7fa      	b.n	80018fe <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001908:	2001      	movs	r0, #1
 800190a:	e7f8      	b.n	80018fe <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	e7f6      	b.n	80018fe <HAL_RCC_ClockConfig+0x13a>
 8001910:	40023c00 	.word	0x40023c00
 8001914:	40023800 	.word	0x40023800
 8001918:	0800ffc4 	.word	0x0800ffc4
 800191c:	2000048c 	.word	0x2000048c
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001924:	4b01      	ldr	r3, [pc, #4]	; (800192c <HAL_RCC_GetHCLKFreq+0x8>)
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000048c 	.word	0x2000048c

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001932:	f7ff fff7 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800193e:	4a03      	ldr	r2, [pc, #12]	; (800194c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
}
 8001942:	40d8      	lsrs	r0, r3
 8001944:	bd08      	pop	{r3, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	0800ffd4 	.word	0x0800ffd4

08001950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001950:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001952:	f7ff ffe7 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800195e:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
}
 8001962:	40d8      	lsrs	r0, r3
 8001964:	bd08      	pop	{r3, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	0800ffd4 	.word	0x0800ffd4

08001970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001976:	6805      	ldr	r5, [r0, #0]
 8001978:	f015 0501 	ands.w	r5, r5, #1
 800197c:	d00d      	beq.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800197e:	4ab0      	ldr	r2, [pc, #704]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001980:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001984:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001988:	69c1      	ldr	r1, [r0, #28]
 800198a:	430b      	orrs	r3, r1
 800198c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001990:	69c3      	ldr	r3, [r0, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80be 	beq.w	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  uint32_t plli2sused = 0U;
 8001998:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f013 0f02 	tst.w	r3, #2
 80019a0:	d00b      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019a2:	4aa7      	ldr	r2, [pc, #668]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80019a4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80019a8:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80019ac:	6a21      	ldr	r1, [r4, #32]
 80019ae:	430b      	orrs	r3, r1
 80019b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80019b4:	6a23      	ldr	r3, [r4, #32]
 80019b6:	b903      	cbnz	r3, 80019ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 80019b8:	2501      	movs	r5, #1
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80019c0:	d00f      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80019c2:	4a9f      	ldr	r2, [pc, #636]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80019c4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80019c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80019cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80019ce:	430b      	orrs	r3, r1
 80019d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80019d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80019d6:	b903      	cbnz	r3, 80019da <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      plli2sused = 1U;
 80019d8:	2501      	movs	r5, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80019da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019de:	f000 809b 	beq.w	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80019e8:	d00f      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80019ea:	4a95      	ldr	r2, [pc, #596]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80019ec:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80019f0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80019f6:	430b      	orrs	r3, r1
 80019f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80019fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80019fe:	b903      	cbnz	r3, 8001a02 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      plli2sused = 1U;
 8001a00:	2501      	movs	r5, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001a02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a06:	f000 8093 	beq.w	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f013 0f08 	tst.w	r3, #8
 8001a10:	f040 809a 	bne.w	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	f013 0f04 	tst.w	r3, #4
 8001a1a:	d003      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a1c:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8001a20:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a22:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	f013 0f10 	tst.w	r3, #16
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a2c:	4a84      	ldr	r2, [pc, #528]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001a2e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001a32:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	f013 0f20 	tst.w	r3, #32
 8001a44:	d00d      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a46:	4a7e      	ldr	r2, [pc, #504]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001a48:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001a4c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001a50:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001a52:	430b      	orrs	r3, r1
 8001a54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001a58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a5e:	f000 80da 	beq.w	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a68:	d008      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001a6c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001a76:	430b      	orrs	r3, r1
 8001a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a7c:	2d00      	cmp	r5, #0
 8001a7e:	f040 80cc 	bne.w	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	2b80      	cmp	r3, #128	; 0x80
 8001a86:	f000 80c8 	beq.w	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a90:	d008      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001a92:	4a6b      	ldr	r2, [pc, #428]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001a94:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001aaa:	d008      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001aac:	4a64      	ldr	r2, [pc, #400]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001aae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ab6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001ac6:	4a5e      	ldr	r2, [pc, #376]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001ac8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ad0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001ade:	d008      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001ae0:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001ae2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aec:	430b      	orrs	r3, r1
 8001aee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001af8:	f000 811e 	beq.w	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001afc:	4a50      	ldr	r2, [pc, #320]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001afe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001b02:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001b0e:	2000      	movs	r0, #0
}
 8001b10:	b002      	add	sp, #8
 8001b12:	bd70      	pop	{r4, r5, r6, pc}
      plli2sused = 1U;
 8001b14:	2501      	movs	r5, #1
 8001b16:	e740      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001b18:	4949      	ldr	r1, [pc, #292]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b1a:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001b1e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b22:	6962      	ldr	r2, [r4, #20]
 8001b24:	3a01      	subs	r2, #1
 8001b26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001b2e:	e758      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001b30:	4943      	ldr	r1, [pc, #268]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b32:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001b36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b3a:	6962      	ldr	r2, [r4, #20]
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001b46:	e760      	b.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001b60:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001b62:	6813      	ldr	r3, [r2, #0]
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001b6a:	f7ff fa0b 	bl	8000f84 <HAL_GetTick>
 8001b6e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b70:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b78:	d106      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x218>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff fa03 	bl	8000f84 <HAL_GetTick>
 8001b7e:	1b80      	subs	r0, r0, r6
 8001b80:	2802      	cmp	r0, #2
 8001b82:	d9f5      	bls.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
        return HAL_TIMEOUT;
 8001b84:	2003      	movs	r0, #3
 8001b86:	e7c3      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b8c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b90:	d012      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8001b92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b94:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b9c:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba4:	4929      	ldr	r1, [pc, #164]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001baa:	2000      	movs	r0, #0
 8001bac:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001bae:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f013 0f01 	tst.w	r3, #1
 8001bb6:	d112      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001bbe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001bc2:	d01d      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001bc6:	6893      	ldr	r3, [r2, #8]
 8001bc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bcc:	6093      	str	r3, [r2, #8]
 8001bce:	491c      	ldr	r1, [pc, #112]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001bd0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001bd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bd4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	670b      	str	r3, [r1, #112]	; 0x70
 8001bdc:	e71a      	b.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 8001bde:	f7ff f9d1 	bl	8000f84 <HAL_GetTick>
 8001be2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	f013 0f02 	tst.w	r3, #2
 8001bec:	d1e4      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff f9c9 	bl	8000f84 <HAL_GetTick>
 8001bf2:	1b80      	subs	r0, r0, r6
 8001bf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bf8:	4298      	cmp	r0, r3
 8001bfa:	d9f3      	bls.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x274>
            return HAL_TIMEOUT;
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	e787      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c00:	490f      	ldr	r1, [pc, #60]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001c02:	688a      	ldr	r2, [r1, #8]
 8001c04:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001c08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
 8001c14:	e7db      	b.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x25e>
      plli2sused = 1U;
 8001c16:	2501      	movs	r5, #1
 8001c18:	e723      	b.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001c20:	f7ff f9b0 	bl	8000f84 <HAL_GetTick>
 8001c24:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001c2e:	d011      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c30:	f7ff f9a8 	bl	8000f84 <HAL_GetTick>
 8001c34:	1b40      	subs	r0, r0, r5
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9f5      	bls.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        return HAL_TIMEOUT;
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	e768      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	424711e0 	.word	0x424711e0
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	42470e40 	.word	0x42470e40
 8001c50:	42470068 	.word	0x42470068
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001c54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001c58:	601a      	str	r2, [r3, #0]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	f013 0f01 	tst.w	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8001c62:	69e2      	ldr	r2, [r4, #28]
 8001c64:	b1a2      	cbz	r2, 8001c90 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8001c66:	f013 0f02 	tst.w	r3, #2
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x300>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c6c:	6a22      	ldr	r2, [r4, #32]
 8001c6e:	b17a      	cbz	r2, 8001c90 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8001c70:	f013 0f20 	tst.w	r3, #32
 8001c74:	d003      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c78:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001c7c:	d008      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8001c7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c82:	d012      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x33a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001c84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c86:	b983      	cbnz	r3, 8001caa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001c88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c90:	6863      	ldr	r3, [r4, #4]
 8001c92:	68a2      	ldr	r2, [r4, #8]
 8001c94:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c98:	68e2      	ldr	r2, [r4, #12]
 8001c9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c9e:	6922      	ldr	r2, [r4, #16]
 8001ca0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8001ca6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8001cb2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cb4:	b122      	cbz	r2, 8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8001cb6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001cba:	d019      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001cbc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001cbe:	b9bb      	cbnz	r3, 8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8001cc2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cc6:	6863      	ldr	r3, [r4, #4]
 8001cc8:	68a0      	ldr	r0, [r4, #8]
 8001cca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cce:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	6921      	ldr	r1, [r4, #16]
 8001cd6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001cda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001cde:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ce2:	f023 031f 	bic.w	r3, r3, #31
 8001ce6:	69a1      	ldr	r1, [r4, #24]
 8001ce8:	3901      	subs	r1, #1
 8001cea:	430b      	orrs	r3, r1
 8001cec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cf6:	d00c      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cf8:	6863      	ldr	r3, [r4, #4]
 8001cfa:	68a2      	ldr	r2, [r4, #8]
 8001cfc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d00:	68e2      	ldr	r2, [r4, #12]
 8001d02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d06:	6922      	ldr	r2, [r4, #16]
 8001d08:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8001d0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d18:	f7ff f934 	bl	8000f84 <HAL_GetTick>
 8001d1c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001d26:	f47f aeb0 	bne.w	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d2a:	f7ff f92b 	bl	8000f84 <HAL_GetTick>
 8001d2e:	1b40      	subs	r0, r0, r5
 8001d30:	2802      	cmp	r0, #2
 8001d32:	d9f4      	bls.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 8001d34:	2003      	movs	r0, #3
 8001d36:	e6eb      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  return HAL_OK;
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e6e9      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8001d3c:	424710d8 	.word	0x424710d8
 8001d40:	40023800 	.word	0x40023800
 8001d44:	42470068 	.word	0x42470068

08001d48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	6803      	ldr	r3, [r0, #0]
 8001d50:	f013 0f01 	tst.w	r3, #1
 8001d54:	d03b      	beq.n	8001dce <HAL_RCC_OscConfig+0x86>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d56:	4ba7      	ldr	r3, [pc, #668]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d02c      	beq.n	8001dbc <HAL_RCC_OscConfig+0x74>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4ba4      	ldr	r3, [pc, #656]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d021      	beq.n	8001db2 <HAL_RCC_OscConfig+0x6a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	6863      	ldr	r3, [r4, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d04f      	beq.n	8001e16 <HAL_RCC_OscConfig+0xce>
 8001d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7a:	d052      	beq.n	8001e22 <HAL_RCC_OscConfig+0xda>
 8001d7c:	4b9d      	ldr	r3, [pc, #628]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d050      	beq.n	8001e36 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f8f6 	bl	8000f84 <HAL_GetTick>
 8001d98:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b96      	ldr	r3, [pc, #600]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001da2:	d114      	bne.n	8001dce <HAL_RCC_OscConfig+0x86>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff f8ee 	bl	8000f84 <HAL_GetTick>
 8001da8:	1b40      	subs	r0, r0, r5
 8001daa:	2864      	cmp	r0, #100	; 0x64
 8001dac:	d9f5      	bls.n	8001d9a <HAL_RCC_OscConfig+0x52>
          {
            return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
 8001db0:	e18c      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db2:	4b90      	ldr	r3, [pc, #576]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dba:	d0d8      	beq.n	8001d6e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	4b8d      	ldr	r3, [pc, #564]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_OscConfig+0x86>
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 817a 	beq.w	80020c2 <HAL_RCC_OscConfig+0x37a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	f013 0f02 	tst.w	r3, #2
 8001dd4:	d054      	beq.n	8001e80 <HAL_RCC_OscConfig+0x138>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dd6:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f013 0f0c 	tst.w	r3, #12
 8001dde:	d03e      	beq.n	8001e5e <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de0:	4b84      	ldr	r3, [pc, #528]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d033      	beq.n	8001e54 <HAL_RCC_OscConfig+0x10c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dec:	68e3      	ldr	r3, [r4, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d067      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x17a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df2:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x2b0>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f8c4 	bl	8000f84 <HAL_GetTick>
 8001dfc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f013 0f02 	tst.w	r3, #2
 8001e06:	d153      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff f8bc 	bl	8000f84 <HAL_GetTick>
 8001e0c:	1b40      	subs	r0, r0, r5
 8001e0e:	2802      	cmp	r0, #2
 8001e10:	d9f5      	bls.n	8001dfe <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	e15a      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e16:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e7b5      	b.n	8001d8e <HAL_RCC_OscConfig+0x46>
 8001e22:	4b74      	ldr	r3, [pc, #464]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e7ab      	b.n	8001d8e <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 8001e36:	f7ff f8a5 	bl	8000f84 <HAL_GetTick>
 8001e3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e44:	d0c3      	beq.n	8001dce <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e46:	f7ff f89d 	bl	8000f84 <HAL_GetTick>
 8001e4a:	1b40      	subs	r0, r0, r5
 8001e4c:	2864      	cmp	r0, #100	; 0x64
 8001e4e:	d9f5      	bls.n	8001e3c <HAL_RCC_OscConfig+0xf4>
            return HAL_TIMEOUT;
 8001e50:	2003      	movs	r0, #3
 8001e52:	e13b      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e54:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e5c:	d1c6      	bne.n	8001dec <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f013 0f02 	tst.w	r3, #2
 8001e66:	d003      	beq.n	8001e70 <HAL_RCC_OscConfig+0x128>
 8001e68:	68e3      	ldr	r3, [r4, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	f040 812b 	bne.w	80020c6 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4a60      	ldr	r2, [pc, #384]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e78:	6921      	ldr	r1, [r4, #16]
 8001e7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e7e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	f013 0f08 	tst.w	r3, #8
 8001e86:	d040      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e88:	6963      	ldr	r3, [r4, #20]
 8001e8a:	b363      	cbz	r3, 8001ee6 <HAL_RCC_OscConfig+0x19e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_RCC_OscConfig+0x2b4>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff f877 	bl	8000f84 <HAL_GetTick>
 8001e96:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e98:	4b56      	ldr	r3, [pc, #344]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9c:	f013 0f02 	tst.w	r3, #2
 8001ea0:	d133      	bne.n	8001f0a <HAL_RCC_OscConfig+0x1c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7ff f86f 	bl	8000f84 <HAL_GetTick>
 8001ea6:	1b40      	subs	r0, r0, r5
 8001ea8:	2802      	cmp	r0, #2
 8001eaa:	d9f5      	bls.n	8001e98 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
 8001eac:	2003      	movs	r0, #3
 8001eae:	e10d      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eb8:	6921      	ldr	r1, [r4, #16]
 8001eba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e7de      	b.n	8001e80 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b4d      	ldr	r3, [pc, #308]	; (8001ff8 <HAL_RCC_OscConfig+0x2b0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f85c 	bl	8000f84 <HAL_GetTick>
 8001ecc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f013 0f02 	tst.w	r3, #2
 8001ed6:	d0d3      	beq.n	8001e80 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff f854 	bl	8000f84 <HAL_GetTick>
 8001edc:	1b40      	subs	r0, r0, r5
 8001ede:	2802      	cmp	r0, #2
 8001ee0:	d9f5      	bls.n	8001ece <HAL_RCC_OscConfig+0x186>
            return HAL_TIMEOUT;
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	e0f2      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee6:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <HAL_RCC_OscConfig+0x2b4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff f84a 	bl	8000f84 <HAL_GetTick>
 8001ef0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef2:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef6:	f013 0f02 	tst.w	r3, #2
 8001efa:	d006      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff f842 	bl	8000f84 <HAL_GetTick>
 8001f00:	1b40      	subs	r0, r0, r5
 8001f02:	2802      	cmp	r0, #2
 8001f04:	d9f5      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1aa>
        {
          return HAL_TIMEOUT;
 8001f06:	2003      	movs	r0, #3
 8001f08:	e0e0      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	f013 0f04 	tst.w	r3, #4
 8001f10:	d079      	beq.n	8002006 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f34:	2501      	movs	r5, #1
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x1f2>
    FlagStatus       pwrclkchanged = RESET;
 8001f38:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_RCC_OscConfig+0x2b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f42:	d021      	beq.n	8001f88 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	68a3      	ldr	r3, [r4, #8]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d032      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x268>
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d036      	beq.n	8001fbc <HAL_RCC_OscConfig+0x274>
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	671a      	str	r2, [r3, #112]	; 0x70
 8001f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f5a:	f022 0204 	bic.w	r2, r2, #4
 8001f5e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f60:	68a3      	ldr	r3, [r4, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d034      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x288>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff f80d 	bl	8000f84 <HAL_GetTick>
 8001f6a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	f013 0f02 	tst.w	r3, #2
 8001f74:	d146      	bne.n	8002004 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff f805 	bl	8000f84 <HAL_GetTick>
 8001f7a:	1b80      	subs	r0, r0, r6
 8001f7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f80:	4298      	cmp	r0, r3
 8001f82:	d9f3      	bls.n	8001f6c <HAL_RCC_OscConfig+0x224>
        {
          return HAL_TIMEOUT;
 8001f84:	2003      	movs	r0, #3
 8001f86:	e0a1      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x2b8>)
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f92:	f7fe fff7 	bl	8000f84 <HAL_GetTick>
 8001f96:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_OscConfig+0x2b8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fa0:	d1d0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe ffef 	bl	8000f84 <HAL_GetTick>
 8001fa6:	1b80      	subs	r0, r0, r6
 8001fa8:	2802      	cmp	r0, #2
 8001faa:	d9f5      	bls.n	8001f98 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8001fac:	2003      	movs	r0, #3
 8001fae:	e08d      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb0:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	e7d1      	b.n	8001f60 <HAL_RCC_OscConfig+0x218>
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fc0:	f042 0204 	orr.w	r2, r2, #4
 8001fc4:	671a      	str	r2, [r3, #112]	; 0x70
 8001fc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	671a      	str	r2, [r3, #112]	; 0x70
 8001fce:	e7c7      	b.n	8001f60 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7fe ffd8 	bl	8000f84 <HAL_GetTick>
 8001fd4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f013 0f02 	tst.w	r3, #2
 8001fde:	d011      	beq.n	8002004 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7fe ffd0 	bl	8000f84 <HAL_GetTick>
 8001fe4:	1b80      	subs	r0, r0, r6
 8001fe6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d9f3      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
 8001ff0:	e06c      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	42470000 	.word	0x42470000
 8001ffc:	42470e80 	.word	0x42470e80
 8002000:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002004:	b9e5      	cbnz	r5, 8002040 <HAL_RCC_OscConfig+0x2f8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002006:	69a3      	ldr	r3, [r4, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05e      	beq.n	80020ca <HAL_RCC_OscConfig+0x382>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_RCC_OscConfig+0x38c>)
 800200e:	6892      	ldr	r2, [r2, #8]
 8002010:	f002 020c 	and.w	r2, r2, #12
 8002014:	2a08      	cmp	r2, #8
 8002016:	d05b      	beq.n	80020d0 <HAL_RCC_OscConfig+0x388>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002018:	2b02      	cmp	r3, #2
 800201a:	d017      	beq.n	800204c <HAL_RCC_OscConfig+0x304>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_RCC_OscConfig+0x390>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7fe ffaf 	bl	8000f84 <HAL_GetTick>
 8002026:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x38c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002030:	d045      	beq.n	80020be <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7fe ffa7 	bl	8000f84 <HAL_GetTick>
 8002036:	1b00      	subs	r0, r0, r4
 8002038:	2802      	cmp	r0, #2
 800203a:	d9f5      	bls.n	8002028 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
 800203e:	e045      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002040:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x38c>)
 8002042:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	e7dc      	b.n	8002006 <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_OscConfig+0x390>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002052:	f7fe ff97 	bl	8000f84 <HAL_GetTick>
 8002056:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_OscConfig+0x38c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002060:	d006      	beq.n	8002070 <HAL_RCC_OscConfig+0x328>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe ff8f 	bl	8000f84 <HAL_GetTick>
 8002066:	1b40      	subs	r0, r0, r5
 8002068:	2802      	cmp	r0, #2
 800206a:	d9f5      	bls.n	8002058 <HAL_RCC_OscConfig+0x310>
            return HAL_TIMEOUT;
 800206c:	2003      	movs	r0, #3
 800206e:	e02d      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	69e3      	ldr	r3, [r4, #28]
 8002072:	6a22      	ldr	r2, [r4, #32]
 8002074:	4313      	orrs	r3, r2
 8002076:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002078:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800207c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800207e:	0852      	lsrs	r2, r2, #1
 8002080:	3a01      	subs	r2, #1
 8002082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002088:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800208c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800208e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_RCC_OscConfig+0x38c>)
 8002094:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x390>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800209c:	f7fe ff72 	bl	8000f84 <HAL_GetTick>
 80020a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_RCC_OscConfig+0x38c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe ff6a 	bl	8000f84 <HAL_GetTick>
 80020b0:	1b00      	subs	r0, r0, r4
 80020b2:	2802      	cmp	r0, #2
 80020b4:	d9f5      	bls.n	80020a2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80020b6:	2003      	movs	r0, #3
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80020ba:	2000      	movs	r0, #0
 80020bc:	e006      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
 80020be:	2000      	movs	r0, #0
 80020c0:	e004      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
        return HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
 80020c4:	e002      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
        return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
  return HAL_OK;
 80020ca:	2000      	movs	r0, #0
}
 80020cc:	b002      	add	sp, #8
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80020d0:	2001      	movs	r0, #1
 80020d2:	e7fb      	b.n	80020cc <HAL_RCC_OscConfig+0x384>
 80020d4:	40023800 	.word	0x40023800
 80020d8:	42470060 	.word	0x42470060

080020dc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80020dc:	b510      	push	{r4, lr}
 80020de:	4604      	mov	r4, r0
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80020e0:	6803      	ldr	r3, [r0, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80020e8:	d003      	beq.n	80020f2 <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020f0:	d10f      	bne.n	8002112 <HAL_RTC_AlarmIRQHandler+0x36>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80020fa:	d003      	beq.n	8002104 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002102:	d10f      	bne.n	8002124 <HAL_RTC_AlarmIRQHandler+0x48>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8002106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800210a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800210c:	2301      	movs	r3, #1
 800210e:	7763      	strb	r3, [r4, #29]
}
 8002110:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002112:	f005 fc17 	bl	8007944 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	68d3      	ldr	r3, [r2, #12]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8002120:	60d3      	str	r3, [r2, #12]
 8002122:	e7e6      	b.n	80020f2 <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002124:	4620      	mov	r0, r4
 8002126:	f000 fab8 	bl	800269a <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800212a:	6822      	ldr	r2, [r4, #0]
 800212c:	68d3      	ldr	r3, [r2, #12]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f463 7320 	orn	r3, r3, #640	; 0x280
 8002134:	60d3      	str	r3, [r2, #12]
 8002136:	e7e5      	b.n	8002104 <HAL_RTC_AlarmIRQHandler+0x28>
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800213c:	b538      	push	{r3, r4, r5, lr}
 800213e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002140:	6802      	ldr	r2, [r0, #0]
 8002142:	68d3      	ldr	r3, [r2, #12]
 8002144:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002148:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800214a:	f7fe ff1b 	bl	8000f84 <HAL_GetTick>
 800214e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f013 0f20 	tst.w	r3, #32
 8002158:	d107      	bne.n	800216a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800215a:	f7fe ff13 	bl	8000f84 <HAL_GetTick>
 800215e:	1b40      	subs	r0, r0, r5
 8002160:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002164:	d9f4      	bls.n	8002150 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002166:	2003      	movs	r0, #3
 8002168:	e000      	b.n	800216c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800216a:	2000      	movs	r0, #0
}
 800216c:	bd38      	pop	{r3, r4, r5, pc}

0800216e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800216e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002178:	d001      	beq.n	800217e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800217a:	2000      	movs	r0, #0
}
 800217c:	bd38      	pop	{r3, r4, r5, pc}
 800217e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002186:	f7fe fefd 	bl	8000f84 <HAL_GetTick>
 800218a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002194:	d107      	bne.n	80021a6 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002196:	f7fe fef5 	bl	8000f84 <HAL_GetTick>
 800219a:	1b43      	subs	r3, r0, r5
 800219c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a0:	d9f4      	bls.n	800218c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80021a2:	2003      	movs	r0, #3
 80021a4:	e7ea      	b.n	800217c <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80021a6:	2000      	movs	r0, #0
 80021a8:	e7e8      	b.n	800217c <RTC_EnterInitMode+0xe>

080021aa <HAL_RTC_Init>:
{
 80021aa:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d05c      	beq.n	800226a <HAL_RTC_Init+0xc0>
 80021b0:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80021b2:	7f43      	ldrb	r3, [r0, #29]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d041      	beq.n	800223c <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021b8:	2302      	movs	r3, #2
 80021ba:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	22ca      	movs	r2, #202	; 0xca
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	2253      	movs	r2, #83	; 0x53
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff ffd0 	bl	800216e <RTC_EnterInitMode>
 80021ce:	4605      	mov	r5, r0
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d137      	bne.n	8002244 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	6893      	ldr	r3, [r2, #8]
 80021d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80021dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021e0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021e2:	6821      	ldr	r1, [r4, #0]
 80021e4:	688a      	ldr	r2, [r1, #8]
 80021e6:	6863      	ldr	r3, [r4, #4]
 80021e8:	6920      	ldr	r0, [r4, #16]
 80021ea:	4303      	orrs	r3, r0
 80021ec:	6960      	ldr	r0, [r4, #20]
 80021ee:	4303      	orrs	r3, r0
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	68e2      	ldr	r2, [r4, #12]
 80021f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	6913      	ldr	r3, [r2, #16]
 80021fe:	68a1      	ldr	r1, [r4, #8]
 8002200:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002204:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002206:	6822      	ldr	r2, [r4, #0]
 8002208:	68d3      	ldr	r3, [r2, #12]
 800220a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800220e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f013 0f20 	tst.w	r3, #32
 8002218:	d01b      	beq.n	8002252 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800221e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002228:	69a1      	ldr	r1, [r4, #24]
 800222a:	430b      	orrs	r3, r1
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	22ff      	movs	r2, #255	; 0xff
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002234:	2301      	movs	r3, #1
 8002236:	7763      	strb	r3, [r4, #29]
}
 8002238:	4628      	mov	r0, r5
 800223a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800223c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800223e:	f005 fc29 	bl	8007a94 <HAL_RTC_MspInit>
 8002242:	e7b9      	b.n	80021b8 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800224a:	2304      	movs	r3, #4
 800224c:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800224e:	2501      	movs	r5, #1
 8002250:	e7f2      	b.n	8002238 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff ff72 	bl	800213c <HAL_RTC_WaitForSynchro>
 8002258:	2800      	cmp	r0, #0
 800225a:	d0de      	beq.n	800221a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002262:	2304      	movs	r3, #4
 8002264:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002266:	2501      	movs	r5, #1
 8002268:	e7e6      	b.n	8002238 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 800226a:	2501      	movs	r5, #1
 800226c:	e7e4      	b.n	8002238 <HAL_RTC_Init+0x8e>

0800226e <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800226e:	2300      	movs	r3, #0

  while(Value >= 10U)
 8002270:	2809      	cmp	r0, #9
 8002272:	d903      	bls.n	800227c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8002274:	3301      	adds	r3, #1
    Value -= 10U;
 8002276:	380a      	subs	r0, #10
 8002278:	b2c0      	uxtb	r0, r0
 800227a:	e7f9      	b.n	8002270 <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	b2db      	uxtb	r3, r3
}
 8002280:	4318      	orrs	r0, r3
 8002282:	4770      	bx	lr

08002284 <HAL_RTC_SetTime>:
{
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002286:	7f03      	ldrb	r3, [r0, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d078      	beq.n	800237e <HAL_RTC_SetTime+0xfa>
 800228c:	4604      	mov	r4, r0
 800228e:	460e      	mov	r6, r1
 8002290:	2301      	movs	r3, #1
 8002292:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002294:	2302      	movs	r3, #2
 8002296:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002298:	2a00      	cmp	r2, #0
 800229a:	d147      	bne.n	800232c <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800229c:	6803      	ldr	r3, [r0, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80022a4:	d101      	bne.n	80022aa <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80022aa:	7830      	ldrb	r0, [r6, #0]
 80022ac:	f7ff ffdf 	bl	800226e <RTC_ByteToBcd2>
 80022b0:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80022b2:	7870      	ldrb	r0, [r6, #1]
 80022b4:	f7ff ffdb 	bl	800226e <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80022b8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80022bc:	78b0      	ldrb	r0, [r6, #2]
 80022be:	f7ff ffd6 	bl	800226e <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80022c2:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80022c4:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80022c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	22ca      	movs	r2, #202	; 0xca
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	2253      	movs	r2, #83	; 0x53
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80022d6:	4620      	mov	r0, r4
 80022d8:	f7ff ff49 	bl	800216e <RTC_EnterInitMode>
 80022dc:	4607      	mov	r7, r0
 80022de:	2800      	cmp	r0, #0
 80022e0:	d136      	bne.n	8002350 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80022e8:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80022ec:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	6893      	ldr	r3, [r2, #8]
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022f8:	6821      	ldr	r1, [r4, #0]
 80022fa:	688b      	ldr	r3, [r1, #8]
 80022fc:	68f2      	ldr	r2, [r6, #12]
 80022fe:	6930      	ldr	r0, [r6, #16]
 8002300:	4302      	orrs	r2, r0
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002306:	6822      	ldr	r2, [r4, #0]
 8002308:	68d3      	ldr	r3, [r2, #12]
 800230a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800230e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f013 0f20 	tst.w	r3, #32
 8002318:	d023      	beq.n	8002362 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	22ff      	movs	r2, #255	; 0xff
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002320:	2301      	movs	r3, #1
 8002322:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8002324:	2300      	movs	r3, #0
 8002326:	7723      	strb	r3, [r4, #28]
}
 8002328:	4638      	mov	r0, r7
 800232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800232c:	6803      	ldr	r3, [r0, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002334:	d101      	bne.n	800233a <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800233a:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800233c:	7870      	ldrb	r0, [r6, #1]
 800233e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002340:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002344:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002346:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002348:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800234a:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800234e:	e7bc      	b.n	80022ca <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002356:	2304      	movs	r3, #4
 8002358:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800235a:	2300      	movs	r3, #0
 800235c:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800235e:	2701      	movs	r7, #1
 8002360:	e7e2      	b.n	8002328 <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff feea 	bl	800213c <HAL_RTC_WaitForSynchro>
 8002368:	2800      	cmp	r0, #0
 800236a:	d0d6      	beq.n	800231a <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002372:	2304      	movs	r3, #4
 8002374:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002376:	2300      	movs	r3, #0
 8002378:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800237a:	2701      	movs	r7, #1
 800237c:	e7d4      	b.n	8002328 <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 800237e:	2702      	movs	r7, #2
 8002380:	e7d2      	b.n	8002328 <HAL_RTC_SetTime+0xa4>

08002382 <HAL_RTC_SetDate>:
{
 8002382:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002384:	7f03      	ldrb	r3, [r0, #28]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d066      	beq.n	8002458 <HAL_RTC_SetDate+0xd6>
 800238a:	4604      	mov	r4, r0
 800238c:	460e      	mov	r6, r1
 800238e:	2301      	movs	r3, #1
 8002390:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002392:	2302      	movs	r3, #2
 8002394:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002396:	b93a      	cbnz	r2, 80023a8 <HAL_RTC_SetDate+0x26>
 8002398:	784b      	ldrb	r3, [r1, #1]
 800239a:	f013 0f10 	tst.w	r3, #16
 800239e:	d003      	beq.n	80023a8 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80023a4:	330a      	adds	r3, #10
 80023a6:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 80023a8:	2a00      	cmp	r2, #0
 80023aa:	d133      	bne.n	8002414 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023ac:	78f0      	ldrb	r0, [r6, #3]
 80023ae:	f7ff ff5e 	bl	800226e <RTC_ByteToBcd2>
 80023b2:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80023b4:	7870      	ldrb	r0, [r6, #1]
 80023b6:	f7ff ff5a 	bl	800226e <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023ba:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80023be:	78b0      	ldrb	r0, [r6, #2]
 80023c0:	f7ff ff55 	bl	800226e <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80023c4:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 80023c6:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023c8:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	22ca      	movs	r2, #202	; 0xca
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	2253      	movs	r2, #83	; 0x53
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80023d8:	4620      	mov	r0, r4
 80023da:	f7ff fec8 	bl	800216e <RTC_EnterInitMode>
 80023de:	4606      	mov	r6, r0
 80023e0:	bb18      	cbnz	r0, 800242a <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80023e8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80023ec:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	68d3      	ldr	r3, [r2, #12]
 80023f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f013 0f20 	tst.w	r3, #32
 8002400:	d01c      	beq.n	800243c <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002408:	2301      	movs	r3, #1
 800240a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800240c:	2300      	movs	r3, #0
 800240e:	7723      	strb	r3, [r4, #28]
}
 8002410:	4630      	mov	r0, r6
 8002412:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002414:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002416:	7870      	ldrb	r0, [r6, #1]
 8002418:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800241a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 800241e:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002420:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002422:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002424:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002428:	e7d0      	b.n	80023cc <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002430:	2304      	movs	r3, #4
 8002432:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002434:	2300      	movs	r3, #0
 8002436:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002438:	2601      	movs	r6, #1
 800243a:	e7e9      	b.n	8002410 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff fe7d 	bl	800213c <HAL_RTC_WaitForSynchro>
 8002442:	2800      	cmp	r0, #0
 8002444:	d0dd      	beq.n	8002402 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	22ff      	movs	r2, #255	; 0xff
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800244c:	2304      	movs	r3, #4
 800244e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002450:	2300      	movs	r3, #0
 8002452:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002454:	2601      	movs	r6, #1
 8002456:	e7db      	b.n	8002410 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 8002458:	2602      	movs	r6, #2
 800245a:	e7d9      	b.n	8002410 <HAL_RTC_SetDate+0x8e>

0800245c <HAL_RTC_SetAlarm_IT>:
{
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	b083      	sub	sp, #12
 8002460:	460d      	mov	r5, r1
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RTC_SetAlarm_IT+0x194>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4963      	ldr	r1, [pc, #396]	; (80025f4 <HAL_RTC_SetAlarm_IT+0x198>)
 8002468:	fba1 1303 	umull	r1, r3, r1, r3
 800246c:	0adb      	lsrs	r3, r3, #11
 800246e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8002478:	7f03      	ldrb	r3, [r0, #28]
 800247a:	2b01      	cmp	r3, #1
 800247c:	f000 80b5 	beq.w	80025ea <HAL_RTC_SetAlarm_IT+0x18e>
 8002480:	4604      	mov	r4, r0
 8002482:	2301      	movs	r3, #1
 8002484:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 800248a:	2a00      	cmp	r2, #0
 800248c:	d161      	bne.n	8002552 <HAL_RTC_SetAlarm_IT+0xf6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800248e:	6803      	ldr	r3, [r0, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002496:	d101      	bne.n	800249c <HAL_RTC_SetAlarm_IT+0x40>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800249c:	69ef      	ldr	r7, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800249e:	7828      	ldrb	r0, [r5, #0]
 80024a0:	f7ff fee5 	bl	800226e <RTC_ByteToBcd2>
 80024a4:	0406      	lsls	r6, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80024a6:	7868      	ldrb	r0, [r5, #1]
 80024a8:	f7ff fee1 	bl	800226e <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80024ac:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80024b0:	78a8      	ldrb	r0, [r5, #2]
 80024b2:	f7ff fedc 	bl	800226e <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80024b6:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80024b8:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80024ba:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80024be:	f895 0020 	ldrb.w	r0, [r5, #32]
 80024c2:	f7ff fed4 	bl	800226e <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80024c6:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80024ca:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 80024cc:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80024ce:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80024d0:	6868      	ldr	r0, [r5, #4]
 80024d2:	69ab      	ldr	r3, [r5, #24]
 80024d4:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	22ca      	movs	r2, #202	; 0xca
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	2253      	movs	r2, #83	; 0x53
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80024e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80024e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e8:	d04d      	beq.n	8002586 <HAL_RTC_SetAlarm_IT+0x12a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80024ea:	6822      	ldr	r2, [r4, #0]
 80024ec:	6893      	ldr	r3, [r2, #8]
 80024ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024f2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80024f4:	6822      	ldr	r2, [r4, #0]
 80024f6:	68d3      	ldr	r3, [r2, #12]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f463 7320 	orn	r3, r3, #640	; 0x280
 80024fe:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8002500:	9b01      	ldr	r3, [sp, #4]
 8002502:	1e5a      	subs	r2, r3, #1
 8002504:	9201      	str	r2, [sp, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d067      	beq.n	80025da <HAL_RTC_SetAlarm_IT+0x17e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	f012 0f02 	tst.w	r2, #2
 8002512:	d0f5      	beq.n	8002500 <HAL_RTC_SetAlarm_IT+0xa4>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002514:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	6498      	str	r0, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800251a:	6822      	ldr	r2, [r4, #0]
 800251c:	6893      	ldr	r3, [r2, #8]
 800251e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002522:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	6893      	ldr	r3, [r2, #8]
 8002528:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800252c:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RTC_SetAlarm_IT+0x19c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002536:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800253e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	22ff      	movs	r2, #255	; 0xff
 8002544:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002546:	2301      	movs	r3, #1
 8002548:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800254a:	2000      	movs	r0, #0
 800254c:	7720      	strb	r0, [r4, #28]
}
 800254e:	b003      	add	sp, #12
 8002550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002552:	6803      	ldr	r3, [r0, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f013 0f40 	tst.w	r3, #64	; 0x40
 800255a:	d101      	bne.n	8002560 <HAL_RTC_SetAlarm_IT+0x104>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8002560:	69ea      	ldr	r2, [r5, #28]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002562:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002564:	786b      	ldrb	r3, [r5, #1]
 8002566:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800256c:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800256e:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002570:	78e9      	ldrb	r1, [r5, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002572:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002576:	f895 1020 	ldrb.w	r1, [r5, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800257a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800257e:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 8002580:	696e      	ldr	r6, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002582:	431e      	orrs	r6, r3
 8002584:	e7a4      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x74>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	6893      	ldr	r3, [r2, #8]
 800258a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800258e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002590:	6822      	ldr	r2, [r4, #0]
 8002592:	68d3      	ldr	r3, [r2, #12]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f463 73c0 	orn	r3, r3, #384	; 0x180
 800259a:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 800259c:	9b01      	ldr	r3, [sp, #4]
 800259e:	1e5a      	subs	r2, r3, #1
 80025a0:	9201      	str	r2, [sp, #4]
 80025a2:	b193      	cbz	r3, 80025ca <HAL_RTC_SetAlarm_IT+0x16e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	68d9      	ldr	r1, [r3, #12]
 80025a8:	f011 0f01 	tst.w	r1, #1
 80025ac:	d0f6      	beq.n	800259c <HAL_RTC_SetAlarm_IT+0x140>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80025ae:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	6458      	str	r0, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80025b4:	6822      	ldr	r2, [r4, #0]
 80025b6:	6893      	ldr	r3, [r2, #8]
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	6893      	ldr	r3, [r2, #8]
 80025c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c6:	6093      	str	r3, [r2, #8]
 80025c8:	e7b1      	b.n	800252e <HAL_RTC_SetAlarm_IT+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025d0:	2003      	movs	r0, #3
 80025d2:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80025d4:	2300      	movs	r3, #0
 80025d6:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 80025d8:	e7b9      	b.n	800254e <HAL_RTC_SetAlarm_IT+0xf2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	22ff      	movs	r2, #255	; 0xff
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025e0:	2003      	movs	r0, #3
 80025e2:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80025e4:	2300      	movs	r3, #0
 80025e6:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 80025e8:	e7b1      	b.n	800254e <HAL_RTC_SetAlarm_IT+0xf2>
  __HAL_LOCK(hrtc);
 80025ea:	2002      	movs	r0, #2
 80025ec:	e7af      	b.n	800254e <HAL_RTC_SetAlarm_IT+0xf2>
 80025ee:	bf00      	nop
 80025f0:	2000048c 	.word	0x2000048c
 80025f4:	10624dd3 	.word	0x10624dd3
 80025f8:	40013c00 	.word	0x40013c00

080025fc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80025fc:	0903      	lsrs	r3, r0, #4
 80025fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002602:	f000 000f 	and.w	r0, r0, #15
 8002606:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800260a:	b2c0      	uxtb	r0, r0
 800260c:	4770      	bx	lr

0800260e <HAL_RTC_GetTime>:
{
 800260e:	b570      	push	{r4, r5, r6, lr}
 8002610:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002612:	6803      	ldr	r3, [r0, #0]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002618:	6803      	ldr	r3, [r0, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002620:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002622:	6803      	ldr	r3, [r0, #0]
 8002624:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002626:	f3c5 4106 	ubfx	r1, r5, #16, #7
 800262a:	f3c5 4005 	ubfx	r0, r5, #16, #6
 800262e:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002630:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8002634:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002636:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 800263a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800263c:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8002640:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8002642:	b952      	cbnz	r2, 800265a <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002644:	f7ff ffda 	bl	80025fc <RTC_Bcd2ToByte>
 8002648:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800264a:	4630      	mov	r0, r6
 800264c:	f7ff ffd6 	bl	80025fc <RTC_Bcd2ToByte>
 8002650:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002652:	4628      	mov	r0, r5
 8002654:	f7ff ffd2 	bl	80025fc <RTC_Bcd2ToByte>
 8002658:	70a0      	strb	r0, [r4, #2]
}
 800265a:	2000      	movs	r0, #0
 800265c:	bd70      	pop	{r4, r5, r6, pc}

0800265e <HAL_RTC_GetDate>:
{
 800265e:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002660:	6803      	ldr	r3, [r0, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002664:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8002668:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800266a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800266e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002670:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002674:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002676:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800267a:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800267c:	b95a      	cbnz	r2, 8002696 <HAL_RTC_GetDate+0x38>
 800267e:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002680:	f7ff ffbc 	bl	80025fc <RTC_Bcd2ToByte>
 8002684:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002686:	4630      	mov	r0, r6
 8002688:	f7ff ffb8 	bl	80025fc <RTC_Bcd2ToByte>
 800268c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800268e:	4628      	mov	r0, r5
 8002690:	f7ff ffb4 	bl	80025fc <RTC_Bcd2ToByte>
 8002694:	70a0      	strb	r0, [r4, #2]
}
 8002696:	2000      	movs	r0, #0
 8002698:	bd70      	pop	{r4, r5, r6, pc}

0800269a <HAL_RTCEx_AlarmBEventCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800269a:	4770      	bx	lr

0800269c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a0:	4606      	mov	r6, r0
 80026a2:	4688      	mov	r8, r1
 80026a4:	4617      	mov	r7, r2
 80026a6:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026a8:	6834      	ldr	r4, [r6, #0]
 80026aa:	68a4      	ldr	r4, [r4, #8]
 80026ac:	ea38 0304 	bics.w	r3, r8, r4
 80026b0:	bf0c      	ite	eq
 80026b2:	2401      	moveq	r4, #1
 80026b4:	2400      	movne	r4, #0
 80026b6:	42bc      	cmp	r4, r7
 80026b8:	d037      	beq.n	800272a <SPI_WaitFlagStateUntilTimeout+0x8e>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	f1b5 3fff 	cmp.w	r5, #4294967295
 80026be:	d0f3      	beq.n	80026a8 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80026c0:	f7fe fc60 	bl	8000f84 <HAL_GetTick>
 80026c4:	9b06      	ldr	r3, [sp, #24]
 80026c6:	1ac0      	subs	r0, r0, r3
 80026c8:	42a8      	cmp	r0, r5
 80026ca:	d201      	bcs.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0x34>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d1eb      	bne.n	80026a8 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026d0:	6832      	ldr	r2, [r6, #0]
 80026d2:	6853      	ldr	r3, [r2, #4]
 80026d4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80026d8:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026da:	6873      	ldr	r3, [r6, #4]
 80026dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026e0:	d00b      	beq.n	80026fa <SPI_WaitFlagStateUntilTimeout+0x5e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80026e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e8:	d014      	beq.n	8002714 <SPI_WaitFlagStateUntilTimeout+0x78>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026f0:	2300      	movs	r3, #0
 80026f2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

        return HAL_TIMEOUT;
 80026f6:	2003      	movs	r0, #3
 80026f8:	e018      	b.n	800272c <SPI_WaitFlagStateUntilTimeout+0x90>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026fa:	68b3      	ldr	r3, [r6, #8]
 80026fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002700:	d002      	beq.n	8002708 <SPI_WaitFlagStateUntilTimeout+0x6c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d1ec      	bne.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0x46>
          __HAL_SPI_DISABLE(hspi);
 8002708:	6832      	ldr	r2, [r6, #0]
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e7e6      	b.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0x46>
          SPI_RESET_CRC(hspi);
 8002714:	6832      	ldr	r2, [r6, #0]
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	6832      	ldr	r2, [r6, #0]
 8002720:	6813      	ldr	r3, [r2, #0]
 8002722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e7df      	b.n	80026ea <SPI_WaitFlagStateUntilTimeout+0x4e>
      }
    }
  }

  return HAL_OK;
 800272a:	2000      	movs	r0, #0
}
 800272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b530      	push	{r4, r5, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <SPI_EndRxTxTransaction+0x60>)
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <SPI_EndRxTxTransaction+0x64>)
 800273c:	fba3 3000 	umull	r3, r0, r3, r0
 8002740:	0d40      	lsrs	r0, r0, #21
 8002742:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002746:	fb05 f000 	mul.w	r0, r5, r0
 800274a:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274c:	6863      	ldr	r3, [r4, #4]
 800274e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002752:	d00b      	beq.n	800276c <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002754:	9b03      	ldr	r3, [sp, #12]
 8002756:	b1bb      	cbz	r3, 8002788 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8002758:	9b03      	ldr	r3, [sp, #12]
 800275a:	3b01      	subs	r3, #1
 800275c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002766:	d1f5      	bne.n	8002754 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8002768:	2000      	movs	r0, #0
 800276a:	e00e      	b.n	800278a <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	460b      	mov	r3, r1
 8002770:	2200      	movs	r2, #0
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff ff91 	bl	800269c <SPI_WaitFlagStateUntilTimeout>
 800277a:	b130      	cbz	r0, 800278a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800277e:	f043 0320 	orr.w	r3, r3, #32
 8002782:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002784:	2003      	movs	r0, #3
 8002786:	e000      	b.n	800278a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8002788:	2000      	movs	r0, #0
}
 800278a:	b005      	add	sp, #20
 800278c:	bd30      	pop	{r4, r5, pc}
 800278e:	bf00      	nop
 8002790:	2000048c 	.word	0x2000048c
 8002794:	165e9f81 	.word	0x165e9f81

08002798 <SPI_EndRxTransaction>:
{
 8002798:	b510      	push	{r4, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	4604      	mov	r4, r0
 800279e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a0:	6841      	ldr	r1, [r0, #4]
 80027a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80027a6:	d014      	beq.n	80027d2 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027a8:	6861      	ldr	r1, [r4, #4]
 80027aa:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80027ae:	d12a      	bne.n	8002806 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80027b0:	68a1      	ldr	r1, [r4, #8]
 80027b2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80027b6:	d019      	beq.n	80027ec <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027b8:	9200      	str	r2, [sp, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff ff6c 	bl	800269c <SPI_WaitFlagStateUntilTimeout>
 80027c4:	b330      	cbz	r0, 8002814 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80027ce:	2003      	movs	r0, #3
 80027d0:	e020      	b.n	8002814 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d2:	6881      	ldr	r1, [r0, #8]
 80027d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80027d8:	d002      	beq.n	80027e0 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027da:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80027de:	d1e3      	bne.n	80027a8 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	6801      	ldr	r1, [r0, #0]
 80027e4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80027e8:	6001      	str	r1, [r0, #0]
 80027ea:	e7dd      	b.n	80027a8 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027ec:	9200      	str	r2, [sp, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2101      	movs	r1, #1
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff ff52 	bl	800269c <SPI_WaitFlagStateUntilTimeout>
 80027f8:	b160      	cbz	r0, 8002814 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027fc:	f043 0320 	orr.w	r3, r3, #32
 8002800:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002802:	2003      	movs	r0, #3
 8002804:	e006      	b.n	8002814 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002806:	9200      	str	r2, [sp, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	2101      	movs	r1, #1
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff ff45 	bl	800269c <SPI_WaitFlagStateUntilTimeout>
 8002812:	b908      	cbnz	r0, 8002818 <SPI_EndRxTransaction+0x80>
}
 8002814:	b002      	add	sp, #8
 8002816:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002818:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800281a:	f043 0320 	orr.w	r3, r3, #32
 800281e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002820:	2003      	movs	r0, #3
 8002822:	e7f7      	b.n	8002814 <SPI_EndRxTransaction+0x7c>

08002824 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002824:	2800      	cmp	r0, #0
 8002826:	d03b      	beq.n	80028a0 <HAL_SPI_Init+0x7c>
{
 8002828:	b510      	push	{r4, lr}
 800282a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002830:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02e      	beq.n	8002896 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	6813      	ldr	r3, [r2, #0]
 8002842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002846:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002848:	6863      	ldr	r3, [r4, #4]
 800284a:	68a2      	ldr	r2, [r4, #8]
 800284c:	4313      	orrs	r3, r2
 800284e:	68e2      	ldr	r2, [r4, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	6922      	ldr	r2, [r4, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	6962      	ldr	r2, [r4, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	69a2      	ldr	r2, [r4, #24]
 800285c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002860:	4313      	orrs	r3, r2
 8002862:	69e2      	ldr	r2, [r4, #28]
 8002864:	4313      	orrs	r3, r2
 8002866:	6a22      	ldr	r2, [r4, #32]
 8002868:	4313      	orrs	r3, r2
 800286a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	430b      	orrs	r3, r1
 8002870:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002872:	8b63      	ldrh	r3, [r4, #26]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800287a:	6822      	ldr	r2, [r4, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	69d3      	ldr	r3, [r2, #28]
 8002884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002888:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800288a:	2000      	movs	r0, #0
 800288c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800288e:	2301      	movs	r3, #1
 8002890:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002894:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002896:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800289a:	f005 f911 	bl	8007ac0 <HAL_SPI_MspInit>
 800289e:	e7cb      	b.n	8002838 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
}
 80028a2:	4770      	bx	lr

080028a4 <HAL_SPI_Transmit>:
{
 80028a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028a8:	b083      	sub	sp, #12
 80028aa:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80028ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	f000 80c7 	beq.w	8002a44 <HAL_SPI_Transmit+0x1a0>
 80028b6:	4604      	mov	r4, r0
 80028b8:	4688      	mov	r8, r1
 80028ba:	4691      	mov	r9, r2
 80028bc:	2301      	movs	r3, #1
 80028be:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80028c2:	f7fe fb5f 	bl	8000f84 <HAL_GetTick>
 80028c6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80028c8:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80028cc:	b2f6      	uxtb	r6, r6
 80028ce:	2e01      	cmp	r6, #1
 80028d0:	f040 80a5 	bne.w	8002a1e <HAL_SPI_Transmit+0x17a>
  if ((pData == NULL) || (Size == 0U))
 80028d4:	f1b8 0f00 	cmp.w	r8, #0
 80028d8:	f000 80a2 	beq.w	8002a20 <HAL_SPI_Transmit+0x17c>
 80028dc:	f1b9 0f00 	cmp.w	r9, #0
 80028e0:	f000 809e 	beq.w	8002a20 <HAL_SPI_Transmit+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028e4:	2303      	movs	r3, #3
 80028e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028ee:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028f2:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028f6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028fa:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028fc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002900:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002902:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002904:	68a3      	ldr	r3, [r4, #8]
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290a:	d01e      	beq.n	800294a <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002914:	d103      	bne.n	800291e <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002924:	d017      	beq.n	8002956 <HAL_SPI_Transmit+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002926:	6863      	ldr	r3, [r4, #4]
 8002928:	b113      	cbz	r3, 8002930 <HAL_SPI_Transmit+0x8c>
 800292a:	f1b9 0f01 	cmp.w	r9, #1
 800292e:	d14d      	bne.n	80029cc <HAL_SPI_Transmit+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002930:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	7812      	ldrb	r2, [r2, #0]
 8002936:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002938:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800293a:	3301      	adds	r3, #1
 800293c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800293e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29b      	uxth	r3, r3
 8002946:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002948:	e040      	b.n	80029cc <HAL_SPI_Transmit+0x128>
    SPI_1LINE_TX(hspi);
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	e7da      	b.n	800290c <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002956:	6863      	ldr	r3, [r4, #4]
 8002958:	b113      	cbz	r3, 8002960 <HAL_SPI_Transmit+0xbc>
 800295a:	f1b9 0f01 	cmp.w	r9, #1
 800295e:	d116      	bne.n	800298e <HAL_SPI_Transmit+0xea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002960:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	8812      	ldrh	r2, [r2, #0]
 8002966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800296a:	3302      	adds	r3, #2
 800296c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800296e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29b      	uxth	r3, r3
 8002976:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002978:	e009      	b.n	800298e <HAL_SPI_Transmit+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800297a:	f7fe fb03 	bl	8000f84 <HAL_GetTick>
 800297e:	1bc0      	subs	r0, r0, r7
 8002980:	42a8      	cmp	r0, r5
 8002982:	d302      	bcc.n	800298a <HAL_SPI_Transmit+0xe6>
 8002984:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002988:	d154      	bne.n	8002a34 <HAL_SPI_Transmit+0x190>
 800298a:	2d00      	cmp	r5, #0
 800298c:	d054      	beq.n	8002a38 <HAL_SPI_Transmit+0x194>
    while (hspi->TxXferCount > 0U)
 800298e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02e      	beq.n	80029f4 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	f012 0f02 	tst.w	r2, #2
 800299e:	d0ec      	beq.n	800297a <HAL_SPI_Transmit+0xd6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029a2:	8812      	ldrh	r2, [r2, #0]
 80029a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029a8:	3302      	adds	r3, #2
 80029aa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80029ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80029b6:	e7ea      	b.n	800298e <HAL_SPI_Transmit+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b8:	f7fe fae4 	bl	8000f84 <HAL_GetTick>
 80029bc:	1bc0      	subs	r0, r0, r7
 80029be:	42a8      	cmp	r0, r5
 80029c0:	d302      	bcc.n	80029c8 <HAL_SPI_Transmit+0x124>
 80029c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80029c6:	d139      	bne.n	8002a3c <HAL_SPI_Transmit+0x198>
 80029c8:	2d00      	cmp	r5, #0
 80029ca:	d039      	beq.n	8002a40 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0U)
 80029cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b183      	cbz	r3, 80029f4 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	f012 0f02 	tst.w	r2, #2
 80029da:	d0ed      	beq.n	80029b8 <HAL_SPI_Transmit+0x114>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029e4:	3301      	adds	r3, #1
 80029e6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80029e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80029ea:	b292      	uxth	r2, r2
 80029ec:	3a01      	subs	r2, #1
 80029ee:	b292      	uxth	r2, r2
 80029f0:	86e2      	strh	r2, [r4, #54]	; 0x36
 80029f2:	e7eb      	b.n	80029cc <HAL_SPI_Transmit+0x128>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029f4:	463a      	mov	r2, r7
 80029f6:	4629      	mov	r1, r5
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7ff fe99 	bl	8002730 <SPI_EndRxTxTransaction>
 80029fe:	b108      	cbz	r0, 8002a04 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a00:	2320      	movs	r3, #32
 8002a02:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a04:	68a3      	ldr	r3, [r4, #8]
 8002a06:	b933      	cbnz	r3, 8002a16 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	9201      	str	r2, [sp, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a18:	b913      	cbnz	r3, 8002a20 <HAL_SPI_Transmit+0x17c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a1a:	2600      	movs	r6, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_SPI_Transmit+0x17c>
    errorcode = HAL_BUSY;
 8002a1e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a26:	2300      	movs	r3, #0
 8002a28:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	b003      	add	sp, #12
 8002a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8002a34:	2603      	movs	r6, #3
 8002a36:	e7f3      	b.n	8002a20 <HAL_SPI_Transmit+0x17c>
 8002a38:	2603      	movs	r6, #3
 8002a3a:	e7f1      	b.n	8002a20 <HAL_SPI_Transmit+0x17c>
          errorcode = HAL_TIMEOUT;
 8002a3c:	2603      	movs	r6, #3
 8002a3e:	e7ef      	b.n	8002a20 <HAL_SPI_Transmit+0x17c>
 8002a40:	2603      	movs	r6, #3
 8002a42:	e7ed      	b.n	8002a20 <HAL_SPI_Transmit+0x17c>
  __HAL_LOCK(hspi);
 8002a44:	2602      	movs	r6, #2
 8002a46:	e7f1      	b.n	8002a2c <HAL_SPI_Transmit+0x188>

08002a48 <HAL_SPI_TransmitReceive>:
{
 8002a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	461f      	mov	r7, r3
 8002a50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002a52:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f000 8110 	beq.w	8002c7c <HAL_SPI_TransmitReceive+0x234>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	4688      	mov	r8, r1
 8002a60:	4691      	mov	r9, r2
 8002a62:	2301      	movs	r3, #1
 8002a64:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002a68:	f7fe fa8c 	bl	8000f84 <HAL_GetTick>
 8002a6c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002a6e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002a72:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002a74:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d00a      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x48>
 8002a7a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002a7e:	f040 80e3 	bne.w	8002c48 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a82:	68a2      	ldr	r2, [r4, #8]
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	f040 80e9 	bne.w	8002c5c <HAL_SPI_TransmitReceive+0x214>
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	f040 80e8 	bne.w	8002c60 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a90:	f1b8 0f00 	cmp.w	r8, #0
 8002a94:	f000 80e6 	beq.w	8002c64 <HAL_SPI_TransmitReceive+0x21c>
 8002a98:	f1b9 0f00 	cmp.w	r9, #0
 8002a9c:	f000 80e4 	beq.w	8002c68 <HAL_SPI_TransmitReceive+0x220>
 8002aa0:	2f00      	cmp	r7, #0
 8002aa2:	f000 80e3 	beq.w	8002c6c <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aa6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ab0:	2305      	movs	r3, #5
 8002ab2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aba:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002abe:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ac0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ac2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ac6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ac8:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8002aca:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002acc:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002ad6:	d103      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ade:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ae0:	68e3      	ldr	r3, [r4, #12]
 8002ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae6:	d011      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae8:	6863      	ldr	r3, [r4, #4]
 8002aea:	b10b      	cbz	r3, 8002af0 <HAL_SPI_TransmitReceive+0xa8>
 8002aec:	2f01      	cmp	r7, #1
 8002aee:	d10b      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002af0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002afa:	3301      	adds	r3, #1
 8002afc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002afe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002b08:	2701      	movs	r7, #1
 8002b0a:	e06b      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0c:	6863      	ldr	r3, [r4, #4]
 8002b0e:	b10b      	cbz	r3, 8002b14 <HAL_SPI_TransmitReceive+0xcc>
 8002b10:	2f01      	cmp	r7, #1
 8002b12:	d10b      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	8812      	ldrh	r2, [r2, #0]
 8002b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b1e:	3302      	adds	r3, #2
 8002b20:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002b22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002b2c:	2701      	movs	r7, #1
 8002b2e:	e01c      	b.n	8002b6a <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	f012 0f01 	tst.w	r2, #1
 8002b38:	d00e      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x110>
 8002b3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	b15a      	cbz	r2, 8002b58 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b48:	3302      	adds	r3, #2
 8002b4a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002b4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002b56:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b58:	f7fe fa14 	bl	8000f84 <HAL_GetTick>
 8002b5c:	1b80      	subs	r0, r0, r6
 8002b5e:	42a8      	cmp	r0, r5
 8002b60:	d303      	bcc.n	8002b6a <HAL_SPI_TransmitReceive+0x122>
 8002b62:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b66:	f040 8083 	bne.w	8002c70 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b91b      	cbnz	r3, 8002b78 <HAL_SPI_TransmitReceive+0x130>
 8002b70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d053      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	f012 0f02 	tst.w	r2, #2
 8002b80:	d0d6      	beq.n	8002b30 <HAL_SPI_TransmitReceive+0xe8>
 8002b82:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002b84:	b292      	uxth	r2, r2
 8002b86:	2a00      	cmp	r2, #0
 8002b88:	d0d2      	beq.n	8002b30 <HAL_SPI_TransmitReceive+0xe8>
 8002b8a:	2f00      	cmp	r7, #0
 8002b8c:	d0d0      	beq.n	8002b30 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b90:	8812      	ldrh	r2, [r2, #0]
 8002b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b96:	3302      	adds	r3, #2
 8002b98:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002ba4:	2700      	movs	r7, #0
 8002ba6:	e7c3      	b.n	8002b30 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	f012 0f01 	tst.w	r2, #1
 8002bb0:	d00e      	beq.n	8002bd0 <HAL_SPI_TransmitReceive+0x188>
 8002bb2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	b15a      	cbz	r2, 8002bd0 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002bc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002bce:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bd0:	f7fe f9d8 	bl	8000f84 <HAL_GetTick>
 8002bd4:	1b83      	subs	r3, r0, r6
 8002bd6:	42ab      	cmp	r3, r5
 8002bd8:	d302      	bcc.n	8002be0 <HAL_SPI_TransmitReceive+0x198>
 8002bda:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002bde:	d149      	bne.n	8002c74 <HAL_SPI_TransmitReceive+0x22c>
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	d049      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	b913      	cbnz	r3, 8002bf0 <HAL_SPI_TransmitReceive+0x1a8>
 8002bea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b1bb      	cbz	r3, 8002c20 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f012 0f02 	tst.w	r2, #2
 8002bf8:	d0d6      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x160>
 8002bfa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002bfc:	b292      	uxth	r2, r2
 8002bfe:	2a00      	cmp	r2, #0
 8002c00:	d0d2      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x160>
 8002c02:	2f00      	cmp	r7, #0
 8002c04:	d0d0      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002c0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c0e:	3301      	adds	r3, #1
 8002c10:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002c12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002c1c:	2700      	movs	r7, #0
 8002c1e:	e7c3      	b.n	8002ba8 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c20:	4632      	mov	r2, r6
 8002c22:	4629      	mov	r1, r5
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff fd83 	bl	8002730 <SPI_EndRxTxTransaction>
 8002c2a:	b948      	cbnz	r0, 8002c40 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c2c:	68a3      	ldr	r3, [r4, #8]
 8002c2e:	b963      	cbnz	r3, 8002c4a <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	9201      	str	r2, [sp, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	9b01      	ldr	r3, [sp, #4]
 8002c3e:	e004      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c40:	2320      	movs	r3, #32
 8002c42:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002c44:	2001      	movs	r0, #1
    goto error;
 8002c46:	e000      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8002c48:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c50:	2300      	movs	r3, #0
 8002c52:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002c56:	b003      	add	sp, #12
 8002c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	e7f4      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
 8002c60:	2002      	movs	r0, #2
 8002c62:	e7f2      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
 8002c66:	e7f0      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
 8002c68:	2001      	movs	r0, #1
 8002c6a:	e7ee      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	e7ec      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002c70:	2003      	movs	r0, #3
 8002c72:	e7ea      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002c74:	2003      	movs	r0, #3
 8002c76:	e7e8      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
 8002c78:	2003      	movs	r0, #3
 8002c7a:	e7e6      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	e7ea      	b.n	8002c56 <HAL_SPI_TransmitReceive+0x20e>

08002c80 <HAL_SPI_Receive>:
{
 8002c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c84:	b083      	sub	sp, #12
 8002c86:	4604      	mov	r4, r0
 8002c88:	4688      	mov	r8, r1
 8002c8a:	4691      	mov	r9, r2
 8002c8c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c8e:	6843      	ldr	r3, [r0, #4]
 8002c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c94:	d036      	beq.n	8002d04 <HAL_SPI_Receive+0x84>
  __HAL_LOCK(hspi);
 8002c96:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f000 80a1 	beq.w	8002de2 <HAL_SPI_Receive+0x162>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002ca6:	f7fe f96d 	bl	8000f84 <HAL_GetTick>
 8002caa:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002cac:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8002cb0:	b2f6      	uxtb	r6, r6
 8002cb2:	2e01      	cmp	r6, #1
 8002cb4:	f040 8082 	bne.w	8002dbc <HAL_SPI_Receive+0x13c>
  if ((pData == NULL) || (Size == 0U))
 8002cb8:	f1b8 0f00 	cmp.w	r8, #0
 8002cbc:	d07f      	beq.n	8002dbe <HAL_SPI_Receive+0x13e>
 8002cbe:	f1b9 0f00 	cmp.w	r9, #0
 8002cc2:	d07c      	beq.n	8002dbe <HAL_SPI_Receive+0x13e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cce:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002cd2:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002cd6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cda:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002cdc:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002cde:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ce0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ce2:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce4:	68a3      	ldr	r3, [r4, #8]
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cea:	d018      	beq.n	8002d1e <HAL_SPI_Receive+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002cf4:	d103      	bne.n	8002cfe <HAL_SPI_Receive+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cfe:	68e3      	ldr	r3, [r4, #12]
 8002d00:	b1eb      	cbz	r3, 8002d3e <HAL_SPI_Receive+0xbe>
 8002d02:	e03b      	b.n	8002d7c <HAL_SPI_Receive+0xfc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d04:	6883      	ldr	r3, [r0, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1c5      	bne.n	8002c96 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d10:	9500      	str	r5, [sp, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	460a      	mov	r2, r1
 8002d16:	f7ff fe97 	bl	8002a48 <HAL_SPI_TransmitReceive>
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	e055      	b.n	8002dca <HAL_SPI_Receive+0x14a>
    SPI_1LINE_RX(hspi);
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	6813      	ldr	r3, [r2, #0]
 8002d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e7e0      	b.n	8002cec <HAL_SPI_Receive+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2a:	f7fe f92b 	bl	8000f84 <HAL_GetTick>
 8002d2e:	1bc0      	subs	r0, r0, r7
 8002d30:	42a8      	cmp	r0, r5
 8002d32:	d302      	bcc.n	8002d3a <HAL_SPI_Receive+0xba>
 8002d34:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d38:	d14b      	bne.n	8002dd2 <HAL_SPI_Receive+0x152>
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	d04b      	beq.n	8002dd6 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8002d3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02e      	beq.n	8002da4 <HAL_SPI_Receive+0x124>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	f012 0f01 	tst.w	r2, #1
 8002d4e:	d0ec      	beq.n	8002d2a <HAL_SPI_Receive+0xaa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d52:	7b1b      	ldrb	r3, [r3, #12]
 8002d54:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d58:	3301      	adds	r3, #1
 8002d5a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002d5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002d66:	e7ea      	b.n	8002d3e <HAL_SPI_Receive+0xbe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d68:	f7fe f90c 	bl	8000f84 <HAL_GetTick>
 8002d6c:	1bc0      	subs	r0, r0, r7
 8002d6e:	42a8      	cmp	r0, r5
 8002d70:	d302      	bcc.n	8002d78 <HAL_SPI_Receive+0xf8>
 8002d72:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d76:	d130      	bne.n	8002dda <HAL_SPI_Receive+0x15a>
 8002d78:	2d00      	cmp	r5, #0
 8002d7a:	d030      	beq.n	8002dde <HAL_SPI_Receive+0x15e>
    while (hspi->RxXferCount > 0U)
 8002d7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b183      	cbz	r3, 8002da4 <HAL_SPI_Receive+0x124>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	f012 0f01 	tst.w	r2, #1
 8002d8a:	d0ed      	beq.n	8002d68 <HAL_SPI_Receive+0xe8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d94:	3302      	adds	r3, #2
 8002d96:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002d98:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8002da2:	e7eb      	b.n	8002d7c <HAL_SPI_Receive+0xfc>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002da4:	463a      	mov	r2, r7
 8002da6:	4629      	mov	r1, r5
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7ff fcf5 	bl	8002798 <SPI_EndRxTransaction>
 8002dae:	b108      	cbz	r0, 8002db4 <HAL_SPI_Receive+0x134>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002db0:	2320      	movs	r3, #32
 8002db2:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002db6:	b913      	cbnz	r3, 8002dbe <HAL_SPI_Receive+0x13e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002db8:	2600      	movs	r6, #0
 8002dba:	e000      	b.n	8002dbe <HAL_SPI_Receive+0x13e>
    errorcode = HAL_BUSY;
 8002dbc:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002dca:	4630      	mov	r0, r6
 8002dcc:	b003      	add	sp, #12
 8002dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8002dd2:	2603      	movs	r6, #3
 8002dd4:	e7f3      	b.n	8002dbe <HAL_SPI_Receive+0x13e>
 8002dd6:	2603      	movs	r6, #3
 8002dd8:	e7f1      	b.n	8002dbe <HAL_SPI_Receive+0x13e>
          errorcode = HAL_TIMEOUT;
 8002dda:	2603      	movs	r6, #3
 8002ddc:	e7ef      	b.n	8002dbe <HAL_SPI_Receive+0x13e>
 8002dde:	2603      	movs	r6, #3
 8002de0:	e7ed      	b.n	8002dbe <HAL_SPI_Receive+0x13e>
  __HAL_LOCK(hspi);
 8002de2:	2602      	movs	r6, #2
 8002de4:	e7f1      	b.n	8002dca <HAL_SPI_Receive+0x14a>

08002de6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002de6:	6802      	ldr	r2, [r0, #0]
 8002de8:	68d3      	ldr	r3, [r2, #12]
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df0:	6802      	ldr	r2, [r0, #0]
 8002df2:	6893      	ldr	r3, [r2, #8]
 8002df4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d003      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002e04:	2000      	movs	r0, #0
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIM_IRQHandler>:
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	f012 0f02 	tst.w	r2, #2
 8002e1c:	d011      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	f012 0f02 	tst.w	r2, #2
 8002e24:	d00d      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e26:	f06f 0202 	mvn.w	r2, #2
 8002e2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	6803      	ldr	r3, [r0, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f013 0f03 	tst.w	r3, #3
 8002e38:	d070      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	f7ff ffe6 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	f012 0f04 	tst.w	r2, #4
 8002e4a:	d012      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	f012 0f04 	tst.w	r2, #4
 8002e52:	d00e      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e54:	f06f 0204 	mvn.w	r2, #4
 8002e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002e66:	d05f      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff ffce 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	f012 0f08 	tst.w	r2, #8
 8002e7a:	d012      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	f012 0f08 	tst.w	r2, #8
 8002e82:	d00e      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e84:	f06f 0208 	mvn.w	r2, #8
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f013 0f03 	tst.w	r3, #3
 8002e96:	d04e      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7ff ffb6 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	f012 0f10 	tst.w	r2, #16
 8002eaa:	d012      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	f012 0f10 	tst.w	r2, #16
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb4:	f06f 0210 	mvn.w	r2, #16
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ec6:	d03d      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7ff ff9e 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	f012 0f01 	tst.w	r2, #1
 8002eda:	d003      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	f012 0f01 	tst.w	r2, #1
 8002ee2:	d136      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ef4:	d134      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002efe:	d003      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f06:	d132      	bne.n	8002f6e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	f012 0f20 	tst.w	r2, #32
 8002f10:	d003      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	f012 0f20 	tst.w	r2, #32
 8002f18:	d130      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x16c>
}
 8002f1a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1c:	f7ff ff74 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7ff ff73 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002f26:	e78a      	b.n	8002e3e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7ff ff6d 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff ff6c 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002f34:	e79b      	b.n	8002e6e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ff66 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f7ff ff65 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002f42:	e7ac      	b.n	8002e9e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff ff5f 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7ff ff5e 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002f50:	e7bd      	b.n	8002ece <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f52:	f06f 0201 	mvn.w	r2, #1
 8002f56:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f004 fcbd 	bl	80078d8 <HAL_TIM_PeriodElapsedCallback>
 8002f5e:	e7c1      	b.n	8002ee4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f66:	4620      	mov	r0, r4
 8002f68:	f000 f8d3 	bl	8003112 <HAL_TIMEx_BreakCallback>
 8002f6c:	e7c3      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f72:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff ff4a 	bl	8002e0e <HAL_TIM_TriggerCallback>
 8002f7a:	e7c5      	b.n	8002f08 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f7c:	f06f 0220 	mvn.w	r2, #32
 8002f80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002f82:	4620      	mov	r0, r4
 8002f84:	f000 f8c4 	bl	8003110 <HAL_TIMEx_CommutCallback>
}
 8002f88:	e7c7      	b.n	8002f1a <HAL_TIM_IRQHandler+0x10a>
	...

08002f8c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f8e:	4a30      	ldr	r2, [pc, #192]	; (8003050 <TIM_Base_SetConfig+0xc4>)
 8002f90:	4290      	cmp	r0, r2
 8002f92:	d012      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002f94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002f9a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f9e:	4290      	cmp	r0, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa6:	4290      	cmp	r0, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fae:	4290      	cmp	r0, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x2e>
 8002fb2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fb6:	4290      	cmp	r0, r2
 8002fb8:	d103      	bne.n	8002fc2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fbe:	684a      	ldr	r2, [r1, #4]
 8002fc0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc2:	4a23      	ldr	r2, [pc, #140]	; (8003050 <TIM_Base_SetConfig+0xc4>)
 8002fc4:	4290      	cmp	r0, r2
 8002fc6:	d02a      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002fc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fcc:	d027      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002fce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002fd2:	4290      	cmp	r0, r2
 8002fd4:	d023      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fda:	4290      	cmp	r0, r2
 8002fdc:	d01f      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fe2:	4290      	cmp	r0, r2
 8002fe4:	d01b      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002fe6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fea:	4290      	cmp	r0, r2
 8002fec:	d017      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002fee:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002ff2:	4290      	cmp	r0, r2
 8002ff4:	d013      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ffa:	4290      	cmp	r0, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8002ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003002:	4290      	cmp	r0, r2
 8003004:	d00b      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8003006:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800300a:	4290      	cmp	r0, r2
 800300c:	d007      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 800300e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003012:	4290      	cmp	r0, r2
 8003014:	d003      	beq.n	800301e <TIM_Base_SetConfig+0x92>
 8003016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800301a:	4290      	cmp	r0, r2
 800301c:	d103      	bne.n	8003026 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	68ca      	ldr	r2, [r1, #12]
 8003024:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302a:	694a      	ldr	r2, [r1, #20]
 800302c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800302e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003030:	688b      	ldr	r3, [r1, #8]
 8003032:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003034:	680b      	ldr	r3, [r1, #0]
 8003036:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <TIM_Base_SetConfig+0xc4>)
 800303a:	4298      	cmp	r0, r3
 800303c:	d003      	beq.n	8003046 <TIM_Base_SetConfig+0xba>
 800303e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003042:	4298      	cmp	r0, r3
 8003044:	d101      	bne.n	800304a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003046:	690b      	ldr	r3, [r1, #16]
 8003048:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800304a:	2301      	movs	r3, #1
 800304c:	6143      	str	r3, [r0, #20]
}
 800304e:	4770      	bx	lr
 8003050:	40010000 	.word	0x40010000

08003054 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003054:	b1b0      	cbz	r0, 8003084 <HAL_TIM_Base_Init+0x30>
{
 8003056:	b510      	push	{r4, lr}
 8003058:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800305e:	b163      	cbz	r3, 800307a <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003066:	4621      	mov	r1, r4
 8003068:	f851 0b04 	ldr.w	r0, [r1], #4
 800306c:	f7ff ff8e 	bl	8002f8c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003070:	2301      	movs	r3, #1
 8003072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003076:	2000      	movs	r0, #0
}
 8003078:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800307a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800307e:	f004 fd85 	bl	8007b8c <HAL_TIM_Base_MspInit>
 8003082:	e7ed      	b.n	8003060 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003084:	2001      	movs	r0, #1
}
 8003086:	4770      	bx	lr

08003088 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003088:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d03b      	beq.n	8003108 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8003090:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003092:	2301      	movs	r3, #1
 8003094:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	2302      	movs	r3, #2
 800309a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800309e:	6803      	ldr	r3, [r0, #0]
 80030a0:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a2:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a8:	680a      	ldr	r2, [r1, #0]
 80030aa:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01a      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d017      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80030bc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80030c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00f      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80030cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00b      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80030d4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80030dc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80030e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d104      	bne.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ec:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f0:	684a      	ldr	r2, [r1, #4]
 80030f2:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f4:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fc:	2300      	movs	r3, #0
 80030fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003102:	4618      	mov	r0, r3
}
 8003104:	bc30      	pop	{r4, r5}
 8003106:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003108:	2002      	movs	r0, #2
}
 800310a:	4770      	bx	lr
 800310c:	40010000 	.word	0x40010000

08003110 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003110:	4770      	bx	lr

08003112 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003112:	4770      	bx	lr

08003114 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003114:	6802      	ldr	r2, [r0, #0]
 8003116:	68d3      	ldr	r3, [r2, #12]
 8003118:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800311c:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800311e:	2320      	movs	r3, #32
 8003120:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8003124:	4770      	bx	lr

08003126 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003126:	6802      	ldr	r2, [r0, #0]
 8003128:	68d3      	ldr	r3, [r2, #12]
 800312a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800312e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	6953      	ldr	r3, [r2, #20]
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313a:	2320      	movs	r3, #32
 800313c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003140:	4770      	bx	lr

08003142 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003142:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b21      	cmp	r3, #33	; 0x21
 800314a:	d001      	beq.n	8003150 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800314c:	2002      	movs	r0, #2
  }
}
 800314e:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003150:	6883      	ldr	r3, [r0, #8]
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003156:	d017      	beq.n	8003188 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003158:	6a03      	ldr	r3, [r0, #32]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	6202      	str	r2, [r0, #32]
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	6803      	ldr	r3, [r0, #0]
 8003162:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003164:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29b      	uxth	r3, r3
 800316c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800316e:	b94b      	cbnz	r3, 8003184 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003170:	6802      	ldr	r2, [r0, #0]
 8003172:	68d3      	ldr	r3, [r2, #12]
 8003174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003178:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800317a:	6802      	ldr	r2, [r0, #0]
 800317c:	68d3      	ldr	r3, [r2, #12]
 800317e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003182:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003184:	2000      	movs	r0, #0
 8003186:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003188:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	6802      	ldr	r2, [r0, #0]
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003194:	6903      	ldr	r3, [r0, #16]
 8003196:	b91b      	cbnz	r3, 80031a0 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8003198:	6a03      	ldr	r3, [r0, #32]
 800319a:	3302      	adds	r3, #2
 800319c:	6203      	str	r3, [r0, #32]
 800319e:	e7e1      	b.n	8003164 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 80031a0:	6a03      	ldr	r3, [r0, #32]
 80031a2:	3301      	adds	r3, #1
 80031a4:	6203      	str	r3, [r0, #32]
 80031a6:	e7dd      	b.n	8003164 <UART_Transmit_IT+0x22>

080031a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ac:	6802      	ldr	r2, [r0, #0]
 80031ae:	6913      	ldr	r3, [r2, #16]
 80031b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b4:	68c1      	ldr	r1, [r0, #12]
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ba:	6883      	ldr	r3, [r0, #8]
 80031bc:	6902      	ldr	r2, [r0, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	6942      	ldr	r2, [r0, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	69c2      	ldr	r2, [r0, #28]
 80031c6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80031c8:	6801      	ldr	r1, [r0, #0]
 80031ca:	68cb      	ldr	r3, [r1, #12]
 80031cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80031d0:	f023 030c 	bic.w	r3, r3, #12
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d8:	6802      	ldr	r2, [r0, #0]
 80031da:	6953      	ldr	r3, [r2, #20]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	6981      	ldr	r1, [r0, #24]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	69c3      	ldr	r3, [r0, #28]
 80031e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ec:	d040      	beq.n	8003270 <UART_SetConfig+0xc8>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80031ee:	6803      	ldr	r3, [r0, #0]
 80031f0:	4a6e      	ldr	r2, [pc, #440]	; (80033ac <UART_SetConfig+0x204>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	f000 80ac 	beq.w	8003350 <UART_SetConfig+0x1a8>
 80031f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f000 80a7 	beq.w	8003350 <UART_SetConfig+0x1a8>
 8003202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003206:	4293      	cmp	r3, r2
 8003208:	f000 80a2 	beq.w	8003350 <UART_SetConfig+0x1a8>
 800320c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003210:	4293      	cmp	r3, r2
 8003212:	f000 809d 	beq.w	8003350 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003216:	f7fe fb8b 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800321a:	2600      	movs	r6, #0
 800321c:	1805      	adds	r5, r0, r0
 800321e:	eb46 0106 	adc.w	r1, r6, r6
 8003222:	182d      	adds	r5, r5, r0
 8003224:	eb46 0101 	adc.w	r1, r6, r1
 8003228:	00cb      	lsls	r3, r1, #3
 800322a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800322e:	00ea      	lsls	r2, r5, #3
 8003230:	4615      	mov	r5, r2
 8003232:	4619      	mov	r1, r3
 8003234:	6863      	ldr	r3, [r4, #4]
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	0f9b      	lsrs	r3, r3, #30
 800323a:	1828      	adds	r0, r5, r0
 800323c:	eb46 0101 	adc.w	r1, r6, r1
 8003240:	f7fd fcda 	bl	8000bf8 <__aeabi_uldivmod>
 8003244:	4d5a      	ldr	r5, [pc, #360]	; (80033b0 <UART_SetConfig+0x208>)
 8003246:	fba5 3200 	umull	r3, r2, r5, r0
 800324a:	0951      	lsrs	r1, r2, #5
 800324c:	2364      	movs	r3, #100	; 0x64
 800324e:	fb03 0311 	mls	r3, r3, r1, r0
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	3332      	adds	r3, #50	; 0x32
 8003256:	fba5 2303 	umull	r2, r3, r5, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003260:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	6821      	ldr	r1, [r4, #0]
 800326a:	4413      	add	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
    }
  }
}
 800326e:	e09b      	b.n	80033a8 <UART_SetConfig+0x200>
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003270:	6803      	ldr	r3, [r0, #0]
 8003272:	4a4e      	ldr	r2, [pc, #312]	; (80033ac <UART_SetConfig+0x204>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d03b      	beq.n	80032f0 <UART_SetConfig+0x148>
 8003278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800327c:	4293      	cmp	r3, r2
 800327e:	d037      	beq.n	80032f0 <UART_SetConfig+0x148>
 8003280:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003284:	4293      	cmp	r3, r2
 8003286:	d033      	beq.n	80032f0 <UART_SetConfig+0x148>
 8003288:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800328c:	4293      	cmp	r3, r2
 800328e:	d02f      	beq.n	80032f0 <UART_SetConfig+0x148>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7fe fb4e 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003294:	2600      	movs	r6, #0
 8003296:	1805      	adds	r5, r0, r0
 8003298:	eb46 0106 	adc.w	r1, r6, r6
 800329c:	182d      	adds	r5, r5, r0
 800329e:	eb46 0101 	adc.w	r1, r6, r1
 80032a2:	00cb      	lsls	r3, r1, #3
 80032a4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80032a8:	00ea      	lsls	r2, r5, #3
 80032aa:	4615      	mov	r5, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	6862      	ldr	r2, [r4, #4]
 80032b0:	4633      	mov	r3, r6
 80032b2:	1892      	adds	r2, r2, r2
 80032b4:	eb46 0303 	adc.w	r3, r6, r3
 80032b8:	1828      	adds	r0, r5, r0
 80032ba:	eb46 0101 	adc.w	r1, r6, r1
 80032be:	f7fd fc9b 	bl	8000bf8 <__aeabi_uldivmod>
 80032c2:	4d3b      	ldr	r5, [pc, #236]	; (80033b0 <UART_SetConfig+0x208>)
 80032c4:	fba5 3200 	umull	r3, r2, r5, r0
 80032c8:	0951      	lsrs	r1, r2, #5
 80032ca:	2364      	movs	r3, #100	; 0x64
 80032cc:	fb03 0311 	mls	r3, r3, r1, r0
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	fba5 2303 	umull	r2, r3, r5, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	005a      	lsls	r2, r3, #1
 80032dc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80032e0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	6821      	ldr	r1, [r4, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	e05b      	b.n	80033a8 <UART_SetConfig+0x200>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe fb2e 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032f4:	2600      	movs	r6, #0
 80032f6:	1805      	adds	r5, r0, r0
 80032f8:	eb46 0106 	adc.w	r1, r6, r6
 80032fc:	182d      	adds	r5, r5, r0
 80032fe:	eb46 0101 	adc.w	r1, r6, r1
 8003302:	00cb      	lsls	r3, r1, #3
 8003304:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003308:	00ea      	lsls	r2, r5, #3
 800330a:	4615      	mov	r5, r2
 800330c:	4619      	mov	r1, r3
 800330e:	6862      	ldr	r2, [r4, #4]
 8003310:	4633      	mov	r3, r6
 8003312:	1892      	adds	r2, r2, r2
 8003314:	eb46 0303 	adc.w	r3, r6, r3
 8003318:	1828      	adds	r0, r5, r0
 800331a:	eb46 0101 	adc.w	r1, r6, r1
 800331e:	f7fd fc6b 	bl	8000bf8 <__aeabi_uldivmod>
 8003322:	4d23      	ldr	r5, [pc, #140]	; (80033b0 <UART_SetConfig+0x208>)
 8003324:	fba5 3200 	umull	r3, r2, r5, r0
 8003328:	0951      	lsrs	r1, r2, #5
 800332a:	2364      	movs	r3, #100	; 0x64
 800332c:	fb03 0311 	mls	r3, r3, r1, r0
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	3332      	adds	r3, #50	; 0x32
 8003334:	fba5 2303 	umull	r2, r3, r5, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	005a      	lsls	r2, r3, #1
 800333c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003340:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	6821      	ldr	r1, [r4, #0]
 800334a:	4413      	add	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
 800334e:	e02b      	b.n	80033a8 <UART_SetConfig+0x200>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003350:	f7fe fafe 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003354:	2600      	movs	r6, #0
 8003356:	1805      	adds	r5, r0, r0
 8003358:	eb46 0106 	adc.w	r1, r6, r6
 800335c:	182d      	adds	r5, r5, r0
 800335e:	eb46 0101 	adc.w	r1, r6, r1
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003368:	00ea      	lsls	r2, r5, #3
 800336a:	4615      	mov	r5, r2
 800336c:	4619      	mov	r1, r3
 800336e:	6863      	ldr	r3, [r4, #4]
 8003370:	009a      	lsls	r2, r3, #2
 8003372:	0f9b      	lsrs	r3, r3, #30
 8003374:	1828      	adds	r0, r5, r0
 8003376:	eb46 0101 	adc.w	r1, r6, r1
 800337a:	f7fd fc3d 	bl	8000bf8 <__aeabi_uldivmod>
 800337e:	4d0c      	ldr	r5, [pc, #48]	; (80033b0 <UART_SetConfig+0x208>)
 8003380:	fba5 3200 	umull	r3, r2, r5, r0
 8003384:	0951      	lsrs	r1, r2, #5
 8003386:	2364      	movs	r3, #100	; 0x64
 8003388:	fb03 0311 	mls	r3, r3, r1, r0
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	3332      	adds	r3, #50	; 0x32
 8003390:	fba5 2303 	umull	r2, r3, r5, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800339a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	6821      	ldr	r1, [r4, #0]
 80033a4:	4413      	add	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]
}
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	bf00      	nop
 80033ac:	40011000 	.word	0x40011000
 80033b0:	51eb851f 	.word	0x51eb851f

080033b4 <HAL_UART_Init>:
  if (huart == NULL)
 80033b4:	b358      	cbz	r0, 800340e <HAL_UART_Init+0x5a>
{
 80033b6:	b510      	push	{r4, lr}
 80033b8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80033ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033be:	b30b      	cbz	r3, 8003404 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	2324      	movs	r3, #36	; 0x24
 80033c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	68d3      	ldr	r3, [r2, #12]
 80033ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033ce:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7ff fee9 	bl	80031a8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	6913      	ldr	r3, [r2, #16]
 80033da:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80033de:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	6953      	ldr	r3, [r2, #20]
 80033e4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80033e8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80033ea:	6822      	ldr	r2, [r4, #0]
 80033ec:	68d3      	ldr	r3, [r2, #12]
 80033ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033f2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	2000      	movs	r0, #0
 80033f6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	2320      	movs	r3, #32
 80033fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003402:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003404:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003408:	f004 fbe0 	bl	8007bcc <HAL_UART_MspInit>
 800340c:	e7d8      	b.n	80033c0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800340e:	2001      	movs	r0, #1
}
 8003410:	4770      	bx	lr
	...

08003414 <HAL_UART_Transmit_DMA>:
{
 8003414:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8003416:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b20      	cmp	r3, #32
 800341e:	d131      	bne.n	8003484 <HAL_UART_Transmit_DMA+0x70>
 8003420:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8003422:	2900      	cmp	r1, #0
 8003424:	d030      	beq.n	8003488 <HAL_UART_Transmit_DMA+0x74>
 8003426:	2a00      	cmp	r2, #0
 8003428:	d030      	beq.n	800348c <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 800342a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800342e:	2b01      	cmp	r3, #1
 8003430:	d02e      	beq.n	8003490 <HAL_UART_Transmit_DMA+0x7c>
 8003432:	2301      	movs	r3, #1
 8003434:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8003438:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800343a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800343c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343e:	2500      	movs	r5, #0
 8003440:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003442:	2321      	movs	r3, #33	; 0x21
 8003444:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003448:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800344a:	4812      	ldr	r0, [pc, #72]	; (8003494 <HAL_UART_Transmit_DMA+0x80>)
 800344c:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800344e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003450:	4811      	ldr	r0, [pc, #68]	; (8003498 <HAL_UART_Transmit_DMA+0x84>)
 8003452:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003456:	4811      	ldr	r0, [pc, #68]	; (800349c <HAL_UART_Transmit_DMA+0x88>)
 8003458:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 800345a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800345c:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	1d02      	adds	r2, r0, #4
 8003464:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003466:	f7fd fef7 	bl	8001258 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003470:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8003472:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	6953      	ldr	r3, [r2, #20]
 800347a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003480:	4628      	mov	r0, r5
 8003482:	e000      	b.n	8003486 <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 8003484:	2002      	movs	r0, #2
}
 8003486:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003488:	2001      	movs	r0, #1
 800348a:	e7fc      	b.n	8003486 <HAL_UART_Transmit_DMA+0x72>
 800348c:	2001      	movs	r0, #1
 800348e:	e7fa      	b.n	8003486 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8003490:	2002      	movs	r0, #2
 8003492:	e7f8      	b.n	8003486 <HAL_UART_Transmit_DMA+0x72>
 8003494:	080035af 	.word	0x080035af
 8003498:	080035fb 	.word	0x080035fb
 800349c:	080036f1 	.word	0x080036f1

080034a0 <HAL_UART_Receive_DMA>:
{
 80034a0:	b530      	push	{r4, r5, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80034a6:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 80034aa:	b2c0      	uxtb	r0, r0
 80034ac:	2820      	cmp	r0, #32
 80034ae:	d13c      	bne.n	800352a <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 80034b0:	2900      	cmp	r1, #0
 80034b2:	d03d      	beq.n	8003530 <HAL_UART_Receive_DMA+0x90>
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	d03d      	beq.n	8003534 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 80034b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d03b      	beq.n	8003538 <HAL_UART_Receive_DMA+0x98>
 80034c0:	2301      	movs	r3, #1
 80034c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 80034c6:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 80034c8:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	2500      	movs	r5, #0
 80034cc:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ce:	2322      	movs	r3, #34	; 0x22
 80034d0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80034d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034d6:	4819      	ldr	r0, [pc, #100]	; (800353c <HAL_UART_Receive_DMA+0x9c>)
 80034d8:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034dc:	4818      	ldr	r0, [pc, #96]	; (8003540 <HAL_UART_Receive_DMA+0xa0>)
 80034de:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034e2:	4818      	ldr	r0, [pc, #96]	; (8003544 <HAL_UART_Receive_DMA+0xa4>)
 80034e4:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80034e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034e8:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	460a      	mov	r2, r1
 80034f0:	1d01      	adds	r1, r0, #4
 80034f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80034f4:	f7fd feb0 	bl	8001258 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80034f8:	9501      	str	r5, [sp, #4]
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	9201      	str	r2, [sp, #4]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	9201      	str	r2, [sp, #4]
 8003504:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8003506:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003510:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	6953      	ldr	r3, [r2, #20]
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351c:	6822      	ldr	r2, [r4, #0]
 800351e:	6953      	ldr	r3, [r2, #20]
 8003520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003524:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003526:	4628      	mov	r0, r5
 8003528:	e000      	b.n	800352c <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 800352a:	2002      	movs	r0, #2
}
 800352c:	b003      	add	sp, #12
 800352e:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8003530:	2001      	movs	r0, #1
 8003532:	e7fb      	b.n	800352c <HAL_UART_Receive_DMA+0x8c>
 8003534:	2001      	movs	r0, #1
 8003536:	e7f9      	b.n	800352c <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8003538:	2002      	movs	r0, #2
 800353a:	e7f7      	b.n	800352c <HAL_UART_Receive_DMA+0x8c>
 800353c:	08003607 	.word	0x08003607
 8003540:	080036e5 	.word	0x080036e5
 8003544:	080036f1 	.word	0x080036f1

08003548 <HAL_UART_DMAStop>:
{
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800354c:	6801      	ldr	r1, [r0, #0]
 800354e:	694a      	ldr	r2, [r1, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003550:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b21      	cmp	r3, #33	; 0x21
 8003558:	d00a      	beq.n	8003570 <HAL_UART_DMAStop+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800355a:	6821      	ldr	r1, [r4, #0]
 800355c:	694a      	ldr	r2, [r1, #20]
 800355e:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003562:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b22      	cmp	r3, #34	; 0x22
 800356a:	d011      	beq.n	8003590 <HAL_UART_DMAStop+0x48>
}
 800356c:	2000      	movs	r0, #0
 800356e:	bd10      	pop	{r4, pc}
 8003570:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003574:	2a00      	cmp	r2, #0
 8003576:	d0f0      	beq.n	800355a <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003578:	694b      	ldr	r3, [r1, #20]
 800357a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800357e:	614b      	str	r3, [r1, #20]
    if (huart->hdmatx != NULL)
 8003580:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003582:	b108      	cbz	r0, 8003588 <HAL_UART_DMAStop+0x40>
      HAL_DMA_Abort(huart->hdmatx);
 8003584:	f7fd fe9d 	bl	80012c2 <HAL_DMA_Abort>
    UART_EndTxTransfer(huart);
 8003588:	4620      	mov	r0, r4
 800358a:	f7ff fdc3 	bl	8003114 <UART_EndTxTransfer>
 800358e:	e7e4      	b.n	800355a <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003590:	2a00      	cmp	r2, #0
 8003592:	d0eb      	beq.n	800356c <HAL_UART_DMAStop+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003594:	694b      	ldr	r3, [r1, #20]
 8003596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359a:	614b      	str	r3, [r1, #20]
    if (huart->hdmarx != NULL)
 800359c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800359e:	b108      	cbz	r0, 80035a4 <HAL_UART_DMAStop+0x5c>
      HAL_DMA_Abort(huart->hdmarx);
 80035a0:	f7fd fe8f 	bl	80012c2 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7ff fdbe 	bl	8003126 <UART_EndRxTransfer>
 80035aa:	e7df      	b.n	800356c <HAL_UART_DMAStop+0x24>

080035ac <HAL_UART_TxCpltCallback>:
}
 80035ac:	4770      	bx	lr

080035ae <UART_DMATransmitCplt>:
{
 80035ae:	b508      	push	{r3, lr}
 80035b0:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035bc:	d10c      	bne.n	80035d8 <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035c2:	6802      	ldr	r2, [r0, #0]
 80035c4:	6953      	ldr	r3, [r2, #20]
 80035c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ca:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035cc:	6802      	ldr	r2, [r0, #0]
 80035ce:	68d3      	ldr	r3, [r2, #12]
 80035d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d4:	60d3      	str	r3, [r2, #12]
}
 80035d6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80035d8:	f7ff ffe8 	bl	80035ac <HAL_UART_TxCpltCallback>
}
 80035dc:	e7fb      	b.n	80035d6 <UART_DMATransmitCplt+0x28>

080035de <UART_EndTransmit_IT>:
{
 80035de:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035e0:	6801      	ldr	r1, [r0, #0]
 80035e2:	68ca      	ldr	r2, [r1, #12]
 80035e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e8:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80035ea:	2220      	movs	r2, #32
 80035ec:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80035f0:	f7ff ffdc 	bl	80035ac <HAL_UART_TxCpltCallback>
}
 80035f4:	2000      	movs	r0, #0
 80035f6:	bd08      	pop	{r3, pc}

080035f8 <HAL_UART_TxHalfCpltCallback>:
}
 80035f8:	4770      	bx	lr

080035fa <UART_DMATxHalfCplt>:
{
 80035fa:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80035fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80035fe:	f7ff fffb 	bl	80035f8 <HAL_UART_TxHalfCpltCallback>
}
 8003602:	bd08      	pop	{r3, pc}

08003604 <HAL_UART_RxCpltCallback>:
}
 8003604:	4770      	bx	lr

08003606 <UART_DMAReceiveCplt>:
{
 8003606:	b508      	push	{r3, lr}
 8003608:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003614:	d113      	bne.n	800363e <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800361a:	6802      	ldr	r2, [r0, #0]
 800361c:	68d3      	ldr	r3, [r2, #12]
 800361e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003622:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	6802      	ldr	r2, [r0, #0]
 8003626:	6953      	ldr	r3, [r2, #20]
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800362e:	6802      	ldr	r2, [r0, #0]
 8003630:	6953      	ldr	r3, [r2, #20]
 8003632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003636:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003638:	2320      	movs	r3, #32
 800363a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800363e:	f7ff ffe1 	bl	8003604 <HAL_UART_RxCpltCallback>
}
 8003642:	bd08      	pop	{r3, pc}

08003644 <UART_Receive_IT>:
{
 8003644:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003646:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b22      	cmp	r3, #34	; 0x22
 800364e:	d146      	bne.n	80036de <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003650:	6883      	ldr	r3, [r0, #8]
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003656:	d00f      	beq.n	8003678 <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003658:	6903      	ldr	r3, [r0, #16]
 800365a:	bb0b      	cbnz	r3, 80036a0 <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800365c:	6803      	ldr	r3, [r0, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003662:	1c59      	adds	r1, r3, #1
 8003664:	6281      	str	r1, [r0, #40]	; 0x28
 8003666:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8003668:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003672:	b1f3      	cbz	r3, 80036b2 <UART_Receive_IT+0x6e>
    return HAL_OK;
 8003674:	2000      	movs	r0, #0
}
 8003676:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003678:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800367a:	6903      	ldr	r3, [r0, #16]
 800367c:	b943      	cbnz	r3, 8003690 <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800367e:	6803      	ldr	r3, [r0, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8003688:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800368a:	3302      	adds	r3, #2
 800368c:	6283      	str	r3, [r0, #40]	; 0x28
 800368e:	e7eb      	b.n	8003668 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8003698:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800369a:	3301      	adds	r3, #1
 800369c:	6283      	str	r3, [r0, #40]	; 0x28
 800369e:	e7e3      	b.n	8003668 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a0:	6803      	ldr	r3, [r0, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80036a6:	1c51      	adds	r1, r2, #1
 80036a8:	6281      	str	r1, [r0, #40]	; 0x28
 80036aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ae:	7013      	strb	r3, [r2, #0]
 80036b0:	e7da      	b.n	8003668 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036b2:	6802      	ldr	r2, [r0, #0]
 80036b4:	68d3      	ldr	r3, [r2, #12]
 80036b6:	f023 0320 	bic.w	r3, r3, #32
 80036ba:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036bc:	6802      	ldr	r2, [r0, #0]
 80036be:	68d3      	ldr	r3, [r2, #12]
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036c6:	6802      	ldr	r2, [r0, #0]
 80036c8:	6953      	ldr	r3, [r2, #20]
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80036d0:	2320      	movs	r3, #32
 80036d2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80036d6:	f7ff ff95 	bl	8003604 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80036da:	2000      	movs	r0, #0
 80036dc:	e7cb      	b.n	8003676 <UART_Receive_IT+0x32>
    return HAL_BUSY;
 80036de:	2002      	movs	r0, #2
 80036e0:	e7c9      	b.n	8003676 <UART_Receive_IT+0x32>

080036e2 <HAL_UART_RxHalfCpltCallback>:
}
 80036e2:	4770      	bx	lr

080036e4 <UART_DMARxHalfCplt>:
{
 80036e4:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80036e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80036e8:	f7ff fffb 	bl	80036e2 <HAL_UART_RxHalfCpltCallback>
}
 80036ec:	bd08      	pop	{r3, pc}

080036ee <HAL_UART_ErrorCallback>:
}
 80036ee:	4770      	bx	lr

080036f0 <UART_DMAError>:
{
 80036f0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036f8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b21      	cmp	r3, #33	; 0x21
 8003700:	d010      	beq.n	8003724 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800370a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b22      	cmp	r3, #34	; 0x22
 8003712:	d011      	beq.n	8003738 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003714:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003716:	f043 0310 	orr.w	r3, r3, #16
 800371a:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff ffe6 	bl	80036ee <HAL_UART_ErrorCallback>
}
 8003722:	bd10      	pop	{r4, pc}
 8003724:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003728:	2a00      	cmp	r2, #0
 800372a:	d0ea      	beq.n	8003702 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800372c:	2300      	movs	r3, #0
 800372e:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff fcef 	bl	8003114 <UART_EndTxTransfer>
 8003736:	e7e4      	b.n	8003702 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003738:	2a00      	cmp	r2, #0
 800373a:	d0eb      	beq.n	8003714 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800373c:	2300      	movs	r3, #0
 800373e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fcf0 	bl	8003126 <UART_EndRxTransfer>
 8003746:	e7e5      	b.n	8003714 <UART_DMAError+0x24>

08003748 <HAL_UART_IRQHandler>:
{
 8003748:	b510      	push	{r4, lr}
 800374a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800374c:	6802      	ldr	r2, [r0, #0]
 800374e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003750:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003752:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8003754:	f013 000f 	ands.w	r0, r3, #15
 8003758:	d105      	bne.n	8003766 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375a:	f013 0f20 	tst.w	r3, #32
 800375e:	d002      	beq.n	8003766 <HAL_UART_IRQHandler+0x1e>
 8003760:	f011 0f20 	tst.w	r1, #32
 8003764:	d113      	bne.n	800378e <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003766:	b128      	cbz	r0, 8003774 <HAL_UART_IRQHandler+0x2c>
 8003768:	f012 0201 	ands.w	r2, r2, #1
 800376c:	d113      	bne.n	8003796 <HAL_UART_IRQHandler+0x4e>
 800376e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003772:	d110      	bne.n	8003796 <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003774:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003778:	d002      	beq.n	8003780 <HAL_UART_IRQHandler+0x38>
 800377a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800377e:	d16c      	bne.n	800385a <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003780:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003784:	d002      	beq.n	800378c <HAL_UART_IRQHandler+0x44>
 8003786:	f011 0f40 	tst.w	r1, #64	; 0x40
 800378a:	d16a      	bne.n	8003862 <HAL_UART_IRQHandler+0x11a>
}
 800378c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff ff58 	bl	8003644 <UART_Receive_IT>
      return;
 8003794:	e7fa      	b.n	800378c <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003796:	f013 0f01 	tst.w	r3, #1
 800379a:	d006      	beq.n	80037aa <HAL_UART_IRQHandler+0x62>
 800379c:	f411 7f80 	tst.w	r1, #256	; 0x100
 80037a0:	d003      	beq.n	80037aa <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80037a4:	f040 0001 	orr.w	r0, r0, #1
 80037a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037aa:	f013 0f04 	tst.w	r3, #4
 80037ae:	d004      	beq.n	80037ba <HAL_UART_IRQHandler+0x72>
 80037b0:	b11a      	cbz	r2, 80037ba <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80037b4:	f040 0002 	orr.w	r0, r0, #2
 80037b8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ba:	f013 0f02 	tst.w	r3, #2
 80037be:	d004      	beq.n	80037ca <HAL_UART_IRQHandler+0x82>
 80037c0:	b11a      	cbz	r2, 80037ca <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80037c4:	f040 0004 	orr.w	r0, r0, #4
 80037c8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ca:	f013 0f08 	tst.w	r3, #8
 80037ce:	d007      	beq.n	80037e0 <HAL_UART_IRQHandler+0x98>
 80037d0:	f011 0f20 	tst.w	r1, #32
 80037d4:	d100      	bne.n	80037d8 <HAL_UART_IRQHandler+0x90>
 80037d6:	b11a      	cbz	r2, 80037e0 <HAL_UART_IRQHandler+0x98>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80037e2:	2a00      	cmp	r2, #0
 80037e4:	d0d2      	beq.n	800378c <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e6:	f013 0f20 	tst.w	r3, #32
 80037ea:	d002      	beq.n	80037f2 <HAL_UART_IRQHandler+0xaa>
 80037ec:	f011 0f20 	tst.w	r1, #32
 80037f0:	d121      	bne.n	8003836 <HAL_UART_IRQHandler+0xee>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80037fc:	f012 0f08 	tst.w	r2, #8
 8003800:	d100      	bne.n	8003804 <HAL_UART_IRQHandler+0xbc>
 8003802:	b323      	cbz	r3, 800384e <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 8003804:	4620      	mov	r0, r4
 8003806:	f7ff fc8e 	bl	8003126 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003812:	d018      	beq.n	8003846 <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800381c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800381e:	b173      	cbz	r3, 800383e <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <HAL_UART_IRQHandler+0x124>)
 8003822:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003824:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003826:	f7fd fd96 	bl	8001356 <HAL_DMA_Abort_IT>
 800382a:	2800      	cmp	r0, #0
 800382c:	d0ae      	beq.n	800378c <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800382e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003830:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003832:	4798      	blx	r3
 8003834:	e7aa      	b.n	800378c <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff ff04 	bl	8003644 <UART_Receive_IT>
 800383c:	e7d9      	b.n	80037f2 <HAL_UART_IRQHandler+0xaa>
            HAL_UART_ErrorCallback(huart);
 800383e:	4620      	mov	r0, r4
 8003840:	f7ff ff55 	bl	80036ee <HAL_UART_ErrorCallback>
 8003844:	e7a2      	b.n	800378c <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 8003846:	4620      	mov	r0, r4
 8003848:	f7ff ff51 	bl	80036ee <HAL_UART_ErrorCallback>
 800384c:	e79e      	b.n	800378c <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ff4d 	bl	80036ee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003854:	2300      	movs	r3, #0
 8003856:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 8003858:	e798      	b.n	800378c <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff fc71 	bl	8003142 <UART_Transmit_IT>
    return;
 8003860:	e794      	b.n	800378c <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 8003862:	4620      	mov	r0, r4
 8003864:	f7ff febb 	bl	80035de <UART_EndTransmit_IT>
    return;
 8003868:	e790      	b.n	800378c <HAL_UART_IRQHandler+0x44>
 800386a:	bf00      	nop
 800386c:	08003871 	.word	0x08003871

08003870 <UART_DMAAbortOnError>:
{
 8003870:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003872:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003874:	2300      	movs	r3, #0
 8003876:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003878:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800387a:	f7ff ff38 	bl	80036ee <HAL_UART_ErrorCallback>
}
 800387e:	bd08      	pop	{r3, pc}

08003880 <spiTradeByte>:
 */

#include "EEPROM.h"
//Obsluga SPI i eepromu
uint8_t spiTradeByte(uint8_t byte)
{
 8003880:	b500      	push	{lr}
 8003882:	b087      	sub	sp, #28
 8003884:	f88d 000f 	strb.w	r0, [sp, #15]
 uint8_t answer;

 HAL_SPI_TransmitReceive(&hspi2, &byte, &answer, 1, 5000);
 8003888:	f241 3388 	movw	r3, #5000	; 0x1388
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2301      	movs	r3, #1
 8003890:	f10d 0217 	add.w	r2, sp, #23
 8003894:	f10d 010f 	add.w	r1, sp, #15
 8003898:	4803      	ldr	r0, [pc, #12]	; (80038a8 <spiTradeByte+0x28>)
 800389a:	f7ff f8d5 	bl	8002a48 <HAL_SPI_TransmitReceive>

 return answer;
}
 800389e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80038a2:	b007      	add	sp, #28
 80038a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80038a8:	200007b0 	.word	0x200007b0

080038ac <EEPROM_read>:

uint8_t EEPROM_read(uint16_t address)
{
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
	uint8_t result;
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 80038b0:	4d0d      	ldr	r5, [pc, #52]	; (80038e8 <EEPROM_read+0x3c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038b8:	4628      	mov	r0, r5
 80038ba:	f7fd ff2d 	bl	8001718 <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_READ);
 80038be:	2003      	movs	r0, #3
 80038c0:	f7ff ffde 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 80038c4:	0a20      	lsrs	r0, r4, #8
 80038c6:	f7ff ffdb 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 80038ca:	b2e0      	uxtb	r0, r4
 80038cc:	f7ff ffd8 	bl	8003880 <spiTradeByte>
	result=spiTradeByte(0);
 80038d0:	2000      	movs	r0, #0
 80038d2:	f7ff ffd5 	bl	8003880 <spiTradeByte>
 80038d6:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//select eeprom ic
 80038d8:	2201      	movs	r2, #1
 80038da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038de:	4628      	mov	r0, r5
 80038e0:	f7fd ff1a 	bl	8001718 <HAL_GPIO_WritePin>
	return result;
}
 80038e4:	4620      	mov	r0, r4
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	40020400 	.word	0x40020400

080038ec <EEPROM_readSettings>:

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//select eeprom ic
}

void EEPROM_readSettings(uint16_t address, struct SETTINGS* settingsStruct, uint8_t byteCount)
{
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	460d      	mov	r5, r1
 80038f2:	4616      	mov	r6, r2
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 80038f4:	4f0e      	ldr	r7, [pc, #56]	; (8003930 <EEPROM_readSettings+0x44>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038fc:	4638      	mov	r0, r7
 80038fe:	f7fd ff0b 	bl	8001718 <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_READ);
 8003902:	2003      	movs	r0, #3
 8003904:	f7ff ffbc 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 8003908:	0a20      	lsrs	r0, r4, #8
 800390a:	f7ff ffb9 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 800390e:	b2e0      	uxtb	r0, r4
 8003910:	f7ff ffb6 	bl	8003880 <spiTradeByte>

	HAL_SPI_Receive(&hspi2, (uint8_t*)((struct SETTINGS *)settingsStruct), byteCount, 5000);
 8003914:	f241 3388 	movw	r3, #5000	; 0x1388
 8003918:	4632      	mov	r2, r6
 800391a:	4629      	mov	r1, r5
 800391c:	4805      	ldr	r0, [pc, #20]	; (8003934 <EEPROM_readSettings+0x48>)
 800391e:	f7ff f9af 	bl	8002c80 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//select eeprom ic
 8003922:	2201      	movs	r2, #1
 8003924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003928:	4638      	mov	r0, r7
 800392a:	f7fd fef5 	bl	8001718 <HAL_GPIO_WritePin>
}
 800392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003930:	40020400 	.word	0x40020400
 8003934:	200007b0 	.word	0x200007b0

08003938 <EEPROM_write>:

void EEPROM_write(uint16_t address, uint8_t *byte)
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4605      	mov	r5, r0
 800393c:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 800393e:	4c16      	ldr	r4, [pc, #88]	; (8003998 <EEPROM_write+0x60>)
 8003940:	2200      	movs	r2, #0
 8003942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003946:	4620      	mov	r0, r4
 8003948:	f7fd fee6 	bl	8001718 <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WREN);
 800394c:	2006      	movs	r0, #6
 800394e:	f7ff ff97 	bl	8003880 <spiTradeByte>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 8003952:	2201      	movs	r2, #1
 8003954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003958:	4620      	mov	r0, r4
 800395a:	f7fd fedd 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800395e:	2200      	movs	r2, #0
 8003960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003964:	4620      	mov	r0, r4
 8003966:	f7fd fed7 	bl	8001718 <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WRITE);
 800396a:	2002      	movs	r0, #2
 800396c:	f7ff ff88 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 8003970:	0a28      	lsrs	r0, r5, #8
 8003972:	f7ff ff85 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 8003976:	b2e8      	uxtb	r0, r5
 8003978:	f7ff ff82 	bl	8003880 <spiTradeByte>
	spiTradeByte(*byte);
 800397c:	7830      	ldrb	r0, [r6, #0]
 800397e:	f7ff ff7f 	bl	8003880 <spiTradeByte>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 8003982:	2201      	movs	r2, #1
 8003984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003988:	4620      	mov	r0, r4
 800398a:	f7fd fec5 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 800398e:	2006      	movs	r0, #6
 8003990:	f7fd fafe 	bl	8000f90 <HAL_Delay>
}
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	bf00      	nop
 8003998:	40020400 	.word	0x40020400

0800399c <EEPROM_write_multiple>:

void EEPROM_write_multiple(uint16_t address, uint8_t* bytes, uint8_t byteCount)
{
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	4605      	mov	r5, r0
 80039a0:	460e      	mov	r6, r1
 80039a2:	4617      	mov	r7, r2
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 80039a4:	4c17      	ldr	r4, [pc, #92]	; (8003a04 <EEPROM_write_multiple+0x68>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7fd feb3 	bl	8001718 <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WREN);
 80039b2:	2006      	movs	r0, #6
 80039b4:	f7ff ff64 	bl	8003880 <spiTradeByte>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 80039b8:	2201      	movs	r2, #1
 80039ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039be:	4620      	mov	r0, r4
 80039c0:	f7fd feaa 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7fd fea4 	bl	8001718 <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WRITE);
 80039d0:	2002      	movs	r0, #2
 80039d2:	f7ff ff55 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 80039d6:	0a28      	lsrs	r0, r5, #8
 80039d8:	f7ff ff52 	bl	8003880 <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 80039dc:	b2e8      	uxtb	r0, r5
 80039de:	f7ff ff4f 	bl	8003880 <spiTradeByte>
	HAL_SPI_Transmit(&hspi2, bytes, byteCount, 5000);
 80039e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80039e6:	463a      	mov	r2, r7
 80039e8:	4631      	mov	r1, r6
 80039ea:	4807      	ldr	r0, [pc, #28]	; (8003a08 <EEPROM_write_multiple+0x6c>)
 80039ec:	f7fe ff5a 	bl	80028a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 80039f0:	2201      	movs	r2, #1
 80039f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7fd fe8e 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80039fc:	200a      	movs	r0, #10
 80039fe:	f7fd fac7 	bl	8000f90 <HAL_Delay>
}
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a04:	40020400 	.word	0x40020400
 8003a08:	200007b0 	.word	0x200007b0

08003a0c <EEPROM_add_archive_entry>:

//funkcje od archiwum

void EEPROM_add_archive_entry(struct ARCHIVE* ArchiveEntry, uint8_t byteCount)
{
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	4607      	mov	r7, r0
 8003a12:	460e      	mov	r6, r1
	uint16_t address;
	uint8_t currentPage;
	uint8_t diff;
	settings.archiveFirstEntryOffset = EEPROM_read(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR);
 8003a14:	2007      	movs	r0, #7
 8003a16:	f7ff ff49 	bl	80038ac <EEPROM_read>
 8003a1a:	4c42      	ldr	r4, [pc, #264]	; (8003b24 <EEPROM_add_archive_entry+0x118>)
 8003a1c:	71e0      	strb	r0, [r4, #7]
	settings.archiveEntriesTotal = EEPROM_read(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR);
 8003a1e:	2008      	movs	r0, #8
 8003a20:	f7ff ff44 	bl	80038ac <EEPROM_read>
 8003a24:	7220      	strb	r0, [r4, #8]

	if (settings.archiveEntriesTotal == ARCHIVE_SIZE)								//jezeli archiwum pelne
 8003a26:	28fa      	cmp	r0, #250	; 0xfa
 8003a28:	d00c      	beq.n	8003a44 <EEPROM_add_archive_entry+0x38>
	{
		address = EEPROM_ARCHIVE_BASE_ADDRESS + settings.archiveFirstEntryOffset * byteCount;
	}
	else
	{
		address = EEPROM_ARCHIVE_BASE_ADDRESS + settings.archiveEntriesTotal * byteCount;
 8003a2a:	fb06 f500 	mul.w	r5, r6, r0
 8003a2e:	3580      	adds	r5, #128	; 0x80
 8003a30:	b2ad      	uxth	r5, r5
	}


	for (currentPage = 1; currentPage <= 255; currentPage++)
 8003a32:	2301      	movs	r3, #1
	{
		if (address < EEPROM_ARCHIVE_BASE_ADDRESS + currentPage * EEPROM_PAGE_SIZE) break;
 8003a34:	f103 0801 	add.w	r8, r3, #1
 8003a38:	ebb5 1fc8 	cmp.w	r5, r8, lsl #7
 8003a3c:	db08      	blt.n	8003a50 <EEPROM_add_archive_entry+0x44>
	for (currentPage = 1; currentPage <= 255; currentPage++)
 8003a3e:	fa5f f388 	uxtb.w	r3, r8
		if (address < EEPROM_ARCHIVE_BASE_ADDRESS + currentPage * EEPROM_PAGE_SIZE) break;
 8003a42:	e7f7      	b.n	8003a34 <EEPROM_add_archive_entry+0x28>
		address = EEPROM_ARCHIVE_BASE_ADDRESS + settings.archiveFirstEntryOffset * byteCount;
 8003a44:	79e5      	ldrb	r5, [r4, #7]
 8003a46:	fb06 f505 	mul.w	r5, r6, r5
 8003a4a:	3580      	adds	r5, #128	; 0x80
 8003a4c:	b2ad      	uxth	r5, r5
 8003a4e:	e7f0      	b.n	8003a32 <EEPROM_add_archive_entry+0x26>
	}
	diff = (currentPage + 1) * EEPROM_PAGE_SIZE - address;
 8003a50:	1c5c      	adds	r4, r3, #1
 8003a52:	01e4      	lsls	r4, r4, #7
 8003a54:	b2e4      	uxtb	r4, r4
 8003a56:	fa5f fa85 	uxtb.w	sl, r5
 8003a5a:	eba4 090a 	sub.w	r9, r4, sl
 8003a5e:	fa5f f989 	uxtb.w	r9, r9

	if (diff >= sizeof(*ArchiveEntry))
 8003a62:	f1b9 0f1b 	cmp.w	r9, #27
 8003a66:	d93f      	bls.n	8003ae8 <EEPROM_add_archive_entry+0xdc>
	{
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 8003a68:	4c2f      	ldr	r4, [pc, #188]	; (8003b28 <EEPROM_add_archive_entry+0x11c>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7fd fe51 	bl	8001718 <HAL_GPIO_WritePin>
		spiTradeByte(EEPROM_WREN);
 8003a76:	2006      	movs	r0, #6
 8003a78:	f7ff ff02 	bl	8003880 <spiTradeByte>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7fd fe48 	bl	8001718 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7fd fe42 	bl	8001718 <HAL_GPIO_WritePin>
		spiTradeByte(EEPROM_WRITE);
 8003a94:	2002      	movs	r0, #2
 8003a96:	f7ff fef3 	bl	8003880 <spiTradeByte>
		spiTradeByte((uint8_t)(address>>8));
 8003a9a:	0a28      	lsrs	r0, r5, #8
 8003a9c:	f7ff fef0 	bl	8003880 <spiTradeByte>
		spiTradeByte((uint8_t)(address&0x00FF));
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f7ff feed 	bl	8003880 <spiTradeByte>
		HAL_SPI_Transmit(&hspi2,(uint8_t*) ArchiveEntry, byteCount, 5000);			//bylo bez (uint8_t*) ale dawalo warning. jakby cos swirowalo to trzeba poprawic
 8003aa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aaa:	4632      	mov	r2, r6
 8003aac:	4639      	mov	r1, r7
 8003aae:	481f      	ldr	r0, [pc, #124]	; (8003b2c <EEPROM_add_archive_entry+0x120>)
 8003ab0:	f7fe fef8 	bl	80028a4 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7fd fe2c 	bl	8001718 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8003ac0:	200a      	movs	r0, #10
 8003ac2:	f7fd fa65 	bl	8000f90 <HAL_Delay>
	{
		EEPROM_write_multiple(address, (uint8_t*)(ArchiveEntry), diff);
		EEPROM_write_multiple((currentPage + 1) * EEPROM_PAGE_SIZE, (uint8_t*)(ArchiveEntry)+diff, byteCount - diff);
	}

	if(settings.archiveEntriesTotal < ARCHIVE_SIZE)				//jezeli nie pelne zapamietaj ile zostalo zuzyte miejsca
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <EEPROM_add_archive_entry+0x118>)
 8003ac8:	7a1b      	ldrb	r3, [r3, #8]
 8003aca:	2bf9      	cmp	r3, #249	; 0xf9
 8003acc:	d91d      	bls.n	8003b0a <EEPROM_add_archive_entry+0xfe>
		settings.archiveEntriesTotal++;
		EEPROM_write(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR, &settings.archiveEntriesTotal);
	}
	else	//jezeli archiwum pelne
	{
		if(settings.archiveFirstEntryOffset < ARCHIVE_END_PTR)	//i pierwszy wpis byl przed koncowym adresem archiwum w eepromie
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <EEPROM_add_archive_entry+0x118>)
 8003ad0:	79db      	ldrb	r3, [r3, #7]
 8003ad2:	2bf8      	cmp	r3, #248	; 0xf8
 8003ad4:	d821      	bhi.n	8003b1a <EEPROM_add_archive_entry+0x10e>
		{														//dodawaj kolejne wpisy
			settings.archiveFirstEntryOffset++;
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <EEPROM_add_archive_entry+0x118>)
 8003ada:	71d3      	strb	r3, [r2, #7]
		}
		else
		{
			settings.archiveFirstEntryOffset = 0;				//jezeli wpis byl na ostatniej pozycji w pamieci archiwum to nadpisuj od najstarszej pozycji
		}
		EEPROM_write(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR, &settings.archiveFirstEntryOffset);
 8003adc:	4914      	ldr	r1, [pc, #80]	; (8003b30 <EEPROM_add_archive_entry+0x124>)
 8003ade:	2007      	movs	r0, #7
 8003ae0:	f7ff ff2a 	bl	8003938 <EEPROM_write>
	}


}
 8003ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		EEPROM_write_multiple(address, (uint8_t*)(ArchiveEntry), diff);
 8003ae8:	464a      	mov	r2, r9
 8003aea:	4639      	mov	r1, r7
 8003aec:	4628      	mov	r0, r5
 8003aee:	f7ff ff55 	bl	800399c <EEPROM_write_multiple>
		EEPROM_write_multiple((currentPage + 1) * EEPROM_PAGE_SIZE, (uint8_t*)(ArchiveEntry)+diff, byteCount - diff);
 8003af2:	ebaa 0404 	sub.w	r4, sl, r4
 8003af6:	4434      	add	r4, r6
 8003af8:	ea4f 10c8 	mov.w	r0, r8, lsl #7
 8003afc:	b280      	uxth	r0, r0
 8003afe:	b2e2      	uxtb	r2, r4
 8003b00:	eb07 0109 	add.w	r1, r7, r9
 8003b04:	f7ff ff4a 	bl	800399c <EEPROM_write_multiple>
 8003b08:	e7dd      	b.n	8003ac6 <EEPROM_add_archive_entry+0xba>
		settings.archiveEntriesTotal++;
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4905      	ldr	r1, [pc, #20]	; (8003b24 <EEPROM_add_archive_entry+0x118>)
 8003b0e:	f801 3f08 	strb.w	r3, [r1, #8]!
		EEPROM_write(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR, &settings.archiveEntriesTotal);
 8003b12:	2008      	movs	r0, #8
 8003b14:	f7ff ff10 	bl	8003938 <EEPROM_write>
 8003b18:	e7e4      	b.n	8003ae4 <EEPROM_add_archive_entry+0xd8>
			settings.archiveFirstEntryOffset = 0;				//jezeli wpis byl na ostatniej pozycji w pamieci archiwum to nadpisuj od najstarszej pozycji
 8003b1a:	4b02      	ldr	r3, [pc, #8]	; (8003b24 <EEPROM_add_archive_entry+0x118>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	71da      	strb	r2, [r3, #7]
 8003b20:	e7dc      	b.n	8003adc <EEPROM_add_archive_entry+0xd0>
 8003b22:	bf00      	nop
 8003b24:	200006c4 	.word	0x200006c4
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	200007b0 	.word	0x200007b0
 8003b30:	200006cb 	.word	0x200006cb

08003b34 <EEPROM_read_archive_entry>:

void EEPROM_read_archive_entry(uint8_t entryNO, struct ARCHIVE* ArchiveEntry, uint8_t byteCount)
{
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	4605      	mov	r5, r0
 8003b38:	460e      	mov	r6, r1
 8003b3a:	4617      	mov	r7, r2
	uint16_t address;
	settings.archiveFirstEntryOffset = EEPROM_read(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR);
 8003b3c:	2007      	movs	r0, #7
 8003b3e:	f7ff feb5 	bl	80038ac <EEPROM_read>
 8003b42:	4c1a      	ldr	r4, [pc, #104]	; (8003bac <EEPROM_read_archive_entry+0x78>)
 8003b44:	71e0      	strb	r0, [r4, #7]
	settings.archiveEntriesTotal = EEPROM_read(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR);
 8003b46:	2008      	movs	r0, #8
 8003b48:	f7ff feb0 	bl	80038ac <EEPROM_read>
 8003b4c:	7220      	strb	r0, [r4, #8]

	if (entryNO > settings.archiveEntriesTotal - 1)	//jesli wybrano wpis o numerze wiekszym jak pojemnosc archiwum
 8003b4e:	42a8      	cmp	r0, r5
 8003b50:	d803      	bhi.n	8003b5a <EEPROM_read_archive_entry+0x26>
	{
		ArchiveEntry->day = 255;	//TODO: to dodane aby nie zapomniec ze taki przypadek sie moze teoretycznie zdazyc i bedzie zczytywac jakies smieci. trza tu cos bedzie powstawiac moze
 8003b52:	23ff      	movs	r3, #255	; 0xff
 8003b54:	7033      	strb	r3, [r6, #0]
		ArchiveEntry->month = 255;
 8003b56:	7073      	strb	r3, [r6, #1]
		for (uint8_t i=0; i<byteCount; i++)
		{
			*((uint8_t*)(ArchiveEntry) + i) = EEPROM_read(address+i);
		}
	}
}
 8003b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (entryNO + settings.archiveFirstEntryOffset > ARCHIVE_END_PTR)	//jezeli numer wpisu archiwum wychodzi poza przestrzen adresowa archiwum w eepromie(np. bo pierwszy wpis jest gdzies blizej konca)
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <EEPROM_read_archive_entry+0x78>)
 8003b5c:	79da      	ldrb	r2, [r3, #7]
 8003b5e:	18ab      	adds	r3, r5, r2
 8003b60:	2bf9      	cmp	r3, #249	; 0xf9
 8003b62:	dd11      	ble.n	8003b88 <EEPROM_read_archive_entry+0x54>
			address = EEPROM_ARCHIVE_BASE_ADDRESS + (entryNO + settings.archiveFirstEntryOffset - ARCHIVE_SIZE) * byteCount; //to wylicz pozycje patrzac od poczatku przestrzeni adresowej
 8003b64:	f1a3 05fa 	sub.w	r5, r3, #250	; 0xfa
 8003b68:	fb15 f507 	smulbb	r5, r5, r7
 8003b6c:	b2ad      	uxth	r5, r5
 8003b6e:	3580      	adds	r5, #128	; 0x80
 8003b70:	b2ad      	uxth	r5, r5
		for (uint8_t i=0; i<byteCount; i++)
 8003b72:	2400      	movs	r4, #0
 8003b74:	42bc      	cmp	r4, r7
 8003b76:	d2ef      	bcs.n	8003b58 <EEPROM_read_archive_entry+0x24>
			*((uint8_t*)(ArchiveEntry) + i) = EEPROM_read(address+i);
 8003b78:	1928      	adds	r0, r5, r4
 8003b7a:	b280      	uxth	r0, r0
 8003b7c:	f7ff fe96 	bl	80038ac <EEPROM_read>
 8003b80:	5530      	strb	r0, [r6, r4]
		for (uint8_t i=0; i<byteCount; i++)
 8003b82:	3401      	adds	r4, #1
 8003b84:	b2e4      	uxtb	r4, r4
 8003b86:	e7f5      	b.n	8003b74 <EEPROM_read_archive_entry+0x40>
		else if (settings.archiveFirstEntryOffset == ARCHIVE_END_PTR && entryNO > 0)	//jezeli pierwszy wpis w ostatniej pozycji i odczytywany jest wlasnie on
 8003b88:	2af9      	cmp	r2, #249	; 0xf9
 8003b8a:	d006      	beq.n	8003b9a <EEPROM_read_archive_entry+0x66>
			address = EEPROM_ARCHIVE_BASE_ADDRESS + entryNO * byteCount + settings.archiveFirstEntryOffset * byteCount;
 8003b8c:	4415      	add	r5, r2
 8003b8e:	fb15 f507 	smulbb	r5, r5, r7
 8003b92:	b2ad      	uxth	r5, r5
 8003b94:	3580      	adds	r5, #128	; 0x80
 8003b96:	b2ad      	uxth	r5, r5
 8003b98:	e7eb      	b.n	8003b72 <EEPROM_read_archive_entry+0x3e>
		else if (settings.archiveFirstEntryOffset == ARCHIVE_END_PTR && entryNO > 0)	//jezeli pierwszy wpis w ostatniej pozycji i odczytywany jest wlasnie on
 8003b9a:	2d00      	cmp	r5, #0
 8003b9c:	d0f6      	beq.n	8003b8c <EEPROM_read_archive_entry+0x58>
			address = EEPROM_ARCHIVE_BASE_ADDRESS + (entryNO - 1) * byteCount;
 8003b9e:	3d01      	subs	r5, #1
 8003ba0:	fb15 f507 	smulbb	r5, r5, r7
 8003ba4:	b2ad      	uxth	r5, r5
 8003ba6:	3580      	adds	r5, #128	; 0x80
 8003ba8:	b2ad      	uxth	r5, r5
 8003baa:	e7e2      	b.n	8003b72 <EEPROM_read_archive_entry+0x3e>
 8003bac:	200006c4 	.word	0x200006c4

08003bb0 <erase_archive>:

void erase_archive(void)
{
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	b0a0      	sub	sp, #128	; 0x80
	uint16_t archiveUsedPages;
	uint8_t a[128] = {0xFF};
 8003bb4:	23ff      	movs	r3, #255	; 0xff
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	227c      	movs	r2, #124	; 0x7c
 8003bba:	2100      	movs	r1, #0
 8003bbc:	a801      	add	r0, sp, #4
 8003bbe:	f004 fa37 	bl	8008030 <memset>
	{
		archiveUsedPages /= 128;
		archiveUsedPages += 1;
	}

	for (uint16_t i = 0; i < archiveUsedPages; i++) EEPROM_write_multiple(EEPROM_ARCHIVE_BASE_ADDRESS + i * EEPROM_PAGE_SIZE, a, sizeof(a));
 8003bc2:	2400      	movs	r4, #0
 8003bc4:	2c36      	cmp	r4, #54	; 0x36
 8003bc6:	d808      	bhi.n	8003bda <erase_archive+0x2a>
 8003bc8:	3401      	adds	r4, #1
 8003bca:	b2a4      	uxth	r4, r4
 8003bcc:	01e0      	lsls	r0, r4, #7
 8003bce:	b280      	uxth	r0, r0
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	4669      	mov	r1, sp
 8003bd4:	f7ff fee2 	bl	800399c <EEPROM_write_multiple>
 8003bd8:	e7f4      	b.n	8003bc4 <erase_archive+0x14>
	memset(&ArchiveEntry, 0, sizeof(ArchiveEntry));
 8003bda:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <erase_archive+0x58>)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	6053      	str	r3, [r2, #4]
 8003be2:	6093      	str	r3, [r2, #8]
 8003be4:	60d3      	str	r3, [r2, #12]
 8003be6:	6113      	str	r3, [r2, #16]
 8003be8:	6153      	str	r3, [r2, #20]
 8003bea:	6193      	str	r3, [r2, #24]
	settings.archiveFirstEntryOffset = 0;
 8003bec:	4c07      	ldr	r4, [pc, #28]	; (8003c0c <erase_archive+0x5c>)
 8003bee:	71e3      	strb	r3, [r4, #7]
	settings.archiveEntriesTotal = 0;
 8003bf0:	7223      	strb	r3, [r4, #8]
	EEPROM_write(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR, &settings.archiveFirstEntryOffset);
 8003bf2:	1de1      	adds	r1, r4, #7
 8003bf4:	2007      	movs	r0, #7
 8003bf6:	f7ff fe9f 	bl	8003938 <EEPROM_write>
	EEPROM_write(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR, &settings.archiveEntriesTotal);
 8003bfa:	f104 0108 	add.w	r1, r4, #8
 8003bfe:	2008      	movs	r0, #8
 8003c00:	f7ff fe9a 	bl	8003938 <EEPROM_write>
}
 8003c04:	b020      	add	sp, #128	; 0x80
 8003c06:	bd10      	pop	{r4, pc}
 8003c08:	200006d0 	.word	0x200006d0
 8003c0c:	200006c4 	.word	0x200006c4

08003c10 <OLED_Power>:
 */
#include "OLED.h"
#include "font.h"

void OLED_Power(uint8_t enable)
{
 8003c10:	b508      	push	{r3, lr}
    if(enable)
 8003c12:	b128      	cbz	r0, 8003c20 <OLED_Power+0x10>
        HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 1);
 8003c14:	2201      	movs	r2, #1
 8003c16:	2102      	movs	r1, #2
 8003c18:	4804      	ldr	r0, [pc, #16]	; (8003c2c <OLED_Power+0x1c>)
 8003c1a:	f7fd fd7d 	bl	8001718 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 0);
}
 8003c1e:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 0);
 8003c20:	2200      	movs	r2, #0
 8003c22:	2102      	movs	r1, #2
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <OLED_Power+0x1c>)
 8003c26:	f7fd fd77 	bl	8001718 <HAL_GPIO_WritePin>
}
 8003c2a:	e7f8      	b.n	8003c1e <OLED_Power+0xe>
 8003c2c:	40020000 	.word	0x40020000

08003c30 <OLED_Reset>:

void OLED_Reset(void)
{
 8003c30:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, 1);
 8003c32:	4c0b      	ldr	r4, [pc, #44]	; (8003c60 <OLED_Reset+0x30>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	2104      	movs	r1, #4
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f7fd fd6d 	bl	8001718 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003c3e:	2064      	movs	r0, #100	; 0x64
 8003c40:	f7fd f9a6 	bl	8000f90 <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	2104      	movs	r1, #4
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f7fd fd65 	bl	8001718 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003c4e:	2064      	movs	r0, #100	; 0x64
 8003c50:	f7fd f99e 	bl	8000f90 <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, 1);
 8003c54:	2201      	movs	r2, #1
 8003c56:	2104      	movs	r1, #4
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f7fd fd5d 	bl	8001718 <HAL_GPIO_WritePin>
}
 8003c5e:	bd10      	pop	{r4, pc}
 8003c60:	40020000 	.word	0x40020000

08003c64 <OLED_WriteData>:

void OLED_WriteData(uint8_t data)
{
 8003c64:	b510      	push	{r4, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	f88d 0007 	strb.w	r0, [sp, #7]
	//for(uint8_t a=0; a<200; a++);
    DC_PORT->BSRR|=(1<<DC_PIN);         //D/C high
 8003c6c:	4c0a      	ldr	r4, [pc, #40]	; (8003c98 <OLED_WriteData+0x34>)
 8003c6e:	69a3      	ldr	r3, [r4, #24]
 8003c70:	f043 0310 	orr.w	r3, r3, #16
 8003c74:	61a3      	str	r3, [r4, #24]
    CS_PORT->BSRR|=(1<<(CS_PIN+16));    //CS low
 8003c76:	69a3      	ldr	r3, [r4, #24]
 8003c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c7c:	61a3      	str	r3, [r4, #24]

    /*for(uint8_t a=0; a<200; a++);
    *(uint8_t *)&SPI1->DR=data;
    while(SPI1->SR & SPI_SR_BSY);
    for(uint8_t a=0; a<200; a++);*/
    HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8003c7e:	2364      	movs	r3, #100	; 0x64
 8003c80:	2201      	movs	r2, #1
 8003c82:	f10d 0107 	add.w	r1, sp, #7
 8003c86:	4805      	ldr	r0, [pc, #20]	; (8003c9c <OLED_WriteData+0x38>)
 8003c88:	f7fe fe0c 	bl	80028a4 <HAL_SPI_Transmit>

    CS_PORT->BSRR|=(1<<CS_PIN);         //CS high
 8003c8c:	69a3      	ldr	r3, [r4, #24]
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c92:	61a3      	str	r3, [r4, #24]
}
 8003c94:	b002      	add	sp, #8
 8003c96:	bd10      	pop	{r4, pc}
 8003c98:	40020000 	.word	0x40020000
 8003c9c:	200016c4 	.word	0x200016c4

08003ca0 <OLED_WriteCmd>:

void OLED_WriteCmd(uint8_t cmd)
{
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	f88d 0007 	strb.w	r0, [sp, #7]
	//for(uint8_t a=0; a<200; a++);

    DC_PORT->BSRR|=(1<<(DC_PIN+16));    //D/C low
 8003ca8:	4c0a      	ldr	r4, [pc, #40]	; (8003cd4 <OLED_WriteCmd+0x34>)
 8003caa:	69a3      	ldr	r3, [r4, #24]
 8003cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb0:	61a3      	str	r3, [r4, #24]
    CS_PORT->BSRR|=(1<<(CS_PIN+16));    //CS low
 8003cb2:	69a3      	ldr	r3, [r4, #24]
 8003cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cb8:	61a3      	str	r3, [r4, #24]

    /*for(uint8_t a=0; a<200; a++);
    *(uint8_t *)&SPI1->DR=cmd;
    while(SPI1->SR & SPI_SR_BSY);
    for(uint8_t a=0; a<200; a++);*/
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8003cba:	2364      	movs	r3, #100	; 0x64
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f10d 0107 	add.w	r1, sp, #7
 8003cc2:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <OLED_WriteCmd+0x38>)
 8003cc4:	f7fe fdee 	bl	80028a4 <HAL_SPI_Transmit>

    CS_PORT->BSRR|=(1<<CS_PIN);         //CS high
 8003cc8:	69a3      	ldr	r3, [r4, #24]
 8003cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cce:	61a3      	str	r3, [r4, #24]
}
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd10      	pop	{r4, pc}
 8003cd4:	40020000 	.word	0x40020000
 8003cd8:	200016c4 	.word	0x200016c4

08003cdc <OLED_Init>:

void OLED_Init(void)
{
 8003cdc:	b510      	push	{r4, lr}
    OLED_Reset();
 8003cde:	f7ff ffa7 	bl	8003c30 <OLED_Reset>
    HAL_Delay(200);
 8003ce2:	20c8      	movs	r0, #200	; 0xc8
 8003ce4:	f7fd f954 	bl	8000f90 <HAL_Delay>
    OLED_Power(1);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7ff ff91 	bl	8003c10 <OLED_Power>
    HAL_Delay(200);
 8003cee:	20c8      	movs	r0, #200	; 0xc8
 8003cf0:	f7fd f94e 	bl	8000f90 <HAL_Delay>

    OLED_WriteCmd(OLED_COLUMNS);
 8003cf4:	2015      	movs	r0, #21
 8003cf6:	f7ff ffd3 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7ff ffd0 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8003d00:	203f      	movs	r0, #63	; 0x3f
 8003d02:	f7ff ffcd 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_ROWS);
 8003d06:	2075      	movs	r0, #117	; 0x75
 8003d08:	f7ff ffca 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7ff ffc7 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8003d12:	203f      	movs	r0, #63	; 0x3f
 8003d14:	f7ff ffc4 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_CONTRAST);
 8003d18:	2081      	movs	r0, #129	; 0x81
 8003d1a:	f7ff ffc1 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x3F);
 8003d1e:	203f      	movs	r0, #63	; 0x3f
 8003d20:	f7ff ffbe 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_CURRENT_FULL);
 8003d24:	2086      	movs	r0, #134	; 0x86
 8003d26:	f7ff ffbb 	bl	8003ca0 <OLED_WriteCmd>
    //OLED_WriteCmd(OLED_CURRENT_QUARTER);

    OLED_WriteCmd(OLED_RE_MAP);
 8003d2a:	20a0      	movs	r0, #160	; 0xa0
 8003d2c:	f7ff ffb8 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x52);
 8003d30:	2052      	movs	r0, #82	; 0x52
 8003d32:	f7ff ffb5 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_START_LINE);
 8003d36:	20a1      	movs	r0, #161	; 0xa1
 8003d38:	f7ff ffb2 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7ff ffaf 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_OFFSET);
 8003d42:	20a2      	movs	r0, #162	; 0xa2
 8003d44:	f7ff ffac 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(76);
 8003d48:	204c      	movs	r0, #76	; 0x4c
 8003d4a:	f7ff ffa9 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_MODE_NORMAL);
 8003d4e:	20a4      	movs	r0, #164	; 0xa4
 8003d50:	f7ff ffa6 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_MULTIPLEKSER_RATIO);
 8003d54:	20a8      	movs	r0, #168	; 0xa8
 8003d56:	f7ff ffa3 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8003d5a:	203f      	movs	r0, #63	; 0x3f
 8003d5c:	f7ff ffa0 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_PHASE_LENGHT);
 8003d60:	20b1      	movs	r0, #177	; 0xb1
 8003d62:	f7ff ff9d 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x35);
 8003d66:	2035      	movs	r0, #53	; 0x35
 8003d68:	f7ff ff9a 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_ROW_PERIOD);
 8003d6c:	20b2      	movs	r0, #178	; 0xb2
 8003d6e:	f7ff ff97 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x46);
 8003d72:	2046      	movs	r0, #70	; 0x46
 8003d74:	f7ff ff94 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(0xad);
    OLED_WriteCmd(3);
    */

    OLED_WriteCmd(OLED_DISPLAY_CLOCK);
 8003d78:	20b3      	movs	r0, #179	; 0xb3
 8003d7a:	f7ff ff91 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x01);    // 00
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f7ff ff8e 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_SEG_LOW_VOLTAGE);    //OLED_SEG_LOW_VOLTAGE
 8003d84:	20bf      	movs	r0, #191	; 0xbf
 8003d86:	f7ff ff8b 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x0);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7ff ff88 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_SEG_VCOMH);
 8003d90:	20be      	movs	r0, #190	; 0xbe
 8003d92:	f7ff ff85 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(11);      // 11
 8003d96:	200b      	movs	r0, #11
 8003d98:	f7ff ff82 	bl	8003ca0 <OLED_WriteCmd>

    //OLED_WriteCmd(OLED_PRE_VOLTAGE);
    //OLED_WriteCmd(0x0B);


    OLED_WriteCmd(OLED_GREY_SCALE_TABLE);
 8003d9c:	20b8      	movs	r0, #184	; 0xb8
 8003d9e:	f7ff ff7f 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x01);
 8003da2:	2001      	movs	r0, #1
 8003da4:	f7ff ff7c 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x11);
 8003da8:	2011      	movs	r0, #17
 8003daa:	f7ff ff79 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x22);
 8003dae:	2022      	movs	r0, #34	; 0x22
 8003db0:	f7ff ff76 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x32);
 8003db4:	2032      	movs	r0, #50	; 0x32
 8003db6:	f7ff ff73 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x43);
 8003dba:	2043      	movs	r0, #67	; 0x43
 8003dbc:	f7ff ff70 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x54);
 8003dc0:	2054      	movs	r0, #84	; 0x54
 8003dc2:	f7ff ff6d 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x65);
 8003dc6:	2065      	movs	r0, #101	; 0x65
 8003dc8:	f7ff ff6a 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x76);
 8003dcc:	2076      	movs	r0, #118	; 0x76
 8003dce:	f7ff ff67 	bl	8003ca0 <OLED_WriteCmd>


    OLED_WriteCmd(OLED_MASTER_CONF);
 8003dd2:	20ad      	movs	r0, #173	; 0xad
 8003dd4:	f7ff ff64 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x02);
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f7ff ff61 	bl	8003ca0 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_COLUMNS);
 8003dde:	2015      	movs	r0, #21
 8003de0:	f7ff ff5e 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7ff ff5b 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8003dea:	203f      	movs	r0, #63	; 0x3f
 8003dec:	f7ff ff58 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(OLED_ROWS);
 8003df0:	2075      	movs	r0, #117	; 0x75
 8003df2:	f7ff ff55 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8003df6:	2000      	movs	r0, #0
 8003df8:	f7ff ff52 	bl	8003ca0 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8003dfc:	203f      	movs	r0, #63	; 0x3f
 8003dfe:	f7ff ff4f 	bl	8003ca0 <OLED_WriteCmd>
    for(uint16_t i=0; i<4096; i++)
 8003e02:	2400      	movs	r4, #0
 8003e04:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003e08:	d205      	bcs.n	8003e16 <OLED_Init+0x13a>
        OLED_WriteData(0x00);
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7ff ff2a 	bl	8003c64 <OLED_WriteData>
    for(uint16_t i=0; i<4096; i++)
 8003e10:	3401      	adds	r4, #1
 8003e12:	b2a4      	uxth	r4, r4
 8003e14:	e7f6      	b.n	8003e04 <OLED_Init+0x128>

    OLED_WriteCmd(OLED_ON);
 8003e16:	20af      	movs	r0, #175	; 0xaf
 8003e18:	f7ff ff42 	bl	8003ca0 <OLED_WriteCmd>
}
 8003e1c:	bd10      	pop	{r4, pc}

08003e1e <OLED_CLEAR>:

void OLED_CLEAR(void)
{
 8003e1e:	b510      	push	{r4, lr}
int i;
	OLED_WriteCmd(OLED_COLUMNS);
 8003e20:	2015      	movs	r0, #21
 8003e22:	f7ff ff3d 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(0x00);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7ff ff3a 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(0x3f);
 8003e2c:	203f      	movs	r0, #63	; 0x3f
 8003e2e:	f7ff ff37 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 8003e32:	2075      	movs	r0, #117	; 0x75
 8003e34:	f7ff ff34 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7ff ff31 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(0x3f);
 8003e3e:	203f      	movs	r0, #63	; 0x3f
 8003e40:	f7ff ff2e 	bl	8003ca0 <OLED_WriteCmd>
		for(i=0;i<4096;i++)
 8003e44:	2400      	movs	r4, #0
 8003e46:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003e4a:	da04      	bge.n	8003e56 <OLED_CLEAR+0x38>
		{
			OLED_WriteData(0x00);
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f7ff ff09 	bl	8003c64 <OLED_WriteData>
		for(i=0;i<4096;i++)
 8003e52:	3401      	adds	r4, #1
 8003e54:	e7f7      	b.n	8003e46 <OLED_CLEAR+0x28>
		}
}
 8003e56:	bd10      	pop	{r4, pc}

08003e58 <OLED_font_5x7>:

    OLED_WriteData(color);
}

void OLED_font_5x7(uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
{
 8003e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	4617      	mov	r7, r2
	uint8_t dwa_pixle;

	znak&=0x7f;
 8003e62:	f003 087f 	and.w	r8, r3, #127	; 0x7f

	OLED_WriteCmd(OLED_COLUMNS);
 8003e66:	2015      	movs	r0, #21
 8003e68:	f7ff ff1a 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7ff ff17 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x+2);
 8003e72:	1ca8      	adds	r0, r5, #2
 8003e74:	b2c0      	uxtb	r0, r0
 8003e76:	f7ff ff13 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 8003e7a:	2075      	movs	r0, #117	; 0x75
 8003e7c:	f7ff ff10 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff ff0d 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y+8);
 8003e86:	f104 0008 	add.w	r0, r4, #8
 8003e8a:	b2c0      	uxtb	r0, r0
 8003e8c:	f7ff ff08 	bl	8003ca0 <OLED_WriteCmd>

	for(uint8_t a=0; a<8; a++)
 8003e90:	2600      	movs	r6, #0
 8003e92:	e016      	b.n	8003ec2 <OLED_font_5x7+0x6a>
		for(uint8_t b=0; b<3;b++)
		{
			dwa_pixle=0;

			if(c & 0x80)
				dwa_pixle=color << 4;
 8003e94:	0138      	lsls	r0, r7, #4
 8003e96:	b2c0      	uxtb	r0, r0
 8003e98:	e00b      	b.n	8003eb2 <OLED_font_5x7+0x5a>
			if(c & 0x40)
				dwa_pixle+=color;

			OLED_WriteData(dwa_pixle);
 8003e9a:	f7ff fee3 	bl	8003c64 <OLED_WriteData>
			c=c<<2;
 8003e9e:	00a4      	lsls	r4, r4, #2
 8003ea0:	b2e4      	uxtb	r4, r4
		for(uint8_t b=0; b<3;b++)
 8003ea2:	3501      	adds	r5, #1
 8003ea4:	b2ed      	uxtb	r5, r5
 8003ea6:	2d02      	cmp	r5, #2
 8003ea8:	d809      	bhi.n	8003ebe <OLED_font_5x7+0x66>
			if(c & 0x80)
 8003eaa:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003eae:	d1f1      	bne.n	8003e94 <OLED_font_5x7+0x3c>
			dwa_pixle=0;
 8003eb0:	2000      	movs	r0, #0
			if(c & 0x40)
 8003eb2:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003eb6:	d0f0      	beq.n	8003e9a <OLED_font_5x7+0x42>
				dwa_pixle+=color;
 8003eb8:	4438      	add	r0, r7
 8003eba:	b2c0      	uxtb	r0, r0
 8003ebc:	e7ed      	b.n	8003e9a <OLED_font_5x7+0x42>
	for(uint8_t a=0; a<8; a++)
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	b2f6      	uxtb	r6, r6
 8003ec2:	2e07      	cmp	r6, #7
 8003ec4:	d807      	bhi.n	8003ed6 <OLED_font_5x7+0x7e>
		uint8_t c=gzn1[znak][a]<<2;
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <OLED_font_5x7+0x94>)
 8003ec8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003ecc:	5d9c      	ldrb	r4, [r3, r6]
 8003ece:	00a4      	lsls	r4, r4, #2
 8003ed0:	b2e4      	uxtb	r4, r4
		for(uint8_t b=0; b<3;b++)
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	e7e7      	b.n	8003ea6 <OLED_font_5x7+0x4e>
		}
	}
	OLED_WriteData(0);
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f7ff fec4 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8003edc:	2000      	movs	r0, #0
 8003ede:	f7ff fec1 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f7ff febe 	bl	8003c64 <OLED_WriteData>
}
 8003ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eec:	20000008 	.word	0x20000008

08003ef0 <OLED_font_10x14>:

void OLED_font_10x14 (uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
{
 8003ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	4617      	mov	r7, r2
 8003efa:	4698      	mov	r8, r3
unsigned char a,b;
unsigned short int c;
unsigned char dwa_pixle;
OLED_WriteCmd(OLED_COLUMNS);
 8003efc:	2015      	movs	r0, #21
 8003efe:	f7ff fecf 	bl	8003ca0 <OLED_WriteCmd>
OLED_WriteCmd(x);
 8003f02:	4628      	mov	r0, r5
 8003f04:	f7ff fecc 	bl	8003ca0 <OLED_WriteCmd>
OLED_WriteCmd(x+5);
 8003f08:	1d68      	adds	r0, r5, #5
 8003f0a:	b2c0      	uxtb	r0, r0
 8003f0c:	f7ff fec8 	bl	8003ca0 <OLED_WriteCmd>
OLED_WriteCmd(OLED_ROWS);
 8003f10:	2075      	movs	r0, #117	; 0x75
 8003f12:	f7ff fec5 	bl	8003ca0 <OLED_WriteCmd>
OLED_WriteCmd(y);
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff fec2 	bl	8003ca0 <OLED_WriteCmd>
OLED_WriteCmd(y+16);
 8003f1c:	f104 0010 	add.w	r0, r4, #16
 8003f20:	b2c0      	uxtb	r0, r0
 8003f22:	f7ff febd 	bl	8003ca0 <OLED_WriteCmd>

	for(a=0;a<16;a++){
 8003f26:	2600      	movs	r6, #0
 8003f28:	e016      	b.n	8003f58 <OLED_font_10x14+0x68>
		c=gzn2[znak][a]<<4;
		for(b=0;b<6;b++){
			dwa_pixle=0;
			if(c & 0x8000){
				dwa_pixle=color << 4;
 8003f2a:	0138      	lsls	r0, r7, #4
 8003f2c:	b2c0      	uxtb	r0, r0
 8003f2e:	e00b      	b.n	8003f48 <OLED_font_10x14+0x58>
			}
			if(c & 0x4000){
				dwa_pixle+=color;
			}
			OLED_WriteData(dwa_pixle);
 8003f30:	f7ff fe98 	bl	8003c64 <OLED_WriteData>
			c=c<<2;
 8003f34:	00a4      	lsls	r4, r4, #2
 8003f36:	b2a4      	uxth	r4, r4
		for(b=0;b<6;b++){
 8003f38:	3501      	adds	r5, #1
 8003f3a:	b2ed      	uxtb	r5, r5
 8003f3c:	2d05      	cmp	r5, #5
 8003f3e:	d809      	bhi.n	8003f54 <OLED_font_10x14+0x64>
			if(c & 0x8000){
 8003f40:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003f44:	d1f1      	bne.n	8003f2a <OLED_font_10x14+0x3a>
			dwa_pixle=0;
 8003f46:	2000      	movs	r0, #0
			if(c & 0x4000){
 8003f48:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8003f4c:	d0f0      	beq.n	8003f30 <OLED_font_10x14+0x40>
				dwa_pixle+=color;
 8003f4e:	4438      	add	r0, r7
 8003f50:	b2c0      	uxtb	r0, r0
 8003f52:	e7ed      	b.n	8003f30 <OLED_font_10x14+0x40>
	for(a=0;a<16;a++){
 8003f54:	3601      	adds	r6, #1
 8003f56:	b2f6      	uxtb	r6, r6
 8003f58:	2e0f      	cmp	r6, #15
 8003f5a:	d80a      	bhi.n	8003f72 <OLED_font_10x14+0x82>
		c=gzn2[znak][a]<<4;
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <OLED_font_10x14+0xac>)
 8003f5e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8003f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f66:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8003f6a:	0124      	lsls	r4, r4, #4
 8003f6c:	b2a4      	uxth	r4, r4
		for(b=0;b<6;b++){
 8003f6e:	2500      	movs	r5, #0
 8003f70:	e7e4      	b.n	8003f3c <OLED_font_10x14+0x4c>
		}
	}
	OLED_WriteData(0);
 8003f72:	2000      	movs	r0, #0
 8003f74:	f7ff fe76 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7ff fe73 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f7ff fe70 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7ff fe6d 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7ff fe6a 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7ff fe67 	bl	8003c64 <OLED_WriteData>
}
 8003f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000008 	.word	0x20000008

08003fa0 <OLED_font_15x24>:

void OLED_font_15x24 (uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
{
 8003fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	4616      	mov	r6, r2
 8003faa:	4698      	mov	r8, r3
unsigned char a,b;
unsigned short int c;
unsigned char dwa_pixle;
	switch(znak){
 8003fac:	3b0a      	subs	r3, #10
 8003fae:	2b2f      	cmp	r3, #47	; 0x2f
 8003fb0:	d83d      	bhi.n	800402e <OLED_font_15x24+0x8e>
 8003fb2:	e8df f003 	tbb	[pc, r3]
 8003fb6:	3c1f      	.short	0x3c1f
 8003fb8:	3c3c3c3c 	.word	0x3c3c3c3c
 8003fbc:	3c3c3c3c 	.word	0x3c3c3c3c
 8003fc0:	3c3c3c3c 	.word	0x3c3c3c3c
 8003fc4:	3c3c3c3c 	.word	0x3c3c3c3c
 8003fc8:	3c3c3c3c 	.word	0x3c3c3c3c
 8003fcc:	3c3c3c3c 	.word	0x3c3c3c3c
 8003fd0:	3c3c363c 	.word	0x3c3c363c
 8003fd4:	3c3c3c3c 	.word	0x3c3c3c3c
 8003fd8:	3c39183c 	.word	0x3c39183c
 8003fdc:	1b1b1b1b 	.word	0x1b1b1b1b
 8003fe0:	1b1b1b1b 	.word	0x1b1b1b1b
 8003fe4:	1b1b      	.short	0x1b1b
		break;
		case '%':
			znak=0xc;
		break;
		case '.':
			znak=0xf;
 8003fe6:	f04f 080b 	mov.w	r8, #11
 8003fea:	e003      	b.n	8003ff4 <OLED_font_15x24+0x54>
			znak=znak-'0';
 8003fec:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8003ff0:	fa5f f888 	uxtb.w	r8, r8
		break;
		default:
			znak=0xe;
		break;
	}
	OLED_WriteCmd(OLED_COLUMNS);
 8003ff4:	2015      	movs	r0, #21
 8003ff6:	f7ff fe53 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff fe50 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x+7);
 8004000:	1de8      	adds	r0, r5, #7
 8004002:	b2c0      	uxtb	r0, r0
 8004004:	f7ff fe4c 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 8004008:	2075      	movs	r0, #117	; 0x75
 800400a:	f7ff fe49 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff fe46 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y+24);
 8004014:	f104 0018 	add.w	r0, r4, #24
 8004018:	b2c0      	uxtb	r0, r0
 800401a:	f7ff fe41 	bl	8003ca0 <OLED_WriteCmd>

	for(a=0;a<24;a++){
 800401e:	2700      	movs	r7, #0
 8004020:	e01f      	b.n	8004062 <OLED_font_15x24+0xc2>
			znak=0xc;
 8004022:	f04f 080c 	mov.w	r8, #12
		break;
 8004026:	e7e5      	b.n	8003ff4 <OLED_font_15x24+0x54>
			znak=0xf;
 8004028:	f04f 080f 	mov.w	r8, #15
		break;
 800402c:	e7e2      	b.n	8003ff4 <OLED_font_15x24+0x54>
			znak=0xe;
 800402e:	f04f 080e 	mov.w	r8, #14
		break;
 8004032:	e7df      	b.n	8003ff4 <OLED_font_15x24+0x54>
		c=gzn3[znak][a]<<1;
		for(b=0;b<8;b++){
			dwa_pixle=0;
			if(c & 0x8000){
				dwa_pixle=color << 4;
 8004034:	0130      	lsls	r0, r6, #4
 8004036:	b2c0      	uxtb	r0, r0
 8004038:	e00b      	b.n	8004052 <OLED_font_15x24+0xb2>
			}
			if(c & 0x4000){
				dwa_pixle+=color;
			}
			OLED_WriteData(dwa_pixle);
 800403a:	f7ff fe13 	bl	8003c64 <OLED_WriteData>
			c=c<<2;
 800403e:	00a4      	lsls	r4, r4, #2
 8004040:	b2a4      	uxth	r4, r4
		for(b=0;b<8;b++){
 8004042:	3501      	adds	r5, #1
 8004044:	b2ed      	uxtb	r5, r5
 8004046:	2d07      	cmp	r5, #7
 8004048:	d809      	bhi.n	800405e <OLED_font_15x24+0xbe>
			if(c & 0x8000){
 800404a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800404e:	d1f1      	bne.n	8004034 <OLED_font_15x24+0x94>
			dwa_pixle=0;
 8004050:	2000      	movs	r0, #0
			if(c & 0x4000){
 8004052:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8004056:	d0f0      	beq.n	800403a <OLED_font_15x24+0x9a>
				dwa_pixle+=color;
 8004058:	4430      	add	r0, r6
 800405a:	b2c0      	uxtb	r0, r0
 800405c:	e7ed      	b.n	800403a <OLED_font_15x24+0x9a>
	for(a=0;a<24;a++){
 800405e:	3701      	adds	r7, #1
 8004060:	b2ff      	uxtb	r7, r7
 8004062:	2f17      	cmp	r7, #23
 8004064:	d80a      	bhi.n	800407c <OLED_font_15x24+0xdc>
		c=gzn3[znak][a]<<1;
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <OLED_font_15x24+0x110>)
 8004068:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800406c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004070:	f833 4017 	ldrh.w	r4, [r3, r7, lsl #1]
 8004074:	0064      	lsls	r4, r4, #1
 8004076:	b2a4      	uxth	r4, r4
		for(b=0;b<8;b++){
 8004078:	2500      	movs	r5, #0
 800407a:	e7e4      	b.n	8004046 <OLED_font_15x24+0xa6>
		}
	}
	OLED_WriteData(0);
 800407c:	2000      	movs	r0, #0
 800407e:	f7ff fdf1 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8004082:	2000      	movs	r0, #0
 8004084:	f7ff fdee 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 8004088:	2000      	movs	r0, #0
 800408a:	f7ff fdeb 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 800408e:	2000      	movs	r0, #0
 8004090:	f7ff fde8 	bl	8003c64 <OLED_WriteData>

	OLED_WriteData(0);
 8004094:	2000      	movs	r0, #0
 8004096:	f7ff fde5 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 800409a:	2000      	movs	r0, #0
 800409c:	f7ff fde2 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7ff fddf 	bl	8003c64 <OLED_WriteData>
	OLED_WriteData(0);
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7ff fddc 	bl	8003c64 <OLED_WriteData>
}
 80040ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b0:	20000008 	.word	0x20000008

080040b4 <OLED_font_20x32>:

void OLED_font_20x32 (uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
// -----------------------------------------------
{
 80040b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b8:	4605      	mov	r5, r0
 80040ba:	460c      	mov	r4, r1
 80040bc:	4616      	mov	r6, r2
 80040be:	4698      	mov	r8, r3
unsigned char a,b;
unsigned int c;
unsigned char dwa_pixle;

	switch(znak){
 80040c0:	3b0a      	subs	r3, #10
 80040c2:	2b2f      	cmp	r3, #47	; 0x2f
 80040c4:	d83e      	bhi.n	8004144 <OLED_font_20x32+0x90>
 80040c6:	e8df f003 	tbb	[pc, r3]
 80040ca:	3d1f      	.short	0x3d1f
 80040cc:	3d3d3d3d 	.word	0x3d3d3d3d
 80040d0:	3d3d3d3d 	.word	0x3d3d3d3d
 80040d4:	3d3d3d3d 	.word	0x3d3d3d3d
 80040d8:	3d3d3d3d 	.word	0x3d3d3d3d
 80040dc:	3d3d3d3d 	.word	0x3d3d3d3d
 80040e0:	3d3d3d3d 	.word	0x3d3d3d3d
 80040e4:	3d3d373d 	.word	0x3d3d373d
 80040e8:	3d3d3d3d 	.word	0x3d3d3d3d
 80040ec:	3d3a183d 	.word	0x3d3a183d
 80040f0:	1b1b1b1b 	.word	0x1b1b1b1b
 80040f4:	1b1b1b1b 	.word	0x1b1b1b1b
 80040f8:	1b1b      	.short	0x1b1b
		break;
		case '%':
			znak=0xc;
		break;
		case '.':
			znak=0xf;
 80040fa:	f04f 080b 	mov.w	r8, #11
 80040fe:	e003      	b.n	8004108 <OLED_font_20x32+0x54>
			znak=znak-'0';
 8004100:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8004104:	fa5f f888 	uxtb.w	r8, r8
		break;
		default:
			znak=0xe;
		break;
	}
	OLED_WriteCmd(OLED_COLUMNS);
 8004108:	2015      	movs	r0, #21
 800410a:	f7ff fdc9 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 800410e:	4628      	mov	r0, r5
 8004110:	f7ff fdc6 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x+12);
 8004114:	f105 000c 	add.w	r0, r5, #12
 8004118:	b2c0      	uxtb	r0, r0
 800411a:	f7ff fdc1 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 800411e:	2075      	movs	r0, #117	; 0x75
 8004120:	f7ff fdbe 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 8004124:	4620      	mov	r0, r4
 8004126:	f7ff fdbb 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y+32);
 800412a:	f104 0020 	add.w	r0, r4, #32
 800412e:	b2c0      	uxtb	r0, r0
 8004130:	f7ff fdb6 	bl	8003ca0 <OLED_WriteCmd>

	for(a=0;a<32;a++){
 8004134:	2700      	movs	r7, #0
 8004136:	e01d      	b.n	8004174 <OLED_font_20x32+0xc0>
			znak=0xc;
 8004138:	f04f 080c 	mov.w	r8, #12
		break;
 800413c:	e7e4      	b.n	8004108 <OLED_font_20x32+0x54>
			znak=0xf;
 800413e:	f04f 080f 	mov.w	r8, #15
		break;
 8004142:	e7e1      	b.n	8004108 <OLED_font_20x32+0x54>
			znak=0xe;
 8004144:	f04f 080e 	mov.w	r8, #14
		break;
 8004148:	e7de      	b.n	8004108 <OLED_font_20x32+0x54>
		c=gzn4[znak][a];
		for(b=0;b<13;b++){
			dwa_pixle=0;
 800414a:	2000      	movs	r0, #0
			if(c & 0x80000l){
				dwa_pixle=color << 4;
			}
			if(c & 0x40000l){
 800414c:	f415 2f80 	tst.w	r5, #262144	; 0x40000
 8004150:	d001      	beq.n	8004156 <OLED_font_20x32+0xa2>
				dwa_pixle+=color;
 8004152:	4430      	add	r0, r6
 8004154:	b2c0      	uxtb	r0, r0
			}
			OLED_WriteData(dwa_pixle);
 8004156:	f7ff fd85 	bl	8003c64 <OLED_WriteData>
			c=c<<2;
 800415a:	00ad      	lsls	r5, r5, #2
		for(b=0;b<13;b++){
 800415c:	3401      	adds	r4, #1
 800415e:	b2e4      	uxtb	r4, r4
 8004160:	2c0c      	cmp	r4, #12
 8004162:	d805      	bhi.n	8004170 <OLED_font_20x32+0xbc>
			if(c & 0x80000l){
 8004164:	f415 2f00 	tst.w	r5, #524288	; 0x80000
 8004168:	d0ef      	beq.n	800414a <OLED_font_20x32+0x96>
				dwa_pixle=color << 4;
 800416a:	0130      	lsls	r0, r6, #4
 800416c:	b2c0      	uxtb	r0, r0
 800416e:	e7ed      	b.n	800414c <OLED_font_20x32+0x98>
	for(a=0;a<32;a++){
 8004170:	3701      	adds	r7, #1
 8004172:	b2ff      	uxtb	r7, r7
 8004174:	2f1f      	cmp	r7, #31
 8004176:	d808      	bhi.n	800418a <OLED_font_20x32+0xd6>
		c=gzn4[znak][a];
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <OLED_font_20x32+0xdc>)
 800417a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800417e:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8004182:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
		for(b=0;b<13;b++){
 8004186:	2400      	movs	r4, #0
 8004188:	e7ea      	b.n	8004160 <OLED_font_20x32+0xac>
		}
	}
}
 800418a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800418e:	bf00      	nop
 8004190:	20000008 	.word	0x20000008

08004194 <OLED_PutStr>:
// 1 - czcionka 10x14
// 2 - czcionka 15x24
// 3 - czcionka 20x32

void OLED_PutStr(uint8_t x, uint8_t y, const char *str, uint8_t font, uint8_t color)
{
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	4606      	mov	r6, r0
 800419a:	460f      	mov	r7, r1
 800419c:	4615      	mov	r5, r2
 800419e:	461c      	mov	r4, r3
 80041a0:	f89d 8018 	ldrb.w	r8, [sp, #24]
	switch(font)
 80041a4:	2c03      	cmp	r4, #3
 80041a6:	d813      	bhi.n	80041d0 <OLED_PutStr+0x3c>
 80041a8:	e8df f004 	tbb	[pc, r4]
 80041ac:	4d38260d 	.word	0x4d38260d
	{
		case 0:
			for(uint8_t i=0; i<strlen(str); i++)
				OLED_font_5x7(x+3*i , y, color, str[i]);
 80041b0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80041b4:	4430      	add	r0, r6
 80041b6:	5d2b      	ldrb	r3, [r5, r4]
 80041b8:	4642      	mov	r2, r8
 80041ba:	4639      	mov	r1, r7
 80041bc:	b2c0      	uxtb	r0, r0
 80041be:	f7ff fe4b 	bl	8003e58 <OLED_font_5x7>
			for(uint8_t i=0; i<strlen(str); i++)
 80041c2:	3401      	adds	r4, #1
 80041c4:	b2e4      	uxtb	r4, r4
 80041c6:	4628      	mov	r0, r5
 80041c8:	f7fc f82a 	bl	8000220 <strlen>
 80041cc:	4284      	cmp	r4, r0
 80041ce:	d3ef      	bcc.n	80041b0 <OLED_PutStr+0x1c>
		case 3:
			for(uint8_t i=0; i<strlen(str); i++)
				OLED_font_20x32(x+11*i , y, color, str[i]);
		break;
	}
}
 80041d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				OLED_font_10x14(x+6*i , y, color, str[i]);
 80041d4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80041d8:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 80041dc:	5d2b      	ldrb	r3, [r5, r4]
 80041de:	4642      	mov	r2, r8
 80041e0:	4639      	mov	r1, r7
 80041e2:	b2c0      	uxtb	r0, r0
 80041e4:	f7ff fe84 	bl	8003ef0 <OLED_font_10x14>
			for(uint8_t i=0; i<strlen(str); i++)
 80041e8:	3401      	adds	r4, #1
 80041ea:	b2e4      	uxtb	r4, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	f7fc f817 	bl	8000220 <strlen>
 80041f2:	4284      	cmp	r4, r0
 80041f4:	d3ee      	bcc.n	80041d4 <OLED_PutStr+0x40>
 80041f6:	e7eb      	b.n	80041d0 <OLED_PutStr+0x3c>
{
 80041f8:	2400      	movs	r4, #0
 80041fa:	e7f7      	b.n	80041ec <OLED_PutStr+0x58>
				OLED_font_15x24(x+8*i , y, color, str[i]);
 80041fc:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
 8004200:	5d2b      	ldrb	r3, [r5, r4]
 8004202:	4642      	mov	r2, r8
 8004204:	4639      	mov	r1, r7
 8004206:	b2c0      	uxtb	r0, r0
 8004208:	f7ff feca 	bl	8003fa0 <OLED_font_15x24>
			for(uint8_t i=0; i<strlen(str); i++)
 800420c:	3401      	adds	r4, #1
 800420e:	b2e4      	uxtb	r4, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f7fc f805 	bl	8000220 <strlen>
 8004216:	4284      	cmp	r4, r0
 8004218:	d3f0      	bcc.n	80041fc <OLED_PutStr+0x68>
 800421a:	e7d9      	b.n	80041d0 <OLED_PutStr+0x3c>
{
 800421c:	2400      	movs	r4, #0
 800421e:	e7f7      	b.n	8004210 <OLED_PutStr+0x7c>
				OLED_font_20x32(x+11*i , y, color, str[i]);
 8004220:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004224:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8004228:	4430      	add	r0, r6
 800422a:	5d2b      	ldrb	r3, [r5, r4]
 800422c:	4642      	mov	r2, r8
 800422e:	4639      	mov	r1, r7
 8004230:	b2c0      	uxtb	r0, r0
 8004232:	f7ff ff3f 	bl	80040b4 <OLED_font_20x32>
			for(uint8_t i=0; i<strlen(str); i++)
 8004236:	3401      	adds	r4, #1
 8004238:	b2e4      	uxtb	r4, r4
 800423a:	4628      	mov	r0, r5
 800423c:	f7fb fff0 	bl	8000220 <strlen>
 8004240:	4284      	cmp	r4, r0
 8004242:	d3ed      	bcc.n	8004220 <OLED_PutStr+0x8c>
 8004244:	e7c4      	b.n	80041d0 <OLED_PutStr+0x3c>
{
 8004246:	2400      	movs	r4, #0
 8004248:	e7f7      	b.n	800423a <OLED_PutStr+0xa6>
	...

0800424c <OLED_bitmap>:

void OLED_bitmap (unsigned char x, unsigned char y, const unsigned char s[])
{
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	4604      	mov	r4, r0
 8004250:	460f      	mov	r7, r1
 8004252:	4615      	mov	r5, r2
int	a,lb;
	lb=(unsigned short int)s[0]*(unsigned short int)s[1]/2;
 8004254:	7813      	ldrb	r3, [r2, #0]
 8004256:	7856      	ldrb	r6, [r2, #1]
 8004258:	fb06 f603 	mul.w	r6, r6, r3
 800425c:	1076      	asrs	r6, r6, #1
	OLED_WriteCmd(OLED_COLUMNS);
 800425e:	2015      	movs	r0, #21
 8004260:	f7ff fd1e 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff fd1b 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(x+s[0]/2-1);
 800426a:	7828      	ldrb	r0, [r5, #0]
 800426c:	eb04 0050 	add.w	r0, r4, r0, lsr #1
 8004270:	b2c0      	uxtb	r0, r0
 8004272:	3801      	subs	r0, #1
 8004274:	b2c0      	uxtb	r0, r0
 8004276:	f7ff fd13 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 800427a:	2075      	movs	r0, #117	; 0x75
 800427c:	f7ff fd10 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 8004280:	4638      	mov	r0, r7
 8004282:	f7ff fd0d 	bl	8003ca0 <OLED_WriteCmd>
	OLED_WriteCmd(y+s[1]);
 8004286:	7868      	ldrb	r0, [r5, #1]
 8004288:	4438      	add	r0, r7
 800428a:	b2c0      	uxtb	r0, r0
 800428c:	f7ff fd08 	bl	8003ca0 <OLED_WriteCmd>
	for(a=2;a<lb+2;a++){
 8004290:	2402      	movs	r4, #2
 8004292:	1c73      	adds	r3, r6, #1
 8004294:	42a3      	cmp	r3, r4
 8004296:	db09      	blt.n	80042ac <OLED_bitmap+0x60>
		OLED_WriteData(s[a] * settings.contrast);		//dodany kontrast żeby kreske nad O w BRAK PROBKI wyswietlac
 8004298:	5d28      	ldrb	r0, [r5, r4]
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <OLED_bitmap+0x64>)
 800429c:	795b      	ldrb	r3, [r3, #5]
 800429e:	fb10 f003 	smulbb	r0, r0, r3
 80042a2:	b2c0      	uxtb	r0, r0
 80042a4:	f7ff fcde 	bl	8003c64 <OLED_WriteData>
	for(a=2;a<lb+2;a++){
 80042a8:	3401      	adds	r4, #1
 80042aa:	e7f2      	b.n	8004292 <OLED_bitmap+0x46>
	}													//zeby normalnie wyswietlic obrazek to kontrast trzeba wywalic albo tuz przed wyswietleniem obrazka zmienic na 0x01
}
 80042ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200006c4 	.word	0x200006c4

080042b4 <register_on_key_press_callback>:

static void (*on_key_press_callback)(uint8_t key, uint8_t context);

void register_on_key_press_callback(void (*callback)(uint8_t key, uint8_t context))
{
	on_key_press_callback = callback;
 80042b4:	4b01      	ldr	r3, [pc, #4]	; (80042bc <register_on_key_press_callback+0x8>)
 80042b6:	6018      	str	r0, [r3, #0]
}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	2000067c 	.word	0x2000067c

080042c0 <isr_kbd>:
inline void isr_kbd(void)
{
	static uint8_t i;
	static uint8_t keyState[2];
	uint32_t k;
	k = GPIOE->IDR;						//keyboard row and column port
 80042c0:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <isr_kbd+0x80>)
 80042c2:	691a      	ldr	r2, [r3, #16]
	k >>= 4;
	k = k & 0x7;
 80042c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
//	k = (GPIOE->IDR & 0x7);
	if(k < 7)							//if any button pressed
 80042c8:	2a06      	cmp	r2, #6
 80042ca:	d82f      	bhi.n	800432c <isr_kbd+0x6c>
	{
		keyCode |= k;
 80042cc:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <isr_kbd+0x84>)
 80042ce:	7919      	ldrb	r1, [r3, #4]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	711a      	strb	r2, [r3, #4]
		keyCode = (keyCode | (i<<3));
 80042d4:	7959      	ldrb	r1, [r3, #5]
 80042d6:	791a      	ldrb	r2, [r3, #4]
 80042d8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	711a      	strb	r2, [r3, #4]
		keyState[i] = KEY_PRESSED;
 80042e0:	4419      	add	r1, r3
 80042e2:	2201      	movs	r2, #1
 80042e4:	720a      	strb	r2, [r1, #8]
		keyCode |= KEY_PRESSED_MASK;
 80042e6:	791a      	ldrb	r2, [r3, #4]
 80042e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ec:	711a      	strb	r2, [r3, #4]
	}
	else keyState[i] = KEY_NOT_PRESSED;

	if (keyState[0] == KEY_NOT_PRESSED && keyState[1] == KEY_NOT_PRESSED) keyCode &= (~KEY_PRESSED_MASK);
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <isr_kbd+0x84>)
 80042f0:	7a1b      	ldrb	r3, [r3, #8]
 80042f2:	b93b      	cbnz	r3, 8004304 <isr_kbd+0x44>
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <isr_kbd+0x84>)
 80042f6:	7a5b      	ldrb	r3, [r3, #9]
 80042f8:	b923      	cbnz	r3, 8004304 <isr_kbd+0x44>
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <isr_kbd+0x84>)
 80042fc:	7913      	ldrb	r3, [r2, #4]
 80042fe:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 8004302:	7113      	strb	r3, [r2, #4]

	if (++i > 1) i = 0;
 8004304:	4a0f      	ldr	r2, [pc, #60]	; (8004344 <isr_kbd+0x84>)
 8004306:	7953      	ldrb	r3, [r2, #5]
 8004308:	3301      	adds	r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	7153      	strb	r3, [r2, #5]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d902      	bls.n	8004318 <isr_kbd+0x58>
 8004312:	4613      	mov	r3, r2
 8004314:	2200      	movs	r2, #0
 8004316:	715a      	strb	r2, [r3, #5]

	if (i == 0) GPIOE -> BSRR = (1 << 2) | ((1 << 3) << 16);	//Scan next column
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <isr_kbd+0x84>)
 800431a:	795b      	ldrb	r3, [r3, #5]
 800431c:	b963      	cbnz	r3, 8004338 <isr_kbd+0x78>
 800431e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004322:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <isr_kbd+0x88>)
 8004328:	619a      	str	r2, [r3, #24]
 800432a:	4770      	bx	lr
	else keyState[i] = KEY_NOT_PRESSED;
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <isr_kbd+0x84>)
 800432e:	795a      	ldrb	r2, [r3, #5]
 8004330:	4413      	add	r3, r2
 8004332:	2200      	movs	r2, #0
 8004334:	721a      	strb	r2, [r3, #8]
 8004336:	e7da      	b.n	80042ee <isr_kbd+0x2e>
	else GPIOE -> BSRR = (1 << 3) | ((1 << 2) << 16);
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <isr_kbd+0x80>)
 800433a:	4a04      	ldr	r2, [pc, #16]	; (800434c <isr_kbd+0x8c>)
 800433c:	619a      	str	r2, [r3, #24]


}
 800433e:	4770      	bx	lr
 8004340:	40021000 	.word	0x40021000
 8004344:	2000067c 	.word	0x2000067c
 8004348:	00080004 	.word	0x00080004
 800434c:	00040008 	.word	0x00040008

08004350 <kbd_event_handler>:


void kbd_event_handler(uint8_t context)
{
 8004350:	b508      	push	{r3, lr}
	//uint8_t kk[10];
	static uint8_t keyFlags;
	keyFlags = keyCode >> 6;
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <kbd_event_handler+0x48>)
 8004354:	7913      	ldrb	r3, [r2, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	7293      	strb	r3, [r2, #10]
	if (keyFlags && keyFlags < 3)		//if any key flags set
 800435a:	1e5a      	subs	r2, r3, #1
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	2a01      	cmp	r2, #1
 8004360:	d900      	bls.n	8004364 <kbd_event_handler+0x14>
		{
//			UART_print("KEY_RELEASED\r\n");
			keyCode = KEY_READ_MASK;
		}
	}
}
 8004362:	bd08      	pop	{r3, pc}
		if (KEY_PRESSED_FLAG_SET)
 8004364:	2b01      	cmp	r3, #1
 8004366:	d007      	beq.n	8004378 <kbd_event_handler+0x28>
		if (KEY_RELEASED_FLAG_SET)
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <kbd_event_handler+0x48>)
 800436a:	7a9b      	ldrb	r3, [r3, #10]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d1f8      	bne.n	8004362 <kbd_event_handler+0x12>
			keyCode = KEY_READ_MASK;
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <kbd_event_handler+0x48>)
 8004372:	2210      	movs	r2, #16
 8004374:	711a      	strb	r2, [r3, #4]
}
 8004376:	e7f4      	b.n	8004362 <kbd_event_handler+0x12>
			keyCode |= KEY_RELEASED_MASK;
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <kbd_event_handler+0x48>)
 800437a:	791a      	ldrb	r2, [r3, #4]
 800437c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004380:	711a      	strb	r2, [r3, #4]
			if (on_key_press_callback) on_key_press_callback(keyCode & 0x0F, context);
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ef      	beq.n	8004368 <kbd_event_handler+0x18>
 8004388:	4a03      	ldr	r2, [pc, #12]	; (8004398 <kbd_event_handler+0x48>)
 800438a:	7912      	ldrb	r2, [r2, #4]
 800438c:	4601      	mov	r1, r0
 800438e:	f002 000f 	and.w	r0, r2, #15
 8004392:	4798      	blx	r3
 8004394:	e7e8      	b.n	8004368 <kbd_event_handler+0x18>
 8004396:	bf00      	nop
 8004398:	2000067c 	.word	0x2000067c

0800439c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800439c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043a0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a2:	2400      	movs	r4, #0
 80043a4:	9407      	str	r4, [sp, #28]
 80043a6:	9408      	str	r4, [sp, #32]
 80043a8:	9409      	str	r4, [sp, #36]	; 0x24
 80043aa:	940a      	str	r4, [sp, #40]	; 0x28
 80043ac:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ae:	9401      	str	r4, [sp, #4]
 80043b0:	4b55      	ldr	r3, [pc, #340]	; (8004508 <MX_GPIO_Init+0x16c>)
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	f042 0210 	orr.w	r2, r2, #16
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043bc:	f002 0210 	and.w	r2, r2, #16
 80043c0:	9201      	str	r2, [sp, #4]
 80043c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043c4:	9402      	str	r4, [sp, #8]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c8:	f042 0204 	orr.w	r2, r2, #4
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
 80043ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d0:	f002 0204 	and.w	r2, r2, #4
 80043d4:	9202      	str	r2, [sp, #8]
 80043d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d8:	9403      	str	r4, [sp, #12]
 80043da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
 80043e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80043e8:	9203      	str	r2, [sp, #12]
 80043ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ec:	9404      	str	r4, [sp, #16]
 80043ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
 80043f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f8:	f002 0201 	and.w	r2, r2, #1
 80043fc:	9204      	str	r2, [sp, #16]
 80043fe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004400:	9405      	str	r4, [sp, #20]
 8004402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004404:	f042 0202 	orr.w	r2, r2, #2
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
 800440a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440c:	f002 0202 	and.w	r2, r2, #2
 8004410:	9205      	str	r2, [sp, #20]
 8004412:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004414:	9406      	str	r4, [sp, #24]
 8004416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004418:	f042 0208 	orr.w	r2, r2, #8
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	9306      	str	r3, [sp, #24]
 8004426:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, K1_OUT_Pin|K2_OUT_Pin, GPIO_PIN_RESET);
 8004428:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8004514 <MX_GPIO_Init+0x178>
 800442c:	4622      	mov	r2, r4
 800442e:	210c      	movs	r1, #12
 8004430:	4640      	mov	r0, r8
 8004432:	f7fd f971 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_OFF_Pin|OLED_D_C_Pin, GPIO_PIN_RESET);
 8004436:	4f35      	ldr	r7, [pc, #212]	; (800450c <MX_GPIO_Init+0x170>)
 8004438:	4622      	mov	r2, r4
 800443a:	2112      	movs	r1, #18
 800443c:	4638      	mov	r0, r7
 800443e:	f7fd f96b 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RESET_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 8004442:	2201      	movs	r2, #1
 8004444:	2144      	movs	r1, #68	; 0x44
 8004446:	4638      	mov	r0, r7
 8004448:	f7fd f966 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 800444c:	4e30      	ldr	r6, [pc, #192]	; (8004510 <MX_GPIO_Init+0x174>)
 800444e:	2201      	movs	r2, #1
 8004450:	f241 0103 	movw	r1, #4099	; 0x1003
 8004454:	4630      	mov	r0, r6
 8004456:	f7fd f95f 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_OFF_GPIO_Port, POWER_OFF_Pin, GPIO_PIN_RESET);
 800445a:	4622      	mov	r2, r4
 800445c:	2104      	movs	r1, #4
 800445e:	4630      	mov	r0, r6
 8004460:	f7fd f95a 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_WP_GPIO_Port, SPI_WP_Pin, GPIO_PIN_RESET);
 8004464:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004518 <MX_GPIO_Init+0x17c>
 8004468:	4622      	mov	r2, r4
 800446a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800446e:	4648      	mov	r0, r9
 8004470:	f7fd f952 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : K1_OUT_Pin K2_OUT_Pin */
  GPIO_InitStruct.Pin = K1_OUT_Pin|K2_OUT_Pin;
 8004474:	230c      	movs	r3, #12
 8004476:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004478:	2501      	movs	r5, #1
 800447a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004480:	a907      	add	r1, sp, #28
 8004482:	4640      	mov	r0, r8
 8004484:	f7fd f868 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : K3_Pin K4_Pin K5_Pin */
  GPIO_InitStruct.Pin = K3_Pin|K4_Pin|K5_Pin;
 8004488:	2370      	movs	r3, #112	; 0x70
 800448a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800448c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004490:	a907      	add	r1, sp, #28
 8004492:	4640      	mov	r0, r8
 8004494:	f7fd f860 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_OFF_Pin */
  GPIO_InitStruct.Pin = OLED_OFF_Pin;
 8004498:	2302      	movs	r3, #2
 800449a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800449c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OLED_OFF_GPIO_Port, &GPIO_InitStruct);
 80044a2:	a907      	add	r1, sp, #28
 80044a4:	4638      	mov	r0, r7
 80044a6:	f7fd f857 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RESET_Pin OLED_D_C_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|OLED_D_C_Pin|OLED_CS_Pin;
 80044aa:	2354      	movs	r3, #84	; 0x54
 80044ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b2:	f04f 0803 	mov.w	r8, #3
 80044b6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ba:	a907      	add	r1, sp, #28
 80044bc:	4638      	mov	r0, r7
 80044be:	f7fd f84b 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin POWER_OFF_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|POWER_OFF_Pin;
 80044c2:	2307      	movs	r3, #7
 80044c4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ca:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044cc:	a907      	add	r1, sp, #28
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7fd f842 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80044d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044da:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044de:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80044e2:	a907      	add	r1, sp, #28
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7fd f837 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_WP_Pin */
  GPIO_InitStruct.Pin = SPI_WP_Pin;
 80044ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI_WP_GPIO_Port, &GPIO_InitStruct);
 80044f8:	a907      	add	r1, sp, #28
 80044fa:	4648      	mov	r0, r9
 80044fc:	f7fd f82c 	bl	8001558 <HAL_GPIO_Init>

}
 8004500:	b00d      	add	sp, #52	; 0x34
 8004502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	40020000 	.word	0x40020000
 8004510:	40020400 	.word	0x40020400
 8004514:	40021000 	.word	0x40021000
 8004518:	40020c00 	.word	0x40020c00

0800451c <MX_DMA_Init>:
{
 800451c:	b510      	push	{r4, lr}
 800451e:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004520:	2400      	movs	r4, #0
 8004522:	9400      	str	r4, [sp, #0]
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <MX_DMA_Init+0x74>)
 8004526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004528:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
 800452e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004530:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004534:	9200      	str	r2, [sp, #0]
 8004536:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004538:	9401      	str	r4, [sp, #4]
 800453a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800454c:	4622      	mov	r2, r4
 800454e:	4621      	mov	r1, r4
 8004550:	2010      	movs	r0, #16
 8004552:	f7fc fd43 	bl	8000fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004556:	2010      	movs	r0, #16
 8004558:	f7fc fd74 	bl	8001044 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800455c:	4622      	mov	r2, r4
 800455e:	4621      	mov	r1, r4
 8004560:	2011      	movs	r0, #17
 8004562:	f7fc fd3b 	bl	8000fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004566:	2011      	movs	r0, #17
 8004568:	f7fc fd6c 	bl	8001044 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800456c:	4622      	mov	r2, r4
 800456e:	4621      	mov	r1, r4
 8004570:	2039      	movs	r0, #57	; 0x39
 8004572:	f7fc fd33 	bl	8000fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004576:	2039      	movs	r0, #57	; 0x39
 8004578:	f7fc fd64 	bl	8001044 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800457c:	4622      	mov	r2, r4
 800457e:	4621      	mov	r1, r4
 8004580:	2045      	movs	r0, #69	; 0x45
 8004582:	f7fc fd2b 	bl	8000fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004586:	2045      	movs	r0, #69	; 0x45
 8004588:	f7fc fd5c 	bl	8001044 <HAL_NVIC_EnableIRQ>
}
 800458c:	b002      	add	sp, #8
 800458e:	bd10      	pop	{r4, pc}
 8004590:	40023800 	.word	0x40023800

08004594 <MX_SPI1_Init>:
{
 8004594:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8004596:	480c      	ldr	r0, [pc, #48]	; (80045c8 <MX_SPI1_Init+0x34>)
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <MX_SPI1_Init+0x38>)
 800459a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800459c:	f44f 7382 	mov.w	r3, #260	; 0x104
 80045a0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80045a2:	2300      	movs	r3, #0
 80045a4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80045a6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045a8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045aa:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80045ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80045b2:	2208      	movs	r2, #8
 80045b4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045b6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045b8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ba:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80045bc:	230a      	movs	r3, #10
 80045be:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045c0:	f7fe f930 	bl	8002824 <HAL_SPI_Init>
}
 80045c4:	bd08      	pop	{r3, pc}
 80045c6:	bf00      	nop
 80045c8:	200016c4 	.word	0x200016c4
 80045cc:	40013000 	.word	0x40013000

080045d0 <MX_SPI2_Init>:
{
 80045d0:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80045d2:	480c      	ldr	r0, [pc, #48]	; (8004604 <MX_SPI2_Init+0x34>)
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <MX_SPI2_Init+0x38>)
 80045d6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80045dc:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045de:	2300      	movs	r3, #0
 80045e0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045e2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045e6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80045e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ec:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80045ee:	2230      	movs	r2, #48	; 0x30
 80045f0:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045f2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80045f4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80045f8:	230a      	movs	r3, #10
 80045fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80045fc:	f7fe f912 	bl	8002824 <HAL_SPI_Init>
}
 8004600:	bd08      	pop	{r3, pc}
 8004602:	bf00      	nop
 8004604:	200007b0 	.word	0x200007b0
 8004608:	40003800 	.word	0x40003800

0800460c <MX_USART2_UART_Init>:
{
 800460c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800460e:	4808      	ldr	r0, [pc, #32]	; (8004630 <MX_USART2_UART_Init+0x24>)
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <MX_USART2_UART_Init+0x28>)
 8004612:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004614:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004618:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800461a:	2300      	movs	r3, #0
 800461c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800461e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004620:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004622:	220c      	movs	r2, #12
 8004624:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004626:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004628:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800462a:	f7fe fec3 	bl	80033b4 <HAL_UART_Init>
}
 800462e:	bd08      	pop	{r3, pc}
 8004630:	20001720 	.word	0x20001720
 8004634:	40004400 	.word	0x40004400

08004638 <MX_USART6_UART_Init>:
{
 8004638:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 800463a:	4808      	ldr	r0, [pc, #32]	; (800465c <MX_USART6_UART_Init+0x24>)
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <MX_USART6_UART_Init+0x28>)
 800463e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8004640:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004644:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004646:	2300      	movs	r3, #0
 8004648:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800464a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800464c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800464e:	220c      	movs	r2, #12
 8004650:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004652:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004654:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004656:	f7fe fead 	bl	80033b4 <HAL_UART_Init>
}
 800465a:	bd08      	pop	{r3, pc}
 800465c:	20001684 	.word	0x20001684
 8004660:	40011400 	.word	0x40011400

08004664 <MX_TIM6_Init>:
{
 8004664:	b530      	push	{r4, r5, lr}
 8004666:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004668:	2500      	movs	r5, #0
 800466a:	9500      	str	r5, [sp, #0]
 800466c:	9501      	str	r5, [sp, #4]
  htim6.Instance = TIM6;
 800466e:	4c0a      	ldr	r4, [pc, #40]	; (8004698 <MX_TIM6_Init+0x34>)
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <MX_TIM6_Init+0x38>)
 8004672:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 48000-1;
 8004674:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8004678:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467a:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 20-1;
 800467c:	2313      	movs	r3, #19
 800467e:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004680:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004682:	4620      	mov	r0, r4
 8004684:	f7fe fce6 	bl	8003054 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004688:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800468a:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800468c:	4669      	mov	r1, sp
 800468e:	4620      	mov	r0, r4
 8004690:	f7fe fcfa 	bl	8003088 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004694:	b003      	add	sp, #12
 8004696:	bd30      	pop	{r4, r5, pc}
 8004698:	2000110c 	.word	0x2000110c
 800469c:	40001000 	.word	0x40001000

080046a0 <MX_RTC_Init>:
{
 80046a0:	b530      	push	{r4, r5, lr}
 80046a2:	b08b      	sub	sp, #44	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80046a4:	2228      	movs	r2, #40	; 0x28
 80046a6:	2100      	movs	r1, #0
 80046a8:	4668      	mov	r0, sp
 80046aa:	f003 fcc1 	bl	8008030 <memset>
  hrtc.Instance = RTC;
 80046ae:	4d18      	ldr	r5, [pc, #96]	; (8004710 <MX_RTC_Init+0x70>)
 80046b0:	4b18      	ldr	r3, [pc, #96]	; (8004714 <MX_RTC_Init+0x74>)
 80046b2:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80046b4:	2400      	movs	r4, #0
 80046b6:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 80046b8:	237f      	movs	r3, #127	; 0x7f
 80046ba:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 80046bc:	23ff      	movs	r3, #255	; 0xff
 80046be:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80046c0:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80046c2:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80046c4:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7fd fd6f 	bl	80021aa <HAL_RTC_Init>
  sAlarm.AlarmTime.Hours = 0;
 80046cc:	f88d 4000 	strb.w	r4, [sp]
  sAlarm.AlarmTime.Minutes = 0;
 80046d0:	f88d 4001 	strb.w	r4, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80046d4:	f88d 4002 	strb.w	r4, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80046d8:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046da:	9403      	str	r4, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80046dc:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80046de:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80046e0:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80046e2:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f88d 3020 	strb.w	r3, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80046ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ee:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80046f0:	4622      	mov	r2, r4
 80046f2:	4669      	mov	r1, sp
 80046f4:	4628      	mov	r0, r5
 80046f6:	f7fd feb1 	bl	800245c <HAL_RTC_SetAlarm_IT>
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80046fa:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 80046fe:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004700:	4622      	mov	r2, r4
 8004702:	4669      	mov	r1, sp
 8004704:	4628      	mov	r0, r5
 8004706:	f7fd fea9 	bl	800245c <HAL_RTC_SetAlarm_IT>
}
 800470a:	b00b      	add	sp, #44	; 0x2c
 800470c:	bd30      	pop	{r4, r5, pc}
 800470e:	bf00      	nop
 8004710:	200010e8 	.word	0x200010e8
 8004714:	40002800 	.word	0x40002800

08004718 <CalcChecksum>:
{
 8004718:	b410      	push	{r4}
 800471a:	4604      	mov	r4, r0
	for(uint8_t i=0; i<checkSumPositionInPacket; i++)
 800471c:	2300      	movs	r3, #0
	uint8_t sum=0;
 800471e:	4618      	mov	r0, r3
	for(uint8_t i=0; i<checkSumPositionInPacket; i++)
 8004720:	428b      	cmp	r3, r1
 8004722:	d205      	bcs.n	8004730 <CalcChecksum+0x18>
		sum+=arr[i];
 8004724:	5ce2      	ldrb	r2, [r4, r3]
 8004726:	4410      	add	r0, r2
 8004728:	b2c0      	uxtb	r0, r0
	for(uint8_t i=0; i<checkSumPositionInPacket; i++)
 800472a:	3301      	adds	r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e7f7      	b.n	8004720 <CalcChecksum+0x8>
}
 8004730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <No_of_days_a_month>:
	if(gDate.Year % 4 == 0)
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <No_of_days_a_month+0x3c>)
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	f013 0f03 	tst.w	r3, #3
 8004740:	d10c      	bne.n	800475c <No_of_days_a_month+0x24>
		if (month == 2) return 29;
 8004742:	2802      	cmp	r0, #2
 8004744:	d012      	beq.n	800476c <No_of_days_a_month+0x34>
	switch(month)
 8004746:	3801      	subs	r0, #1
 8004748:	280b      	cmp	r0, #11
 800474a:	d80d      	bhi.n	8004768 <No_of_days_a_month+0x30>
 800474c:	e8df f000 	tbb	[pc, r0]
 8004750:	100a0c0a 	.word	0x100a0c0a
 8004754:	0a0a100a 	.word	0x0a0a100a
 8004758:	0a100a10 	.word	0x0a100a10
		if (month == 2) return 28;
 800475c:	2802      	cmp	r0, #2
 800475e:	d1f2      	bne.n	8004746 <No_of_days_a_month+0xe>
 8004760:	201c      	movs	r0, #28
 8004762:	4770      	bx	lr
{
 8004764:	201f      	movs	r0, #31
 8004766:	4770      	bx	lr
	return 0;
 8004768:	2000      	movs	r0, #0
 800476a:	4770      	bx	lr
		if (month == 2) return 29;
 800476c:	201d      	movs	r0, #29
 800476e:	4770      	bx	lr
			return 30;
 8004770:	201e      	movs	r0, #30
}
 8004772:	4770      	bx	lr
 8004774:	20000688 	.word	0x20000688

08004778 <verify_date>:
	if(gDate.Year % 4 == 0)
 8004778:	4b74      	ldr	r3, [pc, #464]	; (800494c <verify_date+0x1d4>)
 800477a:	78db      	ldrb	r3, [r3, #3]
 800477c:	f013 0f03 	tst.w	r3, #3
 8004780:	d176      	bne.n	8004870 <verify_date+0xf8>
		switch(gDate.Month)
 8004782:	4b72      	ldr	r3, [pc, #456]	; (800494c <verify_date+0x1d4>)
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	3b01      	subs	r3, #1
 8004788:	2b0b      	cmp	r3, #11
 800478a:	f200 80dd 	bhi.w	8004948 <verify_date+0x1d0>
 800478e:	e8df f003 	tbb	[pc, r3]
 8004792:	0f06      	.short	0x0f06
 8004794:	332a2118 	.word	0x332a2118
 8004798:	574e453c 	.word	0x574e453c
 800479c:	675f      	.short	0x675f
				if(gDate.Date > 31) gDate.Date = 31;
 800479e:	4b6b      	ldr	r3, [pc, #428]	; (800494c <verify_date+0x1d4>)
 80047a0:	789b      	ldrb	r3, [r3, #2]
 80047a2:	2b1f      	cmp	r3, #31
 80047a4:	f240 80d0 	bls.w	8004948 <verify_date+0x1d0>
 80047a8:	4b68      	ldr	r3, [pc, #416]	; (800494c <verify_date+0x1d4>)
 80047aa:	221f      	movs	r2, #31
 80047ac:	709a      	strb	r2, [r3, #2]
 80047ae:	4770      	bx	lr
				if(gDate.Date > 29) gDate.Date = 29;
 80047b0:	4b66      	ldr	r3, [pc, #408]	; (800494c <verify_date+0x1d4>)
 80047b2:	789b      	ldrb	r3, [r3, #2]
 80047b4:	2b1d      	cmp	r3, #29
 80047b6:	f240 80c7 	bls.w	8004948 <verify_date+0x1d0>
 80047ba:	4b64      	ldr	r3, [pc, #400]	; (800494c <verify_date+0x1d4>)
 80047bc:	221d      	movs	r2, #29
 80047be:	709a      	strb	r2, [r3, #2]
 80047c0:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 80047c2:	4b62      	ldr	r3, [pc, #392]	; (800494c <verify_date+0x1d4>)
 80047c4:	789b      	ldrb	r3, [r3, #2]
 80047c6:	2b1f      	cmp	r3, #31
 80047c8:	f240 80be 	bls.w	8004948 <verify_date+0x1d0>
 80047cc:	4b5f      	ldr	r3, [pc, #380]	; (800494c <verify_date+0x1d4>)
 80047ce:	221f      	movs	r2, #31
 80047d0:	709a      	strb	r2, [r3, #2]
 80047d2:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 80047d4:	4b5d      	ldr	r3, [pc, #372]	; (800494c <verify_date+0x1d4>)
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	2b1e      	cmp	r3, #30
 80047da:	f240 80b5 	bls.w	8004948 <verify_date+0x1d0>
 80047de:	4b5b      	ldr	r3, [pc, #364]	; (800494c <verify_date+0x1d4>)
 80047e0:	221e      	movs	r2, #30
 80047e2:	709a      	strb	r2, [r3, #2]
 80047e4:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 80047e6:	4b59      	ldr	r3, [pc, #356]	; (800494c <verify_date+0x1d4>)
 80047e8:	789b      	ldrb	r3, [r3, #2]
 80047ea:	2b1f      	cmp	r3, #31
 80047ec:	f240 80ac 	bls.w	8004948 <verify_date+0x1d0>
 80047f0:	4b56      	ldr	r3, [pc, #344]	; (800494c <verify_date+0x1d4>)
 80047f2:	221f      	movs	r2, #31
 80047f4:	709a      	strb	r2, [r3, #2]
 80047f6:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 80047f8:	4b54      	ldr	r3, [pc, #336]	; (800494c <verify_date+0x1d4>)
 80047fa:	789b      	ldrb	r3, [r3, #2]
 80047fc:	2b1e      	cmp	r3, #30
 80047fe:	f240 80a3 	bls.w	8004948 <verify_date+0x1d0>
 8004802:	4b52      	ldr	r3, [pc, #328]	; (800494c <verify_date+0x1d4>)
 8004804:	221e      	movs	r2, #30
 8004806:	709a      	strb	r2, [r3, #2]
 8004808:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 800480a:	4b50      	ldr	r3, [pc, #320]	; (800494c <verify_date+0x1d4>)
 800480c:	789b      	ldrb	r3, [r3, #2]
 800480e:	2b1f      	cmp	r3, #31
 8004810:	f240 809a 	bls.w	8004948 <verify_date+0x1d0>
 8004814:	4b4d      	ldr	r3, [pc, #308]	; (800494c <verify_date+0x1d4>)
 8004816:	221f      	movs	r2, #31
 8004818:	709a      	strb	r2, [r3, #2]
 800481a:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 800481c:	4b4b      	ldr	r3, [pc, #300]	; (800494c <verify_date+0x1d4>)
 800481e:	789b      	ldrb	r3, [r3, #2]
 8004820:	2b1f      	cmp	r3, #31
 8004822:	f240 8091 	bls.w	8004948 <verify_date+0x1d0>
 8004826:	4b49      	ldr	r3, [pc, #292]	; (800494c <verify_date+0x1d4>)
 8004828:	221f      	movs	r2, #31
 800482a:	709a      	strb	r2, [r3, #2]
 800482c:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 800482e:	4b47      	ldr	r3, [pc, #284]	; (800494c <verify_date+0x1d4>)
 8004830:	789b      	ldrb	r3, [r3, #2]
 8004832:	2b1e      	cmp	r3, #30
 8004834:	f240 8088 	bls.w	8004948 <verify_date+0x1d0>
 8004838:	4b44      	ldr	r3, [pc, #272]	; (800494c <verify_date+0x1d4>)
 800483a:	221e      	movs	r2, #30
 800483c:	709a      	strb	r2, [r3, #2]
 800483e:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 8004840:	4b42      	ldr	r3, [pc, #264]	; (800494c <verify_date+0x1d4>)
 8004842:	789b      	ldrb	r3, [r3, #2]
 8004844:	2b1f      	cmp	r3, #31
 8004846:	d97f      	bls.n	8004948 <verify_date+0x1d0>
 8004848:	4b40      	ldr	r3, [pc, #256]	; (800494c <verify_date+0x1d4>)
 800484a:	221f      	movs	r2, #31
 800484c:	709a      	strb	r2, [r3, #2]
 800484e:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 8004850:	4b3e      	ldr	r3, [pc, #248]	; (800494c <verify_date+0x1d4>)
 8004852:	789b      	ldrb	r3, [r3, #2]
 8004854:	2b1e      	cmp	r3, #30
 8004856:	d977      	bls.n	8004948 <verify_date+0x1d0>
 8004858:	4b3c      	ldr	r3, [pc, #240]	; (800494c <verify_date+0x1d4>)
 800485a:	221e      	movs	r2, #30
 800485c:	709a      	strb	r2, [r3, #2]
 800485e:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 8004860:	4b3a      	ldr	r3, [pc, #232]	; (800494c <verify_date+0x1d4>)
 8004862:	789b      	ldrb	r3, [r3, #2]
 8004864:	2b1f      	cmp	r3, #31
 8004866:	d96f      	bls.n	8004948 <verify_date+0x1d0>
 8004868:	4b38      	ldr	r3, [pc, #224]	; (800494c <verify_date+0x1d4>)
 800486a:	221f      	movs	r2, #31
 800486c:	709a      	strb	r2, [r3, #2]
 800486e:	4770      	bx	lr
		switch(gDate.Month)
 8004870:	4b36      	ldr	r3, [pc, #216]	; (800494c <verify_date+0x1d4>)
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	3b01      	subs	r3, #1
 8004876:	2b0b      	cmp	r3, #11
 8004878:	d866      	bhi.n	8004948 <verify_date+0x1d0>
 800487a:	e8df f003 	tbb	[pc, r3]
 800487e:	0e06      	.short	0x0e06
 8004880:	2e261e16 	.word	0x2e261e16
 8004884:	4e463e36 	.word	0x4e463e36
 8004888:	5e56      	.short	0x5e56
				if(gDate.Date > 31) gDate.Date = 31;
 800488a:	4b30      	ldr	r3, [pc, #192]	; (800494c <verify_date+0x1d4>)
 800488c:	789b      	ldrb	r3, [r3, #2]
 800488e:	2b1f      	cmp	r3, #31
 8004890:	d95a      	bls.n	8004948 <verify_date+0x1d0>
 8004892:	4b2e      	ldr	r3, [pc, #184]	; (800494c <verify_date+0x1d4>)
 8004894:	221f      	movs	r2, #31
 8004896:	709a      	strb	r2, [r3, #2]
 8004898:	4770      	bx	lr
				if(gDate.Date > 28) gDate.Date = 28;
 800489a:	4b2c      	ldr	r3, [pc, #176]	; (800494c <verify_date+0x1d4>)
 800489c:	789b      	ldrb	r3, [r3, #2]
 800489e:	2b1c      	cmp	r3, #28
 80048a0:	d952      	bls.n	8004948 <verify_date+0x1d0>
 80048a2:	4b2a      	ldr	r3, [pc, #168]	; (800494c <verify_date+0x1d4>)
 80048a4:	221c      	movs	r2, #28
 80048a6:	709a      	strb	r2, [r3, #2]
 80048a8:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 80048aa:	4b28      	ldr	r3, [pc, #160]	; (800494c <verify_date+0x1d4>)
 80048ac:	789b      	ldrb	r3, [r3, #2]
 80048ae:	2b1f      	cmp	r3, #31
 80048b0:	d94a      	bls.n	8004948 <verify_date+0x1d0>
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <verify_date+0x1d4>)
 80048b4:	221f      	movs	r2, #31
 80048b6:	709a      	strb	r2, [r3, #2]
 80048b8:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <verify_date+0x1d4>)
 80048bc:	789b      	ldrb	r3, [r3, #2]
 80048be:	2b1e      	cmp	r3, #30
 80048c0:	d942      	bls.n	8004948 <verify_date+0x1d0>
 80048c2:	4b22      	ldr	r3, [pc, #136]	; (800494c <verify_date+0x1d4>)
 80048c4:	221e      	movs	r2, #30
 80048c6:	709a      	strb	r2, [r3, #2]
 80048c8:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <verify_date+0x1d4>)
 80048cc:	789b      	ldrb	r3, [r3, #2]
 80048ce:	2b1f      	cmp	r3, #31
 80048d0:	d93a      	bls.n	8004948 <verify_date+0x1d0>
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <verify_date+0x1d4>)
 80048d4:	221f      	movs	r2, #31
 80048d6:	709a      	strb	r2, [r3, #2]
 80048d8:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <verify_date+0x1d4>)
 80048dc:	789b      	ldrb	r3, [r3, #2]
 80048de:	2b1e      	cmp	r3, #30
 80048e0:	d932      	bls.n	8004948 <verify_date+0x1d0>
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <verify_date+0x1d4>)
 80048e4:	221e      	movs	r2, #30
 80048e6:	709a      	strb	r2, [r3, #2]
 80048e8:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 80048ea:	4b18      	ldr	r3, [pc, #96]	; (800494c <verify_date+0x1d4>)
 80048ec:	789b      	ldrb	r3, [r3, #2]
 80048ee:	2b1f      	cmp	r3, #31
 80048f0:	d92a      	bls.n	8004948 <verify_date+0x1d0>
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <verify_date+0x1d4>)
 80048f4:	221f      	movs	r2, #31
 80048f6:	709a      	strb	r2, [r3, #2]
 80048f8:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <verify_date+0x1d4>)
 80048fc:	789b      	ldrb	r3, [r3, #2]
 80048fe:	2b1f      	cmp	r3, #31
 8004900:	d922      	bls.n	8004948 <verify_date+0x1d0>
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <verify_date+0x1d4>)
 8004904:	221f      	movs	r2, #31
 8004906:	709a      	strb	r2, [r3, #2]
 8004908:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <verify_date+0x1d4>)
 800490c:	789b      	ldrb	r3, [r3, #2]
 800490e:	2b1e      	cmp	r3, #30
 8004910:	d91a      	bls.n	8004948 <verify_date+0x1d0>
 8004912:	4b0e      	ldr	r3, [pc, #56]	; (800494c <verify_date+0x1d4>)
 8004914:	221e      	movs	r2, #30
 8004916:	709a      	strb	r2, [r3, #2]
 8004918:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <verify_date+0x1d4>)
 800491c:	789b      	ldrb	r3, [r3, #2]
 800491e:	2b1f      	cmp	r3, #31
 8004920:	d912      	bls.n	8004948 <verify_date+0x1d0>
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <verify_date+0x1d4>)
 8004924:	221f      	movs	r2, #31
 8004926:	709a      	strb	r2, [r3, #2]
 8004928:	4770      	bx	lr
				if(gDate.Date > 30) gDate.Date = 30;
 800492a:	4b08      	ldr	r3, [pc, #32]	; (800494c <verify_date+0x1d4>)
 800492c:	789b      	ldrb	r3, [r3, #2]
 800492e:	2b1e      	cmp	r3, #30
 8004930:	d90a      	bls.n	8004948 <verify_date+0x1d0>
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <verify_date+0x1d4>)
 8004934:	221e      	movs	r2, #30
 8004936:	709a      	strb	r2, [r3, #2]
 8004938:	4770      	bx	lr
				if(gDate.Date > 31) gDate.Date = 31;
 800493a:	4b04      	ldr	r3, [pc, #16]	; (800494c <verify_date+0x1d4>)
 800493c:	789b      	ldrb	r3, [r3, #2]
 800493e:	2b1f      	cmp	r3, #31
 8004940:	d902      	bls.n	8004948 <verify_date+0x1d0>
 8004942:	4b02      	ldr	r3, [pc, #8]	; (800494c <verify_date+0x1d4>)
 8004944:	221f      	movs	r2, #31
 8004946:	709a      	strb	r2, [r3, #2]
}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000688 	.word	0x20000688

08004950 <fetch_date_time>:
{
 8004950:	b538      	push	{r3, r4, r5, lr}
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004952:	4c0e      	ldr	r4, [pc, #56]	; (800498c <fetch_date_time+0x3c>)
 8004954:	4d0e      	ldr	r5, [pc, #56]	; (8004990 <fetch_date_time+0x40>)
 8004956:	2200      	movs	r2, #0
 8004958:	1d21      	adds	r1, r4, #4
 800495a:	4628      	mov	r0, r5
 800495c:	f7fd fe57 	bl	800260e <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8004960:	2200      	movs	r2, #0
 8004962:	4621      	mov	r1, r4
 8004964:	4628      	mov	r0, r5
 8004966:	f7fd fe7a 	bl	800265e <HAL_RTC_GetDate>
	 if (gDate.Year == 0) gDate.Year = 20;
 800496a:	78e3      	ldrb	r3, [r4, #3]
 800496c:	b90b      	cbnz	r3, 8004972 <fetch_date_time+0x22>
 800496e:	2214      	movs	r2, #20
 8004970:	70e2      	strb	r2, [r4, #3]
	 if (gDate.Month == 0) gDate.Year = 1;
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <fetch_date_time+0x3c>)
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	b913      	cbnz	r3, 800497e <fetch_date_time+0x2e>
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <fetch_date_time+0x3c>)
 800497a:	2201      	movs	r2, #1
 800497c:	70da      	strb	r2, [r3, #3]
	 if (gDate.Date == 0) gDate.Date = 1;
 800497e:	4b03      	ldr	r3, [pc, #12]	; (800498c <fetch_date_time+0x3c>)
 8004980:	789b      	ldrb	r3, [r3, #2]
 8004982:	b913      	cbnz	r3, 800498a <fetch_date_time+0x3a>
 8004984:	4b01      	ldr	r3, [pc, #4]	; (800498c <fetch_date_time+0x3c>)
 8004986:	2201      	movs	r2, #1
 8004988:	709a      	strb	r2, [r3, #2]
}
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000688 	.word	0x20000688
 8004990:	200010e8 	.word	0x200010e8

08004994 <verify_settings>:
{
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	b082      	sub	sp, #8
	if (DEVICE_BRAND_NEW)	// if eeprom never programmed before -> load default settings
 8004998:	4b52      	ldr	r3, [pc, #328]	; (8004ae4 <verify_settings+0x150>)
 800499a:	791b      	ldrb	r3, [r3, #4]
 800499c:	2bff      	cmp	r3, #255	; 0xff
 800499e:	d034      	beq.n	8004a0a <verify_settings+0x76>
	if (SETTINGS_INCORRECT)
 80049a0:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <verify_settings+0x150>)
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d803      	bhi.n	80049b0 <verify_settings+0x1c>
 80049a8:	4b4e      	ldr	r3, [pc, #312]	; (8004ae4 <verify_settings+0x150>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d978      	bls.n	8004aa2 <verify_settings+0x10e>
		settings.language = POLISH;
 80049b0:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <verify_settings+0x150>)
 80049b2:	2400      	movs	r4, #0
 80049b4:	711c      	strb	r4, [r3, #4]
		settings.measurementType = MEASUREMENT_SINGLE;
 80049b6:	701c      	strb	r4, [r3, #0]
		settings.measurementUnit = UNIT_BRIX;
 80049b8:	705c      	strb	r4, [r3, #1]
		settings.thermalCompensation = ON;
 80049ba:	2201      	movs	r2, #1
 80049bc:	709a      	strb	r2, [r3, #2]
		settings.singleMeasurementTime = 15;
 80049be:	210f      	movs	r1, #15
 80049c0:	70d9      	strb	r1, [r3, #3]
		settings.contrast = DEFAULT_CONTRAST;
 80049c2:	2509      	movs	r5, #9
 80049c4:	715d      	strb	r5, [r3, #5]
		settings.storageMode = ARCHIVE_STORAGE_MODE_BY_KEYBOARD;
 80049c6:	719a      	strb	r2, [r3, #6]
		erase_archive();
 80049c8:	f7ff f8f2 	bl	8003bb0 <erase_archive>
		OLED_CLEAR();
 80049cc:	f7ff fa27 	bl	8003e1e <OLED_CLEAR>
		OLED_PutStr(0, 24, "MEMORY ERROR", 0, 0x09);
 80049d0:	9500      	str	r5, [sp, #0]
 80049d2:	4623      	mov	r3, r4
 80049d4:	4a44      	ldr	r2, [pc, #272]	; (8004ae8 <verify_settings+0x154>)
 80049d6:	2118      	movs	r1, #24
 80049d8:	4620      	mov	r0, r4
 80049da:	f7ff fbdb 	bl	8004194 <OLED_PutStr>
		OLED_PutStr(0, 33, "LOADING DEFAULT", 0, 0x09);
 80049de:	9500      	str	r5, [sp, #0]
 80049e0:	4623      	mov	r3, r4
 80049e2:	4a42      	ldr	r2, [pc, #264]	; (8004aec <verify_settings+0x158>)
 80049e4:	2121      	movs	r1, #33	; 0x21
 80049e6:	4620      	mov	r0, r4
 80049e8:	f7ff fbd4 	bl	8004194 <OLED_PutStr>
		OLED_PutStr(0, 42, "SETTINGS", 0, 0x09);
 80049ec:	9500      	str	r5, [sp, #0]
 80049ee:	4623      	mov	r3, r4
 80049f0:	4a3f      	ldr	r2, [pc, #252]	; (8004af0 <verify_settings+0x15c>)
 80049f2:	212a      	movs	r1, #42	; 0x2a
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff fbcd 	bl	8004194 <OLED_PutStr>
		HAL_Delay(5000);
 80049fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80049fe:	f7fc fac7 	bl	8000f90 <HAL_Delay>
		OLED_CLEAR();
 8004a02:	f7ff fa0c 	bl	8003e1e <OLED_CLEAR>
}
 8004a06:	b002      	add	sp, #8
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
	if (DEVICE_BRAND_NEW)	// if eeprom never programmed before -> load default settings
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <verify_settings+0x150>)
 8004a0c:	881a      	ldrh	r2, [r3, #0]
 8004a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d1c4      	bne.n	80049a0 <verify_settings+0xc>
 8004a16:	4b33      	ldr	r3, [pc, #204]	; (8004ae4 <verify_settings+0x150>)
 8004a18:	78db      	ldrb	r3, [r3, #3]
 8004a1a:	2bff      	cmp	r3, #255	; 0xff
 8004a1c:	d1c0      	bne.n	80049a0 <verify_settings+0xc>
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <verify_settings+0x150>)
 8004a20:	799b      	ldrb	r3, [r3, #6]
 8004a22:	2bff      	cmp	r3, #255	; 0xff
 8004a24:	d1bc      	bne.n	80049a0 <verify_settings+0xc>
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <verify_settings+0x150>)
 8004a28:	7a1b      	ldrb	r3, [r3, #8]
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	d1b8      	bne.n	80049a0 <verify_settings+0xc>
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <verify_settings+0x150>)
 8004a30:	79db      	ldrb	r3, [r3, #7]
 8004a32:	2bff      	cmp	r3, #255	; 0xff
 8004a34:	d1b4      	bne.n	80049a0 <verify_settings+0xc>
		settings.language = POLISH;
 8004a36:	4c2b      	ldr	r4, [pc, #172]	; (8004ae4 <verify_settings+0x150>)
 8004a38:	2500      	movs	r5, #0
 8004a3a:	7125      	strb	r5, [r4, #4]
		settings.measurementType = MEASUREMENT_SINGLE;
 8004a3c:	7025      	strb	r5, [r4, #0]
		settings.measurementUnit = UNIT_BRIX;
 8004a3e:	7065      	strb	r5, [r4, #1]
		settings.thermalCompensation = ON;
 8004a40:	2301      	movs	r3, #1
 8004a42:	70a3      	strb	r3, [r4, #2]
		settings.singleMeasurementTime = 15;
 8004a44:	220f      	movs	r2, #15
 8004a46:	70e2      	strb	r2, [r4, #3]
		settings.contrast = DEFAULT_CONTRAST;
 8004a48:	2609      	movs	r6, #9
 8004a4a:	7166      	strb	r6, [r4, #5]
		settings.storageMode = STORAGE_BY_KEYBOARD;
 8004a4c:	71a3      	strb	r3, [r4, #6]
		settings.archiveEntriesTotal = 0;
 8004a4e:	7225      	strb	r5, [r4, #8]
		settings.archiveFirstEntryOffset = 0;
 8004a50:	71e5      	strb	r5, [r4, #7]
		settings.serialNumber = 0;
 8004a52:	8165      	strh	r5, [r4, #10]
		OLED_CLEAR();
 8004a54:	f7ff f9e3 	bl	8003e1e <OLED_CLEAR>
		OLED_PutStr(2, 24, "EEPROM uninitialized", 0, 0x09);
 8004a58:	9600      	str	r6, [sp, #0]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	4a25      	ldr	r2, [pc, #148]	; (8004af4 <verify_settings+0x160>)
 8004a5e:	2118      	movs	r1, #24
 8004a60:	2002      	movs	r0, #2
 8004a62:	f7ff fb97 	bl	8004194 <OLED_PutStr>
		OLED_PutStr(2, 33, "initializing EEPROM", 0, 0x09);
 8004a66:	9600      	str	r6, [sp, #0]
 8004a68:	462b      	mov	r3, r5
 8004a6a:	4a23      	ldr	r2, [pc, #140]	; (8004af8 <verify_settings+0x164>)
 8004a6c:	2121      	movs	r1, #33	; 0x21
 8004a6e:	2002      	movs	r0, #2
 8004a70:	f7ff fb90 	bl	8004194 <OLED_PutStr>
		EEPROM_write_multiple(EEPROM_SETTINGS_ADDRESS, (uint8_t*)&settings, sizeof(settings));		//zapisz domyslne ustawienia
 8004a74:	220c      	movs	r2, #12
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7fe ff8f 	bl	800399c <EEPROM_write_multiple>
		HAL_Delay(4000);
 8004a7e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004a82:	f7fc fa85 	bl	8000f90 <HAL_Delay>
		OLED_PutStr(2, 42, "DONE!", 0, 0x09);
 8004a86:	9600      	str	r6, [sp, #0]
 8004a88:	462b      	mov	r3, r5
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <verify_settings+0x168>)
 8004a8c:	212a      	movs	r1, #42	; 0x2a
 8004a8e:	2002      	movs	r0, #2
 8004a90:	f7ff fb80 	bl	8004194 <OLED_PutStr>
		HAL_Delay(1000);
 8004a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a98:	f7fc fa7a 	bl	8000f90 <HAL_Delay>
		OLED_CLEAR();
 8004a9c:	f7ff f9bf 	bl	8003e1e <OLED_CLEAR>
 8004aa0:	e77e      	b.n	80049a0 <verify_settings+0xc>
	if (SETTINGS_INCORRECT)
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <verify_settings+0x150>)
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d882      	bhi.n	80049b0 <verify_settings+0x1c>
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <verify_settings+0x150>)
 8004aac:	789b      	ldrb	r3, [r3, #2]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	f63f af7e 	bhi.w	80049b0 <verify_settings+0x1c>
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <verify_settings+0x150>)
 8004ab6:	78db      	ldrb	r3, [r3, #3]
 8004ab8:	2b0e      	cmp	r3, #14
 8004aba:	f67f af79 	bls.w	80049b0 <verify_settings+0x1c>
 8004abe:	2b28      	cmp	r3, #40	; 0x28
 8004ac0:	f63f af76 	bhi.w	80049b0 <verify_settings+0x1c>
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <verify_settings+0x150>)
 8004ac6:	799b      	ldrb	r3, [r3, #6]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f63f af71 	bhi.w	80049b0 <verify_settings+0x1c>
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <verify_settings+0x150>)
 8004ad0:	7a1b      	ldrb	r3, [r3, #8]
 8004ad2:	2bfa      	cmp	r3, #250	; 0xfa
 8004ad4:	f63f af6c 	bhi.w	80049b0 <verify_settings+0x1c>
 8004ad8:	4b02      	ldr	r3, [pc, #8]	; (8004ae4 <verify_settings+0x150>)
 8004ada:	79db      	ldrb	r3, [r3, #7]
 8004adc:	2bf8      	cmp	r3, #248	; 0xf8
 8004ade:	d992      	bls.n	8004a06 <verify_settings+0x72>
 8004ae0:	e766      	b.n	80049b0 <verify_settings+0x1c>
 8004ae2:	bf00      	nop
 8004ae4:	200006c4 	.word	0x200006c4
 8004ae8:	08010010 	.word	0x08010010
 8004aec:	08010020 	.word	0x08010020
 8004af0:	08010030 	.word	0x08010030
 8004af4:	0800ffdc 	.word	0x0800ffdc
 8004af8:	0800fff4 	.word	0x0800fff4
 8004afc:	08010008 	.word	0x08010008

08004b00 <reset_screen_saver>:
{
 8004b00:	b508      	push	{r3, lr}
	ssTimer = 0;
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <reset_screen_saver+0x1c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	801a      	strh	r2, [r3, #0]
	ssStateChanged = 1;
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <reset_screen_saver+0x20>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
	settings.contrast = EEPROM_read(EEPROM_CONTRAST_ADDR);
 8004b0e:	2005      	movs	r0, #5
 8004b10:	f7fe fecc 	bl	80038ac <EEPROM_read>
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <reset_screen_saver+0x24>)
 8004b16:	7158      	strb	r0, [r3, #5]
}
 8004b18:	bd08      	pop	{r3, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000c0e 	.word	0x20000c0e
 8004b20:	2000171c 	.word	0x2000171c
 8004b24:	200006c4 	.word	0x200006c4

08004b28 <exit_main_menu>:
{
 8004b28:	b508      	push	{r3, lr}
	if(settings.measurementType != MEASUREMENT_SINGLE) nacisnijStart = 0;		// dodane aby usunac buga wyswietlania przy zmianie trybu pomiaru. nie kasowal sie napis NACISNIJ
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <exit_main_menu+0x2c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b113      	cbz	r3, 8004b36 <exit_main_menu+0xe>
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <exit_main_menu+0x30>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	761a      	strb	r2, [r3, #24]
	OLED_CLEAR();
 8004b36:	f7ff f972 	bl	8003e1e <OLED_CLEAR>
	frame.position[0] = 0;
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <exit_main_menu+0x34>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	frame.position[1] = 0;
 8004b42:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	frame.position[2] = 0;
 8004b46:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	frame.level = 0;
 8004b4a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	frame.type = FRAME_EXIT;
 8004b4e:	22ff      	movs	r2, #255	; 0xff
 8004b50:	701a      	strb	r2, [r3, #0]
}
 8004b52:	bd08      	pop	{r3, pc}
 8004b54:	200006c4 	.word	0x200006c4
 8004b58:	20000688 	.word	0x20000688
 8004b5c:	20001604 	.word	0x20001604

08004b60 <MM_up_one_level>:
	 frame.type = FRAME_MAIN_MENU;
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <MM_up_one_level+0x1c>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
	 frame.position[frame.level] = 0;
 8004b66:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8004b6a:	1899      	adds	r1, r3, r2
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f881 0062 	strb.w	r0, [r1, #98]	; 0x62
	 frame.level--;
 8004b72:	3a01      	subs	r2, #1
 8004b74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20001604 	.word	0x20001604

08004b80 <drawFrame>:
{
 8004b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b84:	b084      	sub	sp, #16
	 fetch_date_time();
 8004b86:	f7ff fee3 	bl	8004950 <fetch_date_time>
	 verify_date();
 8004b8a:	f7ff fdf5 	bl	8004778 <verify_date>
	switch (frame.type)
 8004b8e:	4ba4      	ldr	r3, [pc, #656]	; (8004e20 <drawFrame+0x2a0>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	d845      	bhi.n	8004c22 <drawFrame+0xa2>
 8004b96:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b9a:	04c9      	.short	0x04c9
 8004b9c:	00440635 	.word	0x00440635
 8004ba0:	046f05e9 	.word	0x046f05e9
 8004ba4:	005200fd 	.word	0x005200fd
 8004ba8:	0008      	.short	0x0008
			if (settings.thermalCompensation == OFF) sprintf(frame.firstLine, Main_Screen[3][settings.language]);
 8004baa:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <drawFrame+0x2a4>)
 8004bac:	789b      	ldrb	r3, [r3, #2]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d13a      	bne.n	8004c28 <drawFrame+0xa8>
 8004bb2:	4b9c      	ldr	r3, [pc, #624]	; (8004e24 <drawFrame+0x2a4>)
 8004bb4:	791b      	ldrb	r3, [r3, #4]
 8004bb6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	336c      	adds	r3, #108	; 0x6c
 8004bbe:	499a      	ldr	r1, [pc, #616]	; (8004e28 <drawFrame+0x2a8>)
 8004bc0:	4419      	add	r1, r3
 8004bc2:	489a      	ldr	r0, [pc, #616]	; (8004e2c <drawFrame+0x2ac>)
 8004bc4:	f003 fea6 	bl	8008914 <siprintf>
			OLED_PutStr(40, 1, frame.firstLine, 0, settings.contrast);
 8004bc8:	4c98      	ldr	r4, [pc, #608]	; (8004e2c <drawFrame+0x2ac>)
 8004bca:	4d96      	ldr	r5, [pc, #600]	; (8004e24 <drawFrame+0x2a4>)
 8004bcc:	796b      	ldrb	r3, [r5, #5]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	2028      	movs	r0, #40	; 0x28
 8004bd8:	f7ff fadc 	bl	8004194 <OLED_PutStr>
			OLED_PutStr(3, 24, frame.secondLine, 1, settings.contrast);
 8004bdc:	796b      	ldrb	r3, [r5, #5]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2301      	movs	r3, #1
 8004be2:	f104 0218 	add.w	r2, r4, #24
 8004be6:	2118      	movs	r1, #24
 8004be8:	2003      	movs	r0, #3
 8004bea:	f7ff fad3 	bl	8004194 <OLED_PutStr>
			sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", gDate.Date, gDate.Month, gDate.Year+2000, gTime.Hours,gTime.Minutes,gTime.Seconds);
 8004bee:	4990      	ldr	r1, [pc, #576]	; (8004e30 <drawFrame+0x2b0>)
 8004bf0:	78cb      	ldrb	r3, [r1, #3]
 8004bf2:	790a      	ldrb	r2, [r1, #4]
 8004bf4:	7948      	ldrb	r0, [r1, #5]
 8004bf6:	798e      	ldrb	r6, [r1, #6]
 8004bf8:	3448      	adds	r4, #72	; 0x48
 8004bfa:	9603      	str	r6, [sp, #12]
 8004bfc:	9002      	str	r0, [sp, #8]
 8004bfe:	9201      	str	r2, [sp, #4]
 8004c00:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	784b      	ldrb	r3, [r1, #1]
 8004c08:	788a      	ldrb	r2, [r1, #2]
 8004c0a:	498a      	ldr	r1, [pc, #552]	; (8004e34 <drawFrame+0x2b4>)
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f003 fe81 	bl	8008914 <siprintf>
			OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8004c12:	796b      	ldrb	r3, [r5, #5]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2300      	movs	r3, #0
 8004c18:	4622      	mov	r2, r4
 8004c1a:	2138      	movs	r1, #56	; 0x38
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fab9 	bl	8004194 <OLED_PutStr>
}
 8004c22:	b004      	add	sp, #16
 8004c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else sprintf(frame.firstLine, Main_Screen[0][settings.language]);
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <drawFrame+0x2a4>)
 8004c2a:	7919      	ldrb	r1, [r3, #4]
 8004c2c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004c30:	4b7d      	ldr	r3, [pc, #500]	; (8004e28 <drawFrame+0x2a8>)
 8004c32:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004c36:	487d      	ldr	r0, [pc, #500]	; (8004e2c <drawFrame+0x2ac>)
 8004c38:	f003 fe6c 	bl	8008914 <siprintf>
 8004c3c:	e7c4      	b.n	8004bc8 <drawFrame+0x48>
			if (settings.thermalCompensation == OFF) sprintf(frame.firstLine, Main_Screen[3][settings.language]);
 8004c3e:	4b79      	ldr	r3, [pc, #484]	; (8004e24 <drawFrame+0x2a4>)
 8004c40:	789b      	ldrb	r3, [r3, #2]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d157      	bne.n	8004cf6 <drawFrame+0x176>
 8004c46:	4b77      	ldr	r3, [pc, #476]	; (8004e24 <drawFrame+0x2a4>)
 8004c48:	791b      	ldrb	r3, [r3, #4]
 8004c4a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	336c      	adds	r3, #108	; 0x6c
 8004c52:	4975      	ldr	r1, [pc, #468]	; (8004e28 <drawFrame+0x2a8>)
 8004c54:	4419      	add	r1, r3
 8004c56:	4875      	ldr	r0, [pc, #468]	; (8004e2c <drawFrame+0x2ac>)
 8004c58:	f003 fe5c 	bl	8008914 <siprintf>
			OLED_PutStr(40, 1, frame.firstLine, 0, settings.contrast);
 8004c5c:	4b71      	ldr	r3, [pc, #452]	; (8004e24 <drawFrame+0x2a4>)
 8004c5e:	795b      	ldrb	r3, [r3, #5]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	4a71      	ldr	r2, [pc, #452]	; (8004e2c <drawFrame+0x2ac>)
 8004c66:	2101      	movs	r1, #1
 8004c68:	2028      	movs	r0, #40	; 0x28
 8004c6a:	f7ff fa93 	bl	8004194 <OLED_PutStr>
			if (newArchiveEntryAdded && settings.archiveEntriesTotal != 0)
 8004c6e:	4b72      	ldr	r3, [pc, #456]	; (8004e38 <drawFrame+0x2b8>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b11b      	cbz	r3, 8004c7c <drawFrame+0xfc>
 8004c74:	4b6b      	ldr	r3, [pc, #428]	; (8004e24 <drawFrame+0x2a4>)
 8004c76:	7a1a      	ldrb	r2, [r3, #8]
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d147      	bne.n	8004d0c <drawFrame+0x18c>
				OLED_PutStr(10, 1, "    ", 0, settings.contrast);
 8004c7c:	4b69      	ldr	r3, [pc, #420]	; (8004e24 <drawFrame+0x2a4>)
 8004c7e:	795b      	ldrb	r3, [r3, #5]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	2300      	movs	r3, #0
 8004c84:	4a6d      	ldr	r2, [pc, #436]	; (8004e3c <drawFrame+0x2bc>)
 8004c86:	2101      	movs	r1, #1
 8004c88:	200a      	movs	r0, #10
 8004c8a:	f7ff fa83 	bl	8004194 <OLED_PutStr>
			if (nacisnijStart == 1)	//dla polskiej wersji ten bajzel
 8004c8e:	4b68      	ldr	r3, [pc, #416]	; (8004e30 <drawFrame+0x2b0>)
 8004c90:	7e1b      	ldrb	r3, [r3, #24]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d048      	beq.n	8004d2a <drawFrame+0x1aa>
				OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 8004c98:	4c69      	ldr	r4, [pc, #420]	; (8004e40 <drawFrame+0x2c0>)
 8004c9a:	4d62      	ldr	r5, [pc, #392]	; (8004e24 <drawFrame+0x2a4>)
 8004c9c:	796b      	ldrb	r3, [r5, #5]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	210f      	movs	r1, #15
 8004ca6:	2003      	movs	r0, #3
 8004ca8:	f7ff fa74 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 8004cac:	796b      	ldrb	r3, [r5, #5]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f104 0218 	add.w	r2, r4, #24
 8004cb6:	2122      	movs	r1, #34	; 0x22
 8004cb8:	2003      	movs	r0, #3
 8004cba:	f7ff fa6b 	bl	8004194 <OLED_PutStr>
			sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", gDate.Date, gDate.Month, gDate.Year+2000, gTime.Hours,gTime.Minutes,gTime.Seconds);
 8004cbe:	4a5c      	ldr	r2, [pc, #368]	; (8004e30 <drawFrame+0x2b0>)
 8004cc0:	78d3      	ldrb	r3, [r2, #3]
 8004cc2:	7911      	ldrb	r1, [r2, #4]
 8004cc4:	7950      	ldrb	r0, [r2, #5]
 8004cc6:	7995      	ldrb	r5, [r2, #6]
 8004cc8:	4c5e      	ldr	r4, [pc, #376]	; (8004e44 <drawFrame+0x2c4>)
 8004cca:	9503      	str	r5, [sp, #12]
 8004ccc:	9002      	str	r0, [sp, #8]
 8004cce:	9101      	str	r1, [sp, #4]
 8004cd0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	7853      	ldrb	r3, [r2, #1]
 8004cd8:	7892      	ldrb	r2, [r2, #2]
 8004cda:	4956      	ldr	r1, [pc, #344]	; (8004e34 <drawFrame+0x2b4>)
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f003 fe19 	bl	8008914 <siprintf>
			OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8004ce2:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <drawFrame+0x2a4>)
 8004ce4:	795b      	ldrb	r3, [r3, #5]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4622      	mov	r2, r4
 8004cec:	2138      	movs	r1, #56	; 0x38
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fa50 	bl	8004194 <OLED_PutStr>
			break;
 8004cf4:	e795      	b.n	8004c22 <drawFrame+0xa2>
			else sprintf(frame.firstLine, Main_Screen[0][settings.language]);
 8004cf6:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <drawFrame+0x2a4>)
 8004cf8:	7919      	ldrb	r1, [r3, #4]
 8004cfa:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004cfe:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <drawFrame+0x2a8>)
 8004d00:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004d04:	4849      	ldr	r0, [pc, #292]	; (8004e2c <drawFrame+0x2ac>)
 8004d06:	f003 fe05 	bl	8008914 <siprintf>
 8004d0a:	e7a7      	b.n	8004c5c <drawFrame+0xdc>
				sprintf(frame.buffer,"A%03u", settings.archiveEntriesTotal);
 8004d0c:	4c4e      	ldr	r4, [pc, #312]	; (8004e48 <drawFrame+0x2c8>)
 8004d0e:	494f      	ldr	r1, [pc, #316]	; (8004e4c <drawFrame+0x2cc>)
 8004d10:	4620      	mov	r0, r4
 8004d12:	f003 fdff 	bl	8008914 <siprintf>
				OLED_PutStr(10, 1, frame.buffer, 0, settings.contrast);
 8004d16:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <drawFrame+0x2a4>)
 8004d18:	795b      	ldrb	r3, [r3, #5]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4622      	mov	r2, r4
 8004d20:	2101      	movs	r1, #1
 8004d22:	200a      	movs	r0, #10
 8004d24:	f7ff fa36 	bl	8004194 <OLED_PutStr>
 8004d28:	e7b1      	b.n	8004c8e <drawFrame+0x10e>
				OLED_PutStr(tmpVar, 15, "NAC", 1, settings.contrast);
 8004d2a:	4c3e      	ldr	r4, [pc, #248]	; (8004e24 <drawFrame+0x2a4>)
 8004d2c:	7963      	ldrb	r3, [r4, #5]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2301      	movs	r3, #1
 8004d32:	4a47      	ldr	r2, [pc, #284]	; (8004e50 <drawFrame+0x2d0>)
 8004d34:	210f      	movs	r1, #15
 8004d36:	200c      	movs	r0, #12
 8004d38:	f7ff fa2c 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(tmpVar + 21, 15, "SN", 1, settings.contrast);
 8004d3c:	7963      	ldrb	r3, [r4, #5]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	2301      	movs	r3, #1
 8004d42:	4a44      	ldr	r2, [pc, #272]	; (8004e54 <drawFrame+0x2d4>)
 8004d44:	210f      	movs	r1, #15
 8004d46:	2021      	movs	r0, #33	; 0x21
 8004d48:	f7ff fa24 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(tmpVar + 36, 15, "J", 1, settings.contrast);
 8004d4c:	7963      	ldrb	r3, [r4, #5]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2301      	movs	r3, #1
 8004d52:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <drawFrame+0x2d8>)
 8004d54:	210f      	movs	r1, #15
 8004d56:	2030      	movs	r0, #48	; 0x30
 8004d58:	f7ff fa1c 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(18, 34, frame.thirdLine, 1, settings.contrast);
 8004d5c:	7963      	ldrb	r3, [r4, #5]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2301      	movs	r3, #1
 8004d62:	4a3e      	ldr	r2, [pc, #248]	; (8004e5c <drawFrame+0x2dc>)
 8004d64:	2122      	movs	r1, #34	; 0x22
 8004d66:	2012      	movs	r0, #18
 8004d68:	f7ff fa14 	bl	8004194 <OLED_PutStr>
				OLED_bitmap(tmpVar + 18, 15, b8);		//pierwsza litera I
 8004d6c:	4c2e      	ldr	r4, [pc, #184]	; (8004e28 <drawFrame+0x2a8>)
 8004d6e:	f104 05fc 	add.w	r5, r4, #252	; 0xfc
 8004d72:	462a      	mov	r2, r5
 8004d74:	210f      	movs	r1, #15
 8004d76:	201e      	movs	r0, #30
 8004d78:	f7ff fa68 	bl	800424c <OLED_bitmap>
				OLED_bitmap(tmpVar + 33, 15, b8);		//druga
 8004d7c:	462a      	mov	r2, r5
 8004d7e:	210f      	movs	r1, #15
 8004d80:	202d      	movs	r0, #45	; 0x2d
 8004d82:	f7ff fa63 	bl	800424c <OLED_bitmap>
				OLED_bitmap(tmpVar + 22, 11, b1);		// kreska nad litera s
 8004d86:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004d8a:	210b      	movs	r1, #11
 8004d8c:	2022      	movs	r0, #34	; 0x22
 8004d8e:	f7ff fa5d 	bl	800424c <OLED_bitmap>
 8004d92:	e794      	b.n	8004cbe <drawFrame+0x13e>
			if (frame.value > frame.valueMax) frame.value = frame.valueMin;
 8004d94:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <drawFrame+0x2a0>)
 8004d96:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8004d9a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8004d9e:	4291      	cmp	r1, r2
 8004da0:	d903      	bls.n	8004daa <drawFrame+0x22a>
 8004da2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8004da6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
			if (frame.value < frame.valueMin) frame.value = frame.valueMax;
 8004daa:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <drawFrame+0x2a0>)
 8004dac:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8004db0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004db4:	4299      	cmp	r1, r3
 8004db6:	d202      	bcs.n	8004dbe <drawFrame+0x23e>
 8004db8:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <drawFrame+0x2a0>)
 8004dba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			if (settings.archiveEntriesTotal == 0)		//jak archiwum puste
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <drawFrame+0x2a4>)
 8004dc0:	7a19      	ldrb	r1, [r3, #8]
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	d16a      	bne.n	8004e9c <drawFrame+0x31c>
				if (settings.language == POLISH)
 8004dc6:	791a      	ldrb	r2, [r3, #4]
 8004dc8:	b16a      	cbz	r2, 8004de6 <drawFrame+0x266>
				if (settings.language == ENGLISH)
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <drawFrame+0x2a4>)
 8004dcc:	791b      	ldrb	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d048      	beq.n	8004e64 <drawFrame+0x2e4>
			 	HAL_Delay(ARCHIVE_INFO_SCREEN_DELAY);
 8004dd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004dd6:	f7fc f8db 	bl	8000f90 <HAL_Delay>
				OLED_CLEAR();
 8004dda:	f7ff f820 	bl	8003e1e <OLED_CLEAR>
				frame.type = FRAME_MAIN_MENU;
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <drawFrame+0x2a0>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e71d      	b.n	8004c22 <drawFrame+0xa2>
					OLED_PutStr(20, 15, Archive[3][settings.language], 1, settings.contrast);
 8004de6:	4c1e      	ldr	r4, [pc, #120]	; (8004e60 <drawFrame+0x2e0>)
 8004de8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004dec:	0052      	lsls	r2, r2, #1
 8004dee:	3254      	adds	r2, #84	; 0x54
 8004df0:	461d      	mov	r5, r3
 8004df2:	795b      	ldrb	r3, [r3, #5]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2301      	movs	r3, #1
 8004df8:	4422      	add	r2, r4
 8004dfa:	210f      	movs	r1, #15
 8004dfc:	2014      	movs	r0, #20
 8004dfe:	f7ff f9c9 	bl	8004194 <OLED_PutStr>
					OLED_PutStr(8, 34, Archive[7][settings.language], 1, settings.contrast);
 8004e02:	792b      	ldrb	r3, [r5, #4]
 8004e04:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8004e08:	0052      	lsls	r2, r2, #1
 8004e0a:	32c4      	adds	r2, #196	; 0xc4
 8004e0c:	796b      	ldrb	r3, [r5, #5]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2301      	movs	r3, #1
 8004e12:	4422      	add	r2, r4
 8004e14:	2122      	movs	r1, #34	; 0x22
 8004e16:	2008      	movs	r0, #8
 8004e18:	f7ff f9bc 	bl	8004194 <OLED_PutStr>
 8004e1c:	e7d5      	b.n	8004dca <drawFrame+0x24a>
 8004e1e:	bf00      	nop
 8004e20:	20001604 	.word	0x20001604
 8004e24:	200006c4 	.word	0x200006c4
 8004e28:	0800cc90 	.word	0x0800cc90
 8004e2c:	20001605 	.word	0x20001605
 8004e30:	20000688 	.word	0x20000688
 8004e34:	080100c0 	.word	0x080100c0
 8004e38:	20000bf4 	.word	0x20000bf4
 8004e3c:	080100e8 	.word	0x080100e8
 8004e40:	2000161d 	.word	0x2000161d
 8004e44:	2000164d 	.word	0x2000164d
 8004e48:	20001672 	.word	0x20001672
 8004e4c:	080100e0 	.word	0x080100e0
 8004e50:	080100f0 	.word	0x080100f0
 8004e54:	080100f4 	.word	0x080100f4
 8004e58:	080100f8 	.word	0x080100f8
 8004e5c:	20001635 	.word	0x20001635
 8004e60:	0800cdc0 	.word	0x0800cdc0
					OLED_PutStr(25, 15, Archive[3][settings.language], 1, settings.contrast);
 8004e64:	4cb2      	ldr	r4, [pc, #712]	; (8005130 <drawFrame+0x5b0>)
 8004e66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004e6a:	005a      	lsls	r2, r3, #1
 8004e6c:	3254      	adds	r2, #84	; 0x54
 8004e6e:	4db1      	ldr	r5, [pc, #708]	; (8005134 <drawFrame+0x5b4>)
 8004e70:	796b      	ldrb	r3, [r5, #5]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2301      	movs	r3, #1
 8004e76:	4422      	add	r2, r4
 8004e78:	210f      	movs	r1, #15
 8004e7a:	2019      	movs	r0, #25
 8004e7c:	f7ff f98a 	bl	8004194 <OLED_PutStr>
					OLED_PutStr(11, 34, Archive[7][settings.language], 1, settings.contrast);
 8004e80:	792b      	ldrb	r3, [r5, #4]
 8004e82:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004e86:	005a      	lsls	r2, r3, #1
 8004e88:	32c4      	adds	r2, #196	; 0xc4
 8004e8a:	796b      	ldrb	r3, [r5, #5]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4422      	add	r2, r4
 8004e92:	2122      	movs	r1, #34	; 0x22
 8004e94:	200b      	movs	r0, #11
 8004e96:	f7ff f97d 	bl	8004194 <OLED_PutStr>
 8004e9a:	e79a      	b.n	8004dd2 <drawFrame+0x252>
				if (settings.measurementUnit == UNIT_BRIX)
 8004e9c:	4ba5      	ldr	r3, [pc, #660]	; (8005134 <drawFrame+0x5b4>)
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f040 80b7 	bne.w	8005014 <drawFrame+0x494>
					if (settings.thermalCompensation == OFF)
 8004ea6:	4ba3      	ldr	r3, [pc, #652]	; (8005134 <drawFrame+0x5b4>)
 8004ea8:	789b      	ldrb	r3, [r3, #2]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 815e 	bne.w	800516c <drawFrame+0x5ec>
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8004eb0:	4ba1      	ldr	r3, [pc, #644]	; (8005138 <drawFrame+0x5b8>)
 8004eb2:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
 8004eb6:	2c09      	cmp	r4, #9
 8004eb8:	d84e      	bhi.n	8004f58 <drawFrame+0x3d8>
 8004eba:	4b9e      	ldr	r3, [pc, #632]	; (8005134 <drawFrame+0x5b4>)
 8004ebc:	7918      	ldrb	r0, [r3, #4]
 8004ebe:	4d9c      	ldr	r5, [pc, #624]	; (8005130 <drawFrame+0x5b0>)
 8004ec0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8004eca:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	33fc      	adds	r3, #252	; 0xfc
 8004ed2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004ed6:	0040      	lsls	r0, r0, #1
 8004ed8:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8004edc:	4428      	add	r0, r5
 8004ede:	9102      	str	r1, [sp, #8]
 8004ee0:	9001      	str	r0, [sp, #4]
 8004ee2:	3401      	adds	r4, #1
 8004ee4:	9400      	str	r4, [sp, #0]
 8004ee6:	442b      	add	r3, r5
 8004ee8:	442a      	add	r2, r5
 8004eea:	4994      	ldr	r1, [pc, #592]	; (800513c <drawFrame+0x5bc>)
 8004eec:	4894      	ldr	r0, [pc, #592]	; (8005140 <drawFrame+0x5c0>)
 8004eee:	f003 fd11 	bl	8008914 <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 8004ef2:	4b90      	ldr	r3, [pc, #576]	; (8005134 <drawFrame+0x5b4>)
 8004ef4:	795b      	ldrb	r3, [r3, #5]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4a91      	ldr	r2, [pc, #580]	; (8005140 <drawFrame+0x5c0>)
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff f948 	bl	8004194 <OLED_PutStr>
						if (ArchiveEntry.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brix);
 8004f04:	4b8f      	ldr	r3, [pc, #572]	; (8005144 <drawFrame+0x5c4>)
 8004f06:	edd3 7a05 	vldr	s15, [r3, #20]
 8004f0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f16:	da3c      	bge.n	8004f92 <drawFrame+0x412>
						else if(ArchiveEntry.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", ArchiveEntry.brix);
 8004f18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f20:	f280 80f0 	bge.w	8005104 <drawFrame+0x584>
						else if(ArchiveEntry.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brix);
 8004f24:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8004f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f30:	f300 80f3 	bgt.w	800511a <drawFrame+0x59a>
						else if(ArchiveEntry.brix <= -10) sprintf(frame.secondLine," %2.2f %% ", ArchiveEntry.brix);
 8004f34:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8004f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d831      	bhi.n	8004fa6 <drawFrame+0x426>
 8004f42:	ee17 0a90 	vmov	r0, s15
 8004f46:	f7fb fb27 	bl	8000598 <__aeabi_f2d>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	497e      	ldr	r1, [pc, #504]	; (8005148 <drawFrame+0x5c8>)
 8004f50:	487e      	ldr	r0, [pc, #504]	; (800514c <drawFrame+0x5cc>)
 8004f52:	f003 fcdf 	bl	8008914 <siprintf>
 8004f56:	e026      	b.n	8004fa6 <drawFrame+0x426>
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8004f58:	4b76      	ldr	r3, [pc, #472]	; (8005134 <drawFrame+0x5b4>)
 8004f5a:	7918      	ldrb	r0, [r3, #4]
 8004f5c:	4d74      	ldr	r5, [pc, #464]	; (8005130 <drawFrame+0x5b0>)
 8004f5e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8004f68:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	33fc      	adds	r3, #252	; 0xfc
 8004f70:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004f74:	0040      	lsls	r0, r0, #1
 8004f76:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8004f7a:	4428      	add	r0, r5
 8004f7c:	9102      	str	r1, [sp, #8]
 8004f7e:	9001      	str	r0, [sp, #4]
 8004f80:	3401      	adds	r4, #1
 8004f82:	9400      	str	r4, [sp, #0]
 8004f84:	442b      	add	r3, r5
 8004f86:	442a      	add	r2, r5
 8004f88:	4971      	ldr	r1, [pc, #452]	; (8005150 <drawFrame+0x5d0>)
 8004f8a:	486d      	ldr	r0, [pc, #436]	; (8005140 <drawFrame+0x5c0>)
 8004f8c:	f003 fcc2 	bl	8008914 <siprintf>
 8004f90:	e7af      	b.n	8004ef2 <drawFrame+0x372>
						if (ArchiveEntry.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brix);
 8004f92:	ee17 0a90 	vmov	r0, s15
 8004f96:	f7fb faff 	bl	8000598 <__aeabi_f2d>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	496d      	ldr	r1, [pc, #436]	; (8005154 <drawFrame+0x5d4>)
 8004fa0:	486a      	ldr	r0, [pc, #424]	; (800514c <drawFrame+0x5cc>)
 8004fa2:	f003 fcb7 	bl	8008914 <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 8004fa6:	4e69      	ldr	r6, [pc, #420]	; (800514c <drawFrame+0x5cc>)
 8004fa8:	4f62      	ldr	r7, [pc, #392]	; (8005134 <drawFrame+0x5b4>)
 8004faa:	797b      	ldrb	r3, [r7, #5]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	210f      	movs	r1, #15
 8004fb4:	2003      	movs	r0, #3
 8004fb6:	f7ff f8ed 	bl	8004194 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %2.2f \x7B\x43 ", ArchiveEntry.temperature);
 8004fba:	4c62      	ldr	r4, [pc, #392]	; (8005144 <drawFrame+0x5c4>)
 8004fbc:	68a0      	ldr	r0, [r4, #8]
 8004fbe:	f7fb faeb 	bl	8000598 <__aeabi_f2d>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	f106 0518 	add.w	r5, r6, #24
 8004fca:	4963      	ldr	r1, [pc, #396]	; (8005158 <drawFrame+0x5d8>)
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f003 fca1 	bl	8008914 <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 8004fd2:	797b      	ldrb	r3, [r7, #5]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	462a      	mov	r2, r5
 8004fda:	2122      	movs	r1, #34	; 0x22
 8004fdc:	2003      	movs	r0, #3
 8004fde:	f7ff f8d9 	bl	8004194 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 8004fe2:	78a3      	ldrb	r3, [r4, #2]
 8004fe4:	78e2      	ldrb	r2, [r4, #3]
 8004fe6:	7921      	ldrb	r1, [r4, #4]
 8004fe8:	7960      	ldrb	r0, [r4, #5]
 8004fea:	3630      	adds	r6, #48	; 0x30
 8004fec:	9003      	str	r0, [sp, #12]
 8004fee:	9102      	str	r1, [sp, #8]
 8004ff0:	9201      	str	r2, [sp, #4]
 8004ff2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	7863      	ldrb	r3, [r4, #1]
 8004ffa:	7822      	ldrb	r2, [r4, #0]
 8004ffc:	4957      	ldr	r1, [pc, #348]	; (800515c <drawFrame+0x5dc>)
 8004ffe:	4630      	mov	r0, r6
 8005000:	f003 fc88 	bl	8008914 <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8005004:	797b      	ldrb	r3, [r7, #5]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	4632      	mov	r2, r6
 800500c:	2138      	movs	r1, #56	; 0x38
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff f8c0 	bl	8004194 <OLED_PutStr>
				if(settings.measurementUnit == UNIT_RI)
 8005014:	4b47      	ldr	r3, [pc, #284]	; (8005134 <drawFrame+0x5b4>)
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	f47f ae02 	bne.w	8004c22 <drawFrame+0xa2>
					if (settings.thermalCompensation == OFF)
 800501e:	4b45      	ldr	r3, [pc, #276]	; (8005134 <drawFrame+0x5b4>)
 8005020:	789b      	ldrb	r3, [r3, #2]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f040 8183 	bne.w	800532e <drawFrame+0x7ae>
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8005028:	4b43      	ldr	r3, [pc, #268]	; (8005138 <drawFrame+0x5b8>)
 800502a:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 800502e:	2809      	cmp	r0, #9
 8005030:	f200 815f 	bhi.w	80052f2 <drawFrame+0x772>
 8005034:	4d3f      	ldr	r5, [pc, #252]	; (8005134 <drawFrame+0x5b4>)
 8005036:	7929      	ldrb	r1, [r5, #4]
 8005038:	4c3d      	ldr	r4, [pc, #244]	; (8005130 <drawFrame+0x5b0>)
 800503a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8005044:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	33fc      	adds	r3, #252	; 0xfc
 800504c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005050:	0049      	lsls	r1, r1, #1
 8005052:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8005056:	4421      	add	r1, r4
 8005058:	7a2d      	ldrb	r5, [r5, #8]
 800505a:	9502      	str	r5, [sp, #8]
 800505c:	9101      	str	r1, [sp, #4]
 800505e:	3001      	adds	r0, #1
 8005060:	9000      	str	r0, [sp, #0]
 8005062:	4423      	add	r3, r4
 8005064:	4422      	add	r2, r4
 8005066:	4935      	ldr	r1, [pc, #212]	; (800513c <drawFrame+0x5bc>)
 8005068:	4835      	ldr	r0, [pc, #212]	; (8005140 <drawFrame+0x5c0>)
 800506a:	f003 fc53 	bl	8008914 <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 800506e:	4d34      	ldr	r5, [pc, #208]	; (8005140 <drawFrame+0x5c0>)
 8005070:	4f30      	ldr	r7, [pc, #192]	; (8005134 <drawFrame+0x5b4>)
 8005072:	797b      	ldrb	r3, [r7, #5]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	462a      	mov	r2, r5
 800507a:	2101      	movs	r1, #1
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff f889 	bl	8004194 <OLED_PutStr>
						sprintf(frame.secondLine,"%1.5f nd", ArchiveEntry.nc);
 8005082:	4c30      	ldr	r4, [pc, #192]	; (8005144 <drawFrame+0x5c4>)
 8005084:	68e0      	ldr	r0, [r4, #12]
 8005086:	f7fb fa87 	bl	8000598 <__aeabi_f2d>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	f105 0618 	add.w	r6, r5, #24
 8005092:	4933      	ldr	r1, [pc, #204]	; (8005160 <drawFrame+0x5e0>)
 8005094:	4630      	mov	r0, r6
 8005096:	f003 fc3d 	bl	8008914 <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 800509a:	797b      	ldrb	r3, [r7, #5]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2301      	movs	r3, #1
 80050a0:	4632      	mov	r2, r6
 80050a2:	210f      	movs	r1, #15
 80050a4:	2003      	movs	r0, #3
 80050a6:	f7ff f875 	bl	8004194 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %2.2f \x7B\x43", ArchiveEntry.temperature);
 80050aa:	68a0      	ldr	r0, [r4, #8]
 80050ac:	f7fb fa74 	bl	8000598 <__aeabi_f2d>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80050b8:	492a      	ldr	r1, [pc, #168]	; (8005164 <drawFrame+0x5e4>)
 80050ba:	4630      	mov	r0, r6
 80050bc:	f003 fc2a 	bl	8008914 <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 80050c0:	797b      	ldrb	r3, [r7, #5]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2301      	movs	r3, #1
 80050c6:	4632      	mov	r2, r6
 80050c8:	2122      	movs	r1, #34	; 0x22
 80050ca:	2003      	movs	r0, #3
 80050cc:	f7ff f862 	bl	8004194 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 80050d0:	78a3      	ldrb	r3, [r4, #2]
 80050d2:	78e2      	ldrb	r2, [r4, #3]
 80050d4:	7921      	ldrb	r1, [r4, #4]
 80050d6:	7960      	ldrb	r0, [r4, #5]
 80050d8:	3548      	adds	r5, #72	; 0x48
 80050da:	9003      	str	r0, [sp, #12]
 80050dc:	9102      	str	r1, [sp, #8]
 80050de:	9201      	str	r2, [sp, #4]
 80050e0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	7863      	ldrb	r3, [r4, #1]
 80050e8:	7822      	ldrb	r2, [r4, #0]
 80050ea:	491c      	ldr	r1, [pc, #112]	; (800515c <drawFrame+0x5dc>)
 80050ec:	4628      	mov	r0, r5
 80050ee:	f003 fc11 	bl	8008914 <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 80050f2:	797b      	ldrb	r3, [r7, #5]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	462a      	mov	r2, r5
 80050fa:	2138      	movs	r1, #56	; 0x38
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff f849 	bl	8004194 <OLED_PutStr>
 8005102:	e58e      	b.n	8004c22 <drawFrame+0xa2>
						else if(ArchiveEntry.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", ArchiveEntry.brix);
 8005104:	ee17 0a90 	vmov	r0, s15
 8005108:	f7fb fa46 	bl	8000598 <__aeabi_f2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4915      	ldr	r1, [pc, #84]	; (8005168 <drawFrame+0x5e8>)
 8005112:	480e      	ldr	r0, [pc, #56]	; (800514c <drawFrame+0x5cc>)
 8005114:	f003 fbfe 	bl	8008914 <siprintf>
 8005118:	e745      	b.n	8004fa6 <drawFrame+0x426>
						else if(ArchiveEntry.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brix);
 800511a:	ee17 0a90 	vmov	r0, s15
 800511e:	f7fb fa3b 	bl	8000598 <__aeabi_f2d>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	490b      	ldr	r1, [pc, #44]	; (8005154 <drawFrame+0x5d4>)
 8005128:	4808      	ldr	r0, [pc, #32]	; (800514c <drawFrame+0x5cc>)
 800512a:	f003 fbf3 	bl	8008914 <siprintf>
 800512e:	e73a      	b.n	8004fa6 <drawFrame+0x426>
 8005130:	0800cdc0 	.word	0x0800cdc0
 8005134:	200006c4 	.word	0x200006c4
 8005138:	20001604 	.word	0x20001604
 800513c:	080100fc 	.word	0x080100fc
 8005140:	20001605 	.word	0x20001605
 8005144:	200006d0 	.word	0x200006d0
 8005148:	0801013c 	.word	0x0801013c
 800514c:	2000161d 	.word	0x2000161d
 8005150:	08010110 	.word	0x08010110
 8005154:	08010120 	.word	0x08010120
 8005158:	08010148 	.word	0x08010148
 800515c:	080100c0 	.word	0x080100c0
 8005160:	08010160 	.word	0x08010160
 8005164:	0801016c 	.word	0x0801016c
 8005168:	0801012c 	.word	0x0801012c
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 800516c:	4bb3      	ldr	r3, [pc, #716]	; (800543c <drawFrame+0x8bc>)
 800516e:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
 8005172:	2c09      	cmp	r4, #9
 8005174:	d84c      	bhi.n	8005210 <drawFrame+0x690>
 8005176:	4bb2      	ldr	r3, [pc, #712]	; (8005440 <drawFrame+0x8c0>)
 8005178:	7918      	ldrb	r0, [r3, #4]
 800517a:	4db2      	ldr	r5, [pc, #712]	; (8005444 <drawFrame+0x8c4>)
 800517c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8005186:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	33fc      	adds	r3, #252	; 0xfc
 800518e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005192:	0040      	lsls	r0, r0, #1
 8005194:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8005198:	4428      	add	r0, r5
 800519a:	9102      	str	r1, [sp, #8]
 800519c:	9001      	str	r0, [sp, #4]
 800519e:	3401      	adds	r4, #1
 80051a0:	9400      	str	r4, [sp, #0]
 80051a2:	442b      	add	r3, r5
 80051a4:	442a      	add	r2, r5
 80051a6:	49a8      	ldr	r1, [pc, #672]	; (8005448 <drawFrame+0x8c8>)
 80051a8:	48a8      	ldr	r0, [pc, #672]	; (800544c <drawFrame+0x8cc>)
 80051aa:	f003 fbb3 	bl	8008914 <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 80051ae:	4ba4      	ldr	r3, [pc, #656]	; (8005440 <drawFrame+0x8c0>)
 80051b0:	795b      	ldrb	r3, [r3, #5]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	4aa5      	ldr	r2, [pc, #660]	; (800544c <drawFrame+0x8cc>)
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe ffea 	bl	8004194 <OLED_PutStr>
						if (ArchiveEntry.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brixk);
 80051c0:	4ba3      	ldr	r3, [pc, #652]	; (8005450 <drawFrame+0x8d0>)
 80051c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80051c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d2:	da3a      	bge.n	800524a <drawFrame+0x6ca>
						else if(ArchiveEntry.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", ArchiveEntry.brixk);
 80051d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	da73      	bge.n	80052c6 <drawFrame+0x746>
						else if(ArchiveEntry.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brixk);
 80051de:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80051e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	dc77      	bgt.n	80052dc <drawFrame+0x75c>
						else if(ArchiveEntry.brixk <= -10) sprintf(frame.secondLine," %2.2f %% ", ArchiveEntry.brixk);
 80051ec:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80051f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	d831      	bhi.n	800525e <drawFrame+0x6de>
 80051fa:	ee17 0a90 	vmov	r0, s15
 80051fe:	f7fb f9cb 	bl	8000598 <__aeabi_f2d>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4993      	ldr	r1, [pc, #588]	; (8005454 <drawFrame+0x8d4>)
 8005208:	4893      	ldr	r0, [pc, #588]	; (8005458 <drawFrame+0x8d8>)
 800520a:	f003 fb83 	bl	8008914 <siprintf>
 800520e:	e026      	b.n	800525e <drawFrame+0x6de>
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8005210:	4b8b      	ldr	r3, [pc, #556]	; (8005440 <drawFrame+0x8c0>)
 8005212:	7918      	ldrb	r0, [r3, #4]
 8005214:	4d8b      	ldr	r5, [pc, #556]	; (8005444 <drawFrame+0x8c4>)
 8005216:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8005220:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	33fc      	adds	r3, #252	; 0xfc
 8005228:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800522c:	0040      	lsls	r0, r0, #1
 800522e:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8005232:	4428      	add	r0, r5
 8005234:	9102      	str	r1, [sp, #8]
 8005236:	9001      	str	r0, [sp, #4]
 8005238:	3401      	adds	r4, #1
 800523a:	9400      	str	r4, [sp, #0]
 800523c:	442b      	add	r3, r5
 800523e:	442a      	add	r2, r5
 8005240:	4986      	ldr	r1, [pc, #536]	; (800545c <drawFrame+0x8dc>)
 8005242:	4882      	ldr	r0, [pc, #520]	; (800544c <drawFrame+0x8cc>)
 8005244:	f003 fb66 	bl	8008914 <siprintf>
 8005248:	e7b1      	b.n	80051ae <drawFrame+0x62e>
						if (ArchiveEntry.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brixk);
 800524a:	ee17 0a90 	vmov	r0, s15
 800524e:	f7fb f9a3 	bl	8000598 <__aeabi_f2d>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4982      	ldr	r1, [pc, #520]	; (8005460 <drawFrame+0x8e0>)
 8005258:	487f      	ldr	r0, [pc, #508]	; (8005458 <drawFrame+0x8d8>)
 800525a:	f003 fb5b 	bl	8008914 <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 800525e:	4d7e      	ldr	r5, [pc, #504]	; (8005458 <drawFrame+0x8d8>)
 8005260:	4e77      	ldr	r6, [pc, #476]	; (8005440 <drawFrame+0x8c0>)
 8005262:	7973      	ldrb	r3, [r6, #5]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2301      	movs	r3, #1
 8005268:	462a      	mov	r2, r5
 800526a:	210f      	movs	r1, #15
 800526c:	2003      	movs	r0, #3
 800526e:	f7fe ff91 	bl	8004194 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %d.00 \x7B\x43 ", 20);
 8005272:	f105 0418 	add.w	r4, r5, #24
 8005276:	2214      	movs	r2, #20
 8005278:	497a      	ldr	r1, [pc, #488]	; (8005464 <drawFrame+0x8e4>)
 800527a:	4620      	mov	r0, r4
 800527c:	f003 fb4a 	bl	8008914 <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 8005280:	7973      	ldrb	r3, [r6, #5]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2301      	movs	r3, #1
 8005286:	4622      	mov	r2, r4
 8005288:	2122      	movs	r1, #34	; 0x22
 800528a:	2003      	movs	r0, #3
 800528c:	f7fe ff82 	bl	8004194 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 8005290:	4a6f      	ldr	r2, [pc, #444]	; (8005450 <drawFrame+0x8d0>)
 8005292:	7893      	ldrb	r3, [r2, #2]
 8005294:	78d1      	ldrb	r1, [r2, #3]
 8005296:	7910      	ldrb	r0, [r2, #4]
 8005298:	7954      	ldrb	r4, [r2, #5]
 800529a:	3530      	adds	r5, #48	; 0x30
 800529c:	9403      	str	r4, [sp, #12]
 800529e:	9002      	str	r0, [sp, #8]
 80052a0:	9101      	str	r1, [sp, #4]
 80052a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	7853      	ldrb	r3, [r2, #1]
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	496e      	ldr	r1, [pc, #440]	; (8005468 <drawFrame+0x8e8>)
 80052ae:	4628      	mov	r0, r5
 80052b0:	f003 fb30 	bl	8008914 <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 80052b4:	7973      	ldrb	r3, [r6, #5]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	462a      	mov	r2, r5
 80052bc:	2138      	movs	r1, #56	; 0x38
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe ff68 	bl	8004194 <OLED_PutStr>
 80052c4:	e6a6      	b.n	8005014 <drawFrame+0x494>
						else if(ArchiveEntry.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", ArchiveEntry.brixk);
 80052c6:	ee17 0a90 	vmov	r0, s15
 80052ca:	f7fb f965 	bl	8000598 <__aeabi_f2d>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4966      	ldr	r1, [pc, #408]	; (800546c <drawFrame+0x8ec>)
 80052d4:	4860      	ldr	r0, [pc, #384]	; (8005458 <drawFrame+0x8d8>)
 80052d6:	f003 fb1d 	bl	8008914 <siprintf>
 80052da:	e7c0      	b.n	800525e <drawFrame+0x6de>
						else if(ArchiveEntry.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brixk);
 80052dc:	ee17 0a90 	vmov	r0, s15
 80052e0:	f7fb f95a 	bl	8000598 <__aeabi_f2d>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	495d      	ldr	r1, [pc, #372]	; (8005460 <drawFrame+0x8e0>)
 80052ea:	485b      	ldr	r0, [pc, #364]	; (8005458 <drawFrame+0x8d8>)
 80052ec:	f003 fb12 	bl	8008914 <siprintf>
 80052f0:	e7b5      	b.n	800525e <drawFrame+0x6de>
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 80052f2:	4d53      	ldr	r5, [pc, #332]	; (8005440 <drawFrame+0x8c0>)
 80052f4:	7929      	ldrb	r1, [r5, #4]
 80052f6:	4c53      	ldr	r4, [pc, #332]	; (8005444 <drawFrame+0x8c4>)
 80052f8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8005302:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	33fc      	adds	r3, #252	; 0xfc
 800530a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800530e:	0049      	lsls	r1, r1, #1
 8005310:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8005314:	4421      	add	r1, r4
 8005316:	7a2d      	ldrb	r5, [r5, #8]
 8005318:	9502      	str	r5, [sp, #8]
 800531a:	9101      	str	r1, [sp, #4]
 800531c:	3001      	adds	r0, #1
 800531e:	9000      	str	r0, [sp, #0]
 8005320:	4423      	add	r3, r4
 8005322:	4422      	add	r2, r4
 8005324:	494d      	ldr	r1, [pc, #308]	; (800545c <drawFrame+0x8dc>)
 8005326:	4849      	ldr	r0, [pc, #292]	; (800544c <drawFrame+0x8cc>)
 8005328:	f003 faf4 	bl	8008914 <siprintf>
 800532c:	e69f      	b.n	800506e <drawFrame+0x4ee>
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 800532e:	4b43      	ldr	r3, [pc, #268]	; (800543c <drawFrame+0x8bc>)
 8005330:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 8005334:	2809      	cmp	r0, #9
 8005336:	d863      	bhi.n	8005400 <drawFrame+0x880>
 8005338:	4d41      	ldr	r5, [pc, #260]	; (8005440 <drawFrame+0x8c0>)
 800533a:	7929      	ldrb	r1, [r5, #4]
 800533c:	4c41      	ldr	r4, [pc, #260]	; (8005444 <drawFrame+0x8c4>)
 800533e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8005348:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	33fc      	adds	r3, #252	; 0xfc
 8005350:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005354:	0049      	lsls	r1, r1, #1
 8005356:	f501 718c 	add.w	r1, r1, #280	; 0x118
 800535a:	4421      	add	r1, r4
 800535c:	7a2d      	ldrb	r5, [r5, #8]
 800535e:	9502      	str	r5, [sp, #8]
 8005360:	9101      	str	r1, [sp, #4]
 8005362:	3001      	adds	r0, #1
 8005364:	9000      	str	r0, [sp, #0]
 8005366:	4423      	add	r3, r4
 8005368:	4422      	add	r2, r4
 800536a:	4937      	ldr	r1, [pc, #220]	; (8005448 <drawFrame+0x8c8>)
 800536c:	4837      	ldr	r0, [pc, #220]	; (800544c <drawFrame+0x8cc>)
 800536e:	f003 fad1 	bl	8008914 <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 8005372:	4c36      	ldr	r4, [pc, #216]	; (800544c <drawFrame+0x8cc>)
 8005374:	4e32      	ldr	r6, [pc, #200]	; (8005440 <drawFrame+0x8c0>)
 8005376:	7973      	ldrb	r3, [r6, #5]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	4622      	mov	r2, r4
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f7fe ff07 	bl	8004194 <OLED_PutStr>
						sprintf(frame.secondLine,"%1.5f nd", ArchiveEntry.nck);
 8005386:	4d32      	ldr	r5, [pc, #200]	; (8005450 <drawFrame+0x8d0>)
 8005388:	6928      	ldr	r0, [r5, #16]
 800538a:	f7fb f905 	bl	8000598 <__aeabi_f2d>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	f104 0718 	add.w	r7, r4, #24
 8005396:	4936      	ldr	r1, [pc, #216]	; (8005470 <drawFrame+0x8f0>)
 8005398:	4638      	mov	r0, r7
 800539a:	f003 fabb 	bl	8008914 <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 800539e:	7973      	ldrb	r3, [r6, #5]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	2301      	movs	r3, #1
 80053a4:	463a      	mov	r2, r7
 80053a6:	210f      	movs	r1, #15
 80053a8:	2003      	movs	r0, #3
 80053aa:	f7fe fef3 	bl	8004194 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %d.00 \x7B\x43", 20);
 80053ae:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80053b2:	2214      	movs	r2, #20
 80053b4:	492f      	ldr	r1, [pc, #188]	; (8005474 <drawFrame+0x8f4>)
 80053b6:	4638      	mov	r0, r7
 80053b8:	f003 faac 	bl	8008914 <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 80053bc:	7973      	ldrb	r3, [r6, #5]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2301      	movs	r3, #1
 80053c2:	463a      	mov	r2, r7
 80053c4:	2122      	movs	r1, #34	; 0x22
 80053c6:	2003      	movs	r0, #3
 80053c8:	f7fe fee4 	bl	8004194 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 80053cc:	78ab      	ldrb	r3, [r5, #2]
 80053ce:	78ea      	ldrb	r2, [r5, #3]
 80053d0:	7929      	ldrb	r1, [r5, #4]
 80053d2:	7968      	ldrb	r0, [r5, #5]
 80053d4:	3448      	adds	r4, #72	; 0x48
 80053d6:	9003      	str	r0, [sp, #12]
 80053d8:	9102      	str	r1, [sp, #8]
 80053da:	9201      	str	r2, [sp, #4]
 80053dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	786b      	ldrb	r3, [r5, #1]
 80053e4:	782a      	ldrb	r2, [r5, #0]
 80053e6:	4920      	ldr	r1, [pc, #128]	; (8005468 <drawFrame+0x8e8>)
 80053e8:	4620      	mov	r0, r4
 80053ea:	f003 fa93 	bl	8008914 <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 80053ee:	7973      	ldrb	r3, [r6, #5]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	2300      	movs	r3, #0
 80053f4:	4622      	mov	r2, r4
 80053f6:	2138      	movs	r1, #56	; 0x38
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fecb 	bl	8004194 <OLED_PutStr>
 80053fe:	e410      	b.n	8004c22 <drawFrame+0xa2>
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8005400:	4d0f      	ldr	r5, [pc, #60]	; (8005440 <drawFrame+0x8c0>)
 8005402:	7929      	ldrb	r1, [r5, #4]
 8005404:	4c0f      	ldr	r4, [pc, #60]	; (8005444 <drawFrame+0x8c4>)
 8005406:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8005410:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	33fc      	adds	r3, #252	; 0xfc
 8005418:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800541c:	0049      	lsls	r1, r1, #1
 800541e:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8005422:	4421      	add	r1, r4
 8005424:	7a2d      	ldrb	r5, [r5, #8]
 8005426:	9502      	str	r5, [sp, #8]
 8005428:	9101      	str	r1, [sp, #4]
 800542a:	3001      	adds	r0, #1
 800542c:	9000      	str	r0, [sp, #0]
 800542e:	4423      	add	r3, r4
 8005430:	4422      	add	r2, r4
 8005432:	490a      	ldr	r1, [pc, #40]	; (800545c <drawFrame+0x8dc>)
 8005434:	4805      	ldr	r0, [pc, #20]	; (800544c <drawFrame+0x8cc>)
 8005436:	f003 fa6d 	bl	8008914 <siprintf>
 800543a:	e79a      	b.n	8005372 <drawFrame+0x7f2>
 800543c:	20001604 	.word	0x20001604
 8005440:	200006c4 	.word	0x200006c4
 8005444:	0800cdc0 	.word	0x0800cdc0
 8005448:	080100fc 	.word	0x080100fc
 800544c:	20001605 	.word	0x20001605
 8005450:	200006d0 	.word	0x200006d0
 8005454:	0801013c 	.word	0x0801013c
 8005458:	2000161d 	.word	0x2000161d
 800545c:	08010110 	.word	0x08010110
 8005460:	08010120 	.word	0x08010120
 8005464:	08010154 	.word	0x08010154
 8005468:	080100c0 	.word	0x080100c0
 800546c:	0801012c 	.word	0x0801012c
 8005470:	08010160 	.word	0x08010160
 8005474:	08010178 	.word	0x08010178
			OLED_CLEAR();
 8005478:	f7fe fcd1 	bl	8003e1e <OLED_CLEAR>
			OLED_PutStr(5 + settings.language * 7, 15, Archive[6][settings.language], 1, settings.contrast);	//kasowanie archiwum
 800547c:	4ca8      	ldr	r4, [pc, #672]	; (8005720 <drawFrame+0xba0>)
 800547e:	7920      	ldrb	r0, [r4, #4]
 8005480:	4da8      	ldr	r5, [pc, #672]	; (8005724 <drawFrame+0xba4>)
 8005482:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8005486:	0052      	lsls	r2, r2, #1
 8005488:	32a8      	adds	r2, #168	; 0xa8
 800548a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800548e:	3005      	adds	r0, #5
 8005490:	7963      	ldrb	r3, [r4, #5]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2301      	movs	r3, #1
 8005496:	442a      	add	r2, r5
 8005498:	210f      	movs	r1, #15
 800549a:	b2c0      	uxtb	r0, r0
 800549c:	f7fe fe7a 	bl	8004194 <OLED_PutStr>
			OLED_PutStr(8 + settings.language * 4, 34, Archive[7][settings.language], 1, settings.contrast);
 80054a0:	7920      	ldrb	r0, [r4, #4]
 80054a2:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 80054a6:	0052      	lsls	r2, r2, #1
 80054a8:	32c4      	adds	r2, #196	; 0xc4
 80054aa:	3002      	adds	r0, #2
 80054ac:	0080      	lsls	r0, r0, #2
 80054ae:	7963      	ldrb	r3, [r4, #5]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	2301      	movs	r3, #1
 80054b4:	442a      	add	r2, r5
 80054b6:	2122      	movs	r1, #34	; 0x22
 80054b8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80054bc:	f7fe fe6a 	bl	8004194 <OLED_PutStr>
			erase_archive();
 80054c0:	f7fe fb76 	bl	8003bb0 <erase_archive>
			newArchiveEntryAdded = 0;
 80054c4:	4b98      	ldr	r3, [pc, #608]	; (8005728 <drawFrame+0xba8>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
			HAL_Delay(ARCHIVE_INFO_SCREEN_DELAY);
 80054ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80054ce:	f7fb fd5f 	bl	8000f90 <HAL_Delay>
			OLED_CLEAR();
 80054d2:	f7fe fca4 	bl	8003e1e <OLED_CLEAR>
			OLED_PutStr(9 + settings.language * 3, 15, Archive[7][settings.language], 1, settings.contrast);	//archiwum skasowane
 80054d6:	7920      	ldrb	r0, [r4, #4]
 80054d8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 80054dc:	0052      	lsls	r2, r2, #1
 80054de:	32c4      	adds	r2, #196	; 0xc4
 80054e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80054e4:	3009      	adds	r0, #9
 80054e6:	7963      	ldrb	r3, [r4, #5]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	2301      	movs	r3, #1
 80054ec:	442a      	add	r2, r5
 80054ee:	210f      	movs	r1, #15
 80054f0:	b2c0      	uxtb	r0, r0
 80054f2:	f7fe fe4f 	bl	8004194 <OLED_PutStr>
			OLED_PutStr(6 + settings.language * 9, 34, Archive[8][settings.language], 1, settings.contrast);
 80054f6:	7920      	ldrb	r0, [r4, #4]
 80054f8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 80054fc:	0052      	lsls	r2, r2, #1
 80054fe:	32e0      	adds	r2, #224	; 0xe0
 8005500:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005504:	3006      	adds	r0, #6
 8005506:	7963      	ldrb	r3, [r4, #5]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	2301      	movs	r3, #1
 800550c:	442a      	add	r2, r5
 800550e:	2122      	movs	r1, #34	; 0x22
 8005510:	b2c0      	uxtb	r0, r0
 8005512:	f7fe fe3f 	bl	8004194 <OLED_PutStr>
			HAL_Delay(ARCHIVE_INFO_SCREEN_DELAY);
 8005516:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800551a:	f7fb fd39 	bl	8000f90 <HAL_Delay>
			OLED_CLEAR();
 800551e:	f7fe fc7e 	bl	8003e1e <OLED_CLEAR>
			frame.type = FRAME_MAIN_MENU;
 8005522:	4b82      	ldr	r3, [pc, #520]	; (800572c <drawFrame+0xbac>)
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
			break;
 8005528:	f7ff bb7b 	b.w	8004c22 <drawFrame+0xa2>
			floatingTextDelay++;
 800552c:	4a80      	ldr	r2, [pc, #512]	; (8005730 <drawFrame+0xbb0>)
 800552e:	7813      	ldrb	r3, [r2, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	7013      	strb	r3, [r2, #0]
			if (settings.thermalCompensation == OFF) sprintf(frame.firstLine, Main_Screen[3][settings.language]);
 8005534:	4b7a      	ldr	r3, [pc, #488]	; (8005720 <drawFrame+0xba0>)
 8005536:	789b      	ldrb	r3, [r3, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 80c8 	bne.w	80056ce <drawFrame+0xb4e>
 800553e:	4b78      	ldr	r3, [pc, #480]	; (8005720 <drawFrame+0xba0>)
 8005540:	791b      	ldrb	r3, [r3, #4]
 8005542:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	336c      	adds	r3, #108	; 0x6c
 800554a:	497a      	ldr	r1, [pc, #488]	; (8005734 <drawFrame+0xbb4>)
 800554c:	4419      	add	r1, r3
 800554e:	487a      	ldr	r0, [pc, #488]	; (8005738 <drawFrame+0xbb8>)
 8005550:	f003 f9e0 	bl	8008914 <siprintf>
			sprintf(frame.secondLine, Main_Screen[1][settings.language]);
 8005554:	4e72      	ldr	r6, [pc, #456]	; (8005720 <drawFrame+0xba0>)
 8005556:	7933      	ldrb	r3, [r6, #4]
 8005558:	4c76      	ldr	r4, [pc, #472]	; (8005734 <drawFrame+0xbb4>)
 800555a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800555e:	0049      	lsls	r1, r1, #1
 8005560:	3124      	adds	r1, #36	; 0x24
 8005562:	4d76      	ldr	r5, [pc, #472]	; (800573c <drawFrame+0xbbc>)
 8005564:	4421      	add	r1, r4
 8005566:	4628      	mov	r0, r5
 8005568:	f003 f9d4 	bl	8008914 <siprintf>
			sprintf(frame.thirdLine, Main_Screen[2][settings.language]);
 800556c:	7933      	ldrb	r3, [r6, #4]
 800556e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005572:	0049      	lsls	r1, r1, #1
 8005574:	3148      	adds	r1, #72	; 0x48
 8005576:	4421      	add	r1, r4
 8005578:	f105 0018 	add.w	r0, r5, #24
 800557c:	f003 f9ca 	bl	8008914 <siprintf>
			if (floatingTextDelay == BP_FLOATING_DELAY || ssStateChanged)	//jezeli trzeba przesunac BRAK PROBKI lub nastapi moment wlaczenia/wylaczenia się wygaszacza ekranu
 8005580:	4b6b      	ldr	r3, [pc, #428]	; (8005730 <drawFrame+0xbb0>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b3c      	cmp	r3, #60	; 0x3c
 8005586:	d003      	beq.n	8005590 <drawFrame+0xa10>
 8005588:	4b6d      	ldr	r3, [pc, #436]	; (8005740 <drawFrame+0xbc0>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d078      	beq.n	8005682 <drawFrame+0xb02>
				ssStateChanged = 0;
 8005590:	2500      	movs	r5, #0
 8005592:	4b6b      	ldr	r3, [pc, #428]	; (8005740 <drawFrame+0xbc0>)
 8005594:	701d      	strb	r5, [r3, #0]
				OLED_PutStr(21 + settings.language * 6 + xShift, 15 + yShift, "    ", 1, settings.contrast);
 8005596:	4c62      	ldr	r4, [pc, #392]	; (8005720 <drawFrame+0xba0>)
 8005598:	7920      	ldrb	r0, [r4, #4]
 800559a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800559e:	4e69      	ldr	r6, [pc, #420]	; (8005744 <drawFrame+0xbc4>)
 80055a0:	7830      	ldrb	r0, [r6, #0]
 80055a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80055a6:	b2c0      	uxtb	r0, r0
 80055a8:	4f67      	ldr	r7, [pc, #412]	; (8005748 <drawFrame+0xbc8>)
 80055aa:	7839      	ldrb	r1, [r7, #0]
 80055ac:	310f      	adds	r1, #15
 80055ae:	3015      	adds	r0, #21
 80055b0:	7963      	ldrb	r3, [r4, #5]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2301      	movs	r3, #1
 80055b6:	4a65      	ldr	r2, [pc, #404]	; (800574c <drawFrame+0xbcc>)
 80055b8:	b2c9      	uxtb	r1, r1
 80055ba:	b2c0      	uxtb	r0, r0
 80055bc:	f7fe fdea 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(15 + xShift, 34 + yShift, "      ", 1, settings.contrast);
 80055c0:	7839      	ldrb	r1, [r7, #0]
 80055c2:	3122      	adds	r1, #34	; 0x22
 80055c4:	7830      	ldrb	r0, [r6, #0]
 80055c6:	300f      	adds	r0, #15
 80055c8:	7963      	ldrb	r3, [r4, #5]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	2301      	movs	r3, #1
 80055ce:	4a60      	ldr	r2, [pc, #384]	; (8005750 <drawFrame+0xbd0>)
 80055d0:	b2c9      	uxtb	r1, r1
 80055d2:	b2c0      	uxtb	r0, r0
 80055d4:	f7fe fdde 	bl	8004194 <OLED_PutStr>
				floatingTextDelay = 0;
 80055d8:	4b55      	ldr	r3, [pc, #340]	; (8005730 <drawFrame+0xbb0>)
 80055da:	701d      	strb	r5, [r3, #0]
				if (yShift > 4) dirY = 1;
 80055dc:	f997 3000 	ldrsb.w	r3, [r7]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	dd02      	ble.n	80055ea <drawFrame+0xa6a>
 80055e4:	4a5b      	ldr	r2, [pc, #364]	; (8005754 <drawFrame+0xbd4>)
 80055e6:	2101      	movs	r1, #1
 80055e8:	7011      	strb	r1, [r2, #0]
				if (yShift < -4) dirY = 0;
 80055ea:	f113 0f04 	cmn.w	r3, #4
 80055ee:	da02      	bge.n	80055f6 <drawFrame+0xa76>
 80055f0:	4a58      	ldr	r2, [pc, #352]	; (8005754 <drawFrame+0xbd4>)
 80055f2:	2100      	movs	r1, #0
 80055f4:	7011      	strb	r1, [r2, #0]
				if(dirY == 0)
 80055f6:	4a57      	ldr	r2, [pc, #348]	; (8005754 <drawFrame+0xbd4>)
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	d172      	bne.n	80056e4 <drawFrame+0xb64>
					yShift++;
 80055fe:	3301      	adds	r3, #1
 8005600:	4a51      	ldr	r2, [pc, #324]	; (8005748 <drawFrame+0xbc8>)
 8005602:	7013      	strb	r3, [r2, #0]
				if (xShift > 12) dirX = 1;
 8005604:	4b4f      	ldr	r3, [pc, #316]	; (8005744 <drawFrame+0xbc4>)
 8005606:	f993 3000 	ldrsb.w	r3, [r3]
 800560a:	2b0c      	cmp	r3, #12
 800560c:	dd02      	ble.n	8005614 <drawFrame+0xa94>
 800560e:	4a52      	ldr	r2, [pc, #328]	; (8005758 <drawFrame+0xbd8>)
 8005610:	2101      	movs	r1, #1
 8005612:	7011      	strb	r1, [r2, #0]
				if (xShift < -12) dirX = 0;
 8005614:	f113 0f0c 	cmn.w	r3, #12
 8005618:	da02      	bge.n	8005620 <drawFrame+0xaa0>
 800561a:	4a4f      	ldr	r2, [pc, #316]	; (8005758 <drawFrame+0xbd8>)
 800561c:	2100      	movs	r1, #0
 800561e:	7011      	strb	r1, [r2, #0]
				if(dirX == 0)
 8005620:	4a4d      	ldr	r2, [pc, #308]	; (8005758 <drawFrame+0xbd8>)
 8005622:	7812      	ldrb	r2, [r2, #0]
 8005624:	2a00      	cmp	r2, #0
 8005626:	d161      	bne.n	80056ec <drawFrame+0xb6c>
					xShift++;
 8005628:	3301      	adds	r3, #1
 800562a:	4a46      	ldr	r2, [pc, #280]	; (8005744 <drawFrame+0xbc4>)
 800562c:	7013      	strb	r3, [r2, #0]
				OLED_PutStr(21 + settings.language * 6 + xShift, 15 + yShift, frame.secondLine, 1, settings.contrast);
 800562e:	4c3c      	ldr	r4, [pc, #240]	; (8005720 <drawFrame+0xba0>)
 8005630:	7920      	ldrb	r0, [r4, #4]
 8005632:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005636:	4d43      	ldr	r5, [pc, #268]	; (8005744 <drawFrame+0xbc4>)
 8005638:	7828      	ldrb	r0, [r5, #0]
 800563a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800563e:	b2c0      	uxtb	r0, r0
 8005640:	4e3e      	ldr	r6, [pc, #248]	; (800573c <drawFrame+0xbbc>)
 8005642:	4f41      	ldr	r7, [pc, #260]	; (8005748 <drawFrame+0xbc8>)
 8005644:	7839      	ldrb	r1, [r7, #0]
 8005646:	310f      	adds	r1, #15
 8005648:	3015      	adds	r0, #21
 800564a:	7963      	ldrb	r3, [r4, #5]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	2301      	movs	r3, #1
 8005650:	4632      	mov	r2, r6
 8005652:	b2c9      	uxtb	r1, r1
 8005654:	b2c0      	uxtb	r0, r0
 8005656:	f7fe fd9d 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(15 + xShift, 34 + yShift, frame.thirdLine, 1, settings.contrast);
 800565a:	7839      	ldrb	r1, [r7, #0]
 800565c:	3122      	adds	r1, #34	; 0x22
 800565e:	7828      	ldrb	r0, [r5, #0]
 8005660:	300f      	adds	r0, #15
 8005662:	7963      	ldrb	r3, [r4, #5]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	2301      	movs	r3, #1
 8005668:	f106 0218 	add.w	r2, r6, #24
 800566c:	b2c9      	uxtb	r1, r1
 800566e:	b2c0      	uxtb	r0, r0
 8005670:	f7fe fd90 	bl	8004194 <OLED_PutStr>
				if(settings.language == POLISH) OLED_bitmap(14 + xShift + 14, 34 + yShift - 4, b1);		//kreska nad O w BRAK PROBKI, kontrast zmieniany wewnatrz funkcji OLED_BITMAP
 8005674:	7923      	ldrb	r3, [r4, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d03c      	beq.n	80056f4 <drawFrame+0xb74>
				if(settings.language == POLISH) OLED_bitmap(31 + xShift + 14, 34 + yShift, b8);		//poprawiony wyglad litery I
 800567a:	4b29      	ldr	r3, [pc, #164]	; (8005720 <drawFrame+0xba0>)
 800567c:	791b      	ldrb	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d042      	beq.n	8005708 <drawFrame+0xb88>
			OLED_PutStr(40, 1, frame.firstLine, 0, settings.contrast);
 8005682:	4c2d      	ldr	r4, [pc, #180]	; (8005738 <drawFrame+0xbb8>)
 8005684:	4d26      	ldr	r5, [pc, #152]	; (8005720 <drawFrame+0xba0>)
 8005686:	796b      	ldrb	r3, [r5, #5]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	4622      	mov	r2, r4
 800568e:	2101      	movs	r1, #1
 8005690:	2028      	movs	r0, #40	; 0x28
 8005692:	f7fe fd7f 	bl	8004194 <OLED_PutStr>
			sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", gDate.Date, gDate.Month, gDate.Year+2000, gTime.Hours,gTime.Minutes,gTime.Seconds);
 8005696:	4931      	ldr	r1, [pc, #196]	; (800575c <drawFrame+0xbdc>)
 8005698:	78cb      	ldrb	r3, [r1, #3]
 800569a:	790a      	ldrb	r2, [r1, #4]
 800569c:	7948      	ldrb	r0, [r1, #5]
 800569e:	798e      	ldrb	r6, [r1, #6]
 80056a0:	3448      	adds	r4, #72	; 0x48
 80056a2:	9603      	str	r6, [sp, #12]
 80056a4:	9002      	str	r0, [sp, #8]
 80056a6:	9201      	str	r2, [sp, #4]
 80056a8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	784b      	ldrb	r3, [r1, #1]
 80056b0:	788a      	ldrb	r2, [r1, #2]
 80056b2:	492b      	ldr	r1, [pc, #172]	; (8005760 <drawFrame+0xbe0>)
 80056b4:	4620      	mov	r0, r4
 80056b6:	f003 f92d 	bl	8008914 <siprintf>
			OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 80056ba:	796b      	ldrb	r3, [r5, #5]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	4622      	mov	r2, r4
 80056c2:	2138      	movs	r1, #56	; 0x38
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fd65 	bl	8004194 <OLED_PutStr>
			break;
 80056ca:	f7ff baaa 	b.w	8004c22 <drawFrame+0xa2>
			else sprintf(frame.firstLine, Main_Screen[0][settings.language]);
 80056ce:	4b14      	ldr	r3, [pc, #80]	; (8005720 <drawFrame+0xba0>)
 80056d0:	7919      	ldrb	r1, [r3, #4]
 80056d2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <drawFrame+0xbb4>)
 80056d8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80056dc:	4816      	ldr	r0, [pc, #88]	; (8005738 <drawFrame+0xbb8>)
 80056de:	f003 f919 	bl	8008914 <siprintf>
 80056e2:	e737      	b.n	8005554 <drawFrame+0x9d4>
				else yShift--;
 80056e4:	3b01      	subs	r3, #1
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <drawFrame+0xbc8>)
 80056e8:	7013      	strb	r3, [r2, #0]
 80056ea:	e78b      	b.n	8005604 <drawFrame+0xa84>
				else xShift--;
 80056ec:	3b01      	subs	r3, #1
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <drawFrame+0xbc4>)
 80056f0:	7013      	strb	r3, [r2, #0]
 80056f2:	e79c      	b.n	800562e <drawFrame+0xaae>
				if(settings.language == POLISH) OLED_bitmap(14 + xShift + 14, 34 + yShift - 4, b1);		//kreska nad O w BRAK PROBKI, kontrast zmieniany wewnatrz funkcji OLED_BITMAP
 80056f4:	7839      	ldrb	r1, [r7, #0]
 80056f6:	311e      	adds	r1, #30
 80056f8:	7828      	ldrb	r0, [r5, #0]
 80056fa:	301c      	adds	r0, #28
 80056fc:	4a19      	ldr	r2, [pc, #100]	; (8005764 <drawFrame+0xbe4>)
 80056fe:	b2c9      	uxtb	r1, r1
 8005700:	b2c0      	uxtb	r0, r0
 8005702:	f7fe fda3 	bl	800424c <OLED_bitmap>
 8005706:	e7b8      	b.n	800567a <drawFrame+0xafa>
				if(settings.language == POLISH) OLED_bitmap(31 + xShift + 14, 34 + yShift, b8);		//poprawiony wyglad litery I
 8005708:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <drawFrame+0xbc8>)
 800570a:	7819      	ldrb	r1, [r3, #0]
 800570c:	3122      	adds	r1, #34	; 0x22
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <drawFrame+0xbc4>)
 8005710:	7818      	ldrb	r0, [r3, #0]
 8005712:	302d      	adds	r0, #45	; 0x2d
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <drawFrame+0xbe8>)
 8005716:	b2c9      	uxtb	r1, r1
 8005718:	b2c0      	uxtb	r0, r0
 800571a:	f7fe fd97 	bl	800424c <OLED_bitmap>
 800571e:	e7b0      	b.n	8005682 <drawFrame+0xb02>
 8005720:	200006c4 	.word	0x200006c4
 8005724:	0800cdc0 	.word	0x0800cdc0
 8005728:	20000bf4 	.word	0x20000bf4
 800572c:	20001604 	.word	0x20001604
 8005730:	20001108 	.word	0x20001108
 8005734:	0800cc90 	.word	0x0800cc90
 8005738:	20001605 	.word	0x20001605
 800573c:	2000161d 	.word	0x2000161d
 8005740:	2000171c 	.word	0x2000171c
 8005744:	20001600 	.word	0x20001600
 8005748:	2000114c 	.word	0x2000114c
 800574c:	080100e8 	.word	0x080100e8
 8005750:	08010184 	.word	0x08010184
 8005754:	200010e4 	.word	0x200010e4
 8005758:	20000c0c 	.word	0x20000c0c
 800575c:	20000688 	.word	0x20000688
 8005760:	080100c0 	.word	0x080100c0
 8005764:	0800cdac 	.word	0x0800cdac
 8005768:	0800cd8c 	.word	0x0800cd8c
			if (frame.value > frame.valueMax) frame.value = frame.valueMin;
 800576c:	4bbe      	ldr	r3, [pc, #760]	; (8005a68 <drawFrame+0xee8>)
 800576e:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8005772:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8005776:	4291      	cmp	r1, r2
 8005778:	d903      	bls.n	8005782 <drawFrame+0xc02>
 800577a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 800577e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
			if (frame.value < frame.valueMin) frame.value = frame.valueMax;
 8005782:	4bb9      	ldr	r3, [pc, #740]	; (8005a68 <drawFrame+0xee8>)
 8005784:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8005788:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800578c:	4299      	cmp	r1, r3
 800578e:	d202      	bcs.n	8005796 <drawFrame+0xc16>
 8005790:	4bb5      	ldr	r3, [pc, #724]	; (8005a68 <drawFrame+0xee8>)
 8005792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			OLED_PutStr(10, 0, frame.firstLine, 0, settings.contrast);
 8005796:	4cb5      	ldr	r4, [pc, #724]	; (8005a6c <drawFrame+0xeec>)
 8005798:	4db5      	ldr	r5, [pc, #724]	; (8005a70 <drawFrame+0xef0>)
 800579a:	796b      	ldrb	r3, [r5, #5]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	2300      	movs	r3, #0
 80057a0:	4622      	mov	r2, r4
 80057a2:	4619      	mov	r1, r3
 80057a4:	200a      	movs	r0, #10
 80057a6:	f7fe fcf5 	bl	8004194 <OLED_PutStr>
			OLED_PutStr(5, 10, frame.secondLine, 0, settings.contrast);
 80057aa:	796b      	ldrb	r3, [r5, #5]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2300      	movs	r3, #0
 80057b0:	f104 0218 	add.w	r2, r4, #24
 80057b4:	210a      	movs	r1, #10
 80057b6:	2005      	movs	r0, #5
 80057b8:	f7fe fcec 	bl	8004194 <OLED_PutStr>
			OLED_PutStr(5, 19, frame.thirdLine, 0, settings.contrast);
 80057bc:	796b      	ldrb	r3, [r5, #5]
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	2300      	movs	r3, #0
 80057c2:	f104 0230 	add.w	r2, r4, #48	; 0x30
 80057c6:	2113      	movs	r1, #19
 80057c8:	2005      	movs	r0, #5
 80057ca:	f7fe fce3 	bl	8004194 <OLED_PutStr>
			sprintf(frame.buffer,"%d  ",frame.value);
 80057ce:	f104 066d 	add.w	r6, r4, #109	; 0x6d
 80057d2:	f8b4 2067 	ldrh.w	r2, [r4, #103]	; 0x67
 80057d6:	49a7      	ldr	r1, [pc, #668]	; (8005a74 <drawFrame+0xef4>)
 80057d8:	4630      	mov	r0, r6
 80057da:	f003 f89b 	bl	8008914 <siprintf>
			OLED_PutStr(10, 33, frame.buffer, 1, settings.contrast);
 80057de:	796b      	ldrb	r3, [r5, #5]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2301      	movs	r3, #1
 80057e4:	4632      	mov	r2, r6
 80057e6:	2121      	movs	r1, #33	; 0x21
 80057e8:	200a      	movs	r0, #10
 80057ea:	f7fe fcd3 	bl	8004194 <OLED_PutStr>
			OLED_PutStr(5, 55, frame.bottomLine, 0, settings.contrast);
 80057ee:	796b      	ldrb	r3, [r5, #5]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	f104 0248 	add.w	r2, r4, #72	; 0x48
 80057f8:	2137      	movs	r1, #55	; 0x37
 80057fa:	2005      	movs	r0, #5
 80057fc:	f7fe fcca 	bl	8004194 <OLED_PutStr>
			break;
 8005800:	f7ff ba0f 	b.w	8004c22 <drawFrame+0xa2>
			if (frame.level == 0)			//jezeli w glownym menu
 8005804:	4b98      	ldr	r3, [pc, #608]	; (8005a68 <drawFrame+0xee8>)
 8005806:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800580a:	2b00      	cmp	r3, #0
 800580c:	d05d      	beq.n	80058ca <drawFrame+0xd4a>
			if (frame.level == 1)			//jezeli w podmenu menu glownego
 800580e:	4b96      	ldr	r3, [pc, #600]	; (8005a68 <drawFrame+0xee8>)
 8005810:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005814:	2b01      	cmp	r3, #1
 8005816:	f000 80c9 	beq.w	80059ac <drawFrame+0xe2c>
			if (frame.level == 2)			//jezeli w podmenu ustawienia/Archiwum
 800581a:	4b93      	ldr	r3, [pc, #588]	; (8005a68 <drawFrame+0xee8>)
 800581c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005820:	2b02      	cmp	r3, #2
 8005822:	f000 82a5 	beq.w	8005d70 <drawFrame+0x11f0>
			if (frame.level == 3)			//jezeli w podmenu daty/czasu
 8005826:	4b90      	ldr	r3, [pc, #576]	; (8005a68 <drawFrame+0xee8>)
 8005828:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800582c:	2b03      	cmp	r3, #3
 800582e:	f47f a9f8 	bne.w	8004c22 <drawFrame+0xa2>
				if (frame.position[1] == SETTINGS_SUBMENU_DATE)	//jezeli w podmenu zmiany daty
 8005832:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <drawFrame+0xee8>)
 8005834:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005838:	2b01      	cmp	r3, #1
 800583a:	f000 8451 	beq.w	80060e0 <drawFrame+0x1560>
				if (frame.position[1] == SETTINGS_SUBMENU_TIME)	//jezeli w podmenu zmiany czasu
 800583e:	4b8a      	ldr	r3, [pc, #552]	; (8005a68 <drawFrame+0xee8>)
 8005840:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005844:	2b02      	cmp	r3, #2
 8005846:	f47f a9ec 	bne.w	8004c22 <drawFrame+0xa2>
					switch (frame.position[2])	//sprawdz zmiana ktorego parametru zostala wybrana (godziny/minuty/sekundy)
 800584a:	4b87      	ldr	r3, [pc, #540]	; (8005a68 <drawFrame+0xee8>)
 800584c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005850:	2b01      	cmp	r3, #1
 8005852:	f000 84f4 	beq.w	800623e <drawFrame+0x16be>
 8005856:	2b02      	cmp	r3, #2
 8005858:	f000 8526 	beq.w	80062a8 <drawFrame+0x1728>
 800585c:	2b00      	cmp	r3, #0
 800585e:	f47f a9e0 	bne.w	8004c22 <drawFrame+0xa2>
							 frame.valueMin = 0;
 8005862:	4c81      	ldr	r4, [pc, #516]	; (8005a68 <drawFrame+0xee8>)
 8005864:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
							 frame.valueMax = 23;
 8005868:	2317      	movs	r3, #23
 800586a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[6][settings.language]);
 800586e:	4e80      	ldr	r6, [pc, #512]	; (8005a70 <drawFrame+0xef0>)
 8005870:	7933      	ldrb	r3, [r6, #4]
 8005872:	4d81      	ldr	r5, [pc, #516]	; (8005a78 <drawFrame+0xef8>)
 8005874:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005878:	0099      	lsls	r1, r3, #2
 800587a:	31f0      	adds	r1, #240	; 0xf0
 800587c:	4429      	add	r1, r5
 800587e:	1c60      	adds	r0, r4, #1
 8005880:	f003 f848 	bl	8008914 <siprintf>
							 sprintf(frame.secondLine, Settings[10][settings.language]);
 8005884:	7933      	ldrb	r3, [r6, #4]
 8005886:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800588a:	0099      	lsls	r1, r3, #2
 800588c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8005890:	4429      	add	r1, r5
 8005892:	f104 0019 	add.w	r0, r4, #25
 8005896:	f003 f83d 	bl	8008914 <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 800589a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800589e:	4977      	ldr	r1, [pc, #476]	; (8005a7c <drawFrame+0xefc>)
 80058a0:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80058a4:	f003 f836 	bl	8008914 <siprintf>
							 frame.value = gTime.Hours;
 80058a8:	4b75      	ldr	r3, [pc, #468]	; (8005a80 <drawFrame+0xf00>)
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 80058b0:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 80058b4:	4973      	ldr	r1, [pc, #460]	; (8005a84 <drawFrame+0xf04>)
 80058b6:	f104 0049 	add.w	r0, r4, #73	; 0x49
 80058ba:	f003 f82b 	bl	8008914 <siprintf>
							 OLED_CLEAR();
 80058be:	f7fe faae 	bl	8003e1e <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 80058c2:	2303      	movs	r3, #3
 80058c4:	7023      	strb	r3, [r4, #0]
							break;
 80058c6:	f7ff b9ac 	b.w	8004c22 <drawFrame+0xa2>
				frame.totalPositions = 6;
 80058ca:	4e67      	ldr	r6, [pc, #412]	; (8005a68 <drawFrame+0xee8>)
 80058cc:	2306      	movs	r3, #6
 80058ce:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
				OLED_PutStr(10, 0, Main_Menu[0][settings.language], 0, settings.contrast);			//tytul okna (menu glowne)
 80058d2:	4c67      	ldr	r4, [pc, #412]	; (8005a70 <drawFrame+0xef0>)
 80058d4:	7922      	ldrb	r2, [r4, #4]
 80058d6:	4d6c      	ldr	r5, [pc, #432]	; (8005a88 <drawFrame+0xf08>)
 80058d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80058dc:	7963      	ldrb	r3, [r4, #5]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80058e6:	4619      	mov	r1, r3
 80058e8:	200a      	movs	r0, #10
 80058ea:	f7fe fc53 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(5, 10, Main_Menu[1][settings.language], 0, settings.contrast);			//opcje do wyboru
 80058ee:	7923      	ldrb	r3, [r4, #4]
 80058f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80058f4:	0092      	lsls	r2, r2, #2
 80058f6:	3228      	adds	r2, #40	; 0x28
 80058f8:	7963      	ldrb	r3, [r4, #5]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	442a      	add	r2, r5
 8005900:	210a      	movs	r1, #10
 8005902:	2005      	movs	r0, #5
 8005904:	f7fe fc46 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(5, 19, Main_Menu[2][settings.language], 0, settings.contrast);
 8005908:	7923      	ldrb	r3, [r4, #4]
 800590a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800590e:	0092      	lsls	r2, r2, #2
 8005910:	3250      	adds	r2, #80	; 0x50
 8005912:	7963      	ldrb	r3, [r4, #5]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	442a      	add	r2, r5
 800591a:	2113      	movs	r1, #19
 800591c:	2005      	movs	r0, #5
 800591e:	f7fe fc39 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(5, 28, Main_Menu[3][settings.language], 0, settings.contrast);
 8005922:	7923      	ldrb	r3, [r4, #4]
 8005924:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005928:	0092      	lsls	r2, r2, #2
 800592a:	3278      	adds	r2, #120	; 0x78
 800592c:	7963      	ldrb	r3, [r4, #5]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2300      	movs	r3, #0
 8005932:	442a      	add	r2, r5
 8005934:	211c      	movs	r1, #28
 8005936:	2005      	movs	r0, #5
 8005938:	f7fe fc2c 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(5, 37, Main_Menu[4][settings.language], 0, settings.contrast);
 800593c:	7923      	ldrb	r3, [r4, #4]
 800593e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005942:	0092      	lsls	r2, r2, #2
 8005944:	32a0      	adds	r2, #160	; 0xa0
 8005946:	7963      	ldrb	r3, [r4, #5]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	442a      	add	r2, r5
 800594e:	2125      	movs	r1, #37	; 0x25
 8005950:	2005      	movs	r0, #5
 8005952:	f7fe fc1f 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(5, 46, Main_Menu[5][settings.language], 0, settings.contrast);
 8005956:	7923      	ldrb	r3, [r4, #4]
 8005958:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800595c:	0092      	lsls	r2, r2, #2
 800595e:	32c8      	adds	r2, #200	; 0xc8
 8005960:	7963      	ldrb	r3, [r4, #5]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	442a      	add	r2, r5
 8005968:	212e      	movs	r1, #46	; 0x2e
 800596a:	2005      	movs	r0, #5
 800596c:	f7fe fc12 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(5, 55, Main_Menu[6][settings.language], 0, settings.contrast);
 8005970:	7923      	ldrb	r3, [r4, #4]
 8005972:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005976:	0092      	lsls	r2, r2, #2
 8005978:	32f0      	adds	r2, #240	; 0xf0
 800597a:	7963      	ldrb	r3, [r4, #5]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	2300      	movs	r3, #0
 8005980:	442a      	add	r2, r5
 8005982:	2137      	movs	r1, #55	; 0x37
 8005984:	2005      	movs	r0, #5
 8005986:	f7fe fc05 	bl	8004194 <OLED_PutStr>
				OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 800598a:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
 800598e:	441e      	add	r6, r3
 8005990:	f896 1062 	ldrb.w	r1, [r6, #98]	; 0x62
 8005994:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005998:	310a      	adds	r1, #10
 800599a:	7963      	ldrb	r3, [r4, #5]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <drawFrame+0xf0c>)
 80059a2:	b2c9      	uxtb	r1, r1
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7fe fbf5 	bl	8004194 <OLED_PutStr>
 80059aa:	e730      	b.n	800580e <drawFrame+0xc8e>
				switch (frame.position[0])	//sprawdz ktore podmenu menu glownego zostalo wybrane
 80059ac:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <drawFrame+0xee8>)
 80059ae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	f63f af31 	bhi.w	800581a <drawFrame+0xc9a>
 80059b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80059bc:	006c0006 	.word	0x006c0006
 80059c0:	010600b6 	.word	0x010600b6
 80059c4:	01cd0170 	.word	0x01cd0170
						frame.totalPositions = 3;
 80059c8:	4d27      	ldr	r5, [pc, #156]	; (8005a68 <drawFrame+0xee8>)
 80059ca:	2303      	movs	r3, #3
 80059cc:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
						OLED_PutStr(10, 0, Main_Menu[1][settings.language], 0, settings.contrast);			//tytul okna (rodzaj pomiaru)
 80059d0:	4c27      	ldr	r4, [pc, #156]	; (8005a70 <drawFrame+0xef0>)
 80059d2:	7923      	ldrb	r3, [r4, #4]
 80059d4:	4f2e      	ldr	r7, [pc, #184]	; (8005a90 <drawFrame+0xf10>)
 80059d6:	f507 7619 	add.w	r6, r7, #612	; 0x264
 80059da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059de:	009a      	lsls	r2, r3, #2
 80059e0:	3228      	adds	r2, #40	; 0x28
 80059e2:	7963      	ldrb	r3, [r4, #5]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2300      	movs	r3, #0
 80059e8:	4432      	add	r2, r6
 80059ea:	4619      	mov	r1, r3
 80059ec:	200a      	movs	r0, #10
 80059ee:	f7fe fbd1 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 10, Measurement_Type[0][settings.language], 0, settings.contrast);
 80059f2:	7922      	ldrb	r2, [r4, #4]
 80059f4:	f507 7769 	add.w	r7, r7, #932	; 0x3a4
 80059f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80059fc:	7963      	ldrb	r3, [r4, #5]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2300      	movs	r3, #0
 8005a02:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8005a06:	210a      	movs	r1, #10
 8005a08:	2005      	movs	r0, #5
 8005a0a:	f7fe fbc3 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 19, Measurement_Type[1][settings.language], 0, settings.contrast);
 8005a0e:	7923      	ldrb	r3, [r4, #4]
 8005a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a14:	009a      	lsls	r2, r3, #2
 8005a16:	3218      	adds	r2, #24
 8005a18:	7963      	ldrb	r3, [r4, #5]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	443a      	add	r2, r7
 8005a20:	2113      	movs	r1, #19
 8005a22:	2005      	movs	r0, #5
 8005a24:	f7fe fbb6 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 8005a28:	7923      	ldrb	r3, [r4, #4]
 8005a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a2e:	009a      	lsls	r2, r3, #2
 8005a30:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8005a34:	7963      	ldrb	r3, [r4, #5]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4432      	add	r2, r6
 8005a3c:	211c      	movs	r1, #28
 8005a3e:	2005      	movs	r0, #5
 8005a40:	f7fe fba8 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8005a44:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005a48:	441d      	add	r5, r3
 8005a4a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8005a4e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005a52:	f103 010a 	add.w	r1, r3, #10
 8005a56:	7963      	ldrb	r3, [r4, #5]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <drawFrame+0xf0c>)
 8005a5e:	b2c9      	uxtb	r1, r1
 8005a60:	2001      	movs	r0, #1
 8005a62:	f7fe fb97 	bl	8004194 <OLED_PutStr>
					break;
 8005a66:	e6d8      	b.n	800581a <drawFrame+0xc9a>
 8005a68:	20001604 	.word	0x20001604
 8005a6c:	20001605 	.word	0x20001605
 8005a70:	200006c4 	.word	0x200006c4
 8005a74:	08010108 	.word	0x08010108
 8005a78:	0800d0f4 	.word	0x0800d0f4
 8005a7c:	08010198 	.word	0x08010198
 8005a80:	20000688 	.word	0x20000688
 8005a84:	080101a4 	.word	0x080101a4
 8005a88:	0800cef4 	.word	0x0800cef4
 8005a8c:	0801018c 	.word	0x0801018c
 8005a90:	0800cc90 	.word	0x0800cc90
						frame.totalPositions = 3;
 8005a94:	4db1      	ldr	r5, [pc, #708]	; (8005d5c <drawFrame+0x11dc>)
 8005a96:	2303      	movs	r3, #3
 8005a98:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
						OLED_PutStr(10, 0, Main_Menu[2][settings.language], 0, settings.contrast);			//tytul okna (sposob wyswietlania)
 8005a9c:	4cb0      	ldr	r4, [pc, #704]	; (8005d60 <drawFrame+0x11e0>)
 8005a9e:	7923      	ldrb	r3, [r4, #4]
 8005aa0:	4fb0      	ldr	r7, [pc, #704]	; (8005d64 <drawFrame+0x11e4>)
 8005aa2:	f507 7619 	add.w	r6, r7, #612	; 0x264
 8005aa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005aaa:	009a      	lsls	r2, r3, #2
 8005aac:	3250      	adds	r2, #80	; 0x50
 8005aae:	7963      	ldrb	r3, [r4, #5]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4432      	add	r2, r6
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	200a      	movs	r0, #10
 8005aba:	f7fe fb6b 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 10, "BRIX", 0, settings.contrast);
 8005abe:	7963      	ldrb	r3, [r4, #5]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4aa8      	ldr	r2, [pc, #672]	; (8005d68 <drawFrame+0x11e8>)
 8005ac6:	210a      	movs	r1, #10
 8005ac8:	2005      	movs	r0, #5
 8005aca:	f7fe fb63 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 19, Measurement_Unit[0][settings.language], 0, settings.contrast);
 8005ace:	7923      	ldrb	r3, [r4, #4]
 8005ad0:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 8005ad4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8005ad8:	7963      	ldrb	r3, [r4, #5]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2300      	movs	r3, #0
 8005ade:	443a      	add	r2, r7
 8005ae0:	2113      	movs	r1, #19
 8005ae2:	2005      	movs	r0, #5
 8005ae4:	f7fe fb56 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 8005ae8:	7923      	ldrb	r3, [r4, #4]
 8005aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005aee:	009a      	lsls	r2, r3, #2
 8005af0:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8005af4:	7963      	ldrb	r3, [r4, #5]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	4432      	add	r2, r6
 8005afc:	211c      	movs	r1, #28
 8005afe:	2005      	movs	r0, #5
 8005b00:	f7fe fb48 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8005b04:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005b08:	441d      	add	r5, r3
 8005b0a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8005b0e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005b12:	f103 010a 	add.w	r1, r3, #10
 8005b16:	7963      	ldrb	r3, [r4, #5]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4a93      	ldr	r2, [pc, #588]	; (8005d6c <drawFrame+0x11ec>)
 8005b1e:	b2c9      	uxtb	r1, r1
 8005b20:	2001      	movs	r0, #1
 8005b22:	f7fe fb37 	bl	8004194 <OLED_PutStr>
					break;
 8005b26:	e678      	b.n	800581a <drawFrame+0xc9a>
						frame.totalPositions = 3;
 8005b28:	4d8c      	ldr	r5, [pc, #560]	; (8005d5c <drawFrame+0x11dc>)
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
						OLED_PutStr(10, 0, Thermal_Compensation[0][settings.language], 0, settings.contrast);			//tytul okna (komensacja temperatury)
 8005b30:	4c8b      	ldr	r4, [pc, #556]	; (8005d60 <drawFrame+0x11e0>)
 8005b32:	7922      	ldrb	r2, [r4, #4]
 8005b34:	4e8b      	ldr	r6, [pc, #556]	; (8005d64 <drawFrame+0x11e4>)
 8005b36:	f506 777e 	add.w	r7, r6, #1016	; 0x3f8
 8005b3a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8005b3e:	7963      	ldrb	r3, [r4, #5]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2300      	movs	r3, #0
 8005b44:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	200a      	movs	r0, #10
 8005b4c:	f7fe fb22 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 10, Thermal_Compensation[1][settings.language], 0, settings.contrast);
 8005b50:	7923      	ldrb	r3, [r4, #4]
 8005b52:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005b56:	005a      	lsls	r2, r3, #1
 8005b58:	3224      	adds	r2, #36	; 0x24
 8005b5a:	7963      	ldrb	r3, [r4, #5]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	443a      	add	r2, r7
 8005b62:	210a      	movs	r1, #10
 8005b64:	2005      	movs	r0, #5
 8005b66:	f7fe fb15 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 19, Thermal_Compensation[2][settings.language], 0, settings.contrast);
 8005b6a:	7923      	ldrb	r3, [r4, #4]
 8005b6c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005b70:	005a      	lsls	r2, r3, #1
 8005b72:	3248      	adds	r2, #72	; 0x48
 8005b74:	7963      	ldrb	r3, [r4, #5]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	443a      	add	r2, r7
 8005b7c:	2113      	movs	r1, #19
 8005b7e:	2005      	movs	r0, #5
 8005b80:	f7fe fb08 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 8005b84:	7923      	ldrb	r3, [r4, #4]
 8005b86:	f506 7619 	add.w	r6, r6, #612	; 0x264
 8005b8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8005b94:	7963      	ldrb	r3, [r4, #5]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4432      	add	r2, r6
 8005b9c:	211c      	movs	r1, #28
 8005b9e:	2005      	movs	r0, #5
 8005ba0:	f7fe faf8 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8005ba4:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005ba8:	441d      	add	r5, r3
 8005baa:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8005bae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005bb2:	f103 010a 	add.w	r1, r3, #10
 8005bb6:	7963      	ldrb	r3, [r4, #5]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4a6b      	ldr	r2, [pc, #428]	; (8005d6c <drawFrame+0x11ec>)
 8005bbe:	b2c9      	uxtb	r1, r1
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f7fe fae7 	bl	8004194 <OLED_PutStr>
					break;
 8005bc6:	e628      	b.n	800581a <drawFrame+0xc9a>
						frame.totalPositions = 5;
 8005bc8:	4e64      	ldr	r6, [pc, #400]	; (8005d5c <drawFrame+0x11dc>)
 8005bca:	2505      	movs	r5, #5
 8005bcc:	f886 5066 	strb.w	r5, [r6, #102]	; 0x66
						OLED_PutStr(10, 0, Settings[0][settings.language], 0, settings.contrast);			//tytul okna (ustawienia)
 8005bd0:	4c63      	ldr	r4, [pc, #396]	; (8005d60 <drawFrame+0x11e0>)
 8005bd2:	7922      	ldrb	r2, [r4, #4]
 8005bd4:	4f63      	ldr	r7, [pc, #396]	; (8005d64 <drawFrame+0x11e4>)
 8005bd6:	f207 4864 	addw	r8, r7, #1124	; 0x464
 8005bda:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005bde:	7963      	ldrb	r3, [r4, #5]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	2300      	movs	r3, #0
 8005be4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8005be8:	4619      	mov	r1, r3
 8005bea:	200a      	movs	r0, #10
 8005bec:	f7fe fad2 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 10, Settings[1][settings.language], 0, settings.contrast);
 8005bf0:	7923      	ldrb	r3, [r4, #4]
 8005bf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bf6:	009a      	lsls	r2, r3, #2
 8005bf8:	3228      	adds	r2, #40	; 0x28
 8005bfa:	7963      	ldrb	r3, [r4, #5]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4442      	add	r2, r8
 8005c02:	210a      	movs	r1, #10
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7fe fac5 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 19, Settings[2][settings.language], 0, settings.contrast);
 8005c0a:	7923      	ldrb	r3, [r4, #4]
 8005c0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c10:	009a      	lsls	r2, r3, #2
 8005c12:	3250      	adds	r2, #80	; 0x50
 8005c14:	7963      	ldrb	r3, [r4, #5]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4442      	add	r2, r8
 8005c1c:	2113      	movs	r1, #19
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f7fe fab8 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 28, Settings[3][settings.language], 0, settings.contrast);
 8005c24:	7923      	ldrb	r3, [r4, #4]
 8005c26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c2a:	009a      	lsls	r2, r3, #2
 8005c2c:	3278      	adds	r2, #120	; 0x78
 8005c2e:	7963      	ldrb	r3, [r4, #5]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	2300      	movs	r3, #0
 8005c34:	4442      	add	r2, r8
 8005c36:	211c      	movs	r1, #28
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f7fe faab 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 37, Settings[4][settings.language], 0, settings.contrast);
 8005c3e:	7923      	ldrb	r3, [r4, #4]
 8005c40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c44:	009a      	lsls	r2, r3, #2
 8005c46:	32a0      	adds	r2, #160	; 0xa0
 8005c48:	7963      	ldrb	r3, [r4, #5]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4442      	add	r2, r8
 8005c50:	2125      	movs	r1, #37	; 0x25
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7fe fa9e 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 46, Main_Menu[7][settings.language], 0, settings.contrast);
 8005c58:	7923      	ldrb	r3, [r4, #4]
 8005c5a:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8005c5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8005c68:	7963      	ldrb	r3, [r4, #5]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	443a      	add	r2, r7
 8005c70:	212e      	movs	r1, #46	; 0x2e
 8005c72:	4628      	mov	r0, r5
 8005c74:	f7fe fa8e 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8005c78:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
 8005c7c:	441e      	add	r6, r3
 8005c7e:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
 8005c82:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005c86:	f103 010a 	add.w	r1, r3, #10
 8005c8a:	7963      	ldrb	r3, [r4, #5]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	4a36      	ldr	r2, [pc, #216]	; (8005d6c <drawFrame+0x11ec>)
 8005c92:	b2c9      	uxtb	r1, r1
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7fe fa7d 	bl	8004194 <OLED_PutStr>
					break;
 8005c9a:	e5be      	b.n	800581a <drawFrame+0xc9a>
						frame.totalPositions = 4;
 8005c9c:	4d2f      	ldr	r5, [pc, #188]	; (8005d5c <drawFrame+0x11dc>)
 8005c9e:	2304      	movs	r3, #4
 8005ca0:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
						OLED_PutStr(10, 0, Archive[7][settings.language], 0, settings.contrast);			//tytul okna (ustawienia)
 8005ca4:	4c2e      	ldr	r4, [pc, #184]	; (8005d60 <drawFrame+0x11e0>)
 8005ca6:	7923      	ldrb	r3, [r4, #4]
 8005ca8:	4e2e      	ldr	r6, [pc, #184]	; (8005d64 <drawFrame+0x11e4>)
 8005caa:	f506 7798 	add.w	r7, r6, #304	; 0x130
 8005cae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005cb2:	005a      	lsls	r2, r3, #1
 8005cb4:	32c4      	adds	r2, #196	; 0xc4
 8005cb6:	7963      	ldrb	r3, [r4, #5]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	443a      	add	r2, r7
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	200a      	movs	r0, #10
 8005cc2:	f7fe fa67 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 10, Archive[0][settings.language], 0, settings.contrast);
 8005cc6:	7922      	ldrb	r2, [r4, #4]
 8005cc8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005ccc:	7963      	ldrb	r3, [r4, #5]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005cd6:	210a      	movs	r1, #10
 8005cd8:	2005      	movs	r0, #5
 8005cda:	f7fe fa5b 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 19, Archive[1][settings.language], 0, settings.contrast);
 8005cde:	7923      	ldrb	r3, [r4, #4]
 8005ce0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005ce4:	005a      	lsls	r2, r3, #1
 8005ce6:	321c      	adds	r2, #28
 8005ce8:	7963      	ldrb	r3, [r4, #5]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	443a      	add	r2, r7
 8005cf0:	2113      	movs	r1, #19
 8005cf2:	2005      	movs	r0, #5
 8005cf4:	f7fe fa4e 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 28, Archive[2][settings.language], 0, settings.contrast);
 8005cf8:	7923      	ldrb	r3, [r4, #4]
 8005cfa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005cfe:	005a      	lsls	r2, r3, #1
 8005d00:	3238      	adds	r2, #56	; 0x38
 8005d02:	7963      	ldrb	r3, [r4, #5]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2300      	movs	r3, #0
 8005d08:	443a      	add	r2, r7
 8005d0a:	211c      	movs	r1, #28
 8005d0c:	2005      	movs	r0, #5
 8005d0e:	f7fe fa41 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(5, 37, Main_Menu[7][settings.language], 0, settings.contrast);
 8005d12:	7923      	ldrb	r3, [r4, #4]
 8005d14:	f506 7619 	add.w	r6, r6, #612	; 0x264
 8005d18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8005d22:	7963      	ldrb	r3, [r4, #5]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2300      	movs	r3, #0
 8005d28:	4432      	add	r2, r6
 8005d2a:	2125      	movs	r1, #37	; 0x25
 8005d2c:	2005      	movs	r0, #5
 8005d2e:	f7fe fa31 	bl	8004194 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8005d32:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005d36:	441d      	add	r5, r3
 8005d38:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8005d3c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005d40:	f103 010a 	add.w	r1, r3, #10
 8005d44:	7963      	ldrb	r3, [r4, #5]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <drawFrame+0x11ec>)
 8005d4c:	b2c9      	uxtb	r1, r1
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7fe fa20 	bl	8004194 <OLED_PutStr>
						break;
 8005d54:	e561      	b.n	800581a <drawFrame+0xc9a>
						exit_main_menu();
 8005d56:	f7fe fee7 	bl	8004b28 <exit_main_menu>
					break;
 8005d5a:	e55e      	b.n	800581a <drawFrame+0xc9a>
 8005d5c:	20001604 	.word	0x20001604
 8005d60:	200006c4 	.word	0x200006c4
 8005d64:	0800cc90 	.word	0x0800cc90
 8005d68:	08010190 	.word	0x08010190
 8005d6c:	0801018c 	.word	0x0801018c
				if (frame.position[0] == MAIN_MENU_SETTINGS)	//jesli w podmenu ustawienia
 8005d70:	4baf      	ldr	r3, [pc, #700]	; (8006030 <drawFrame+0x14b0>)
 8005d72:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d05c      	beq.n	8005e34 <drawFrame+0x12b4>
				if (frame.position[0] == MAIN_MENU_ARCHIVE) //jesli w podmenu archiwum
 8005d7a:	4bad      	ldr	r3, [pc, #692]	; (8006030 <drawFrame+0x14b0>)
 8005d7c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	f47f ad50 	bne.w	8005826 <drawFrame+0xca6>
					switch (frame.position[1])	//sprawdz ktore podmenu menu archiwum zostalo wybrane
 8005d86:	4baa      	ldr	r3, [pc, #680]	; (8006030 <drawFrame+0x14b0>)
 8005d88:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	f47f ad4a 	bne.w	8005826 <drawFrame+0xca6>
							frame.totalPositions = 3;
 8005d92:	4da7      	ldr	r5, [pc, #668]	; (8006030 <drawFrame+0x14b0>)
 8005d94:	2303      	movs	r3, #3
 8005d96:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
							OLED_PutStr(10, 0, Archive[1][settings.language], 0, settings.contrast);			//tytul okna (sposob wyswietlania)
 8005d9a:	4ca6      	ldr	r4, [pc, #664]	; (8006034 <drawFrame+0x14b4>)
 8005d9c:	7923      	ldrb	r3, [r4, #4]
 8005d9e:	4ea6      	ldr	r6, [pc, #664]	; (8006038 <drawFrame+0x14b8>)
 8005da0:	f506 7798 	add.w	r7, r6, #304	; 0x130
 8005da4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005da8:	005a      	lsls	r2, r3, #1
 8005daa:	321c      	adds	r2, #28
 8005dac:	7963      	ldrb	r3, [r4, #5]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	443a      	add	r2, r7
 8005db4:	4619      	mov	r1, r3
 8005db6:	200a      	movs	r0, #10
 8005db8:	f7fe f9ec 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 10, Archive[4][settings.language], 0, settings.contrast);
 8005dbc:	7923      	ldrb	r3, [r4, #4]
 8005dbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005dc2:	005a      	lsls	r2, r3, #1
 8005dc4:	3270      	adds	r2, #112	; 0x70
 8005dc6:	7963      	ldrb	r3, [r4, #5]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	443a      	add	r2, r7
 8005dce:	210a      	movs	r1, #10
 8005dd0:	2005      	movs	r0, #5
 8005dd2:	f7fe f9df 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 19, Archive[5][settings.language], 0, settings.contrast);
 8005dd6:	7923      	ldrb	r3, [r4, #4]
 8005dd8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005ddc:	005a      	lsls	r2, r3, #1
 8005dde:	328c      	adds	r2, #140	; 0x8c
 8005de0:	7963      	ldrb	r3, [r4, #5]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	443a      	add	r2, r7
 8005de8:	2113      	movs	r1, #19
 8005dea:	2005      	movs	r0, #5
 8005dec:	f7fe f9d2 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 8005df0:	7923      	ldrb	r3, [r4, #4]
 8005df2:	f506 7619 	add.w	r6, r6, #612	; 0x264
 8005df6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8005e00:	7963      	ldrb	r3, [r4, #5]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	4432      	add	r2, r6
 8005e08:	211c      	movs	r1, #28
 8005e0a:	2005      	movs	r0, #5
 8005e0c:	f7fe f9c2 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8005e10:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005e14:	441d      	add	r5, r3
 8005e16:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8005e1a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005e1e:	f103 010a 	add.w	r1, r3, #10
 8005e22:	7963      	ldrb	r3, [r4, #5]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	2300      	movs	r3, #0
 8005e28:	4a84      	ldr	r2, [pc, #528]	; (800603c <drawFrame+0x14bc>)
 8005e2a:	b2c9      	uxtb	r1, r1
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	f7fe f9b1 	bl	8004194 <OLED_PutStr>
							break;
 8005e32:	e4f8      	b.n	8005826 <drawFrame+0xca6>
					switch (frame.position[1])	//sprawdz ktore podmenu menu ustawienia zostalo wybrane
 8005e34:	4b7e      	ldr	r3, [pc, #504]	; (8006030 <drawFrame+0x14b0>)
 8005e36:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d89d      	bhi.n	8005d7a <drawFrame+0x11fa>
 8005e3e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005e42:	0004      	.short	0x0004
 8005e44:	00960035 	.word	0x00960035
 8005e48:	0105      	.short	0x0105
							 frame.valueMin = 15;
 8005e4a:	4c79      	ldr	r4, [pc, #484]	; (8006030 <drawFrame+0x14b0>)
 8005e4c:	230f      	movs	r3, #15
 8005e4e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
							 frame.valueMax = 40;
 8005e52:	2328      	movs	r3, #40	; 0x28
 8005e54:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
							 sprintf(frame.firstLine,Settings[0][settings.language]);
 8005e58:	4d76      	ldr	r5, [pc, #472]	; (8006034 <drawFrame+0x14b4>)
 8005e5a:	7929      	ldrb	r1, [r5, #4]
 8005e5c:	4e78      	ldr	r6, [pc, #480]	; (8006040 <drawFrame+0x14c0>)
 8005e5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005e62:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8005e66:	1c60      	adds	r0, r4, #1
 8005e68:	f002 fd54 	bl	8008914 <siprintf>
							 sprintf(frame.secondLine, Settings[1][settings.language]);
 8005e6c:	792b      	ldrb	r3, [r5, #4]
 8005e6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e72:	0099      	lsls	r1, r3, #2
 8005e74:	3128      	adds	r1, #40	; 0x28
 8005e76:	4431      	add	r1, r6
 8005e78:	f104 0019 	add.w	r0, r4, #25
 8005e7c:	f002 fd4a 	bl	8008914 <siprintf>
							 sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 8005e80:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005e84:	496f      	ldr	r1, [pc, #444]	; (8006044 <drawFrame+0x14c4>)
 8005e86:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8005e8a:	f002 fd43 	bl	8008914 <siprintf>
							 frame.value = settings.singleMeasurementTime;
 8005e8e:	78eb      	ldrb	r3, [r5, #3]
 8005e90:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 8005e94:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 8005e98:	496b      	ldr	r1, [pc, #428]	; (8006048 <drawFrame+0x14c8>)
 8005e9a:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8005e9e:	f002 fd39 	bl	8008914 <siprintf>
							 OLED_CLEAR();
 8005ea2:	f7fd ffbc 	bl	8003e1e <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	7023      	strb	r3, [r4, #0]
							 break;
 8005eaa:	e766      	b.n	8005d7a <drawFrame+0x11fa>
							frame.totalPositions = 4;
 8005eac:	4d60      	ldr	r5, [pc, #384]	; (8006030 <drawFrame+0x14b0>)
 8005eae:	2304      	movs	r3, #4
 8005eb0:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
							OLED_PutStr(10, 0, Settings[5][settings.language], 0, settings.contrast);			//tytul okna (ustaw date)
 8005eb4:	4c5f      	ldr	r4, [pc, #380]	; (8006034 <drawFrame+0x14b4>)
 8005eb6:	7923      	ldrb	r3, [r4, #4]
 8005eb8:	4e5f      	ldr	r6, [pc, #380]	; (8006038 <drawFrame+0x14b8>)
 8005eba:	f206 4764 	addw	r7, r6, #1124	; 0x464
 8005ebe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ec2:	009a      	lsls	r2, r3, #2
 8005ec4:	32c8      	adds	r2, #200	; 0xc8
 8005ec6:	7963      	ldrb	r3, [r4, #5]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	443a      	add	r2, r7
 8005ece:	4619      	mov	r1, r3
 8005ed0:	200a      	movs	r0, #10
 8005ed2:	f7fe f95f 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 10, Settings[9][settings.language], 0, settings.contrast);
 8005ed6:	7923      	ldrb	r3, [r4, #4]
 8005ed8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005edc:	009a      	lsls	r2, r3, #2
 8005ede:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8005ee2:	7963      	ldrb	r3, [r4, #5]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	443a      	add	r2, r7
 8005eea:	210a      	movs	r1, #10
 8005eec:	2005      	movs	r0, #5
 8005eee:	f7fe f951 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 19, Settings[8][settings.language], 0, settings.contrast);
 8005ef2:	7923      	ldrb	r3, [r4, #4]
 8005ef4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ef8:	009a      	lsls	r2, r3, #2
 8005efa:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8005efe:	7963      	ldrb	r3, [r4, #5]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	2300      	movs	r3, #0
 8005f04:	443a      	add	r2, r7
 8005f06:	2113      	movs	r1, #19
 8005f08:	2005      	movs	r0, #5
 8005f0a:	f7fe f943 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 28, Settings[7][settings.language], 0, settings.contrast);
 8005f0e:	7923      	ldrb	r3, [r4, #4]
 8005f10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f14:	009a      	lsls	r2, r3, #2
 8005f16:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8005f1a:	7963      	ldrb	r3, [r4, #5]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	443a      	add	r2, r7
 8005f22:	211c      	movs	r1, #28
 8005f24:	2005      	movs	r0, #5
 8005f26:	f7fe f935 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 37, Main_Menu[7][settings.language], 0, settings.contrast);
 8005f2a:	7923      	ldrb	r3, [r4, #4]
 8005f2c:	f506 7619 	add.w	r6, r6, #612	; 0x264
 8005f30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8005f3a:	7963      	ldrb	r3, [r4, #5]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	4432      	add	r2, r6
 8005f42:	2125      	movs	r1, #37	; 0x25
 8005f44:	2005      	movs	r0, #5
 8005f46:	f7fe f925 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8005f4a:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005f4e:	441d      	add	r5, r3
 8005f50:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8005f54:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005f58:	f103 010a 	add.w	r1, r3, #10
 8005f5c:	7963      	ldrb	r3, [r4, #5]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	4a36      	ldr	r2, [pc, #216]	; (800603c <drawFrame+0x14bc>)
 8005f64:	b2c9      	uxtb	r1, r1
 8005f66:	2001      	movs	r0, #1
 8005f68:	f7fe f914 	bl	8004194 <OLED_PutStr>
							break;
 8005f6c:	e705      	b.n	8005d7a <drawFrame+0x11fa>
							frame.totalPositions = 4;
 8005f6e:	4d30      	ldr	r5, [pc, #192]	; (8006030 <drawFrame+0x14b0>)
 8005f70:	2304      	movs	r3, #4
 8005f72:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
							OLED_PutStr(10, 0, Settings[6][settings.language], 0, settings.contrast);			//tytul okna (ustaw czas)
 8005f76:	4c2f      	ldr	r4, [pc, #188]	; (8006034 <drawFrame+0x14b4>)
 8005f78:	7923      	ldrb	r3, [r4, #4]
 8005f7a:	4e2f      	ldr	r6, [pc, #188]	; (8006038 <drawFrame+0x14b8>)
 8005f7c:	f206 4764 	addw	r7, r6, #1124	; 0x464
 8005f80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f84:	009a      	lsls	r2, r3, #2
 8005f86:	32f0      	adds	r2, #240	; 0xf0
 8005f88:	7963      	ldrb	r3, [r4, #5]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	443a      	add	r2, r7
 8005f90:	4619      	mov	r1, r3
 8005f92:	200a      	movs	r0, #10
 8005f94:	f7fe f8fe 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 10, Settings[10][settings.language], 0, settings.contrast);
 8005f98:	7923      	ldrb	r3, [r4, #4]
 8005f9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f9e:	009a      	lsls	r2, r3, #2
 8005fa0:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8005fa4:	7963      	ldrb	r3, [r4, #5]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	443a      	add	r2, r7
 8005fac:	210a      	movs	r1, #10
 8005fae:	2005      	movs	r0, #5
 8005fb0:	f7fe f8f0 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 19, Settings[11][settings.language], 0, settings.contrast);
 8005fb4:	7923      	ldrb	r3, [r4, #4]
 8005fb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fba:	009a      	lsls	r2, r3, #2
 8005fbc:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8005fc0:	7963      	ldrb	r3, [r4, #5]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	443a      	add	r2, r7
 8005fc8:	2113      	movs	r1, #19
 8005fca:	2005      	movs	r0, #5
 8005fcc:	f7fe f8e2 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 28, Settings[12][settings.language], 0, settings.contrast);
 8005fd0:	7923      	ldrb	r3, [r4, #4]
 8005fd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fd6:	009a      	lsls	r2, r3, #2
 8005fd8:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
 8005fdc:	7963      	ldrb	r3, [r4, #5]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	443a      	add	r2, r7
 8005fe4:	211c      	movs	r1, #28
 8005fe6:	2005      	movs	r0, #5
 8005fe8:	f7fe f8d4 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 37, Main_Menu[7][settings.language], 0, settings.contrast);
 8005fec:	7923      	ldrb	r3, [r4, #4]
 8005fee:	f506 7619 	add.w	r6, r6, #612	; 0x264
 8005ff2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8005ffc:	7963      	ldrb	r3, [r4, #5]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	4432      	add	r2, r6
 8006004:	2125      	movs	r1, #37	; 0x25
 8006006:	2005      	movs	r0, #5
 8006008:	f7fe f8c4 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 800600c:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8006010:	441d      	add	r5, r3
 8006012:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8006016:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800601a:	f103 010a 	add.w	r1, r3, #10
 800601e:	7963      	ldrb	r3, [r4, #5]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	4a05      	ldr	r2, [pc, #20]	; (800603c <drawFrame+0x14bc>)
 8006026:	b2c9      	uxtb	r1, r1
 8006028:	2001      	movs	r0, #1
 800602a:	f7fe f8b3 	bl	8004194 <OLED_PutStr>
							break;
 800602e:	e6a4      	b.n	8005d7a <drawFrame+0x11fa>
 8006030:	20001604 	.word	0x20001604
 8006034:	200006c4 	.word	0x200006c4
 8006038:	0800cc90 	.word	0x0800cc90
 800603c:	0801018c 	.word	0x0801018c
 8006040:	0800d0f4 	.word	0x0800d0f4
 8006044:	08010198 	.word	0x08010198
 8006048:	080101a4 	.word	0x080101a4
							frame.totalPositions = 3;
 800604c:	4db1      	ldr	r5, [pc, #708]	; (8006314 <drawFrame+0x1794>)
 800604e:	2303      	movs	r3, #3
 8006050:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
							OLED_PutStr(10, 0, Settings[4][settings.language], 0, settings.contrast);			//tytul okna (sposob wyswietlania)
 8006054:	4cb0      	ldr	r4, [pc, #704]	; (8006318 <drawFrame+0x1798>)
 8006056:	7923      	ldrb	r3, [r4, #4]
 8006058:	4eb0      	ldr	r6, [pc, #704]	; (800631c <drawFrame+0x179c>)
 800605a:	f206 4164 	addw	r1, r6, #1124	; 0x464
 800605e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8006068:	7963      	ldrb	r3, [r4, #5]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	440a      	add	r2, r1
 8006070:	4619      	mov	r1, r3
 8006072:	200a      	movs	r0, #10
 8006074:	f7fe f88e 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 10, Languages[0], 0, settings.contrast);
 8006078:	7963      	ldrb	r3, [r4, #5]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2300      	movs	r3, #0
 800607e:	f206 626c 	addw	r2, r6, #1644	; 0x66c
 8006082:	210a      	movs	r1, #10
 8006084:	2005      	movs	r0, #5
 8006086:	f7fe f885 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 19, Languages[1], 0, settings.contrast);
 800608a:	7963      	ldrb	r3, [r4, #5]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	f206 6274 	addw	r2, r6, #1652	; 0x674
 8006094:	2113      	movs	r1, #19
 8006096:	2005      	movs	r0, #5
 8006098:	f7fe f87c 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 800609c:	7923      	ldrb	r3, [r4, #4]
 800609e:	f506 7619 	add.w	r6, r6, #612	; 0x264
 80060a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80060ac:	7963      	ldrb	r3, [r4, #5]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	4432      	add	r2, r6
 80060b4:	211c      	movs	r1, #28
 80060b6:	2005      	movs	r0, #5
 80060b8:	f7fe f86c 	bl	8004194 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 80060bc:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 80060c0:	441d      	add	r5, r3
 80060c2:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 80060c6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80060ca:	f103 010a 	add.w	r1, r3, #10
 80060ce:	7963      	ldrb	r3, [r4, #5]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	4a92      	ldr	r2, [pc, #584]	; (8006320 <drawFrame+0x17a0>)
 80060d6:	b2c9      	uxtb	r1, r1
 80060d8:	2001      	movs	r0, #1
 80060da:	f7fe f85b 	bl	8004194 <OLED_PutStr>
							break;
 80060de:	e64c      	b.n	8005d7a <drawFrame+0x11fa>
					switch (frame.position[2])	//sprawdz zmiana ktorego parametru zostala wybrana (dnia/miesiaca/roku)
 80060e0:	4b8c      	ldr	r3, [pc, #560]	; (8006314 <drawFrame+0x1794>)
 80060e2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d03d      	beq.n	8006166 <drawFrame+0x15e6>
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d070      	beq.n	80061d0 <drawFrame+0x1650>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f47f aba5 	bne.w	800583e <drawFrame+0xcbe>
							 frame.valueMin = 2020;
 80060f4:	4c87      	ldr	r4, [pc, #540]	; (8006314 <drawFrame+0x1794>)
 80060f6:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80060fa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
							 frame.valueMax = 2099;
 80060fe:	f640 0333 	movw	r3, #2099	; 0x833
 8006102:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[5][settings.language]);
 8006106:	4e84      	ldr	r6, [pc, #528]	; (8006318 <drawFrame+0x1798>)
 8006108:	7933      	ldrb	r3, [r6, #4]
 800610a:	4d86      	ldr	r5, [pc, #536]	; (8006324 <drawFrame+0x17a4>)
 800610c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006110:	0099      	lsls	r1, r3, #2
 8006112:	31c8      	adds	r1, #200	; 0xc8
 8006114:	4429      	add	r1, r5
 8006116:	1c60      	adds	r0, r4, #1
 8006118:	f002 fbfc 	bl	8008914 <siprintf>
							 sprintf(frame.secondLine, Settings[9][settings.language]);
 800611c:	7933      	ldrb	r3, [r6, #4]
 800611e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006122:	0099      	lsls	r1, r3, #2
 8006124:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006128:	4429      	add	r1, r5
 800612a:	f104 0019 	add.w	r0, r4, #25
 800612e:	f002 fbf1 	bl	8008914 <siprintf>
							 sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 8006132:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006136:	497c      	ldr	r1, [pc, #496]	; (8006328 <drawFrame+0x17a8>)
 8006138:	f104 0031 	add.w	r0, r4, #49	; 0x31
 800613c:	f002 fbea 	bl	8008914 <siprintf>
							 frame.value = gDate.Year + 2000;
 8006140:	4b7a      	ldr	r3, [pc, #488]	; (800632c <drawFrame+0x17ac>)
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006148:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 800614c:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 8006150:	4977      	ldr	r1, [pc, #476]	; (8006330 <drawFrame+0x17b0>)
 8006152:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8006156:	f002 fbdd 	bl	8008914 <siprintf>
							 OLED_CLEAR();
 800615a:	f7fd fe60 	bl	8003e1e <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 800615e:	2303      	movs	r3, #3
 8006160:	7023      	strb	r3, [r4, #0]
							break;
 8006162:	f7ff bb6c 	b.w	800583e <drawFrame+0xcbe>
							 frame.valueMin = 1;
 8006166:	4c6b      	ldr	r4, [pc, #428]	; (8006314 <drawFrame+0x1794>)
 8006168:	2301      	movs	r3, #1
 800616a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
							 frame.valueMax = 12;
 800616e:	230c      	movs	r3, #12
 8006170:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[5][settings.language]);
 8006174:	4e68      	ldr	r6, [pc, #416]	; (8006318 <drawFrame+0x1798>)
 8006176:	7933      	ldrb	r3, [r6, #4]
 8006178:	4d6a      	ldr	r5, [pc, #424]	; (8006324 <drawFrame+0x17a4>)
 800617a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800617e:	0099      	lsls	r1, r3, #2
 8006180:	31c8      	adds	r1, #200	; 0xc8
 8006182:	4429      	add	r1, r5
 8006184:	1c60      	adds	r0, r4, #1
 8006186:	f002 fbc5 	bl	8008914 <siprintf>
							 sprintf(frame.secondLine, Settings[8][settings.language]);
 800618a:	7933      	ldrb	r3, [r6, #4]
 800618c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006190:	0099      	lsls	r1, r3, #2
 8006192:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 8006196:	4429      	add	r1, r5
 8006198:	f104 0019 	add.w	r0, r4, #25
 800619c:	f002 fbba 	bl	8008914 <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 80061a0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80061a4:	4960      	ldr	r1, [pc, #384]	; (8006328 <drawFrame+0x17a8>)
 80061a6:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80061aa:	f002 fbb3 	bl	8008914 <siprintf>
							 frame.value = gDate.Month;
 80061ae:	4b5f      	ldr	r3, [pc, #380]	; (800632c <drawFrame+0x17ac>)
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 80061b6:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 80061ba:	495d      	ldr	r1, [pc, #372]	; (8006330 <drawFrame+0x17b0>)
 80061bc:	f104 0049 	add.w	r0, r4, #73	; 0x49
 80061c0:	f002 fba8 	bl	8008914 <siprintf>
							 OLED_CLEAR();
 80061c4:	f7fd fe2b 	bl	8003e1e <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 80061c8:	2303      	movs	r3, #3
 80061ca:	7023      	strb	r3, [r4, #0]
							break;
 80061cc:	f7ff bb37 	b.w	800583e <drawFrame+0xcbe>
							 frame.valueMin = 1;
 80061d0:	4c50      	ldr	r4, [pc, #320]	; (8006314 <drawFrame+0x1794>)
 80061d2:	2301      	movs	r3, #1
 80061d4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
							 frame.valueMax = No_of_days_a_month(gDate.Month);
 80061d8:	4d54      	ldr	r5, [pc, #336]	; (800632c <drawFrame+0x17ac>)
 80061da:	7868      	ldrb	r0, [r5, #1]
 80061dc:	f7fe faac 	bl	8004738 <No_of_days_a_month>
 80061e0:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[5][settings.language]);
 80061e4:	4f4c      	ldr	r7, [pc, #304]	; (8006318 <drawFrame+0x1798>)
 80061e6:	793b      	ldrb	r3, [r7, #4]
 80061e8:	4e4e      	ldr	r6, [pc, #312]	; (8006324 <drawFrame+0x17a4>)
 80061ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061ee:	0099      	lsls	r1, r3, #2
 80061f0:	31c8      	adds	r1, #200	; 0xc8
 80061f2:	4431      	add	r1, r6
 80061f4:	1c60      	adds	r0, r4, #1
 80061f6:	f002 fb8d 	bl	8008914 <siprintf>
							 sprintf(frame.secondLine, Settings[7][settings.language]);
 80061fa:	793b      	ldrb	r3, [r7, #4]
 80061fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006200:	0099      	lsls	r1, r3, #2
 8006202:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8006206:	4431      	add	r1, r6
 8006208:	f104 0019 	add.w	r0, r4, #25
 800620c:	f002 fb82 	bl	8008914 <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 8006210:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006214:	4944      	ldr	r1, [pc, #272]	; (8006328 <drawFrame+0x17a8>)
 8006216:	f104 0031 	add.w	r0, r4, #49	; 0x31
 800621a:	f002 fb7b 	bl	8008914 <siprintf>
							 frame.value = gDate.Date;
 800621e:	78ab      	ldrb	r3, [r5, #2]
 8006220:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 8006224:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 8006228:	4941      	ldr	r1, [pc, #260]	; (8006330 <drawFrame+0x17b0>)
 800622a:	f104 0049 	add.w	r0, r4, #73	; 0x49
 800622e:	f002 fb71 	bl	8008914 <siprintf>
							 OLED_CLEAR();
 8006232:	f7fd fdf4 	bl	8003e1e <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 8006236:	2303      	movs	r3, #3
 8006238:	7023      	strb	r3, [r4, #0]
							break;
 800623a:	f7ff bb00 	b.w	800583e <drawFrame+0xcbe>
							 frame.valueMin = 0;
 800623e:	4c35      	ldr	r4, [pc, #212]	; (8006314 <drawFrame+0x1794>)
 8006240:	2300      	movs	r3, #0
 8006242:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
							 frame.valueMax = 59;
 8006246:	233b      	movs	r3, #59	; 0x3b
 8006248:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
							 sprintf(frame.firstLine,Settings[6][settings.language]);
 800624c:	4e32      	ldr	r6, [pc, #200]	; (8006318 <drawFrame+0x1798>)
 800624e:	7933      	ldrb	r3, [r6, #4]
 8006250:	4d34      	ldr	r5, [pc, #208]	; (8006324 <drawFrame+0x17a4>)
 8006252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006256:	0099      	lsls	r1, r3, #2
 8006258:	31f0      	adds	r1, #240	; 0xf0
 800625a:	4429      	add	r1, r5
 800625c:	1c60      	adds	r0, r4, #1
 800625e:	f002 fb59 	bl	8008914 <siprintf>
							 sprintf(frame.secondLine, Settings[11][settings.language]);
 8006262:	7933      	ldrb	r3, [r6, #4]
 8006264:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006268:	0099      	lsls	r1, r3, #2
 800626a:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 800626e:	4429      	add	r1, r5
 8006270:	f104 0019 	add.w	r0, r4, #25
 8006274:	f002 fb4e 	bl	8008914 <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 8006278:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800627c:	492a      	ldr	r1, [pc, #168]	; (8006328 <drawFrame+0x17a8>)
 800627e:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8006282:	f002 fb47 	bl	8008914 <siprintf>
							 frame.value = gTime.Minutes;
 8006286:	4b29      	ldr	r3, [pc, #164]	; (800632c <drawFrame+0x17ac>)
 8006288:	795b      	ldrb	r3, [r3, #5]
 800628a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 800628e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 8006292:	4927      	ldr	r1, [pc, #156]	; (8006330 <drawFrame+0x17b0>)
 8006294:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8006298:	f002 fb3c 	bl	8008914 <siprintf>
							 OLED_CLEAR();
 800629c:	f7fd fdbf 	bl	8003e1e <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 80062a0:	2303      	movs	r3, #3
 80062a2:	7023      	strb	r3, [r4, #0]
							break;
 80062a4:	f7fe bcbd 	b.w	8004c22 <drawFrame+0xa2>
							 frame.valueMin = 0;
 80062a8:	4c1a      	ldr	r4, [pc, #104]	; (8006314 <drawFrame+0x1794>)
 80062aa:	2300      	movs	r3, #0
 80062ac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
							 frame.valueMax = 59;
 80062b0:	233b      	movs	r3, #59	; 0x3b
 80062b2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
							 sprintf(frame.firstLine,Settings[6][settings.language]);
 80062b6:	4e18      	ldr	r6, [pc, #96]	; (8006318 <drawFrame+0x1798>)
 80062b8:	7933      	ldrb	r3, [r6, #4]
 80062ba:	4d1a      	ldr	r5, [pc, #104]	; (8006324 <drawFrame+0x17a4>)
 80062bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062c0:	0099      	lsls	r1, r3, #2
 80062c2:	31f0      	adds	r1, #240	; 0xf0
 80062c4:	4429      	add	r1, r5
 80062c6:	1c60      	adds	r0, r4, #1
 80062c8:	f002 fb24 	bl	8008914 <siprintf>
							 sprintf(frame.secondLine, Settings[12][settings.language]);
 80062cc:	7933      	ldrb	r3, [r6, #4]
 80062ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062d2:	0099      	lsls	r1, r3, #2
 80062d4:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
 80062d8:	4429      	add	r1, r5
 80062da:	f104 0019 	add.w	r0, r4, #25
 80062de:	f002 fb19 	bl	8008914 <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 80062e2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80062e6:	4910      	ldr	r1, [pc, #64]	; (8006328 <drawFrame+0x17a8>)
 80062e8:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80062ec:	f002 fb12 	bl	8008914 <siprintf>
							 frame.value = gTime.Seconds;
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <drawFrame+0x17ac>)
 80062f2:	799b      	ldrb	r3, [r3, #6]
 80062f4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 80062f8:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 80062fc:	490c      	ldr	r1, [pc, #48]	; (8006330 <drawFrame+0x17b0>)
 80062fe:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8006302:	f002 fb07 	bl	8008914 <siprintf>
							 OLED_CLEAR();
 8006306:	f7fd fd8a 	bl	8003e1e <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 800630a:	2303      	movs	r3, #3
 800630c:	7023      	strb	r3, [r4, #0]
}
 800630e:	f7fe bc88 	b.w	8004c22 <drawFrame+0xa2>
 8006312:	bf00      	nop
 8006314:	20001604 	.word	0x20001604
 8006318:	200006c4 	.word	0x200006c4
 800631c:	0800cc90 	.word	0x0800cc90
 8006320:	0801018c 	.word	0x0801018c
 8006324:	0800d0f4 	.word	0x0800d0f4
 8006328:	08010198 	.word	0x08010198
 800632c:	20000688 	.word	0x20000688
 8006330:	080101a4 	.word	0x080101a4

08006334 <main_menu>:
{
 8006334:	b508      	push	{r3, lr}
	frame.level = 0;
 8006336:	4b07      	ldr	r3, [pc, #28]	; (8006354 <main_menu+0x20>)
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		kbd_event_handler(CONTEXT_MAIN_MENU);
 800633e:	2001      	movs	r0, #1
 8006340:	f7fe f806 	bl	8004350 <kbd_event_handler>
		drawFrame();
 8006344:	f7fe fc1c 	bl	8004b80 <drawFrame>
		if (frame.type == FRAME_EXIT) break;
 8006348:	4b02      	ldr	r3, [pc, #8]	; (8006354 <main_menu+0x20>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2bff      	cmp	r3, #255	; 0xff
 800634e:	d1f6      	bne.n	800633e <main_menu+0xa>
}
 8006350:	bd08      	pop	{r3, pc}
 8006352:	bf00      	nop
 8006354:	20001604 	.word	0x20001604

08006358 <key_down_callback>:
{
 8006358:	b530      	push	{r4, r5, lr}
 800635a:	b083      	sub	sp, #12
 800635c:	4604      	mov	r4, r0
 800635e:	460d      	mov	r5, r1
	reset_screen_saver();
 8006360:	f7fe fbce 	bl	8004b00 <reset_screen_saver>
	if (key == KEY_OFF)
 8006364:	2c0b      	cmp	r4, #11
 8006366:	d005      	beq.n	8006374 <key_down_callback+0x1c>
	switch (context)
 8006368:	b15d      	cbz	r5, 8006382 <key_down_callback+0x2a>
 800636a:	2d01      	cmp	r5, #1
 800636c:	f000 80df 	beq.w	800652e <key_down_callback+0x1d6>
}
 8006370:	b003      	add	sp, #12
 8006372:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB, POWER_OFF_Pin, GPIO_PIN_SET);
 8006374:	2201      	movs	r2, #1
 8006376:	2104      	movs	r1, #4
 8006378:	48ab      	ldr	r0, [pc, #684]	; (8006628 <key_down_callback+0x2d0>)
 800637a:	f7fb f9cd 	bl	8001718 <HAL_GPIO_WritePin>
		key = KEY_NONE;
 800637e:	2400      	movs	r4, #0
 8006380:	e7f2      	b.n	8006368 <key_down_callback+0x10>
			 if (key == KEY_PROGRAM)
 8006382:	2c03      	cmp	r4, #3
 8006384:	d04d      	beq.n	8006422 <key_down_callback+0xca>
			 if (key == KEY_LEFT)
 8006386:	2c05      	cmp	r4, #5
 8006388:	d05e      	beq.n	8006448 <key_down_callback+0xf0>
			 if (key == KEY_RIGHT)
 800638a:	2c0e      	cmp	r4, #14
 800638c:	d06d      	beq.n	800646a <key_down_callback+0x112>
			 if (key == KEY_UP)
 800638e:	2c06      	cmp	r4, #6
 8006390:	d07a      	beq.n	8006488 <key_down_callback+0x130>
			 if (key == KEY_DOWN)
 8006392:	2c0d      	cmp	r4, #13
 8006394:	d1ec      	bne.n	8006370 <key_down_callback+0x18>
				 if (!NO_SAMPLE)		//dodaj wpis do archiwum
 8006396:	4ba5      	ldr	r3, [pc, #660]	; (800662c <key_down_callback+0x2d4>)
 8006398:	edd3 7a01 	vldr	s15, [r3, #4]
 800639c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	d0e4      	beq.n	8006370 <key_down_callback+0x18>
 80063a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80063aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80063ae:	eeb4 7a67 	vcmp.f32	s14, s15
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	d0db      	beq.n	8006370 <key_down_callback+0x18>
					 if (settings.measurementType == MEASUREMENT_SINGLE)
 80063b8:	4b9d      	ldr	r3, [pc, #628]	; (8006630 <key_down_callback+0x2d8>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b92b      	cbnz	r3, 80063ca <key_down_callback+0x72>
						 if (pomiarStatus == POMIAR_DISP && newArchiveEntryAdded == 0 && settings.storageMode == STORAGE_BY_KEYBOARD)
 80063be:	4b9d      	ldr	r3, [pc, #628]	; (8006634 <key_down_callback+0x2dc>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	f000 8088 	beq.w	80064da <key_down_callback+0x182>
					 if (settings.measurementType == MEASUREMENT_CONTINUOUS && newArchiveEntryAdded == 0 && settings.storageMode == STORAGE_BY_KEYBOARD)
 80063ca:	4b99      	ldr	r3, [pc, #612]	; (8006630 <key_down_callback+0x2d8>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d1ce      	bne.n	8006370 <key_down_callback+0x18>
 80063d2:	4b99      	ldr	r3, [pc, #612]	; (8006638 <key_down_callback+0x2e0>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ca      	bne.n	8006370 <key_down_callback+0x18>
 80063da:	4b95      	ldr	r3, [pc, #596]	; (8006630 <key_down_callback+0x2d8>)
 80063dc:	799b      	ldrb	r3, [r3, #6]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d1c6      	bne.n	8006370 <key_down_callback+0x18>
						 newArchiveEntryAdded = 1;
 80063e2:	4b95      	ldr	r3, [pc, #596]	; (8006638 <key_down_callback+0x2e0>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
						 ArchiveEntry.second = gTime.Seconds;
 80063e8:	4b94      	ldr	r3, [pc, #592]	; (800663c <key_down_callback+0x2e4>)
 80063ea:	799a      	ldrb	r2, [r3, #6]
 80063ec:	4894      	ldr	r0, [pc, #592]	; (8006640 <key_down_callback+0x2e8>)
 80063ee:	7142      	strb	r2, [r0, #5]
						 ArchiveEntry.minute = gTime.Minutes;
 80063f0:	795a      	ldrb	r2, [r3, #5]
 80063f2:	7102      	strb	r2, [r0, #4]
						 ArchiveEntry.hour = gTime.Hours;
 80063f4:	791a      	ldrb	r2, [r3, #4]
 80063f6:	70c2      	strb	r2, [r0, #3]
						 ArchiveEntry.day = gDate.Date;
 80063f8:	789a      	ldrb	r2, [r3, #2]
 80063fa:	7002      	strb	r2, [r0, #0]
						 ArchiveEntry.month = gDate.Month;
 80063fc:	785a      	ldrb	r2, [r3, #1]
 80063fe:	7042      	strb	r2, [r0, #1]
						 ArchiveEntry.year = gDate.Year;
 8006400:	78db      	ldrb	r3, [r3, #3]
 8006402:	7083      	strb	r3, [r0, #2]
						 ArchiveEntry.nc = pomiar.nc;
 8006404:	4b89      	ldr	r3, [pc, #548]	; (800662c <key_down_callback+0x2d4>)
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	60c2      	str	r2, [r0, #12]
						 ArchiveEntry.nck = pomiar.nck;
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	6102      	str	r2, [r0, #16]
						 ArchiveEntry.brix = pomiar.brix;
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	6142      	str	r2, [r0, #20]
						 ArchiveEntry.brixk = pomiar.brixk;
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	6182      	str	r2, [r0, #24]
						 ArchiveEntry.temperature = pomiar.temperatura;
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6083      	str	r3, [r0, #8]
						 EEPROM_add_archive_entry(&ArchiveEntry, sizeof(ArchiveEntry));
 800641a:	211c      	movs	r1, #28
 800641c:	f7fd faf6 	bl	8003a0c <EEPROM_add_archive_entry>
 8006420:	e7a6      	b.n	8006370 <key_down_callback+0x18>
				 if (pomiarStatus == POMIAR_DISP || pomiarStatus == POMIAR_STOP)
 8006422:	4b84      	ldr	r3, [pc, #528]	; (8006634 <key_down_callback+0x2dc>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d002      	beq.n	8006432 <key_down_callback+0xda>
 800642c:	4b81      	ldr	r3, [pc, #516]	; (8006634 <key_down_callback+0x2dc>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b9cb      	cbnz	r3, 8006466 <key_down_callback+0x10e>
					 OLED_CLEAR();
 8006432:	f7fd fcf4 	bl	8003e1e <OLED_CLEAR>
					 frame.type = FRAME_MAIN_MENU;
 8006436:	4b83      	ldr	r3, [pc, #524]	; (8006644 <key_down_callback+0x2ec>)
 8006438:	2201      	movs	r2, #1
 800643a:	701a      	strb	r2, [r3, #0]
					 reset_screen_saver();
 800643c:	f7fe fb60 	bl	8004b00 <reset_screen_saver>
					 main_menu();
 8006440:	f7ff ff78 	bl	8006334 <main_menu>
				 key = KEY_NONE;
 8006444:	462c      	mov	r4, r5
 8006446:	e7a0      	b.n	800638a <key_down_callback+0x32>
				 if (settings.contrast > SS_CONTRAST)
 8006448:	4b79      	ldr	r3, [pc, #484]	; (8006630 <key_down_callback+0x2d8>)
 800644a:	795b      	ldrb	r3, [r3, #5]
 800644c:	2b07      	cmp	r3, #7
 800644e:	d801      	bhi.n	8006454 <key_down_callback+0xfc>
				 key = KEY_NONE;
 8006450:	462c      	mov	r4, r5
 8006452:	e79c      	b.n	800638e <key_down_callback+0x36>
					 settings.contrast--;
 8006454:	3b01      	subs	r3, #1
 8006456:	4976      	ldr	r1, [pc, #472]	; (8006630 <key_down_callback+0x2d8>)
 8006458:	f801 3f05 	strb.w	r3, [r1, #5]!
					 EEPROM_write(EEPROM_CONTRAST_ADDR, &settings.contrast);
 800645c:	2005      	movs	r0, #5
 800645e:	f7fd fa6b 	bl	8003938 <EEPROM_write>
				 key = KEY_NONE;
 8006462:	462c      	mov	r4, r5
 8006464:	e793      	b.n	800638e <key_down_callback+0x36>
				 key = KEY_NONE;
 8006466:	462c      	mov	r4, r5
 8006468:	e78f      	b.n	800638a <key_down_callback+0x32>
				 if (settings.contrast < MAX_CONTRAST)
 800646a:	4b71      	ldr	r3, [pc, #452]	; (8006630 <key_down_callback+0x2d8>)
 800646c:	795b      	ldrb	r3, [r3, #5]
 800646e:	2b08      	cmp	r3, #8
 8006470:	d901      	bls.n	8006476 <key_down_callback+0x11e>
				 key = KEY_NONE;
 8006472:	462c      	mov	r4, r5
 8006474:	e78d      	b.n	8006392 <key_down_callback+0x3a>
					 settings.contrast++;
 8006476:	3301      	adds	r3, #1
 8006478:	496d      	ldr	r1, [pc, #436]	; (8006630 <key_down_callback+0x2d8>)
 800647a:	f801 3f05 	strb.w	r3, [r1, #5]!
					 EEPROM_write(EEPROM_CONTRAST_ADDR, &settings.contrast);
 800647e:	2005      	movs	r0, #5
 8006480:	f7fd fa5a 	bl	8003938 <EEPROM_write>
				 key = KEY_NONE;
 8006484:	462c      	mov	r4, r5
 8006486:	e784      	b.n	8006392 <key_down_callback+0x3a>
				 if (settings.measurementType == MEASUREMENT_SINGLE && !NO_SAMPLE)
 8006488:	4b69      	ldr	r3, [pc, #420]	; (8006630 <key_down_callback+0x2d8>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f47f af6f 	bne.w	8006370 <key_down_callback+0x18>
 8006492:	4b66      	ldr	r3, [pc, #408]	; (800662c <key_down_callback+0x2d4>)
 8006494:	edd3 7a01 	vldr	s15, [r3, #4]
 8006498:	eef5 7a40 	vcmp.f32	s15, #0.0
 800649c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a0:	f43f af66 	beq.w	8006370 <key_down_callback+0x18>
 80064a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80064a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80064ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	f43f af5c 	beq.w	8006370 <key_down_callback+0x18>
					 if (pomiarStatus == POMIAR_DISP || pomiarStatus == POMIAR_STOP)
 80064b8:	4b5e      	ldr	r3, [pc, #376]	; (8006634 <key_down_callback+0x2dc>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d004      	beq.n	80064cc <key_down_callback+0x174>
 80064c2:	4b5c      	ldr	r3, [pc, #368]	; (8006634 <key_down_callback+0x2dc>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f47f af52 	bne.w	8006370 <key_down_callback+0x18>
						 newArchiveEntryAdded = 0;
 80064cc:	4b5a      	ldr	r3, [pc, #360]	; (8006638 <key_down_callback+0x2e0>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
						 pomiarStatus = POMIAR_START;
 80064d2:	4b58      	ldr	r3, [pc, #352]	; (8006634 <key_down_callback+0x2dc>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
			 if (key == KEY_DOWN)
 80064d8:	e74a      	b.n	8006370 <key_down_callback+0x18>
						 if (pomiarStatus == POMIAR_DISP && newArchiveEntryAdded == 0 && settings.storageMode == STORAGE_BY_KEYBOARD)
 80064da:	4b57      	ldr	r3, [pc, #348]	; (8006638 <key_down_callback+0x2e0>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f47f af73 	bne.w	80063ca <key_down_callback+0x72>
 80064e4:	4b52      	ldr	r3, [pc, #328]	; (8006630 <key_down_callback+0x2d8>)
 80064e6:	799b      	ldrb	r3, [r3, #6]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	f47f af6e 	bne.w	80063ca <key_down_callback+0x72>
							 newArchiveEntryAdded = 1;
 80064ee:	4b52      	ldr	r3, [pc, #328]	; (8006638 <key_down_callback+0x2e0>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	701a      	strb	r2, [r3, #0]
							 ArchiveEntry.second = gTime.Seconds;
 80064f4:	4b51      	ldr	r3, [pc, #324]	; (800663c <key_down_callback+0x2e4>)
 80064f6:	799a      	ldrb	r2, [r3, #6]
 80064f8:	4851      	ldr	r0, [pc, #324]	; (8006640 <key_down_callback+0x2e8>)
 80064fa:	7142      	strb	r2, [r0, #5]
							 ArchiveEntry.minute = gTime.Minutes;
 80064fc:	795a      	ldrb	r2, [r3, #5]
 80064fe:	7102      	strb	r2, [r0, #4]
							 ArchiveEntry.hour = gTime.Hours;
 8006500:	791a      	ldrb	r2, [r3, #4]
 8006502:	70c2      	strb	r2, [r0, #3]
							 ArchiveEntry.day = gDate.Date;
 8006504:	789a      	ldrb	r2, [r3, #2]
 8006506:	7002      	strb	r2, [r0, #0]
							 ArchiveEntry.month = gDate.Month;
 8006508:	785a      	ldrb	r2, [r3, #1]
 800650a:	7042      	strb	r2, [r0, #1]
							 ArchiveEntry.year = gDate.Year;
 800650c:	78db      	ldrb	r3, [r3, #3]
 800650e:	7083      	strb	r3, [r0, #2]
							 ArchiveEntry.nc = PomiarBuffer.nc;
 8006510:	4b4d      	ldr	r3, [pc, #308]	; (8006648 <key_down_callback+0x2f0>)
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	60c2      	str	r2, [r0, #12]
							 ArchiveEntry.nck = PomiarBuffer.nck;
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	6102      	str	r2, [r0, #16]
							 ArchiveEntry.brix = PomiarBuffer.brix;
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	6142      	str	r2, [r0, #20]
							 ArchiveEntry.brixk = PomiarBuffer.brixk;
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	6182      	str	r2, [r0, #24]
							 ArchiveEntry.temperature = PomiarBuffer.temperatura;
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6083      	str	r3, [r0, #8]
							 EEPROM_add_archive_entry(&ArchiveEntry, sizeof(ArchiveEntry));
 8006526:	211c      	movs	r1, #28
 8006528:	f7fd fa70 	bl	8003a0c <EEPROM_add_archive_entry>
 800652c:	e74d      	b.n	80063ca <key_down_callback+0x72>
			 if(frame.type == FRAME_ARCHIVE_BROWSE)
 800652e:	4b45      	ldr	r3, [pc, #276]	; (8006644 <key_down_callback+0x2ec>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b05      	cmp	r3, #5
 8006534:	d029      	beq.n	800658a <key_down_callback+0x232>
			 if(frame.type == FRAME_SET_VALUE)
 8006536:	4b43      	ldr	r3, [pc, #268]	; (8006644 <key_down_callback+0x2ec>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d065      	beq.n	800660a <key_down_callback+0x2b2>
			 if (key == KEY_UP)
 800653e:	2c06      	cmp	r4, #6
 8006540:	f000 809e 	beq.w	8006680 <key_down_callback+0x328>
			 if (key == KEY_DOWN)
 8006544:	2c0d      	cmp	r4, #13
 8006546:	f000 80c2 	beq.w	80066ce <key_down_callback+0x376>
			 if (key == KEY_PROGRAM)
 800654a:	2c03      	cmp	r4, #3
 800654c:	f47f af10 	bne.w	8006370 <key_down_callback+0x18>
				 OLED_PutStr(1, frame.position[frame.level]*9 + 10, " ", 0, settings.contrast);
 8006550:	4c3c      	ldr	r4, [pc, #240]	; (8006644 <key_down_callback+0x2ec>)
 8006552:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006556:	4423      	add	r3, r4
 8006558:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
 800655c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006560:	310a      	adds	r1, #10
 8006562:	4b33      	ldr	r3, [pc, #204]	; (8006630 <key_down_callback+0x2d8>)
 8006564:	795b      	ldrb	r3, [r3, #5]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	4a38      	ldr	r2, [pc, #224]	; (800664c <key_down_callback+0x2f4>)
 800656c:	b2c9      	uxtb	r1, r1
 800656e:	2001      	movs	r0, #1
 8006570:	f7fd fe10 	bl	8004194 <OLED_PutStr>
				 if (frame.level == 0) frame.level = 1;	//jezeli otwarte menu glowne i zaznaczony element to go wybierz
 8006574:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 80cd 	bne.w	8006718 <key_down_callback+0x3c0>
 800657e:	2201      	movs	r2, #1
 8006580:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				 OLED_CLEAR();
 8006584:	f7fd fc4b 	bl	8003e1e <OLED_CLEAR>
}
 8006588:	e6f2      	b.n	8006370 <key_down_callback+0x18>
				 if (key == KEY_LEFT)
 800658a:	2c05      	cmp	r4, #5
 800658c:	d00c      	beq.n	80065a8 <key_down_callback+0x250>
				 if (key == KEY_RIGHT)
 800658e:	2c0e      	cmp	r4, #14
 8006590:	d021      	beq.n	80065d6 <key_down_callback+0x27e>
				 if (key == KEY_PROGRAM)
 8006592:	2c03      	cmp	r4, #3
 8006594:	d1cf      	bne.n	8006536 <key_down_callback+0x1de>
					 reset_screen_saver();
 8006596:	f7fe fab3 	bl	8004b00 <reset_screen_saver>
					 frame.type = FRAME_MAIN_MENU;
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <key_down_callback+0x2ec>)
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
					 OLED_CLEAR();
 80065a0:	f7fd fc3d 	bl	8003e1e <OLED_CLEAR>
					 key = KEY_NONE;
 80065a4:	2400      	movs	r4, #0
 80065a6:	e7c6      	b.n	8006536 <key_down_callback+0x1de>
					 if (frame.value == 0) frame.value = frame.valueMax;
 80065a8:	4b26      	ldr	r3, [pc, #152]	; (8006644 <key_down_callback+0x2ec>)
 80065aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065ae:	b96b      	cbnz	r3, 80065cc <key_down_callback+0x274>
 80065b0:	4b24      	ldr	r3, [pc, #144]	; (8006644 <key_down_callback+0x2ec>)
 80065b2:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 80065b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					 EEPROM_read_archive_entry(frame.value, &ArchiveEntry, sizeof(ArchiveEntry));
 80065ba:	221c      	movs	r2, #28
 80065bc:	4920      	ldr	r1, [pc, #128]	; (8006640 <key_down_callback+0x2e8>)
 80065be:	4b21      	ldr	r3, [pc, #132]	; (8006644 <key_down_callback+0x2ec>)
 80065c0:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 80065c4:	f7fd fab6 	bl	8003b34 <EEPROM_read_archive_entry>
					 key = KEY_NONE;
 80065c8:	2400      	movs	r4, #0
 80065ca:	e7e2      	b.n	8006592 <key_down_callback+0x23a>
					 else frame.value--;
 80065cc:	3b01      	subs	r3, #1
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <key_down_callback+0x2ec>)
 80065d0:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 80065d4:	e7f1      	b.n	80065ba <key_down_callback+0x262>
					 if (frame.value == frame.valueMax) frame.value = frame.valueMin;
 80065d6:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <key_down_callback+0x2ec>)
 80065d8:	f8b2 3068 	ldrh.w	r3, [r2, #104]	; 0x68
 80065dc:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00c      	beq.n	80065fe <key_down_callback+0x2a6>
					 else frame.value++;
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a17      	ldr	r2, [pc, #92]	; (8006644 <key_down_callback+0x2ec>)
 80065e8:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
					 EEPROM_read_archive_entry(frame.value, &ArchiveEntry, sizeof(ArchiveEntry));
 80065ec:	221c      	movs	r2, #28
 80065ee:	4914      	ldr	r1, [pc, #80]	; (8006640 <key_down_callback+0x2e8>)
 80065f0:	4b14      	ldr	r3, [pc, #80]	; (8006644 <key_down_callback+0x2ec>)
 80065f2:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 80065f6:	f7fd fa9d 	bl	8003b34 <EEPROM_read_archive_entry>
					 key = KEY_NONE;
 80065fa:	2400      	movs	r4, #0
 80065fc:	e79b      	b.n	8006536 <key_down_callback+0x1de>
					 if (frame.value == frame.valueMax) frame.value = frame.valueMin;
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <key_down_callback+0x2ec>)
 8006600:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8006604:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006608:	e7f0      	b.n	80065ec <key_down_callback+0x294>
				 if (key == KEY_LEFT)
 800660a:	2c05      	cmp	r4, #5
 800660c:	d020      	beq.n	8006650 <key_down_callback+0x2f8>
				 if (key == KEY_RIGHT)
 800660e:	2c0e      	cmp	r4, #14
 8006610:	d195      	bne.n	800653e <key_down_callback+0x1e6>
					 if (frame.value == 0xFF) frame.value = frame.valueMin;
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <key_down_callback+0x2ec>)
 8006614:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006618:	2bff      	cmp	r3, #255	; 0xff
 800661a:	d02a      	beq.n	8006672 <key_down_callback+0x31a>
					 else frame.value++;
 800661c:	3301      	adds	r3, #1
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <key_down_callback+0x2ec>)
 8006620:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
					 key = KEY_NONE;
 8006624:	2400      	movs	r4, #0
 8006626:	e78d      	b.n	8006544 <key_down_callback+0x1ec>
 8006628:	40020400 	.word	0x40020400
 800662c:	20000ce0 	.word	0x20000ce0
 8006630:	200006c4 	.word	0x200006c4
 8006634:	20000bf5 	.word	0x20000bf5
 8006638:	20000bf4 	.word	0x20000bf4
 800663c:	20000688 	.word	0x20000688
 8006640:	200006d0 	.word	0x200006d0
 8006644:	20001604 	.word	0x20001604
 8006648:	20000bf8 	.word	0x20000bf8
 800664c:	080101b0 	.word	0x080101b0
					 if (frame.value == 0) frame.value = frame.valueMax;
 8006650:	4bb8      	ldr	r3, [pc, #736]	; (8006934 <key_down_callback+0x5dc>)
 8006652:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006656:	b933      	cbnz	r3, 8006666 <key_down_callback+0x30e>
 8006658:	4bb6      	ldr	r3, [pc, #728]	; (8006934 <key_down_callback+0x5dc>)
 800665a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 800665e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					 key = KEY_NONE;
 8006662:	2400      	movs	r4, #0
 8006664:	e76b      	b.n	800653e <key_down_callback+0x1e6>
					 else frame.value--;
 8006666:	3b01      	subs	r3, #1
 8006668:	4ab2      	ldr	r2, [pc, #712]	; (8006934 <key_down_callback+0x5dc>)
 800666a:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
					 key = KEY_NONE;
 800666e:	2400      	movs	r4, #0
 8006670:	e765      	b.n	800653e <key_down_callback+0x1e6>
					 if (frame.value == 0xFF) frame.value = frame.valueMin;
 8006672:	4bb0      	ldr	r3, [pc, #704]	; (8006934 <key_down_callback+0x5dc>)
 8006674:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8006678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					 key = KEY_NONE;
 800667c:	2400      	movs	r4, #0
 800667e:	e761      	b.n	8006544 <key_down_callback+0x1ec>
				 OLED_PutStr(1, frame.position[frame.level]*9 + 10, " ", 0, settings.contrast);
 8006680:	4cac      	ldr	r4, [pc, #688]	; (8006934 <key_down_callback+0x5dc>)
 8006682:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006686:	4423      	add	r3, r4
 8006688:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
 800668c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006690:	310a      	adds	r1, #10
 8006692:	4ba9      	ldr	r3, [pc, #676]	; (8006938 <key_down_callback+0x5e0>)
 8006694:	795b      	ldrb	r3, [r3, #5]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2300      	movs	r3, #0
 800669a:	4aa8      	ldr	r2, [pc, #672]	; (800693c <key_down_callback+0x5e4>)
 800669c:	b2c9      	uxtb	r1, r1
 800669e:	2001      	movs	r0, #1
 80066a0:	f7fd fd78 	bl	8004194 <OLED_PutStr>
				 frame.position[frame.level]--;
 80066a4:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80066a8:	4414      	add	r4, r2
 80066aa:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
				 if (frame.position[frame.level] == 255) frame.position[frame.level] = frame.totalPositions - 1;
 80066b6:	2bff      	cmp	r3, #255	; 0xff
 80066b8:	d001      	beq.n	80066be <key_down_callback+0x366>
				 key = KEY_NONE;
 80066ba:	2400      	movs	r4, #0
 80066bc:	e745      	b.n	800654a <key_down_callback+0x1f2>
				 if (frame.position[frame.level] == 255) frame.position[frame.level] = frame.totalPositions - 1;
 80066be:	4b9d      	ldr	r3, [pc, #628]	; (8006934 <key_down_callback+0x5dc>)
 80066c0:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
 80066c4:	3901      	subs	r1, #1
 80066c6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
				 key = KEY_NONE;
 80066ca:	2400      	movs	r4, #0
 80066cc:	e73d      	b.n	800654a <key_down_callback+0x1f2>
				 OLED_PutStr(1, frame.position[frame.level]*9 + 10, " ", 0, settings.contrast);
 80066ce:	4c99      	ldr	r4, [pc, #612]	; (8006934 <key_down_callback+0x5dc>)
 80066d0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80066d4:	4423      	add	r3, r4
 80066d6:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
 80066da:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80066de:	310a      	adds	r1, #10
 80066e0:	4b95      	ldr	r3, [pc, #596]	; (8006938 <key_down_callback+0x5e0>)
 80066e2:	795b      	ldrb	r3, [r3, #5]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	4a94      	ldr	r2, [pc, #592]	; (800693c <key_down_callback+0x5e4>)
 80066ea:	b2c9      	uxtb	r1, r1
 80066ec:	2001      	movs	r0, #1
 80066ee:	f7fd fd51 	bl	8004194 <OLED_PutStr>
				 frame.position[frame.level]++;
 80066f2:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
 80066f6:	1862      	adds	r2, r4, r1
 80066f8:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 80066fc:	3301      	adds	r3, #1
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
				 if (frame.position[frame.level] > frame.totalPositions - 1) frame.position[frame.level] = 0;
 8006704:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8006708:	4293      	cmp	r3, r2
 800670a:	f4ff ae31 	bcc.w	8006370 <key_down_callback+0x18>
 800670e:	4421      	add	r1, r4
 8006710:	2300      	movs	r3, #0
 8006712:	f881 3062 	strb.w	r3, [r1, #98]	; 0x62
			 if (key == KEY_PROGRAM)
 8006716:	e62b      	b.n	8006370 <key_down_callback+0x18>
				 else if (frame.level == 1)			//sprawdz czy otwarte podmenu menu glownego
 8006718:	2b01      	cmp	r3, #1
 800671a:	d030      	beq.n	800677e <key_down_callback+0x426>
				 else if (frame.level == 2)			//sprawdz czy otwarte podmenu ustawienia/archiwum
 800671c:	2b02      	cmp	r3, #2
 800671e:	f000 80e9 	beq.w	80068f4 <key_down_callback+0x59c>
				 else if (frame.level == 3)			//sprawdz czy otwarte podmenu ustawiania daty / godziny
 8006722:	2b03      	cmp	r3, #3
 8006724:	f47f af2e 	bne.w	8006584 <key_down_callback+0x22c>
					 if(frame.position[0] == MAIN_MENU_SETTINGS)
 8006728:	4b82      	ldr	r3, [pc, #520]	; (8006934 <key_down_callback+0x5dc>)
 800672a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800672e:	2b03      	cmp	r3, #3
 8006730:	f47f af28 	bne.w	8006584 <key_down_callback+0x22c>
							if (frame.position[1] == SETTINGS_SUBMENU_DATE)	//jezeli w podmenu zmiany daty
 8006734:	4b7f      	ldr	r3, [pc, #508]	; (8006934 <key_down_callback+0x5dc>)
 8006736:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800673a:	2b01      	cmp	r3, #1
 800673c:	f000 817f 	beq.w	8006a3e <key_down_callback+0x6e6>
							if (frame.position[1] == SETTINGS_SUBMENU_TIME)	//jezeli w podmenu zmiany czasu
 8006740:	4b7c      	ldr	r3, [pc, #496]	; (8006934 <key_down_callback+0x5dc>)
 8006742:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8006746:	2b02      	cmp	r3, #2
 8006748:	f47f af1c 	bne.w	8006584 <key_down_callback+0x22c>
								 switch (frame.position[2])		//sprawdz zmiana ktorego parametru zostala wybrana (godziny/minuty/sekundy)
 800674c:	4b79      	ldr	r3, [pc, #484]	; (8006934 <key_down_callback+0x5dc>)
 800674e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8006752:	2b01      	cmp	r3, #1
 8006754:	f000 81a2 	beq.w	8006a9c <key_down_callback+0x744>
 8006758:	2b02      	cmp	r3, #2
 800675a:	f000 81ac 	beq.w	8006ab6 <key_down_callback+0x75e>
 800675e:	2b00      	cmp	r3, #0
 8006760:	f47f af10 	bne.w	8006584 <key_down_callback+0x22c>
										 gTime.Hours = frame.value;
 8006764:	4b73      	ldr	r3, [pc, #460]	; (8006934 <key_down_callback+0x5dc>)
 8006766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800676a:	4975      	ldr	r1, [pc, #468]	; (8006940 <key_down_callback+0x5e8>)
 800676c:	f801 3f04 	strb.w	r3, [r1, #4]!
										 HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8006770:	2200      	movs	r2, #0
 8006772:	4874      	ldr	r0, [pc, #464]	; (8006944 <key_down_callback+0x5ec>)
 8006774:	f7fb fd86 	bl	8002284 <HAL_RTC_SetTime>
										 MM_up_one_level();
 8006778:	f7fe f9f2 	bl	8004b60 <MM_up_one_level>
										 break;
 800677c:	e702      	b.n	8006584 <key_down_callback+0x22c>
					 switch (MAIN_MENU_POSITION)		//sprawdz ktore
 800677e:	4b6d      	ldr	r3, [pc, #436]	; (8006934 <key_down_callback+0x5dc>)
 8006780:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006784:	2b05      	cmp	r3, #5
 8006786:	f63f aefd 	bhi.w	8006584 <key_down_callback+0x22c>
 800678a:	e8df f003 	tbb	[pc, r3]
 800678e:	2403      	.short	0x2403
 8006790:	b0856343 	.word	0xb0856343
							 switch (frame.position[1])							//obsluz wybor
 8006794:	4b67      	ldr	r3, [pc, #412]	; (8006934 <key_down_callback+0x5dc>)
 8006796:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800679a:	2b01      	cmp	r3, #1
 800679c:	d00c      	beq.n	80067b8 <key_down_callback+0x460>
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d016      	beq.n	80067d0 <key_down_callback+0x478>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f47f aeee 	bne.w	8006584 <key_down_callback+0x22c>
									 settings.measurementType = MEASUREMENT_SINGLE;
 80067a8:	4963      	ldr	r1, [pc, #396]	; (8006938 <key_down_callback+0x5e0>)
 80067aa:	2000      	movs	r0, #0
 80067ac:	7008      	strb	r0, [r1, #0]
									 EEPROM_write(EEPROM_MEASUREMENT_TYPE_ADDR, &settings.measurementType);
 80067ae:	f7fd f8c3 	bl	8003938 <EEPROM_write>
									 exit_main_menu();
 80067b2:	f7fe f9b9 	bl	8004b28 <exit_main_menu>
									 break;
 80067b6:	e6e5      	b.n	8006584 <key_down_callback+0x22c>
									 settings.measurementType = MEASUREMENT_CONTINUOUS;
 80067b8:	495f      	ldr	r1, [pc, #380]	; (8006938 <key_down_callback+0x5e0>)
 80067ba:	2301      	movs	r3, #1
 80067bc:	700b      	strb	r3, [r1, #0]
									 EEPROM_write(EEPROM_MEASUREMENT_TYPE_ADDR, &settings.measurementType);
 80067be:	2000      	movs	r0, #0
 80067c0:	f7fd f8ba 	bl	8003938 <EEPROM_write>
									 pomiarStatus = POMIAR_STOP;
 80067c4:	4b60      	ldr	r3, [pc, #384]	; (8006948 <key_down_callback+0x5f0>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
									 exit_main_menu();
 80067ca:	f7fe f9ad 	bl	8004b28 <exit_main_menu>
									 break;
 80067ce:	e6d9      	b.n	8006584 <key_down_callback+0x22c>
									 MM_up_one_level();
 80067d0:	f7fe f9c6 	bl	8004b60 <MM_up_one_level>
									 break;
 80067d4:	e6d6      	b.n	8006584 <key_down_callback+0x22c>
								 switch (frame.position[1])							//obsluz wybor
 80067d6:	4b57      	ldr	r3, [pc, #348]	; (8006934 <key_down_callback+0x5dc>)
 80067d8:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d00d      	beq.n	80067fc <key_down_callback+0x4a4>
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d014      	beq.n	800680e <key_down_callback+0x4b6>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f47f aecd 	bne.w	8006584 <key_down_callback+0x22c>
										 settings.measurementUnit = UNIT_BRIX;
 80067ea:	4953      	ldr	r1, [pc, #332]	; (8006938 <key_down_callback+0x5e0>)
 80067ec:	f801 3f01 	strb.w	r3, [r1, #1]!
										 EEPROM_write(EEPROM_MEASUREMENT_UNIT_ADDR, &settings.measurementUnit);
 80067f0:	2001      	movs	r0, #1
 80067f2:	f7fd f8a1 	bl	8003938 <EEPROM_write>
										 exit_main_menu();
 80067f6:	f7fe f997 	bl	8004b28 <exit_main_menu>
										 break;
 80067fa:	e6c3      	b.n	8006584 <key_down_callback+0x22c>
										 settings.measurementUnit = UNIT_RI;
 80067fc:	2001      	movs	r0, #1
 80067fe:	494e      	ldr	r1, [pc, #312]	; (8006938 <key_down_callback+0x5e0>)
 8006800:	f801 0f01 	strb.w	r0, [r1, #1]!
										 EEPROM_write(EEPROM_MEASUREMENT_UNIT_ADDR, &settings.measurementUnit);
 8006804:	f7fd f898 	bl	8003938 <EEPROM_write>
										 exit_main_menu();
 8006808:	f7fe f98e 	bl	8004b28 <exit_main_menu>
										 break;
 800680c:	e6ba      	b.n	8006584 <key_down_callback+0x22c>
										 MM_up_one_level();
 800680e:	f7fe f9a7 	bl	8004b60 <MM_up_one_level>
										 break;
 8006812:	e6b7      	b.n	8006584 <key_down_callback+0x22c>
								 switch (frame.position[1])							//obsluz wybor
 8006814:	4b47      	ldr	r3, [pc, #284]	; (8006934 <key_down_callback+0x5dc>)
 8006816:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800681a:	2b01      	cmp	r3, #1
 800681c:	d00d      	beq.n	800683a <key_down_callback+0x4e2>
 800681e:	2b02      	cmp	r3, #2
 8006820:	d015      	beq.n	800684e <key_down_callback+0x4f6>
 8006822:	2b00      	cmp	r3, #0
 8006824:	f47f aeae 	bne.w	8006584 <key_down_callback+0x22c>
										 settings.thermalCompensation = OFF;
 8006828:	4943      	ldr	r1, [pc, #268]	; (8006938 <key_down_callback+0x5e0>)
 800682a:	f801 3f02 	strb.w	r3, [r1, #2]!
										 EEPROM_write(EEPROM_THERMAL_COMP_ADDR, &settings.thermalCompensation);
 800682e:	2002      	movs	r0, #2
 8006830:	f7fd f882 	bl	8003938 <EEPROM_write>
										 exit_main_menu();
 8006834:	f7fe f978 	bl	8004b28 <exit_main_menu>
										 break;
 8006838:	e6a4      	b.n	8006584 <key_down_callback+0x22c>
										 settings.thermalCompensation = ON;
 800683a:	493f      	ldr	r1, [pc, #252]	; (8006938 <key_down_callback+0x5e0>)
 800683c:	2301      	movs	r3, #1
 800683e:	f801 3f02 	strb.w	r3, [r1, #2]!
										 EEPROM_write(EEPROM_THERMAL_COMP_ADDR, &settings.thermalCompensation);
 8006842:	2002      	movs	r0, #2
 8006844:	f7fd f878 	bl	8003938 <EEPROM_write>
										 exit_main_menu();
 8006848:	f7fe f96e 	bl	8004b28 <exit_main_menu>
										 break;
 800684c:	e69a      	b.n	8006584 <key_down_callback+0x22c>
										 MM_up_one_level();
 800684e:	f7fe f987 	bl	8004b60 <MM_up_one_level>
										 break;
 8006852:	e697      	b.n	8006584 <key_down_callback+0x22c>
									 switch (frame.position[1])							//obsluz wybor
 8006854:	4b37      	ldr	r3, [pc, #220]	; (8006934 <key_down_callback+0x5dc>)
 8006856:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800685a:	2b04      	cmp	r3, #4
 800685c:	f63f ae92 	bhi.w	8006584 <key_down_callback+0x22c>
 8006860:	e8df f003 	tbb	[pc, r3]
 8006864:	120d0803 	.word	0x120d0803
 8006868:	17          	.byte	0x17
 8006869:	00          	.byte	0x00
											 frame.level = 2;
 800686a:	4b32      	ldr	r3, [pc, #200]	; (8006934 <key_down_callback+0x5dc>)
 800686c:	2202      	movs	r2, #2
 800686e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 8006872:	e687      	b.n	8006584 <key_down_callback+0x22c>
											 frame.level = 2;
 8006874:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <key_down_callback+0x5dc>)
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 800687c:	e682      	b.n	8006584 <key_down_callback+0x22c>
											 frame.level = 2;
 800687e:	4b2d      	ldr	r3, [pc, #180]	; (8006934 <key_down_callback+0x5dc>)
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 8006886:	e67d      	b.n	8006584 <key_down_callback+0x22c>
											 frame.level = 2;
 8006888:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <key_down_callback+0x5dc>)
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 8006890:	e678      	b.n	8006584 <key_down_callback+0x22c>
											 MM_up_one_level();
 8006892:	f7fe f965 	bl	8004b60 <MM_up_one_level>
											 break;
 8006896:	e675      	b.n	8006584 <key_down_callback+0x22c>
									switch (frame.position[1])							//obsluz wybor
 8006898:	4b26      	ldr	r3, [pc, #152]	; (8006934 <key_down_callback+0x5dc>)
 800689a:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800689e:	2b03      	cmp	r3, #3
 80068a0:	f63f ae70 	bhi.w	8006584 <key_down_callback+0x22c>
 80068a4:	e8df f003 	tbb	[pc, r3]
 80068a8:	201c1702 	.word	0x201c1702
											 EEPROM_read_archive_entry(0,&ArchiveEntry,sizeof(ArchiveEntry));
 80068ac:	221c      	movs	r2, #28
 80068ae:	4927      	ldr	r1, [pc, #156]	; (800694c <key_down_callback+0x5f4>)
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7fd f93f 	bl	8003b34 <EEPROM_read_archive_entry>
											 frame.valueMin = 0;
 80068b6:	4b1f      	ldr	r3, [pc, #124]	; (8006934 <key_down_callback+0x5dc>)
 80068b8:	2100      	movs	r1, #0
 80068ba:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
											 frame.valueMax = settings.archiveEntriesTotal - 1;
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <key_down_callback+0x5e0>)
 80068c0:	7a12      	ldrb	r2, [r2, #8]
 80068c2:	3a01      	subs	r2, #1
 80068c4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
											 frame.value = 0;
 80068c8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
											 frame.type = FRAME_ARCHIVE_BROWSE;
 80068cc:	2205      	movs	r2, #5
 80068ce:	701a      	strb	r2, [r3, #0]
											 OLED_CLEAR();
 80068d0:	f7fd faa5 	bl	8003e1e <OLED_CLEAR>
											 break;
 80068d4:	e656      	b.n	8006584 <key_down_callback+0x22c>
											 frame.level = 2;
 80068d6:	4b17      	ldr	r3, [pc, #92]	; (8006934 <key_down_callback+0x5dc>)
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 80068de:	e651      	b.n	8006584 <key_down_callback+0x22c>
											 frame.type = FRAME_ARCHIVE_BEING_ERASED;
 80068e0:	4b14      	ldr	r3, [pc, #80]	; (8006934 <key_down_callback+0x5dc>)
 80068e2:	2204      	movs	r2, #4
 80068e4:	701a      	strb	r2, [r3, #0]
											 break;
 80068e6:	e64d      	b.n	8006584 <key_down_callback+0x22c>
											 MM_up_one_level();
 80068e8:	f7fe f93a 	bl	8004b60 <MM_up_one_level>
											 break;
 80068ec:	e64a      	b.n	8006584 <key_down_callback+0x22c>
									exit_main_menu();
 80068ee:	f7fe f91b 	bl	8004b28 <exit_main_menu>
									break;
 80068f2:	e647      	b.n	8006584 <key_down_callback+0x22c>
					 if (frame.position[0] == MAIN_MENU_SETTINGS)	//jesli otwarte ustawienia
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <key_down_callback+0x5dc>)
 80068f6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d028      	beq.n	8006950 <key_down_callback+0x5f8>
					 if (frame.position[0] == MAIN_MENU_ARCHIVE)	//jesli otwarte archiwum
 80068fe:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <key_down_callback+0x5dc>)
 8006900:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006904:	2b04      	cmp	r3, #4
 8006906:	f47f ae3d 	bne.w	8006584 <key_down_callback+0x22c>
						 switch (frame.position[2])		//sprawdz ktory tryb zapisu do archiwum wybrany
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <key_down_callback+0x5dc>)
 800690c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8006910:	2b01      	cmp	r3, #1
 8006912:	f000 8087 	beq.w	8006a24 <key_down_callback+0x6cc>
 8006916:	2b02      	cmp	r3, #2
 8006918:	f000 808e 	beq.w	8006a38 <key_down_callback+0x6e0>
 800691c:	2b00      	cmp	r3, #0
 800691e:	f47f ae31 	bne.w	8006584 <key_down_callback+0x22c>
								 settings.storageMode = ARCHIVE_STORAGE_MODE_PROHIBITED;
 8006922:	4905      	ldr	r1, [pc, #20]	; (8006938 <key_down_callback+0x5e0>)
 8006924:	f801 3f06 	strb.w	r3, [r1, #6]!
								 EEPROM_write(EEPROM_ARCHIVE_STORAGE_MODE_ADDR, &settings.storageMode);
 8006928:	2006      	movs	r0, #6
 800692a:	f7fd f805 	bl	8003938 <EEPROM_write>
								 exit_main_menu();
 800692e:	f7fe f8fb 	bl	8004b28 <exit_main_menu>
								 break;
 8006932:	e627      	b.n	8006584 <key_down_callback+0x22c>
 8006934:	20001604 	.word	0x20001604
 8006938:	200006c4 	.word	0x200006c4
 800693c:	080101b0 	.word	0x080101b0
 8006940:	20000688 	.word	0x20000688
 8006944:	200010e8 	.word	0x200010e8
 8006948:	20000bf5 	.word	0x20000bf5
 800694c:	200006d0 	.word	0x200006d0
						 switch (frame.position[1])		//sprawdz ktore podmenu ustawien otwarte
 8006950:	4b5f      	ldr	r3, [pc, #380]	; (8006ad0 <key_down_callback+0x778>)
 8006952:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8006956:	2b03      	cmp	r3, #3
 8006958:	d8d1      	bhi.n	80068fe <key_down_callback+0x5a6>
 800695a:	e8df f003 	tbb	[pc, r3]
 800695e:	0e02      	.short	0x0e02
 8006960:	4429      	.short	0x4429
								 settings.singleMeasurementTime = frame.value;
 8006962:	4b5b      	ldr	r3, [pc, #364]	; (8006ad0 <key_down_callback+0x778>)
 8006964:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006968:	495a      	ldr	r1, [pc, #360]	; (8006ad4 <key_down_callback+0x77c>)
 800696a:	f801 3f03 	strb.w	r3, [r1, #3]!
								 EEPROM_write(EEPROM_SINGLE_MEASUREMENT_TIME_ADDR, &settings.singleMeasurementTime);
 800696e:	2003      	movs	r0, #3
 8006970:	f7fc ffe2 	bl	8003938 <EEPROM_write>
								 exit_main_menu();
 8006974:	f7fe f8d8 	bl	8004b28 <exit_main_menu>
								 break;
 8006978:	e7c1      	b.n	80068fe <key_down_callback+0x5a6>
								 switch (frame.position[2])
 800697a:	4b55      	ldr	r3, [pc, #340]	; (8006ad0 <key_down_callback+0x778>)
 800697c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8006980:	2b03      	cmp	r3, #3
 8006982:	d8bc      	bhi.n	80068fe <key_down_callback+0x5a6>
 8006984:	e8df f003 	tbb	[pc, r3]
 8006988:	110c0702 	.word	0x110c0702
										 frame.level = 3;
 800698c:	4b50      	ldr	r3, [pc, #320]	; (8006ad0 <key_down_callback+0x778>)
 800698e:	2203      	movs	r2, #3
 8006990:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 8006994:	e7b3      	b.n	80068fe <key_down_callback+0x5a6>
										 frame.level = 3;
 8006996:	4b4e      	ldr	r3, [pc, #312]	; (8006ad0 <key_down_callback+0x778>)
 8006998:	2203      	movs	r2, #3
 800699a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 800699e:	e7ae      	b.n	80068fe <key_down_callback+0x5a6>
										 frame.level = 3;
 80069a0:	4b4b      	ldr	r3, [pc, #300]	; (8006ad0 <key_down_callback+0x778>)
 80069a2:	2203      	movs	r2, #3
 80069a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80069a8:	e7a9      	b.n	80068fe <key_down_callback+0x5a6>
										 MM_up_one_level();
 80069aa:	f7fe f8d9 	bl	8004b60 <MM_up_one_level>
										 break;
 80069ae:	e7a6      	b.n	80068fe <key_down_callback+0x5a6>
								 switch (frame.position[2])
 80069b0:	4b47      	ldr	r3, [pc, #284]	; (8006ad0 <key_down_callback+0x778>)
 80069b2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d8a1      	bhi.n	80068fe <key_down_callback+0x5a6>
 80069ba:	e8df f003 	tbb	[pc, r3]
 80069be:	0702      	.short	0x0702
 80069c0:	110c      	.short	0x110c
										 frame.level = 3;
 80069c2:	4b43      	ldr	r3, [pc, #268]	; (8006ad0 <key_down_callback+0x778>)
 80069c4:	2203      	movs	r2, #3
 80069c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80069ca:	e798      	b.n	80068fe <key_down_callback+0x5a6>
										 frame.level = 3;
 80069cc:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <key_down_callback+0x778>)
 80069ce:	2203      	movs	r2, #3
 80069d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80069d4:	e793      	b.n	80068fe <key_down_callback+0x5a6>
										 frame.level = 3;
 80069d6:	4b3e      	ldr	r3, [pc, #248]	; (8006ad0 <key_down_callback+0x778>)
 80069d8:	2203      	movs	r2, #3
 80069da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80069de:	e78e      	b.n	80068fe <key_down_callback+0x5a6>
										 MM_up_one_level();
 80069e0:	f7fe f8be 	bl	8004b60 <MM_up_one_level>
										 break;
 80069e4:	e78b      	b.n	80068fe <key_down_callback+0x5a6>
								 switch (frame.position[2])
 80069e6:	4b3a      	ldr	r3, [pc, #232]	; (8006ad0 <key_down_callback+0x778>)
 80069e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d00c      	beq.n	8006a0a <key_down_callback+0x6b2>
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d014      	beq.n	8006a1e <key_down_callback+0x6c6>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d182      	bne.n	80068fe <key_down_callback+0x5a6>
										 settings.language = POLISH;
 80069f8:	4936      	ldr	r1, [pc, #216]	; (8006ad4 <key_down_callback+0x77c>)
 80069fa:	f801 3f04 	strb.w	r3, [r1, #4]!
										 EEPROM_write(EEPROM_LANGUAGE_ADDR, &settings.language);
 80069fe:	2004      	movs	r0, #4
 8006a00:	f7fc ff9a 	bl	8003938 <EEPROM_write>
										 exit_main_menu();
 8006a04:	f7fe f890 	bl	8004b28 <exit_main_menu>
										 break;
 8006a08:	e779      	b.n	80068fe <key_down_callback+0x5a6>
										 settings.language = ENGLISH;
 8006a0a:	4932      	ldr	r1, [pc, #200]	; (8006ad4 <key_down_callback+0x77c>)
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f801 3f04 	strb.w	r3, [r1, #4]!
										 EEPROM_write(EEPROM_LANGUAGE_ADDR, &settings.language);
 8006a12:	2004      	movs	r0, #4
 8006a14:	f7fc ff90 	bl	8003938 <EEPROM_write>
										 exit_main_menu();
 8006a18:	f7fe f886 	bl	8004b28 <exit_main_menu>
										 break;
 8006a1c:	e76f      	b.n	80068fe <key_down_callback+0x5a6>
										 MM_up_one_level();
 8006a1e:	f7fe f89f 	bl	8004b60 <MM_up_one_level>
										 break;
 8006a22:	e76c      	b.n	80068fe <key_down_callback+0x5a6>
								 settings.storageMode = ARCHIVE_STORAGE_MODE_BY_KEYBOARD;
 8006a24:	492b      	ldr	r1, [pc, #172]	; (8006ad4 <key_down_callback+0x77c>)
 8006a26:	2301      	movs	r3, #1
 8006a28:	f801 3f06 	strb.w	r3, [r1, #6]!
								 EEPROM_write(EEPROM_ARCHIVE_STORAGE_MODE_ADDR, &settings.storageMode);
 8006a2c:	2006      	movs	r0, #6
 8006a2e:	f7fc ff83 	bl	8003938 <EEPROM_write>
								 exit_main_menu();
 8006a32:	f7fe f879 	bl	8004b28 <exit_main_menu>
								 break;
 8006a36:	e5a5      	b.n	8006584 <key_down_callback+0x22c>
								 MM_up_one_level();
 8006a38:	f7fe f892 	bl	8004b60 <MM_up_one_level>
								 break;
 8006a3c:	e5a2      	b.n	8006584 <key_down_callback+0x22c>
								 switch (frame.position[2])		//sprawdz zmiana ktorego parametru zostala wybrana (dnia/miesiaca/roku)
 8006a3e:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <key_down_callback+0x778>)
 8006a40:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d01d      	beq.n	8006a84 <key_down_callback+0x72c>
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d00f      	beq.n	8006a6c <key_down_callback+0x714>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f47f ae77 	bne.w	8006740 <key_down_callback+0x3e8>
										 gDate.Year = frame.value - 2000;
 8006a52:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <key_down_callback+0x778>)
 8006a54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a58:	3330      	adds	r3, #48	; 0x30
 8006a5a:	491f      	ldr	r1, [pc, #124]	; (8006ad8 <key_down_callback+0x780>)
 8006a5c:	70cb      	strb	r3, [r1, #3]
										 HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	481e      	ldr	r0, [pc, #120]	; (8006adc <key_down_callback+0x784>)
 8006a62:	f7fb fc8e 	bl	8002382 <HAL_RTC_SetDate>
										 MM_up_one_level();
 8006a66:	f7fe f87b 	bl	8004b60 <MM_up_one_level>
										 break;
 8006a6a:	e669      	b.n	8006740 <key_down_callback+0x3e8>
										 gDate.Date = frame.value;
 8006a6c:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <key_down_callback+0x778>)
 8006a6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a72:	4919      	ldr	r1, [pc, #100]	; (8006ad8 <key_down_callback+0x780>)
 8006a74:	708b      	strb	r3, [r1, #2]
										 HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8006a76:	2200      	movs	r2, #0
 8006a78:	4818      	ldr	r0, [pc, #96]	; (8006adc <key_down_callback+0x784>)
 8006a7a:	f7fb fc82 	bl	8002382 <HAL_RTC_SetDate>
										 MM_up_one_level();
 8006a7e:	f7fe f86f 	bl	8004b60 <MM_up_one_level>
										 break;
 8006a82:	e65d      	b.n	8006740 <key_down_callback+0x3e8>
										 gDate.Month = frame.value;
 8006a84:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <key_down_callback+0x778>)
 8006a86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a8a:	4913      	ldr	r1, [pc, #76]	; (8006ad8 <key_down_callback+0x780>)
 8006a8c:	704b      	strb	r3, [r1, #1]
										 HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4812      	ldr	r0, [pc, #72]	; (8006adc <key_down_callback+0x784>)
 8006a92:	f7fb fc76 	bl	8002382 <HAL_RTC_SetDate>
										 MM_up_one_level();
 8006a96:	f7fe f863 	bl	8004b60 <MM_up_one_level>
										 break;
 8006a9a:	e651      	b.n	8006740 <key_down_callback+0x3e8>
										 gTime.Minutes = frame.value;
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <key_down_callback+0x778>)
 8006a9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006aa2:	490d      	ldr	r1, [pc, #52]	; (8006ad8 <key_down_callback+0x780>)
 8006aa4:	714b      	strb	r3, [r1, #5]
										 HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	3104      	adds	r1, #4
 8006aaa:	480c      	ldr	r0, [pc, #48]	; (8006adc <key_down_callback+0x784>)
 8006aac:	f7fb fbea 	bl	8002284 <HAL_RTC_SetTime>
										 MM_up_one_level();
 8006ab0:	f7fe f856 	bl	8004b60 <MM_up_one_level>
										 break;
 8006ab4:	e566      	b.n	8006584 <key_down_callback+0x22c>
										 gTime.Seconds = frame.value;
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <key_down_callback+0x778>)
 8006ab8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006abc:	4906      	ldr	r1, [pc, #24]	; (8006ad8 <key_down_callback+0x780>)
 8006abe:	718b      	strb	r3, [r1, #6]
										 HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	3104      	adds	r1, #4
 8006ac4:	4805      	ldr	r0, [pc, #20]	; (8006adc <key_down_callback+0x784>)
 8006ac6:	f7fb fbdd 	bl	8002284 <HAL_RTC_SetTime>
										 MM_up_one_level();
 8006aca:	f7fe f849 	bl	8004b60 <MM_up_one_level>
										 break;
 8006ace:	e559      	b.n	8006584 <key_down_callback+0x22c>
 8006ad0:	20001604 	.word	0x20001604
 8006ad4:	200006c4 	.word	0x200006c4
 8006ad8:	20000688 	.word	0x20000688
 8006adc:	200010e8 	.word	0x200010e8

08006ae0 <USER_UART2_IDLE_Callback>:
{
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	b088      	sub	sp, #32
	HAL_UART_DMAStop(&huart2);
 8006ae4:	4d49      	ldr	r5, [pc, #292]	; (8006c0c <USER_UART2_IDLE_Callback+0x12c>)
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f7fc fd2e 	bl	8003548 <HAL_UART_DMAStop>
	huart6.RxXferCount = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	4a48      	ldr	r2, [pc, #288]	; (8006c10 <USER_UART2_IDLE_Callback+0x130>)
 8006af0:	85d3      	strh	r3, [r2, #46]	; 0x2e
	uint8_t buffer[27] = {0};
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	9302      	str	r3, [sp, #8]
 8006af6:	9303      	str	r3, [sp, #12]
 8006af8:	9304      	str	r3, [sp, #16]
 8006afa:	9305      	str	r3, [sp, #20]
 8006afc:	9306      	str	r3, [sp, #24]
 8006afe:	f8cd 301b 	str.w	r3, [sp, #27]
	uint16_t data_length  = CCD_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8006b02:	4b44      	ldr	r3, [pc, #272]	; (8006c14 <USER_UART2_IDLE_Callback+0x134>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	f5c2 727a 	rsb	r2, r2, #1000	; 0x3e8
 8006b0e:	b294      	uxth	r4, r2
	if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE))
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	f012 0f08 	tst.w	r2, #8
 8006b18:	d10c      	bne.n	8006b34 <USER_UART2_IDLE_Callback+0x54>
	if (USB_rxBuffer[0] == '!')		//jesli przyjdzie zapytanie o pomiar wyslij ostatni pomiar
 8006b1a:	4b3f      	ldr	r3, [pc, #252]	; (8006c18 <USER_UART2_IDLE_Callback+0x138>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b21      	cmp	r3, #33	; 0x21
 8006b22:	d015      	beq.n	8006b50 <USER_UART2_IDLE_Callback+0x70>
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) USB_rxBuffer, USB_RX_BUFFER_SIZE);
 8006b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b28:	493b      	ldr	r1, [pc, #236]	; (8006c18 <USER_UART2_IDLE_Callback+0x138>)
 8006b2a:	4838      	ldr	r0, [pc, #224]	; (8006c0c <USER_UART2_IDLE_Callback+0x12c>)
 8006b2c:	f7fc fcb8 	bl	80034a0 <HAL_UART_Receive_DMA>
}
 8006b30:	b008      	add	sp, #32
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
		  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8006b34:	2100      	movs	r1, #0
 8006b36:	9100      	str	r1, [sp, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	9200      	str	r2, [sp, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	9b00      	ldr	r3, [sp, #0]
		  memset((uint8_t*)USB_rxBuffer, 0, data_length);  //passing argument 1 of 'memset' discards 'volatile' qualifier from pointer target type
 8006b42:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006b46:	4622      	mov	r2, r4
 8006b48:	4833      	ldr	r0, [pc, #204]	; (8006c18 <USER_UART2_IDLE_Callback+0x138>)
 8006b4a:	f001 fa71 	bl	8008030 <memset>
 8006b4e:	e7e4      	b.n	8006b1a <USER_UART2_IDLE_Callback+0x3a>
		if (USB_rxBuffer[1] == 'P')
 8006b50:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <USER_UART2_IDLE_Callback+0x138>)
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b50      	cmp	r3, #80	; 0x50
 8006b58:	d026      	beq.n	8006ba8 <USER_UART2_IDLE_Callback+0xc8>
		else if (USB_rxBuffer[1] == 'C')
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	; (8006c18 <USER_UART2_IDLE_Callback+0x138>)
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b43      	cmp	r3, #67	; 0x43
 8006b62:	d1df      	bne.n	8006b24 <USER_UART2_IDLE_Callback+0x44>
			if (USB_rxBuffer[20] == CalcChecksum(USB_rxBuffer, 20))
 8006b64:	482c      	ldr	r0, [pc, #176]	; (8006c18 <USER_UART2_IDLE_Callback+0x138>)
 8006b66:	7d05      	ldrb	r5, [r0, #20]
 8006b68:	b2ed      	uxtb	r5, r5
 8006b6a:	2114      	movs	r1, #20
 8006b6c:	f7fd fdd4 	bl	8004718 <CalcChecksum>
 8006b70:	4285      	cmp	r5, r0
 8006b72:	d1d7      	bne.n	8006b24 <USER_UART2_IDLE_Callback+0x44>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8006b74:	2200      	movs	r2, #0
 8006b76:	2102      	movs	r1, #2
 8006b78:	4828      	ldr	r0, [pc, #160]	; (8006c1c <USER_UART2_IDLE_Callback+0x13c>)
 8006b7a:	f7fa fdcd 	bl	8001718 <HAL_GPIO_WritePin>
				memcpy(&settings.serialNumber, (uint8_t*)&USB_rxBuffer[2], 2);
 8006b7e:	4e26      	ldr	r6, [pc, #152]	; (8006c18 <USER_UART2_IDLE_Callback+0x138>)
 8006b80:	8872      	ldrh	r2, [r6, #2]
 8006b82:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <USER_UART2_IDLE_Callback+0x140>)
 8006b84:	815a      	strh	r2, [r3, #10]
				serialNumberModified = 1;
 8006b86:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <USER_UART2_IDLE_Callback+0x144>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	765a      	strb	r2, [r3, #25]
				memcpy(&korekcja, (uint8_t*)&USB_rxBuffer[4], sizeof(korekcja));
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	4d26      	ldr	r5, [pc, #152]	; (8006c28 <USER_UART2_IDLE_Callback+0x148>)
 8006b90:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8006b94:	6859      	ldr	r1, [r3, #4]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
				HAL_UART_Transmit_DMA(&huart6, (uint8_t*)USB_rxBuffer, data_length);	// przeslij do ccd
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	481b      	ldr	r0, [pc, #108]	; (8006c10 <USER_UART2_IDLE_Callback+0x130>)
 8006ba2:	f7fc fc37 	bl	8003414 <HAL_UART_Transmit_DMA>
 8006ba6:	e7bd      	b.n	8006b24 <USER_UART2_IDLE_Callback+0x44>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2102      	movs	r1, #2
 8006bac:	481b      	ldr	r0, [pc, #108]	; (8006c1c <USER_UART2_IDLE_Callback+0x13c>)
 8006bae:	f7fa fdb3 	bl	8001718 <HAL_GPIO_WritePin>
			if (packetIsNew)
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <USER_UART2_IDLE_Callback+0x14c>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0b4      	beq.n	8006b24 <USER_UART2_IDLE_Callback+0x44>
				buffer[0] = '!';
 8006bba:	2321      	movs	r3, #33	; 0x21
 8006bbc:	f88d 3004 	strb.w	r3, [sp, #4]
				buffer[1] = 'P';
 8006bc0:	2350      	movs	r3, #80	; 0x50
 8006bc2:	f88d 3005 	strb.w	r3, [sp, #5]
				memcpy(&buffer[2], (uint8_t*)&pomiar.brix, 4);
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <USER_UART2_IDLE_Callback+0x150>)
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	f8cd 2006 	str.w	r2, [sp, #6]
				memcpy(&buffer[6], (uint8_t*)&pomiar.brixk, 4);
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	f8cd 200a 	str.w	r2, [sp, #10]
				memcpy(&buffer[10], (uint8_t*)&pomiar.I_LED, 4);
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	f8cd 200e 	str.w	r2, [sp, #14]
				memcpy(&buffer[14], (uint8_t*)&pomiar.nc, 4);
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	f8cd 2012 	str.w	r2, [sp, #18]
				memcpy(&buffer[18], (uint8_t*)&pomiar.nck, 4);
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	f8cd 2016 	str.w	r2, [sp, #22]
				memcpy(&buffer[22], (uint8_t*)&pomiar.temperatura, 4);
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8cd 301a 	str.w	r3, [sp, #26]
				buffer[26] = CalcChecksum(buffer, 26);
 8006bec:	211a      	movs	r1, #26
 8006bee:	a801      	add	r0, sp, #4
 8006bf0:	f7fd fd92 	bl	8004718 <CalcChecksum>
 8006bf4:	f88d 001e 	strb.w	r0, [sp, #30]
				HAL_UART_Transmit_DMA(&huart2, buffer, sizeof(buffer));
 8006bf8:	221b      	movs	r2, #27
 8006bfa:	a901      	add	r1, sp, #4
 8006bfc:	4803      	ldr	r0, [pc, #12]	; (8006c0c <USER_UART2_IDLE_Callback+0x12c>)
 8006bfe:	f7fc fc09 	bl	8003414 <HAL_UART_Transmit_DMA>
				packetIsNew = 0;										//zapobiega wysylaniu tego samego pomiaru ponownie
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <USER_UART2_IDLE_Callback+0x14c>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e78c      	b.n	8006b24 <USER_UART2_IDLE_Callback+0x44>
 8006c0a:	bf00      	nop
 8006c0c:	20001720 	.word	0x20001720
 8006c10:	20001684 	.word	0x20001684
 8006c14:	200006ec 	.word	0x200006ec
 8006c18:	2000080c 	.word	0x2000080c
 8006c1c:	40020400 	.word	0x40020400
 8006c20:	200006c4 	.word	0x200006c4
 8006c24:	20000688 	.word	0x20000688
 8006c28:	20000c10 	.word	0x20000c10
 8006c2c:	20000488 	.word	0x20000488
 8006c30:	20000ce0 	.word	0x20000ce0

08006c34 <USER_UART6_IDLE_Callback>:
{
 8006c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c36:	b083      	sub	sp, #12
	HAL_UART_DMAStop(&huart6);
 8006c38:	4c99      	ldr	r4, [pc, #612]	; (8006ea0 <USER_UART6_IDLE_Callback+0x26c>)
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7fc fc84 	bl	8003548 <HAL_UART_DMAStop>
	huart6.RxXferCount = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	85e3      	strh	r3, [r4, #46]	; 0x2e
	uint16_t data_length  = CCD_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);
 8006c44:	4b97      	ldr	r3, [pc, #604]	; (8006ea4 <USER_UART6_IDLE_Callback+0x270>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	f5c2 727a 	rsb	r2, r2, #1000	; 0x3e8
 8006c50:	b292      	uxth	r2, r2
	if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_ORE))
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	6819      	ldr	r1, [r3, #0]
 8006c56:	f011 0f08 	tst.w	r1, #8
 8006c5a:	d118      	bne.n	8006c8e <USER_UART6_IDLE_Callback+0x5a>
	if (CCD_rxBuffer[0] == '!' && CCD_rxBuffer[1] == 'M' && data_length == 45)	//only consider packets that start with proper header and are correct length
 8006c5c:	4b92      	ldr	r3, [pc, #584]	; (8006ea8 <USER_UART6_IDLE_Callback+0x274>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b21      	cmp	r3, #33	; 0x21
 8006c64:	d104      	bne.n	8006c70 <USER_UART6_IDLE_Callback+0x3c>
 8006c66:	4b90      	ldr	r3, [pc, #576]	; (8006ea8 <USER_UART6_IDLE_Callback+0x274>)
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b4d      	cmp	r3, #77	; 0x4d
 8006c6e:	d01d      	beq.n	8006cac <USER_UART6_IDLE_Callback+0x78>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)CCD_rxBuffer, data_length);	//passing argument 1 of 'memset' discards 'volatile' qualifier from pointer target type
 8006c70:	498d      	ldr	r1, [pc, #564]	; (8006ea8 <USER_UART6_IDLE_Callback+0x274>)
 8006c72:	488e      	ldr	r0, [pc, #568]	; (8006eac <USER_UART6_IDLE_Callback+0x278>)
 8006c74:	f7fc fbce 	bl	8003414 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart6, (uint8_t*) CCD_rxBuffer, CCD_RX_BUFFER_SIZE);
 8006c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c7c:	498a      	ldr	r1, [pc, #552]	; (8006ea8 <USER_UART6_IDLE_Callback+0x274>)
 8006c7e:	4888      	ldr	r0, [pc, #544]	; (8006ea0 <USER_UART6_IDLE_Callback+0x26c>)
 8006c80:	f7fc fc0e 	bl	80034a0 <HAL_UART_Receive_DMA>
	TicksSinceLastRecordArrived = 0;
 8006c84:	4b8a      	ldr	r3, [pc, #552]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	61da      	str	r2, [r3, #28]
}
 8006c8a:	b003      	add	sp, #12
 8006c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  __HAL_UART_CLEAR_OREFLAG(&huart6);
 8006c8e:	2100      	movs	r1, #0
 8006c90:	9101      	str	r1, [sp, #4]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	9201      	str	r2, [sp, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	9b01      	ldr	r3, [sp, #4]
		  memset((uint8_t*)CCD_rxBuffer, 0, data_length);   //passing argument 1 of 'memset' discards 'volatile' qualifier from pointer target type
 8006c9c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	4881      	ldr	r0, [pc, #516]	; (8006ea8 <USER_UART6_IDLE_Callback+0x274>)
 8006ca4:	f001 f9c4 	bl	8008030 <memset>
		  data_length = CCD_RX_BUFFER_SIZE;
 8006ca8:	4622      	mov	r2, r4
 8006caa:	e7d7      	b.n	8006c5c <USER_UART6_IDLE_Callback+0x28>
	if (CCD_rxBuffer[0] == '!' && CCD_rxBuffer[1] == 'M' && data_length == 45)	//only consider packets that start with proper header and are correct length
 8006cac:	2a2d      	cmp	r2, #45	; 0x2d
 8006cae:	d1df      	bne.n	8006c70 <USER_UART6_IDLE_Callback+0x3c>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	487f      	ldr	r0, [pc, #508]	; (8006eb4 <USER_UART6_IDLE_Callback+0x280>)
 8006cb6:	f7fa fd2f 	bl	8001718 <HAL_GPIO_WritePin>
		if (CCD_rxBuffer[44] == CalcChecksum(CCD_rxBuffer, 44))	//if CRC correct
 8006cba:	487b      	ldr	r0, [pc, #492]	; (8006ea8 <USER_UART6_IDLE_Callback+0x274>)
 8006cbc:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8006cc0:	b2e4      	uxtb	r4, r4
 8006cc2:	212c      	movs	r1, #44	; 0x2c
 8006cc4:	f7fd fd28 	bl	8004718 <CalcChecksum>
 8006cc8:	4284      	cmp	r4, r0
 8006cca:	d1d5      	bne.n	8006c78 <USER_UART6_IDLE_Callback+0x44>
			if (TicksSinceLastRecordArrived < 15)	//if sample present
 8006ccc:	4b78      	ldr	r3, [pc, #480]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	2b0e      	cmp	r3, #14
 8006cd2:	d8d1      	bhi.n	8006c78 <USER_UART6_IDLE_Callback+0x44>
				memcpy((uint8_t*)&pomiarArray[packetCounter].brix, (uint8_t*)&CCD_rxBuffer[2], 24);		//copy received packet to array for later averaging
 8006cd4:	4876      	ldr	r0, [pc, #472]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006cd6:	f890 1020 	ldrb.w	r1, [r0, #32]
 8006cda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006cde:	4e76      	ldr	r6, [pc, #472]	; (8006eb8 <USER_UART6_IDLE_Callback+0x284>)
 8006ce0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8006ce4:	4b75      	ldr	r3, [pc, #468]	; (8006ebc <USER_UART6_IDLE_Callback+0x288>)
 8006ce6:	681d      	ldr	r5, [r3, #0]
 8006ce8:	685c      	ldr	r4, [r3, #4]
 8006cea:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8006cee:	68df      	ldr	r7, [r3, #12]
 8006cf0:	f846 5031 	str.w	r5, [r6, r1, lsl #3]
 8006cf4:	6054      	str	r4, [r2, #4]
 8006cf6:	f8c2 c008 	str.w	ip, [r2, #8]
 8006cfa:	60d7      	str	r7, [r2, #12]
 8006cfc:	691d      	ldr	r5, [r3, #16]
 8006cfe:	695c      	ldr	r4, [r3, #20]
 8006d00:	6115      	str	r5, [r2, #16]
 8006d02:	6154      	str	r4, [r2, #20]
				packetCounter++;
 8006d04:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f880 3020 	strb.w	r3, [r0, #32]
				if (packetCounter == 2 && !pomiarArrayFull)												//assume that 2 packets in a row means that everything is going fine
 8006d10:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d01e      	beq.n	8006d58 <USER_UART6_IDLE_Callback+0x124>
				if (pomiarArrayFull && newPacketCount >= 8)	// jesli zebrane pomiary z ostatnich 3 sekund, co 8 pakiet (1 sekunde) licz srednia
 8006d1a:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006d1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d20:	b12b      	cbz	r3, 8006d2e <USER_UART6_IDLE_Callback+0xfa>
 8006d22:	4b63      	ldr	r3, [pc, #396]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006d24:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b07      	cmp	r3, #7
 8006d2c:	d842      	bhi.n	8006db4 <USER_UART6_IDLE_Callback+0x180>
				if (packetCounter >= POMIAR_ARRAY_SIZE)
 8006d2e:	4b60      	ldr	r3, [pc, #384]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b31      	cmp	r3, #49	; 0x31
 8006d38:	d906      	bls.n	8006d48 <USER_UART6_IDLE_Callback+0x114>
					packetCounter = 0;
 8006d3a:	4b5d      	ldr	r3, [pc, #372]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2020 	strb.w	r2, [r3, #32]
					pomiarArrayFull = 1;
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				newPacketCount++;	//counts new packets received
 8006d48:	4a59      	ldr	r2, [pc, #356]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006d4a:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8006d4e:	3301      	adds	r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 8006d56:	e78f      	b.n	8006c78 <USER_UART6_IDLE_Callback+0x44>
				if (packetCounter == 2 && !pomiarArrayFull)												//assume that 2 packets in a row means that everything is going fine
 8006d58:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1dc      	bne.n	8006d1a <USER_UART6_IDLE_Callback+0xe6>
					pomiar.temperatura = pomiarArray[packetCounter].temperatura;						//it is done so in order to trigger stripes animation without changing old code.
 8006d60:	f890 2020 	ldrb.w	r2, [r0, #32]
 8006d64:	2318      	movs	r3, #24
 8006d66:	fb02 6203 	mla	r2, r2, r3, r6
 8006d6a:	6954      	ldr	r4, [r2, #20]
 8006d6c:	4a54      	ldr	r2, [pc, #336]	; (8006ec0 <USER_UART6_IDLE_Callback+0x28c>)
 8006d6e:	6014      	str	r4, [r2, #0]
					pomiar.nc = pomiarArray[packetCounter].nc;											//stripes animation takes 4+ seconds so by the time it is finished
 8006d70:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006d74:	fb04 6403 	mla	r4, r4, r3, r6
 8006d78:	68e4      	ldr	r4, [r4, #12]
 8006d7a:	6054      	str	r4, [r2, #4]
					pomiar.nck = pomiarArray[packetCounter].nck;										//the proper averaged value will have been displayed anyway
 8006d7c:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006d80:	fb04 6403 	mla	r4, r4, r3, r6
 8006d84:	6924      	ldr	r4, [r4, #16]
 8006d86:	6094      	str	r4, [r2, #8]
					pomiar.brix = pomiarArray[packetCounter].brix;
 8006d88:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006d8c:	fb04 6403 	mla	r4, r4, r3, r6
 8006d90:	6824      	ldr	r4, [r4, #0]
 8006d92:	60d4      	str	r4, [r2, #12]
					pomiar.brixk = pomiarArray[packetCounter].brixk;
 8006d94:	f890 0020 	ldrb.w	r0, [r0, #32]
 8006d98:	fb00 6303 	mla	r3, r0, r3, r6
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	6113      	str	r3, [r2, #16]
					reset_screen_saver();
 8006da0:	f7fd feae 	bl	8004b00 <reset_screen_saver>
					if (settings.measurementType == MEASUREMENT_SINGLE) pomiarStatus = POMIAR_START;	//po wykryciu probki od razu uruchom pomiar pojedynczy
 8006da4:	4b47      	ldr	r3, [pc, #284]	; (8006ec4 <USER_UART6_IDLE_Callback+0x290>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1b6      	bne.n	8006d1a <USER_UART6_IDLE_Callback+0xe6>
 8006dac:	4b46      	ldr	r3, [pc, #280]	; (8006ec8 <USER_UART6_IDLE_Callback+0x294>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	e7b2      	b.n	8006d1a <USER_UART6_IDLE_Callback+0xe6>
					newPacketCount = 0;
 8006db4:	2200      	movs	r2, #0
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <USER_UART6_IDLE_Callback+0x27c>)
 8006db8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					memset(&pomiar, 0, sizeof(pomiar));
 8006dbc:	4b40      	ldr	r3, [pc, #256]	; (8006ec0 <USER_UART6_IDLE_Callback+0x28c>)
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	611a      	str	r2, [r3, #16]
 8006dc8:	615a      	str	r2, [r3, #20]
 8006dca:	619a      	str	r2, [r3, #24]
					for(uint8_t i = 0; i < POMIAR_ARRAY_SIZE; i++)						//final averaged values calculation
 8006dcc:	2a31      	cmp	r2, #49	; 0x31
 8006dce:	d83c      	bhi.n	8006e4a <USER_UART6_IDLE_Callback+0x216>
						pomiar.nc += pomiarArray[i].nc;
 8006dd0:	4839      	ldr	r0, [pc, #228]	; (8006eb8 <USER_UART6_IDLE_Callback+0x284>)
 8006dd2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006dd6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006dda:	ed91 7a03 	vldr	s14, [r1, #12]
 8006dde:	4b38      	ldr	r3, [pc, #224]	; (8006ec0 <USER_UART6_IDLE_Callback+0x28c>)
 8006de0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006de8:	edc3 7a01 	vstr	s15, [r3, #4]
						pomiar.nck += pomiarArray[i].nck;
 8006dec:	ed91 7a04 	vldr	s14, [r1, #16]
 8006df0:	edd3 7a02 	vldr	s15, [r3, #8]
 8006df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006df8:	edc3 7a02 	vstr	s15, [r3, #8]
						pomiar.brix += pomiarArray[i].brix;
 8006dfc:	ed91 7a00 	vldr	s14, [r1]
 8006e00:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e08:	edc3 7a03 	vstr	s15, [r3, #12]
						pomiar.brixk += pomiarArray[i].brixk;
 8006e0c:	ed91 7a01 	vldr	s14, [r1, #4]
 8006e10:	edd3 7a04 	vldr	s15, [r3, #16]
 8006e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e18:	edc3 7a04 	vstr	s15, [r3, #16]
						pomiar.temperatura += pomiarArray[i].temperatura;
 8006e1c:	ed91 7a05 	vldr	s14, [r1, #20]
 8006e20:	edd3 7a00 	vldr	s15, [r3]
 8006e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e28:	edc3 7a00 	vstr	s15, [r3]
						pomiar.I_LED += pomiarArray[i].I_LED;
 8006e2c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006e30:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8006e34:	ed90 7a02 	vldr	s14, [r0, #8]
 8006e38:	edd3 7a05 	vldr	s15, [r3, #20]
 8006e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e40:	edc3 7a05 	vstr	s15, [r3, #20]
					for(uint8_t i = 0; i < POMIAR_ARRAY_SIZE; i++)						//final averaged values calculation
 8006e44:	3201      	adds	r2, #1
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	e7c0      	b.n	8006dcc <USER_UART6_IDLE_Callback+0x198>
					pomiar.I_LED /= POMIAR_ARRAY_SIZE;
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <USER_UART6_IDLE_Callback+0x28c>)
 8006e4c:	edd3 6a05 	vldr	s13, [r3, #20]
 8006e50:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006ecc <USER_UART6_IDLE_Callback+0x298>
 8006e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e58:	ed83 7a05 	vstr	s14, [r3, #20]
					pomiar.temperatura /= POMIAR_ARRAY_SIZE;
 8006e5c:	edd3 6a00 	vldr	s13, [r3]
 8006e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e64:	ed83 7a00 	vstr	s14, [r3]
					pomiar.nc /= POMIAR_ARRAY_SIZE;
 8006e68:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e70:	ed83 7a01 	vstr	s14, [r3, #4]
					pomiar.nck /= POMIAR_ARRAY_SIZE;
 8006e74:	edd3 6a02 	vldr	s13, [r3, #8]
 8006e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7c:	ed83 7a02 	vstr	s14, [r3, #8]
					pomiar.brix /= POMIAR_ARRAY_SIZE;
 8006e80:	edd3 6a03 	vldr	s13, [r3, #12]
 8006e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e88:	ed83 7a03 	vstr	s14, [r3, #12]
					pomiar.brixk /= POMIAR_ARRAY_SIZE;
 8006e8c:	edd3 6a04 	vldr	s13, [r3, #16]
 8006e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e94:	ed83 7a04 	vstr	s14, [r3, #16]
					packetIsNew = 1;
 8006e98:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <USER_UART6_IDLE_Callback+0x29c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e746      	b.n	8006d2e <USER_UART6_IDLE_Callback+0xfa>
 8006ea0:	20001684 	.word	0x20001684
 8006ea4:	20000750 	.word	0x20000750
 8006ea8:	20000cfc 	.word	0x20000cfc
 8006eac:	20001720 	.word	0x20001720
 8006eb0:	20000688 	.word	0x20000688
 8006eb4:	40020400 	.word	0x40020400
 8006eb8:	20001150 	.word	0x20001150
 8006ebc:	20000cfe 	.word	0x20000cfe
 8006ec0:	20000ce0 	.word	0x20000ce0
 8006ec4:	200006c4 	.word	0x200006c4
 8006ec8:	20000bf5 	.word	0x20000bf5
 8006ecc:	42480000 	.word	0x42480000
 8006ed0:	20000488 	.word	0x20000488

08006ed4 <SystemClock_Config>:
{
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	b0aa      	sub	sp, #168	; 0xa8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ed8:	2234      	movs	r2, #52	; 0x34
 8006eda:	2100      	movs	r1, #0
 8006edc:	a81d      	add	r0, sp, #116	; 0x74
 8006ede:	f001 f8a7 	bl	8008030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ee2:	2400      	movs	r4, #0
 8006ee4:	9418      	str	r4, [sp, #96]	; 0x60
 8006ee6:	9419      	str	r4, [sp, #100]	; 0x64
 8006ee8:	941a      	str	r4, [sp, #104]	; 0x68
 8006eea:	941b      	str	r4, [sp, #108]	; 0x6c
 8006eec:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006eee:	2258      	movs	r2, #88	; 0x58
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	a802      	add	r0, sp, #8
 8006ef4:	f001 f89c 	bl	8008030 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ef8:	9400      	str	r4, [sp, #0]
 8006efa:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <SystemClock_Config+0xac>)
 8006efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006efe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f0e:	9401      	str	r4, [sp, #4]
 8006f10:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <SystemClock_Config+0xb0>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006f24:	2305      	movs	r3, #5
 8006f26:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f2c:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006f2e:	2601      	movs	r6, #1
 8006f30:	961f      	str	r6, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f32:	2502      	movs	r5, #2
 8006f34:	9523      	str	r5, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006f36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f3a:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 6;
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 8006f40:	2360      	movs	r3, #96	; 0x60
 8006f42:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006f44:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006f46:	9528      	str	r5, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006f48:	9529      	str	r5, [sp, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f4a:	a81d      	add	r0, sp, #116	; 0x74
 8006f4c:	f7fa fefc 	bl	8001d48 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f50:	230f      	movs	r3, #15
 8006f52:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f54:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8006f56:	2380      	movs	r3, #128	; 0x80
 8006f58:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f5e:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f60:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006f62:	4631      	mov	r1, r6
 8006f64:	a818      	add	r0, sp, #96	; 0x60
 8006f66:	f7fa fc2d 	bl	80017c4 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f72:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f74:	a802      	add	r0, sp, #8
 8006f76:	f7fa fcfb 	bl	8001970 <HAL_RCCEx_PeriphCLKConfig>
}
 8006f7a:	b02a      	add	sp, #168	; 0xa8
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	bf00      	nop
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40007000 	.word	0x40007000

08006f88 <main>:
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
  HAL_Init();
 8006f8c:	f7f9 ffd4 	bl	8000f38 <HAL_Init>
  SystemClock_Config();
 8006f90:	f7ff ffa0 	bl	8006ed4 <SystemClock_Config>
  MX_GPIO_Init();
 8006f94:	f7fd fa02 	bl	800439c <MX_GPIO_Init>
  MX_DMA_Init();
 8006f98:	f7fd fac0 	bl	800451c <MX_DMA_Init>
  MX_SPI1_Init();
 8006f9c:	f7fd fafa 	bl	8004594 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006fa0:	f7fd fb16 	bl	80045d0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8006fa4:	f7fd fb32 	bl	800460c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8006fa8:	f7fd fb46 	bl	8004638 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8006fac:	f7fd fb5a 	bl	8004664 <MX_TIM6_Init>
  MX_RTC_Init();
 8006fb0:	f7fd fb76 	bl	80046a0 <MX_RTC_Init>
  HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 0);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2102      	movs	r1, #2
 8006fb8:	48b1      	ldr	r0, [pc, #708]	; (8007280 <main+0x2f8>)
 8006fba:	f7fa fbad 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OFF_GPIO_Port, POWER_OFF_Pin, 0);
 8006fbe:	4cb1      	ldr	r4, [pc, #708]	; (8007284 <main+0x2fc>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2104      	movs	r1, #4
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7fa fba7 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8006fca:	2201      	movs	r2, #1
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7fa fba2 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(K1_OUT_GPIO_Port, K1_OUT_Pin, 1);	// wlacza obsluge klawiszy
 8006fd4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006fd8:	2201      	movs	r2, #1
 8006fda:	2104      	movs	r1, #4
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7fa fb9b 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(K2_OUT_GPIO_Port, K2_OUT_Pin, 0);	// wlacza obsluge klawiszy
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2108      	movs	r1, #8
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7fa fb96 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);						//aktywuje przerwanie od timera. wylaczone bo wykorzystane przerwanie z alarmu RTC
 8006fec:	48a6      	ldr	r0, [pc, #664]	; (8007288 <main+0x300>)
 8006fee:	f7fb fefa 	bl	8002de6 <HAL_TIM_Base_Start_IT>
  OLED_CLEAR();
 8006ff2:	f7fc ff14 	bl	8003e1e <OLED_CLEAR>
  OLED_Init();
 8006ff6:	f7fc fe71 	bl	8003cdc <OLED_Init>
  OLED_CLEAR();
 8006ffa:	f7fc ff10 	bl	8003e1e <OLED_CLEAR>
  settings.contrast = 0x01;		//zmodyfikowałem wyswietlanie bitmap zeby zeby mozna bylo regulowac kontrast przy wyswietlaniu kreski nad O w BRAK PROBKI
 8006ffe:	4fa3      	ldr	r7, [pc, #652]	; (800728c <main+0x304>)
 8007000:	2401      	movs	r4, #1
 8007002:	717c      	strb	r4, [r7, #5]
  OLED_bitmap(0, 5, gr_00);
 8007004:	4aa2      	ldr	r2, [pc, #648]	; (8007290 <main+0x308>)
 8007006:	2105      	movs	r1, #5
 8007008:	2000      	movs	r0, #0
 800700a:	f7fd f91f 	bl	800424c <OLED_bitmap>
  settings.contrast = DEFAULT_CONTRAST;
 800700e:	2509      	movs	r5, #9
 8007010:	717d      	strb	r5, [r7, #5]
  HAL_Delay(1000);
 8007012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007016:	f7f9 ffbb 	bl	8000f90 <HAL_Delay>
  EEPROM_readSettings(EEPROM_SETTINGS_ADDRESS, &settings, sizeof(settings));
 800701a:	220c      	movs	r2, #12
 800701c:	4639      	mov	r1, r7
 800701e:	2000      	movs	r0, #0
 8007020:	f7fc fc64 	bl	80038ec <EEPROM_readSettings>
  register_on_key_press_callback(key_down_callback);
 8007024:	489b      	ldr	r0, [pc, #620]	; (8007294 <main+0x30c>)
 8007026:	f7fd f945 	bl	80042b4 <register_on_key_press_callback>
  verify_settings();
 800702a:	f7fd fcb3 	bl	8004994 <verify_settings>
  fetch_date_time();
 800702e:	f7fd fc8f 	bl	8004950 <fetch_date_time>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8007032:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 80072f4 <main+0x36c>
 8007036:	f8d8 2000 	ldr.w	r2, [r8]
 800703a:	68d3      	ldr	r3, [r2, #12]
 800703c:	f043 0310 	orr.w	r3, r3, #16
 8007040:	60d3      	str	r3, [r2, #12]
  ssStateChanged = 1;
 8007042:	4b95      	ldr	r3, [pc, #596]	; (8007298 <main+0x310>)
 8007044:	701c      	strb	r4, [r3, #0]
  OLED_CLEAR();
 8007046:	f7fc feea 	bl	8003e1e <OLED_CLEAR>
  OLED_PutStr(3, 14, "MS REF090L", 1, 0x09);
 800704a:	9500      	str	r5, [sp, #0]
 800704c:	4623      	mov	r3, r4
 800704e:	4a93      	ldr	r2, [pc, #588]	; (800729c <main+0x314>)
 8007050:	210e      	movs	r1, #14
 8007052:	2003      	movs	r0, #3
 8007054:	f7fd f89e 	bl	8004194 <OLED_PutStr>
  sprintf(frame.buffer,"SN: %d", settings.serialNumber);
 8007058:	4e91      	ldr	r6, [pc, #580]	; (80072a0 <main+0x318>)
 800705a:	897a      	ldrh	r2, [r7, #10]
 800705c:	4991      	ldr	r1, [pc, #580]	; (80072a4 <main+0x31c>)
 800705e:	4630      	mov	r0, r6
 8007060:	f001 fc58 	bl	8008914 <siprintf>
  OLED_PutStr(3, 32, frame.buffer, 0, 0x09);
 8007064:	9500      	str	r5, [sp, #0]
 8007066:	2300      	movs	r3, #0
 8007068:	4632      	mov	r2, r6
 800706a:	2120      	movs	r1, #32
 800706c:	2003      	movs	r0, #3
 800706e:	f7fd f891 	bl	8004194 <OLED_PutStr>
  sprintf(frame.buffer,"SW: %s", SOFTWARE_VERSION);
 8007072:	4a8d      	ldr	r2, [pc, #564]	; (80072a8 <main+0x320>)
 8007074:	498d      	ldr	r1, [pc, #564]	; (80072ac <main+0x324>)
 8007076:	4630      	mov	r0, r6
 8007078:	f001 fc4c 	bl	8008914 <siprintf>
  OLED_PutStr(3, 42, frame.buffer, 0, 0x09);
 800707c:	9500      	str	r5, [sp, #0]
 800707e:	2300      	movs	r3, #0
 8007080:	4632      	mov	r2, r6
 8007082:	212a      	movs	r1, #42	; 0x2a
 8007084:	2003      	movs	r0, #3
 8007086:	f7fd f885 	bl	8004194 <OLED_PutStr>
  HAL_Delay(1000);
 800708a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800708e:	f7f9 ff7f 	bl	8000f90 <HAL_Delay>
  OLED_CLEAR();
 8007092:	f7fc fec4 	bl	8003e1e <OLED_CLEAR>
  OLED_PutStr(5, 24, "AUTO TEST", 1, 0x09);
 8007096:	9500      	str	r5, [sp, #0]
 8007098:	4623      	mov	r3, r4
 800709a:	4a85      	ldr	r2, [pc, #532]	; (80072b0 <main+0x328>)
 800709c:	2118      	movs	r1, #24
 800709e:	2005      	movs	r0, #5
 80070a0:	f7fd f878 	bl	8004194 <OLED_PutStr>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80070a4:	4b83      	ldr	r3, [pc, #524]	; (80072b4 <main+0x32c>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	6813      	ldr	r3, [r2, #0]
 80070aa:	f023 0308 	bic.w	r3, r3, #8
 80070ae:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80070b0:	4b81      	ldr	r3, [pc, #516]	; (80072b8 <main+0x330>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	6813      	ldr	r3, [r2, #0]
 80070b6:	f023 0308 	bic.w	r3, r3, #8
 80070ba:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA(&huart6, (uint8_t*)CCD_rxBuffer, CCD_RX_BUFFER_SIZE);
 80070bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070c0:	497e      	ldr	r1, [pc, #504]	; (80072bc <main+0x334>)
 80070c2:	4640      	mov	r0, r8
 80070c4:	f7fc f9ec 	bl	80034a0 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)USB_rxBuffer, USB_RX_BUFFER_SIZE);
 80070c8:	4e7d      	ldr	r6, [pc, #500]	; (80072c0 <main+0x338>)
 80070ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070ce:	497d      	ldr	r1, [pc, #500]	; (80072c4 <main+0x33c>)
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7fc f9e5 	bl	80034a0 <HAL_UART_Receive_DMA>
  TicksSinceLastRecordArrived = 0;
 80070d6:	2500      	movs	r5, #0
 80070d8:	4b7b      	ldr	r3, [pc, #492]	; (80072c8 <main+0x340>)
 80070da:	61dd      	str	r5, [r3, #28]
  OLED_CLEAR();
 80070dc:	f7fc fe9f 	bl	8003e1e <OLED_CLEAR>
  char kreski[10] = {0};	//kreski po wykryciu próbki
 80070e0:	9503      	str	r5, [sp, #12]
 80070e2:	9504      	str	r5, [sp, #16]
 80070e4:	f8ad 5014 	strh.w	r5, [sp, #20]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80070e8:	6832      	ldr	r2, [r6, #0]
 80070ea:	68d3      	ldr	r3, [r2, #12]
 80070ec:	f043 0310 	orr.w	r3, r3, #16
 80070f0:	60d3      	str	r3, [r2, #12]
  initDone = 1;
 80070f2:	4b76      	ldr	r3, [pc, #472]	; (80072cc <main+0x344>)
 80070f4:	701c      	strb	r4, [r3, #0]
 80070f6:	e029      	b.n	800714c <main+0x1c4>
		  EEPROM_write_multiple(EEPROM_SERIAL_NUMBER_ADDR, (uint8_t*)&settings.serialNumber, sizeof(settings.serialNumber));
 80070f8:	2202      	movs	r2, #2
 80070fa:	4975      	ldr	r1, [pc, #468]	; (80072d0 <main+0x348>)
 80070fc:	200a      	movs	r0, #10
 80070fe:	f7fc fc4d 	bl	800399c <EEPROM_write_multiple>
		  serialNumberModified = 0;
 8007102:	4b71      	ldr	r3, [pc, #452]	; (80072c8 <main+0x340>)
 8007104:	2200      	movs	r2, #0
 8007106:	765a      	strb	r2, [r3, #25]
 8007108:	e024      	b.n	8007154 <main+0x1cc>
		 if (settings.measurementType == MEASUREMENT_SINGLE) pomiarStatus = POMIAR_START;
 800710a:	4b60      	ldr	r3, [pc, #384]	; (800728c <main+0x304>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b913      	cbnz	r3, 8007116 <main+0x18e>
 8007110:	4b70      	ldr	r3, [pc, #448]	; (80072d4 <main+0x34c>)
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
		 sampleDetected = 0;						//wykyrwanie probki w celu odpalenia naswietlania i odczekania az pomiar bedzie gotowy
 8007116:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <main+0x340>)
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		 if (frame.type != FRAME_BP)
 800711e:	4b6e      	ldr	r3, [pc, #440]	; (80072d8 <main+0x350>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b173      	cbz	r3, 8007142 <main+0x1ba>
			 reset_screen_saver();
 8007124:	f7fd fcec 	bl	8004b00 <reset_screen_saver>
			 memset(&kreski, 0, sizeof(kreski));
 8007128:	2400      	movs	r4, #0
 800712a:	9403      	str	r4, [sp, #12]
 800712c:	9404      	str	r4, [sp, #16]
 800712e:	f8ad 4014 	strh.w	r4, [sp, #20]
			 OLED_CLEAR();
 8007132:	f7fc fe74 	bl	8003e1e <OLED_CLEAR>
			 xShift = 0;
 8007136:	4b69      	ldr	r3, [pc, #420]	; (80072dc <main+0x354>)
 8007138:	701c      	strb	r4, [r3, #0]
			 yShift = 0;
 800713a:	4b69      	ldr	r3, [pc, #420]	; (80072e0 <main+0x358>)
 800713c:	701c      	strb	r4, [r3, #0]
			 frame.type = FRAME_BP;
 800713e:	4b66      	ldr	r3, [pc, #408]	; (80072d8 <main+0x350>)
 8007140:	701c      	strb	r4, [r3, #0]
	 kbd_event_handler(CONTEXT_MAIN_SCREEN);
 8007142:	2000      	movs	r0, #0
 8007144:	f7fd f904 	bl	8004350 <kbd_event_handler>
	 drawFrame();
 8007148:	f7fd fd1a 	bl	8004b80 <drawFrame>
	  if (serialNumberModified)
 800714c:	4b5e      	ldr	r3, [pc, #376]	; (80072c8 <main+0x340>)
 800714e:	7e5b      	ldrb	r3, [r3, #25]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1d1      	bne.n	80070f8 <main+0x170>
	 if (NO_SAMPLE)
 8007154:	4b63      	ldr	r3, [pc, #396]	; (80072e4 <main+0x35c>)
 8007156:	edd3 7a01 	vldr	s15, [r3, #4]
 800715a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007162:	d0d2      	beq.n	800710a <main+0x182>
 8007164:	ed93 7a01 	vldr	s14, [r3, #4]
 8007168:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800716c:	eeb4 7a67 	vcmp.f32	s14, s15
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	d0c9      	beq.n	800710a <main+0x182>
		 if (settings.measurementType == MEASUREMENT_CONTINUOUS)		//wyswietlaj kreski tylko dla pomiaru ciaglego
 8007176:	4b45      	ldr	r3, [pc, #276]	; (800728c <main+0x304>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b01      	cmp	r3, #1
 800717c:	f000 80bc 	beq.w	80072f8 <main+0x370>
			 sampleDetected = 3;
 8007180:	4b51      	ldr	r3, [pc, #324]	; (80072c8 <main+0x340>)
 8007182:	2203      	movs	r2, #3
 8007184:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		 if (sampleDetected == 3)								//wyswietlenie pomiaru po kreskach
 8007188:	4b4f      	ldr	r3, [pc, #316]	; (80072c8 <main+0x340>)
 800718a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b03      	cmp	r3, #3
 8007192:	d1d6      	bne.n	8007142 <main+0x1ba>
			 if (settings.measurementType == MEASUREMENT_CONTINUOUS)
 8007194:	4b3d      	ldr	r3, [pc, #244]	; (800728c <main+0x304>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b01      	cmp	r3, #1
 800719a:	f000 80ec 	beq.w	8007376 <main+0x3ee>
			 if (settings.measurementType == MEASUREMENT_SINGLE)
 800719e:	4b3b      	ldr	r3, [pc, #236]	; (800728c <main+0x304>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1cd      	bne.n	8007142 <main+0x1ba>
				 if (NO_SAMPLE)
 80071a6:	4b4f      	ldr	r3, [pc, #316]	; (80072e4 <main+0x35c>)
 80071a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80071ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b4:	d009      	beq.n	80071ca <main+0x242>
 80071b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80071ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80071be:	eeb4 7a67 	vcmp.f32	s14, s15
 80071c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c6:	f040 81e7 	bne.w	8007598 <main+0x610>
					 if (frame.type != FRAME_BP)
 80071ca:	4b43      	ldr	r3, [pc, #268]	; (80072d8 <main+0x350>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 81d4 	bne.w	800757c <main+0x5f4>
				 if (pomiarStatus == POMIAR_START && pomiarTimer == 0)
 80071d4:	4b3f      	ldr	r3, [pc, #252]	; (80072d4 <main+0x34c>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b01      	cmp	r3, #1
 80071dc:	f000 822f 	beq.w	800763e <main+0x6b6>
				 if (pomiarStatus == POMIAR_PENDING)
 80071e0:	4b3c      	ldr	r3, [pc, #240]	; (80072d4 <main+0x34c>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	f000 8242 	beq.w	8007670 <main+0x6e8>
				 if (pomiarStatus == POMIAR_DONE)
 80071ec:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <main+0x34c>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	f000 8264 	beq.w	80076c0 <main+0x738>
				 if (pomiarStatus == POMIAR_DISP)
 80071f8:	4b36      	ldr	r3, [pc, #216]	; (80072d4 <main+0x34c>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d19f      	bne.n	8007142 <main+0x1ba>
					 if (settings.measurementUnit == UNIT_BRIX)
 8007202:	4b22      	ldr	r3, [pc, #136]	; (800728c <main+0x304>)
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 8289 	bne.w	800771e <main+0x796>
						 if (settings.thermalCompensation == OFF)
 800720c:	4b1f      	ldr	r3, [pc, #124]	; (800728c <main+0x304>)
 800720e:	789b      	ldrb	r3, [r3, #2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f040 82c2 	bne.w	800779a <main+0x812>
							if (PomiarBuffer.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brix);
 8007216:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <main+0x360>)
 8007218:	ed93 7a03 	vldr	s14, [r3, #12]
 800721c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8007220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	f280 8261 	bge.w	80076ee <main+0x766>
							else if(PomiarBuffer.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", PomiarBuffer.brix);
 800722c:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <main+0x360>)
 800722e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	f280 829a 	bge.w	8007772 <main+0x7ea>
							else if(PomiarBuffer.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brix);
 800723e:	4b2a      	ldr	r3, [pc, #168]	; (80072e8 <main+0x360>)
 8007240:	ed93 7a03 	vldr	s14, [r3, #12]
 8007244:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 8007248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800724c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007250:	f300 8299 	bgt.w	8007786 <main+0x7fe>
							else if(PomiarBuffer.brix <= -10) sprintf(frame.secondLine," %2.2f %% ", PomiarBuffer.brix);
 8007254:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <main+0x360>)
 8007256:	ed93 7a03 	vldr	s14, [r3, #12]
 800725a:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 800725e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007266:	f200 824b 	bhi.w	8007700 <main+0x778>
 800726a:	68d8      	ldr	r0, [r3, #12]
 800726c:	f7f9 f994 	bl	8000598 <__aeabi_f2d>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	491d      	ldr	r1, [pc, #116]	; (80072ec <main+0x364>)
 8007276:	481e      	ldr	r0, [pc, #120]	; (80072f0 <main+0x368>)
 8007278:	f001 fb4c 	bl	8008914 <siprintf>
 800727c:	e240      	b.n	8007700 <main+0x778>
 800727e:	bf00      	nop
 8007280:	40020000 	.word	0x40020000
 8007284:	40020400 	.word	0x40020400
 8007288:	2000110c 	.word	0x2000110c
 800728c:	200006c4 	.word	0x200006c4
 8007290:	0800d30c 	.word	0x0800d30c
 8007294:	08006359 	.word	0x08006359
 8007298:	2000171c 	.word	0x2000171c
 800729c:	080101b4 	.word	0x080101b4
 80072a0:	20001672 	.word	0x20001672
 80072a4:	080101c0 	.word	0x080101c0
 80072a8:	080101c8 	.word	0x080101c8
 80072ac:	080101d0 	.word	0x080101d0
 80072b0:	080101d8 	.word	0x080101d8
 80072b4:	20000750 	.word	0x20000750
 80072b8:	200006ec 	.word	0x200006ec
 80072bc:	20000cfc 	.word	0x20000cfc
 80072c0:	20001720 	.word	0x20001720
 80072c4:	2000080c 	.word	0x2000080c
 80072c8:	20000688 	.word	0x20000688
 80072cc:	20000808 	.word	0x20000808
 80072d0:	200006ce 	.word	0x200006ce
 80072d4:	20000bf5 	.word	0x20000bf5
 80072d8:	20001604 	.word	0x20001604
 80072dc:	20001600 	.word	0x20001600
 80072e0:	2000114c 	.word	0x2000114c
 80072e4:	20000ce0 	.word	0x20000ce0
 80072e8:	20000bf8 	.word	0x20000bf8
 80072ec:	0801013c 	.word	0x0801013c
 80072f0:	2000161d 	.word	0x2000161d
 80072f4:	20001684 	.word	0x20001684
			 if (sampleDetected == 0) sampleDetected = 1;
 80072f8:	4bb6      	ldr	r3, [pc, #728]	; (80075d4 <main+0x64c>)
 80072fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80072fe:	b91b      	cbnz	r3, 8007308 <main+0x380>
 8007300:	4bb4      	ldr	r3, [pc, #720]	; (80075d4 <main+0x64c>)
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			 if (sampleDetected == 1)
 8007308:	4bb2      	ldr	r3, [pc, #712]	; (80075d4 <main+0x64c>)
 800730a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d025      	beq.n	8007360 <main+0x3d8>
			 if (sampleDetected == 2 && onesecondTick == 1)			//wyswietlanie kreseczek jak oczekiwanie na pomiar
 8007314:	4baf      	ldr	r3, [pc, #700]	; (80075d4 <main+0x64c>)
 8007316:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	f47f af33 	bne.w	8007188 <main+0x200>
 8007322:	4bac      	ldr	r3, [pc, #688]	; (80075d4 <main+0x64c>)
 8007324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b01      	cmp	r3, #1
 800732c:	f47f af2c 	bne.w	8007188 <main+0x200>
				 onesecondTick = 0;
 8007330:	4ba8      	ldr	r3, [pc, #672]	; (80075d4 <main+0x64c>)
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 if (frame.type != FRAME_2_BIG_LINES)
 8007338:	4ba7      	ldr	r3, [pc, #668]	; (80075d8 <main+0x650>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b06      	cmp	r3, #6
 800733e:	f43f af23 	beq.w	8007188 <main+0x200>
					 sprintf(kreski,"%sIII",kreski);
 8007342:	aa03      	add	r2, sp, #12
 8007344:	49a5      	ldr	r1, [pc, #660]	; (80075dc <main+0x654>)
 8007346:	4610      	mov	r0, r2
 8007348:	f001 fae4 	bl	8008914 <siprintf>
					 sprintf(frame.secondLine, " %s", kreski);
 800734c:	4ca4      	ldr	r4, [pc, #656]	; (80075e0 <main+0x658>)
 800734e:	aa03      	add	r2, sp, #12
 8007350:	49a4      	ldr	r1, [pc, #656]	; (80075e4 <main+0x65c>)
 8007352:	4620      	mov	r0, r4
 8007354:	f001 fade 	bl	8008914 <siprintf>
					 frame.type = FRAME_1_BIG_LINE;
 8007358:	2307      	movs	r3, #7
 800735a:	f804 3c19 	strb.w	r3, [r4, #-25]
 800735e:	e713      	b.n	8007188 <main+0x200>
				 reset_screen_saver();
 8007360:	f7fd fbce 	bl	8004b00 <reset_screen_saver>
				 ledTimer = SAMPLE_DETECT_TIMEOUT;
 8007364:	4b9b      	ldr	r3, [pc, #620]	; (80075d4 <main+0x64c>)
 8007366:	2202      	movs	r2, #2
 8007368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				 sampleDetected = 2;
 800736c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				 OLED_CLEAR();
 8007370:	f7fc fd55 	bl	8003e1e <OLED_CLEAR>
 8007374:	e7ce      	b.n	8007314 <main+0x38c>
					 if (settings.measurementUnit == UNIT_BRIX)
 8007376:	4b9c      	ldr	r3, [pc, #624]	; (80075e8 <main+0x660>)
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d14c      	bne.n	8007418 <main+0x490>
						 if (settings.thermalCompensation == OFF)
 800737e:	4b9a      	ldr	r3, [pc, #616]	; (80075e8 <main+0x660>)
 8007380:	789b      	ldrb	r3, [r3, #2]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8086 	bne.w	8007494 <main+0x50c>
							if (pomiar.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brix);
 8007388:	4b98      	ldr	r3, [pc, #608]	; (80075ec <main+0x664>)
 800738a:	ed93 7a03 	vldr	s14, [r3, #12]
 800738e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8007392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739a:	da25      	bge.n	80073e8 <main+0x460>
							else if(pomiar.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", pomiar.brix);
 800739c:	4b93      	ldr	r3, [pc, #588]	; (80075ec <main+0x664>)
 800739e:	edd3 7a03 	vldr	s15, [r3, #12]
 80073a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073aa:	da5f      	bge.n	800746c <main+0x4e4>
							else if(pomiar.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brix);
 80073ac:	4b8f      	ldr	r3, [pc, #572]	; (80075ec <main+0x664>)
 80073ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80073b2:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80073b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073be:	dc5f      	bgt.n	8007480 <main+0x4f8>
							else if(pomiar.brix <= -10) sprintf(frame.secondLine," %2.2f %% ", pomiar.brix);
 80073c0:	4b8a      	ldr	r3, [pc, #552]	; (80075ec <main+0x664>)
 80073c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80073c6:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80073ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	d812      	bhi.n	80073fa <main+0x472>
 80073d4:	68d8      	ldr	r0, [r3, #12]
 80073d6:	f7f9 f8df 	bl	8000598 <__aeabi_f2d>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4984      	ldr	r1, [pc, #528]	; (80075f0 <main+0x668>)
 80073e0:	487f      	ldr	r0, [pc, #508]	; (80075e0 <main+0x658>)
 80073e2:	f001 fa97 	bl	8008914 <siprintf>
 80073e6:	e008      	b.n	80073fa <main+0x472>
							if (pomiar.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brix);
 80073e8:	68d8      	ldr	r0, [r3, #12]
 80073ea:	f7f9 f8d5 	bl	8000598 <__aeabi_f2d>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4980      	ldr	r1, [pc, #512]	; (80075f4 <main+0x66c>)
 80073f4:	487a      	ldr	r0, [pc, #488]	; (80075e0 <main+0x658>)
 80073f6:	f001 fa8d 	bl	8008914 <siprintf>
							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 80073fa:	4b7c      	ldr	r3, [pc, #496]	; (80075ec <main+0x664>)
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f7f9 f8cb 	bl	8000598 <__aeabi_f2d>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	497c      	ldr	r1, [pc, #496]	; (80075f8 <main+0x670>)
 8007408:	487c      	ldr	r0, [pc, #496]	; (80075fc <main+0x674>)
 800740a:	f001 fa83 	bl	8008914 <siprintf>
						 if (frame.type != FRAME_2_BIG_LINES)
 800740e:	4b72      	ldr	r3, [pc, #456]	; (80075d8 <main+0x650>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b06      	cmp	r3, #6
 8007414:	f040 8096 	bne.w	8007544 <main+0x5bc>
					 if (settings.measurementUnit == UNIT_RI)
 8007418:	4b73      	ldr	r3, [pc, #460]	; (80075e8 <main+0x660>)
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b01      	cmp	r3, #1
 800741e:	f47f aebe 	bne.w	800719e <main+0x216>
						 if (settings.thermalCompensation == OFF)
 8007422:	4b71      	ldr	r3, [pc, #452]	; (80075e8 <main+0x660>)
 8007424:	789b      	ldrb	r3, [r3, #2]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f040 8092 	bne.w	8007550 <main+0x5c8>
							 sprintf(frame.secondLine,"%1.5f nd", pomiar.nc);
 800742c:	4d6f      	ldr	r5, [pc, #444]	; (80075ec <main+0x664>)
 800742e:	6868      	ldr	r0, [r5, #4]
 8007430:	f7f9 f8b2 	bl	8000598 <__aeabi_f2d>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4c69      	ldr	r4, [pc, #420]	; (80075e0 <main+0x658>)
 800743a:	4971      	ldr	r1, [pc, #452]	; (8007600 <main+0x678>)
 800743c:	4620      	mov	r0, r4
 800743e:	f001 fa69 	bl	8008914 <siprintf>
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 8007442:	6828      	ldr	r0, [r5, #0]
 8007444:	f7f9 f8a8 	bl	8000598 <__aeabi_f2d>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	496a      	ldr	r1, [pc, #424]	; (80075f8 <main+0x670>)
 800744e:	f104 0018 	add.w	r0, r4, #24
 8007452:	f001 fa5f 	bl	8008914 <siprintf>
						 if (frame.type != FRAME_2_BIG_LINES)
 8007456:	4b60      	ldr	r3, [pc, #384]	; (80075d8 <main+0x650>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b06      	cmp	r3, #6
 800745c:	f43f ae9f 	beq.w	800719e <main+0x216>
						  OLED_CLEAR();
 8007460:	f7fc fcdd 	bl	8003e1e <OLED_CLEAR>
						  frame.type = FRAME_2_BIG_LINES;
 8007464:	4b5c      	ldr	r3, [pc, #368]	; (80075d8 <main+0x650>)
 8007466:	2206      	movs	r2, #6
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e698      	b.n	800719e <main+0x216>
							else if(pomiar.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", pomiar.brix);
 800746c:	68d8      	ldr	r0, [r3, #12]
 800746e:	f7f9 f893 	bl	8000598 <__aeabi_f2d>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4963      	ldr	r1, [pc, #396]	; (8007604 <main+0x67c>)
 8007478:	4859      	ldr	r0, [pc, #356]	; (80075e0 <main+0x658>)
 800747a:	f001 fa4b 	bl	8008914 <siprintf>
 800747e:	e7bc      	b.n	80073fa <main+0x472>
							else if(pomiar.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brix);
 8007480:	68d8      	ldr	r0, [r3, #12]
 8007482:	f7f9 f889 	bl	8000598 <__aeabi_f2d>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	495a      	ldr	r1, [pc, #360]	; (80075f4 <main+0x66c>)
 800748c:	4854      	ldr	r0, [pc, #336]	; (80075e0 <main+0x658>)
 800748e:	f001 fa41 	bl	8008914 <siprintf>
 8007492:	e7b2      	b.n	80073fa <main+0x472>
							if (pomiar.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brixk);
 8007494:	4b55      	ldr	r3, [pc, #340]	; (80075ec <main+0x664>)
 8007496:	ed93 7a04 	vldr	s14, [r3, #16]
 800749a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800749e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a6:	da25      	bge.n	80074f4 <main+0x56c>
							else if(pomiar.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", pomiar.brixk);
 80074a8:	4b50      	ldr	r3, [pc, #320]	; (80075ec <main+0x664>)
 80074aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80074ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b6:	da31      	bge.n	800751c <main+0x594>
							else if(pomiar.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brixk);
 80074b8:	4b4c      	ldr	r3, [pc, #304]	; (80075ec <main+0x664>)
 80074ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80074be:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80074c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	dc31      	bgt.n	8007530 <main+0x5a8>
							else if(pomiar.brixk <= -10) sprintf(frame.secondLine," %2.2f %% ", pomiar.brixk);
 80074cc:	4b47      	ldr	r3, [pc, #284]	; (80075ec <main+0x664>)
 80074ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80074d2:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80074d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074de:	d812      	bhi.n	8007506 <main+0x57e>
 80074e0:	6918      	ldr	r0, [r3, #16]
 80074e2:	f7f9 f859 	bl	8000598 <__aeabi_f2d>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4941      	ldr	r1, [pc, #260]	; (80075f0 <main+0x668>)
 80074ec:	483c      	ldr	r0, [pc, #240]	; (80075e0 <main+0x658>)
 80074ee:	f001 fa11 	bl	8008914 <siprintf>
 80074f2:	e008      	b.n	8007506 <main+0x57e>
							if (pomiar.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brixk);
 80074f4:	6918      	ldr	r0, [r3, #16]
 80074f6:	f7f9 f84f 	bl	8000598 <__aeabi_f2d>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	493d      	ldr	r1, [pc, #244]	; (80075f4 <main+0x66c>)
 8007500:	4837      	ldr	r0, [pc, #220]	; (80075e0 <main+0x658>)
 8007502:	f001 fa07 	bl	8008914 <siprintf>
							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <main+0x664>)
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f7f9 f845 	bl	8000598 <__aeabi_f2d>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4939      	ldr	r1, [pc, #228]	; (80075f8 <main+0x670>)
 8007514:	4839      	ldr	r0, [pc, #228]	; (80075fc <main+0x674>)
 8007516:	f001 f9fd 	bl	8008914 <siprintf>
 800751a:	e778      	b.n	800740e <main+0x486>
							else if(pomiar.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", pomiar.brixk);
 800751c:	6918      	ldr	r0, [r3, #16]
 800751e:	f7f9 f83b 	bl	8000598 <__aeabi_f2d>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4937      	ldr	r1, [pc, #220]	; (8007604 <main+0x67c>)
 8007528:	482d      	ldr	r0, [pc, #180]	; (80075e0 <main+0x658>)
 800752a:	f001 f9f3 	bl	8008914 <siprintf>
 800752e:	e7ea      	b.n	8007506 <main+0x57e>
							else if(pomiar.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brixk);
 8007530:	6918      	ldr	r0, [r3, #16]
 8007532:	f7f9 f831 	bl	8000598 <__aeabi_f2d>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	492e      	ldr	r1, [pc, #184]	; (80075f4 <main+0x66c>)
 800753c:	4828      	ldr	r0, [pc, #160]	; (80075e0 <main+0x658>)
 800753e:	f001 f9e9 	bl	8008914 <siprintf>
 8007542:	e7e0      	b.n	8007506 <main+0x57e>
							OLED_CLEAR();
 8007544:	f7fc fc6b 	bl	8003e1e <OLED_CLEAR>
							frame.type = FRAME_2_BIG_LINES;
 8007548:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <main+0x650>)
 800754a:	2206      	movs	r2, #6
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	e763      	b.n	8007418 <main+0x490>
							 sprintf(frame.secondLine,"%1.5f nd", pomiar.nck);
 8007550:	4d26      	ldr	r5, [pc, #152]	; (80075ec <main+0x664>)
 8007552:	68a8      	ldr	r0, [r5, #8]
 8007554:	f7f9 f820 	bl	8000598 <__aeabi_f2d>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4c20      	ldr	r4, [pc, #128]	; (80075e0 <main+0x658>)
 800755e:	4928      	ldr	r1, [pc, #160]	; (8007600 <main+0x678>)
 8007560:	4620      	mov	r0, r4
 8007562:	f001 f9d7 	bl	8008914 <siprintf>
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 8007566:	6828      	ldr	r0, [r5, #0]
 8007568:	f7f9 f816 	bl	8000598 <__aeabi_f2d>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4921      	ldr	r1, [pc, #132]	; (80075f8 <main+0x670>)
 8007572:	f104 0018 	add.w	r0, r4, #24
 8007576:	f001 f9cd 	bl	8008914 <siprintf>
 800757a:	e76c      	b.n	8007456 <main+0x4ce>
						 reset_screen_saver();
 800757c:	f7fd fac0 	bl	8004b00 <reset_screen_saver>
						 OLED_CLEAR();
 8007580:	f7fc fc4d 	bl	8003e1e <OLED_CLEAR>
						 xShift = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	4a20      	ldr	r2, [pc, #128]	; (8007608 <main+0x680>)
 8007588:	7013      	strb	r3, [r2, #0]
						 yShift = 0;
 800758a:	4a20      	ldr	r2, [pc, #128]	; (800760c <main+0x684>)
 800758c:	7013      	strb	r3, [r2, #0]
						 pomiarStatus = POMIAR_STOP;
 800758e:	4a20      	ldr	r2, [pc, #128]	; (8007610 <main+0x688>)
 8007590:	7013      	strb	r3, [r2, #0]
						 frame.type = FRAME_BP;
 8007592:	4a11      	ldr	r2, [pc, #68]	; (80075d8 <main+0x650>)
 8007594:	7013      	strb	r3, [r2, #0]
 8007596:	e61d      	b.n	80071d4 <main+0x24c>
				 else if (frame.type != FRAME_2_BIG_LINES && pomiarStatus == POMIAR_STOP)
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <main+0x650>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b06      	cmp	r3, #6
 800759e:	f43f ae19 	beq.w	80071d4 <main+0x24c>
 80075a2:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <main+0x688>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f47f ae14 	bne.w	80071d4 <main+0x24c>
					OLED_CLEAR();
 80075ac:	f7fc fc37 	bl	8003e1e <OLED_CLEAR>
					if (settings.language == ENGLISH)		//warunek zeby ladnie wyswietlac napis "NACISNIJ START"
 80075b0:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <main+0x660>)
 80075b2:	791b      	ldrb	r3, [r3, #4]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d02f      	beq.n	8007618 <main+0x690>
						nacisnijStart = 1;
 80075b8:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <main+0x64c>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	761a      	strb	r2, [r3, #24]
						sprintf(frame.thirdLine,"START");
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <main+0x674>)
 80075c0:	4a14      	ldr	r2, [pc, #80]	; (8007614 <main+0x68c>)
 80075c2:	6810      	ldr	r0, [r2, #0]
 80075c4:	6018      	str	r0, [r3, #0]
 80075c6:	8892      	ldrh	r2, [r2, #4]
 80075c8:	809a      	strh	r2, [r3, #4]
					frame.type = FRAME_2_BIG_LINES;
 80075ca:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <main+0x650>)
 80075cc:	2206      	movs	r2, #6
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	e600      	b.n	80071d4 <main+0x24c>
 80075d2:	bf00      	nop
 80075d4:	20000688 	.word	0x20000688
 80075d8:	20001604 	.word	0x20001604
 80075dc:	080101e4 	.word	0x080101e4
 80075e0:	2000161d 	.word	0x2000161d
 80075e4:	080101ec 	.word	0x080101ec
 80075e8:	200006c4 	.word	0x200006c4
 80075ec:	20000ce0 	.word	0x20000ce0
 80075f0:	0801013c 	.word	0x0801013c
 80075f4:	08010120 	.word	0x08010120
 80075f8:	0801016c 	.word	0x0801016c
 80075fc:	20001635 	.word	0x20001635
 8007600:	08010160 	.word	0x08010160
 8007604:	0801012c 	.word	0x0801012c
 8007608:	20001600 	.word	0x20001600
 800760c:	2000114c 	.word	0x2000114c
 8007610:	20000bf5 	.word	0x20000bf5
 8007614:	08010204 	.word	0x08010204
						sprintf(frame.secondLine, "   %s",  Main_Screen[6][settings.language]);
 8007618:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	33d8      	adds	r3, #216	; 0xd8
 8007620:	4c98      	ldr	r4, [pc, #608]	; (8007884 <main+0x8fc>)
 8007622:	4a99      	ldr	r2, [pc, #612]	; (8007888 <main+0x900>)
 8007624:	441a      	add	r2, r3
 8007626:	4999      	ldr	r1, [pc, #612]	; (800788c <main+0x904>)
 8007628:	4620      	mov	r0, r4
 800762a:	f001 f973 	bl	8008914 <siprintf>
						sprintf(frame.thirdLine,"   START");
 800762e:	4b98      	ldr	r3, [pc, #608]	; (8007890 <main+0x908>)
 8007630:	cb03      	ldmia	r3!, {r0, r1}
 8007632:	61a0      	str	r0, [r4, #24]
 8007634:	61e1      	str	r1, [r4, #28]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	f884 3020 	strb.w	r3, [r4, #32]
 800763c:	e7c5      	b.n	80075ca <main+0x642>
				 if (pomiarStatus == POMIAR_START && pomiarTimer == 0)
 800763e:	4b95      	ldr	r3, [pc, #596]	; (8007894 <main+0x90c>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f47f adcc 	bne.w	80071e0 <main+0x258>
					OLED_CLEAR();
 8007648:	f7fc fbe9 	bl	8003e1e <OLED_CLEAR>
					nacisnijStart = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	4a92      	ldr	r2, [pc, #584]	; (8007898 <main+0x910>)
 8007650:	7613      	strb	r3, [r2, #24]
					OLED_PutStr(10, 1, "    ", 0, settings.contrast);	//usun napis AXXX jesli poprzedni pomiar byl zapisywany
 8007652:	4c92      	ldr	r4, [pc, #584]	; (800789c <main+0x914>)
 8007654:	7962      	ldrb	r2, [r4, #5]
 8007656:	9200      	str	r2, [sp, #0]
 8007658:	4a91      	ldr	r2, [pc, #580]	; (80078a0 <main+0x918>)
 800765a:	2101      	movs	r1, #1
 800765c:	200a      	movs	r0, #10
 800765e:	f7fc fd99 	bl	8004194 <OLED_PutStr>
					pomiarTimer = settings.singleMeasurementTime;
 8007662:	78e2      	ldrb	r2, [r4, #3]
 8007664:	4b8b      	ldr	r3, [pc, #556]	; (8007894 <main+0x90c>)
 8007666:	701a      	strb	r2, [r3, #0]
					pomiarStatus = POMIAR_PENDING;
 8007668:	4b8e      	ldr	r3, [pc, #568]	; (80078a4 <main+0x91c>)
 800766a:	2202      	movs	r2, #2
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e5b7      	b.n	80071e0 <main+0x258>
					reset_screen_saver();
 8007670:	f7fd fa46 	bl	8004b00 <reset_screen_saver>
					sprintf(frame.secondLine,"  %s", Main_Screen[4][settings.language]);
 8007674:	4e89      	ldr	r6, [pc, #548]	; (800789c <main+0x914>)
 8007676:	7933      	ldrb	r3, [r6, #4]
 8007678:	4c83      	ldr	r4, [pc, #524]	; (8007888 <main+0x900>)
 800767a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800767e:	005a      	lsls	r2, r3, #1
 8007680:	3290      	adds	r2, #144	; 0x90
 8007682:	4d80      	ldr	r5, [pc, #512]	; (8007884 <main+0x8fc>)
 8007684:	4422      	add	r2, r4
 8007686:	4988      	ldr	r1, [pc, #544]	; (80078a8 <main+0x920>)
 8007688:	4628      	mov	r0, r5
 800768a:	f001 f943 	bl	8008914 <siprintf>
					sprintf(frame.thirdLine,"  %d %s ",pomiarTimer, Main_Screen[5][settings.language]);
 800768e:	4b81      	ldr	r3, [pc, #516]	; (8007894 <main+0x90c>)
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	7933      	ldrb	r3, [r6, #4]
 8007694:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	33b4      	adds	r3, #180	; 0xb4
 800769c:	4423      	add	r3, r4
 800769e:	4983      	ldr	r1, [pc, #524]	; (80078ac <main+0x924>)
 80076a0:	f105 0018 	add.w	r0, r5, #24
 80076a4:	f001 f936 	bl	8008914 <siprintf>
					if (frame.type != FRAME_2_BIG_LINES)
 80076a8:	f815 3c19 	ldrb.w	r3, [r5, #-25]
 80076ac:	2b06      	cmp	r3, #6
 80076ae:	f43f ad9d 	beq.w	80071ec <main+0x264>
					OLED_CLEAR();
 80076b2:	f7fc fbb4 	bl	8003e1e <OLED_CLEAR>
					frame.type = FRAME_2_BIG_LINES;
 80076b6:	f1a5 0319 	sub.w	r3, r5, #25
 80076ba:	2206      	movs	r2, #6
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e595      	b.n	80071ec <main+0x264>
					 newArchiveEntryAdded = 0;
 80076c0:	2100      	movs	r1, #0
 80076c2:	4b7b      	ldr	r3, [pc, #492]	; (80078b0 <main+0x928>)
 80076c4:	7019      	strb	r1, [r3, #0]
					 PomiarBuffer.nc = pomiar.nc;					// bufor dodany w razie jakby ktos chcial zmieniac ustawienia/lazic po archiwum gdy wyswietlany jest wynik.
 80076c6:	4a7b      	ldr	r2, [pc, #492]	; (80078b4 <main+0x92c>)
 80076c8:	6850      	ldr	r0, [r2, #4]
 80076ca:	4b7b      	ldr	r3, [pc, #492]	; (80078b8 <main+0x930>)
 80076cc:	6058      	str	r0, [r3, #4]
					 PomiarBuffer.nck = pomiar.nck;
 80076ce:	6890      	ldr	r0, [r2, #8]
 80076d0:	6098      	str	r0, [r3, #8]
					 PomiarBuffer.brix = pomiar.brix;
 80076d2:	68d0      	ldr	r0, [r2, #12]
 80076d4:	60d8      	str	r0, [r3, #12]
					 PomiarBuffer.brixk = pomiar.brixk;
 80076d6:	6910      	ldr	r0, [r2, #16]
 80076d8:	6118      	str	r0, [r3, #16]
					 PomiarBuffer.temperatura = pomiar.temperatura;
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	601a      	str	r2, [r3, #0]
					 pomiarTimer = 0;
 80076de:	4b6d      	ldr	r3, [pc, #436]	; (8007894 <main+0x90c>)
 80076e0:	7019      	strb	r1, [r3, #0]
					 pomiarStatus = POMIAR_DISP;
 80076e2:	4b70      	ldr	r3, [pc, #448]	; (80078a4 <main+0x91c>)
 80076e4:	2203      	movs	r2, #3
 80076e6:	701a      	strb	r2, [r3, #0]
					 OLED_CLEAR();
 80076e8:	f7fc fb99 	bl	8003e1e <OLED_CLEAR>
 80076ec:	e584      	b.n	80071f8 <main+0x270>
							if (PomiarBuffer.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brix);
 80076ee:	68d8      	ldr	r0, [r3, #12]
 80076f0:	f7f8 ff52 	bl	8000598 <__aeabi_f2d>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4970      	ldr	r1, [pc, #448]	; (80078bc <main+0x934>)
 80076fa:	4862      	ldr	r0, [pc, #392]	; (8007884 <main+0x8fc>)
 80076fc:	f001 f90a 	bl	8008914 <siprintf>
							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 8007700:	4b6d      	ldr	r3, [pc, #436]	; (80078b8 <main+0x930>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	f7f8 ff48 	bl	8000598 <__aeabi_f2d>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	496c      	ldr	r1, [pc, #432]	; (80078c0 <main+0x938>)
 800770e:	486d      	ldr	r0, [pc, #436]	; (80078c4 <main+0x93c>)
 8007710:	f001 f900 	bl	8008914 <siprintf>
						 if (frame.type != FRAME_2_BIG_LINES)
 8007714:	4b6c      	ldr	r3, [pc, #432]	; (80078c8 <main+0x940>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b06      	cmp	r3, #6
 800771a:	f040 8096 	bne.w	800784a <main+0x8c2>
					 if (settings.measurementUnit == UNIT_RI)
 800771e:	4b5f      	ldr	r3, [pc, #380]	; (800789c <main+0x914>)
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b01      	cmp	r3, #1
 8007724:	f47f ad0d 	bne.w	8007142 <main+0x1ba>
						 if (settings.thermalCompensation == OFF)
 8007728:	4b5c      	ldr	r3, [pc, #368]	; (800789c <main+0x914>)
 800772a:	789b      	ldrb	r3, [r3, #2]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 8092 	bne.w	8007856 <main+0x8ce>
							 sprintf(frame.secondLine,"%1.5f nd", PomiarBuffer.nc);
 8007732:	4d61      	ldr	r5, [pc, #388]	; (80078b8 <main+0x930>)
 8007734:	6868      	ldr	r0, [r5, #4]
 8007736:	f7f8 ff2f 	bl	8000598 <__aeabi_f2d>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4c51      	ldr	r4, [pc, #324]	; (8007884 <main+0x8fc>)
 8007740:	4962      	ldr	r1, [pc, #392]	; (80078cc <main+0x944>)
 8007742:	4620      	mov	r0, r4
 8007744:	f001 f8e6 	bl	8008914 <siprintf>
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 8007748:	6828      	ldr	r0, [r5, #0]
 800774a:	f7f8 ff25 	bl	8000598 <__aeabi_f2d>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	495b      	ldr	r1, [pc, #364]	; (80078c0 <main+0x938>)
 8007754:	f104 0018 	add.w	r0, r4, #24
 8007758:	f001 f8dc 	bl	8008914 <siprintf>
						 if (frame.type != FRAME_2_BIG_LINES)
 800775c:	4b5a      	ldr	r3, [pc, #360]	; (80078c8 <main+0x940>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b06      	cmp	r3, #6
 8007762:	f43f acee 	beq.w	8007142 <main+0x1ba>
						  OLED_CLEAR();
 8007766:	f7fc fb5a 	bl	8003e1e <OLED_CLEAR>
						  frame.type = FRAME_2_BIG_LINES;
 800776a:	4b57      	ldr	r3, [pc, #348]	; (80078c8 <main+0x940>)
 800776c:	2206      	movs	r2, #6
 800776e:	701a      	strb	r2, [r3, #0]
 8007770:	e4e7      	b.n	8007142 <main+0x1ba>
							else if(PomiarBuffer.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", PomiarBuffer.brix);
 8007772:	68d8      	ldr	r0, [r3, #12]
 8007774:	f7f8 ff10 	bl	8000598 <__aeabi_f2d>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4954      	ldr	r1, [pc, #336]	; (80078d0 <main+0x948>)
 800777e:	4841      	ldr	r0, [pc, #260]	; (8007884 <main+0x8fc>)
 8007780:	f001 f8c8 	bl	8008914 <siprintf>
 8007784:	e7bc      	b.n	8007700 <main+0x778>
							else if(PomiarBuffer.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brix);
 8007786:	68d8      	ldr	r0, [r3, #12]
 8007788:	f7f8 ff06 	bl	8000598 <__aeabi_f2d>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	494a      	ldr	r1, [pc, #296]	; (80078bc <main+0x934>)
 8007792:	483c      	ldr	r0, [pc, #240]	; (8007884 <main+0x8fc>)
 8007794:	f001 f8be 	bl	8008914 <siprintf>
 8007798:	e7b2      	b.n	8007700 <main+0x778>
							if (PomiarBuffer.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brixk);
 800779a:	4b47      	ldr	r3, [pc, #284]	; (80078b8 <main+0x930>)
 800779c:	ed93 7a04 	vldr	s14, [r3, #16]
 80077a0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80077a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ac:	da25      	bge.n	80077fa <main+0x872>
							else if(PomiarBuffer.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", PomiarBuffer.brixk);
 80077ae:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <main+0x930>)
 80077b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80077b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077bc:	da31      	bge.n	8007822 <main+0x89a>
							else if(PomiarBuffer.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brixk);
 80077be:	4b3e      	ldr	r3, [pc, #248]	; (80078b8 <main+0x930>)
 80077c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80077c4:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80077c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d0:	dc31      	bgt.n	8007836 <main+0x8ae>
							else if(PomiarBuffer.brixk <= -10) sprintf(frame.secondLine," %2.2f %% ", PomiarBuffer.brixk);
 80077d2:	4b39      	ldr	r3, [pc, #228]	; (80078b8 <main+0x930>)
 80077d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80077d8:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80077dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	d812      	bhi.n	800780c <main+0x884>
 80077e6:	6918      	ldr	r0, [r3, #16]
 80077e8:	f7f8 fed6 	bl	8000598 <__aeabi_f2d>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4938      	ldr	r1, [pc, #224]	; (80078d4 <main+0x94c>)
 80077f2:	4824      	ldr	r0, [pc, #144]	; (8007884 <main+0x8fc>)
 80077f4:	f001 f88e 	bl	8008914 <siprintf>
 80077f8:	e008      	b.n	800780c <main+0x884>
							if (PomiarBuffer.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brixk);
 80077fa:	6918      	ldr	r0, [r3, #16]
 80077fc:	f7f8 fecc 	bl	8000598 <__aeabi_f2d>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	492d      	ldr	r1, [pc, #180]	; (80078bc <main+0x934>)
 8007806:	481f      	ldr	r0, [pc, #124]	; (8007884 <main+0x8fc>)
 8007808:	f001 f884 	bl	8008914 <siprintf>
							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 800780c:	4b2a      	ldr	r3, [pc, #168]	; (80078b8 <main+0x930>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	f7f8 fec2 	bl	8000598 <__aeabi_f2d>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4929      	ldr	r1, [pc, #164]	; (80078c0 <main+0x938>)
 800781a:	482a      	ldr	r0, [pc, #168]	; (80078c4 <main+0x93c>)
 800781c:	f001 f87a 	bl	8008914 <siprintf>
 8007820:	e778      	b.n	8007714 <main+0x78c>
							else if(PomiarBuffer.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", PomiarBuffer.brixk);
 8007822:	6918      	ldr	r0, [r3, #16]
 8007824:	f7f8 feb8 	bl	8000598 <__aeabi_f2d>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4928      	ldr	r1, [pc, #160]	; (80078d0 <main+0x948>)
 800782e:	4815      	ldr	r0, [pc, #84]	; (8007884 <main+0x8fc>)
 8007830:	f001 f870 	bl	8008914 <siprintf>
 8007834:	e7ea      	b.n	800780c <main+0x884>
							else if(PomiarBuffer.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brixk);
 8007836:	6918      	ldr	r0, [r3, #16]
 8007838:	f7f8 feae 	bl	8000598 <__aeabi_f2d>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	491e      	ldr	r1, [pc, #120]	; (80078bc <main+0x934>)
 8007842:	4810      	ldr	r0, [pc, #64]	; (8007884 <main+0x8fc>)
 8007844:	f001 f866 	bl	8008914 <siprintf>
 8007848:	e7e0      	b.n	800780c <main+0x884>
							OLED_CLEAR();
 800784a:	f7fc fae8 	bl	8003e1e <OLED_CLEAR>
							frame.type = FRAME_2_BIG_LINES;
 800784e:	4b1e      	ldr	r3, [pc, #120]	; (80078c8 <main+0x940>)
 8007850:	2206      	movs	r2, #6
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	e763      	b.n	800771e <main+0x796>
							 sprintf(frame.secondLine,"%1.5f nd", PomiarBuffer.nck);
 8007856:	4d18      	ldr	r5, [pc, #96]	; (80078b8 <main+0x930>)
 8007858:	68a8      	ldr	r0, [r5, #8]
 800785a:	f7f8 fe9d 	bl	8000598 <__aeabi_f2d>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4c08      	ldr	r4, [pc, #32]	; (8007884 <main+0x8fc>)
 8007864:	4919      	ldr	r1, [pc, #100]	; (80078cc <main+0x944>)
 8007866:	4620      	mov	r0, r4
 8007868:	f001 f854 	bl	8008914 <siprintf>
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 800786c:	6828      	ldr	r0, [r5, #0]
 800786e:	f7f8 fe93 	bl	8000598 <__aeabi_f2d>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4912      	ldr	r1, [pc, #72]	; (80078c0 <main+0x938>)
 8007878:	f104 0018 	add.w	r0, r4, #24
 800787c:	f001 f84a 	bl	8008914 <siprintf>
 8007880:	e76c      	b.n	800775c <main+0x7d4>
 8007882:	bf00      	nop
 8007884:	2000161d 	.word	0x2000161d
 8007888:	0800cc90 	.word	0x0800cc90
 800788c:	080101f0 	.word	0x080101f0
 8007890:	080101f8 	.word	0x080101f8
 8007894:	2000074c 	.word	0x2000074c
 8007898:	20000688 	.word	0x20000688
 800789c:	200006c4 	.word	0x200006c4
 80078a0:	080100e8 	.word	0x080100e8
 80078a4:	20000bf5 	.word	0x20000bf5
 80078a8:	0801020c 	.word	0x0801020c
 80078ac:	08010214 	.word	0x08010214
 80078b0:	20000bf4 	.word	0x20000bf4
 80078b4:	20000ce0 	.word	0x20000ce0
 80078b8:	20000bf8 	.word	0x20000bf8
 80078bc:	08010120 	.word	0x08010120
 80078c0:	0801016c 	.word	0x0801016c
 80078c4:	20001635 	.word	0x20001635
 80078c8:	20001604 	.word	0x20001604
 80078cc:	08010160 	.word	0x08010160
 80078d0:	0801012c 	.word	0x0801012c
 80078d4:	0801013c 	.word	0x0801013c

080078d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6)	//50Hz refresh rate for keyboard - Runs every 20ms
{
 80078d8:	b510      	push	{r4, lr}

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80078da:	4c16      	ldr	r4, [pc, #88]	; (8007934 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80078dc:	2201      	movs	r2, #1
 80078de:	4611      	mov	r1, r2
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7f9 ff19 	bl	8001718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80078e6:	2201      	movs	r2, #1
 80078e8:	2102      	movs	r1, #2
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7f9 ff14 	bl	8001718 <HAL_GPIO_WritePin>


	TicksSinceLastRecordArrived++;
 80078f0:	4b11      	ldr	r3, [pc, #68]	; (8007938 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	3201      	adds	r2, #1
 80078f6:	61da      	str	r2, [r3, #28]
	if(TicksSinceLastRecordArrived > 15)
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	d802      	bhi.n	8007904 <HAL_TIM_PeriodElapsedCallback+0x2c>
		newPacketCount = 0;
		memset(&pomiar, 0, sizeof(pomiar));

		TicksSinceLastRecordArrived = 0;
	}
	isr_kbd();
 80078fe:	f7fc fcdf 	bl	80042c0 <isr_kbd>
}
 8007902:	bd10      	pop	{r4, pc}
		memset(pomiarArray, 0, sizeof(pomiarArray));
 8007904:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8007908:	2100      	movs	r1, #0
 800790a:	480c      	ldr	r0, [pc, #48]	; (800793c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800790c:	f000 fb90 	bl	8008030 <memset>
		packetCounter = 0;
 8007910:	4909      	ldr	r1, [pc, #36]	; (8007938 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8007912:	2300      	movs	r3, #0
 8007914:	f881 3020 	strb.w	r3, [r1, #32]
		pomiarArrayFull = 0;
 8007918:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
		newPacketCount = 0;
 800791c:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
		memset(&pomiar, 0, sizeof(pomiar));
 8007920:	4a07      	ldr	r2, [pc, #28]	; (8007940 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	6053      	str	r3, [r2, #4]
 8007926:	6093      	str	r3, [r2, #8]
 8007928:	60d3      	str	r3, [r2, #12]
 800792a:	6113      	str	r3, [r2, #16]
 800792c:	6153      	str	r3, [r2, #20]
 800792e:	6193      	str	r3, [r2, #24]
		TicksSinceLastRecordArrived = 0;
 8007930:	61cb      	str	r3, [r1, #28]
 8007932:	e7e4      	b.n	80078fe <HAL_TIM_PeriodElapsedCallback+0x26>
 8007934:	40020400 	.word	0x40020400
 8007938:	20000688 	.word	0x20000688
 800793c:	20001150 	.word	0x20001150
 8007940:	20000ce0 	.word	0x20000ce0

08007944 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
	onesecondTick = 1;
 8007944:	4b3b      	ldr	r3, [pc, #236]	; (8007a34 <HAL_RTC_AlarmAEventCallback+0xf0>)
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (frame.type == FRAME_BP)
 800794c:	4b3a      	ldr	r3, [pc, #232]	; (8007a38 <HAL_RTC_AlarmAEventCallback+0xf4>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d144      	bne.n	80079de <HAL_RTC_AlarmAEventCallback+0x9a>
	{
		if (ssTimer == SCREEN_SAVER_BP_DELAY - 1)
 8007954:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f240 122b 	movw	r2, #299	; 0x12b
 800795e:	4293      	cmp	r3, r2
 8007960:	d00c      	beq.n	800797c <HAL_RTC_AlarmAEventCallback+0x38>
		{
			settings.contrast = SS_CONTRAST;
			ssStateChanged = 1;
			ssTimer = 0xFF;
		}
		else if (ssTimer < SCREEN_SAVER_BP_DELAY - 1) ssTimer++;
 8007962:	4b36      	ldr	r3, [pc, #216]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800796c:	d80f      	bhi.n	800798e <HAL_RTC_AlarmAEventCallback+0x4a>
 800796e:	4a33      	ldr	r2, [pc, #204]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 8007970:	8813      	ldrh	r3, [r2, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	3301      	adds	r3, #1
 8007976:	b29b      	uxth	r3, r3
 8007978:	8013      	strh	r3, [r2, #0]
 800797a:	e008      	b.n	800798e <HAL_RTC_AlarmAEventCallback+0x4a>
			settings.contrast = SS_CONTRAST;
 800797c:	4b30      	ldr	r3, [pc, #192]	; (8007a40 <HAL_RTC_AlarmAEventCallback+0xfc>)
 800797e:	2207      	movs	r2, #7
 8007980:	715a      	strb	r2, [r3, #5]
			ssStateChanged = 1;
 8007982:	4b30      	ldr	r3, [pc, #192]	; (8007a44 <HAL_RTC_AlarmAEventCallback+0x100>)
 8007984:	2201      	movs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
			ssTimer = 0xFF;
 8007988:	4b2c      	ldr	r3, [pc, #176]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 800798a:	22ff      	movs	r2, #255	; 0xff
 800798c:	801a      	strh	r2, [r3, #0]
			ssTimer = 0xFF;
		}
		else if (ssTimer < SCREEN_SAVER_DELAY - 1) ssTimer++;
	}

	if (sampleDetected != 0 && sampleDetected != 3)
 800798e:	4b29      	ldr	r3, [pc, #164]	; (8007a34 <HAL_RTC_AlarmAEventCallback+0xf0>)
 8007990:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007994:	b173      	cbz	r3, 80079b4 <HAL_RTC_AlarmAEventCallback+0x70>
 8007996:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <HAL_RTC_AlarmAEventCallback+0xf0>)
 8007998:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d008      	beq.n	80079b4 <HAL_RTC_AlarmAEventCallback+0x70>
	{
		if (ledTimer == 0)
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <HAL_RTC_AlarmAEventCallback+0xf0>)
 80079a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d136      	bne.n	8007a1a <HAL_RTC_AlarmAEventCallback+0xd6>
		{
			sampleDetected = 3;
 80079ac:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <HAL_RTC_AlarmAEventCallback+0xf0>)
 80079ae:	2203      	movs	r2, #3
 80079b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			ledTimer--;
		}
	}


	if (initDone)
 80079b4:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <HAL_RTC_AlarmAEventCallback+0x104>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b11b      	cbz	r3, 80079c2 <HAL_RTC_AlarmAEventCallback+0x7e>
// 			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
// 			SendRecord(R_POMIAR_OUT, A_HEAD, A_MAINBOARD, NULL, 0);
// 		}
// 		else {pcConnectionTimeout++; HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);}
//
		if (settings.measurementType == MEASUREMENT_CONTINUOUS)			//umożliwia ponowny zapis do archiwum tej samej probki. sekunde po zapisaniu w archiwum napis AXXX znika i można dokonac kolejnego
 80079ba:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <HAL_RTC_AlarmAEventCallback+0xfc>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d033      	beq.n	8007a2a <HAL_RTC_AlarmAEventCallback+0xe6>
		{
			newArchiveEntryAdded = 0;
		}
	}
	if (pomiarTimer > 0)
 80079c2:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <HAL_RTC_AlarmAEventCallback+0x108>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b14b      	cbz	r3, 80079dc <HAL_RTC_AlarmAEventCallback+0x98>
	{
		pomiarTimer--;
 80079c8:	4a20      	ldr	r2, [pc, #128]	; (8007a4c <HAL_RTC_AlarmAEventCallback+0x108>)
 80079ca:	7813      	ldrb	r3, [r2, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	7013      	strb	r3, [r2, #0]
		if (pomiarTimer == 0) pomiarStatus = POMIAR_DONE;
 80079d2:	7813      	ldrb	r3, [r2, #0]
 80079d4:	b913      	cbnz	r3, 80079dc <HAL_RTC_AlarmAEventCallback+0x98>
 80079d6:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <HAL_RTC_AlarmAEventCallback+0x10c>)
 80079d8:	2204      	movs	r2, #4
 80079da:	701a      	strb	r2, [r3, #0]
	}


}
 80079dc:	4770      	bx	lr
		if (ssTimer == SCREEN_SAVER_DELAY - 1)
 80079de:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f240 122b 	movw	r2, #299	; 0x12b
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00c      	beq.n	8007a06 <HAL_RTC_AlarmAEventCallback+0xc2>
		else if (ssTimer < SCREEN_SAVER_DELAY - 1) ssTimer++;
 80079ec:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80079f6:	d8ca      	bhi.n	800798e <HAL_RTC_AlarmAEventCallback+0x4a>
 80079f8:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 80079fa:	8813      	ldrh	r3, [r2, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3301      	adds	r3, #1
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	8013      	strh	r3, [r2, #0]
 8007a04:	e7c3      	b.n	800798e <HAL_RTC_AlarmAEventCallback+0x4a>
			settings.contrast = SS_CONTRAST;
 8007a06:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <HAL_RTC_AlarmAEventCallback+0xfc>)
 8007a08:	2207      	movs	r2, #7
 8007a0a:	715a      	strb	r2, [r3, #5]
			ssStateChanged = 1;
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <HAL_RTC_AlarmAEventCallback+0x100>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	701a      	strb	r2, [r3, #0]
			ssTimer = 0xFF;
 8007a12:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <HAL_RTC_AlarmAEventCallback+0xf8>)
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	e7b9      	b.n	800798e <HAL_RTC_AlarmAEventCallback+0x4a>
			ledTimer--;
 8007a1a:	4a06      	ldr	r2, [pc, #24]	; (8007a34 <HAL_RTC_AlarmAEventCallback+0xf0>)
 8007a1c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8007a28:	e7c4      	b.n	80079b4 <HAL_RTC_AlarmAEventCallback+0x70>
			newArchiveEntryAdded = 0;
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <HAL_RTC_AlarmAEventCallback+0x110>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e7c7      	b.n	80079c2 <HAL_RTC_AlarmAEventCallback+0x7e>
 8007a32:	bf00      	nop
 8007a34:	20000688 	.word	0x20000688
 8007a38:	20001604 	.word	0x20001604
 8007a3c:	20000c0e 	.word	0x20000c0e
 8007a40:	200006c4 	.word	0x200006c4
 8007a44:	2000171c 	.word	0x2000171c
 8007a48:	20000808 	.word	0x20000808
 8007a4c:	2000074c 	.word	0x2000074c
 8007a50:	20000bf5 	.word	0x20000bf5
 8007a54:	20000bf4 	.word	0x20000bf4

08007a58 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007a58:	4770      	bx	lr
	...

08007a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a5c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a5e:	2100      	movs	r1, #0
 8007a60:	9100      	str	r1, [sp, #0]
 8007a62:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <HAL_MspInit+0x34>)
 8007a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a6a:	645a      	str	r2, [r3, #68]	; 0x44
 8007a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007a72:	9200      	str	r2, [sp, #0]
 8007a74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a76:	9101      	str	r1, [sp, #4]
 8007a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a8a:	b002      	add	sp, #8
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40023800 	.word	0x40023800

08007a94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007a94:	b508      	push	{r3, lr}
  if(hrtc->Instance==RTC)
 8007a96:	6802      	ldr	r2, [r0, #0]
 8007a98:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <HAL_RTC_MspInit+0x24>)
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d000      	beq.n	8007aa0 <HAL_RTC_MspInit+0xc>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007a9e:	bd08      	pop	{r3, pc}
    __HAL_RCC_RTC_ENABLE();
 8007aa0:	4b06      	ldr	r3, [pc, #24]	; (8007abc <HAL_RTC_MspInit+0x28>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	2029      	movs	r0, #41	; 0x29
 8007aac:	f7f9 fa96 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007ab0:	2029      	movs	r0, #41	; 0x29
 8007ab2:	f7f9 fac7 	bl	8001044 <HAL_NVIC_EnableIRQ>
}
 8007ab6:	e7f2      	b.n	8007a9e <HAL_RTC_MspInit+0xa>
 8007ab8:	40002800 	.word	0x40002800
 8007abc:	42470e3c 	.word	0x42470e3c

08007ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ac0:	b500      	push	{lr}
 8007ac2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9305      	str	r3, [sp, #20]
 8007ac8:	9306      	str	r3, [sp, #24]
 8007aca:	9307      	str	r3, [sp, #28]
 8007acc:	9308      	str	r3, [sp, #32]
 8007ace:	9309      	str	r3, [sp, #36]	; 0x24
  if(hspi->Instance==SPI1)
 8007ad0:	6803      	ldr	r3, [r0, #0]
 8007ad2:	4a29      	ldr	r2, [pc, #164]	; (8007b78 <HAL_SPI_MspInit+0xb8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d005      	beq.n	8007ae4 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8007ad8:	4a28      	ldr	r2, [pc, #160]	; (8007b7c <HAL_SPI_MspInit+0xbc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d026      	beq.n	8007b2c <HAL_SPI_MspInit+0x6c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007ade:	b00b      	add	sp, #44	; 0x2c
 8007ae0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	9201      	str	r2, [sp, #4]
 8007ae8:	4b25      	ldr	r3, [pc, #148]	; (8007b80 <HAL_SPI_MspInit+0xc0>)
 8007aea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007aec:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007af0:	6459      	str	r1, [r3, #68]	; 0x44
 8007af2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007af4:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8007af8:	9101      	str	r1, [sp, #4]
 8007afa:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007afc:	9202      	str	r2, [sp, #8]
 8007afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b00:	f041 0101 	orr.w	r1, r1, #1
 8007b04:	6319      	str	r1, [r3, #48]	; 0x30
 8007b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	9302      	str	r3, [sp, #8]
 8007b0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = OLED_CLK_Pin|OLED_DATA_Pin;
 8007b10:	23a0      	movs	r3, #160	; 0xa0
 8007b12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b14:	2302      	movs	r3, #2
 8007b16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b18:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b1e:	2305      	movs	r3, #5
 8007b20:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b22:	a905      	add	r1, sp, #20
 8007b24:	4817      	ldr	r0, [pc, #92]	; (8007b84 <HAL_SPI_MspInit+0xc4>)
 8007b26:	f7f9 fd17 	bl	8001558 <HAL_GPIO_Init>
 8007b2a:	e7d8      	b.n	8007ade <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	9203      	str	r2, [sp, #12]
 8007b30:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <HAL_SPI_MspInit+0xc0>)
 8007b32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b34:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007b38:	6419      	str	r1, [r3, #64]	; 0x40
 8007b3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b3c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007b40:	9103      	str	r1, [sp, #12]
 8007b42:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b44:	9204      	str	r2, [sp, #16]
 8007b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b48:	f041 0102 	orr.w	r1, r1, #2
 8007b4c:	6319      	str	r1, [r3, #48]	; 0x30
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8007b58:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007b5c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b62:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b64:	2303      	movs	r3, #3
 8007b66:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b68:	2305      	movs	r3, #5
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b6c:	a905      	add	r1, sp, #20
 8007b6e:	4806      	ldr	r0, [pc, #24]	; (8007b88 <HAL_SPI_MspInit+0xc8>)
 8007b70:	f7f9 fcf2 	bl	8001558 <HAL_GPIO_Init>
}
 8007b74:	e7b3      	b.n	8007ade <HAL_SPI_MspInit+0x1e>
 8007b76:	bf00      	nop
 8007b78:	40013000 	.word	0x40013000
 8007b7c:	40003800 	.word	0x40003800
 8007b80:	40023800 	.word	0x40023800
 8007b84:	40020000 	.word	0x40020000
 8007b88:	40020400 	.word	0x40020400

08007b8c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8007b8c:	6802      	ldr	r2, [r0, #0]
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d000      	beq.n	8007b96 <HAL_TIM_Base_MspInit+0xa>
 8007b94:	4770      	bx	lr
{
 8007b96:	b500      	push	{lr}
 8007b98:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	9101      	str	r1, [sp, #4]
 8007b9e:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8007ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba4:	f042 0210 	orr.w	r2, r2, #16
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007bb4:	460a      	mov	r2, r1
 8007bb6:	2036      	movs	r0, #54	; 0x36
 8007bb8:	f7f9 fa10 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007bbc:	2036      	movs	r0, #54	; 0x36
 8007bbe:	f7f9 fa41 	bl	8001044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007bc2:	b003      	add	sp, #12
 8007bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bc8:	40001000 	.word	0x40001000

08007bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007bcc:	b530      	push	{r4, r5, lr}
 8007bce:	b08b      	sub	sp, #44	; 0x2c
 8007bd0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	9306      	str	r3, [sp, #24]
 8007bd8:	9307      	str	r3, [sp, #28]
 8007bda:	9308      	str	r3, [sp, #32]
 8007bdc:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8007bde:	6803      	ldr	r3, [r0, #0]
 8007be0:	4a64      	ldr	r2, [pc, #400]	; (8007d74 <HAL_UART_MspInit+0x1a8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8007be6:	4a64      	ldr	r2, [pc, #400]	; (8007d78 <HAL_UART_MspInit+0x1ac>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d062      	beq.n	8007cb2 <HAL_UART_MspInit+0xe6>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007bec:	b00b      	add	sp, #44	; 0x2c
 8007bee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8007bf0:	2500      	movs	r5, #0
 8007bf2:	9501      	str	r5, [sp, #4]
 8007bf4:	4b61      	ldr	r3, [pc, #388]	; (8007d7c <HAL_UART_MspInit+0x1b0>)
 8007bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8007bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c00:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007c04:	9201      	str	r2, [sp, #4]
 8007c06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c08:	9502      	str	r5, [sp, #8]
 8007c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0c:	f042 0208 	orr.w	r2, r2, #8
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	9302      	str	r3, [sp, #8]
 8007c1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TXD_USB_Pin|RXD_USB_Pin;
 8007c1c:	2360      	movs	r3, #96	; 0x60
 8007c1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c20:	2302      	movs	r3, #2
 8007c22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c24:	2301      	movs	r3, #1
 8007c26:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007c2c:	2307      	movs	r3, #7
 8007c2e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c30:	a905      	add	r1, sp, #20
 8007c32:	4853      	ldr	r0, [pc, #332]	; (8007d80 <HAL_UART_MspInit+0x1b4>)
 8007c34:	f7f9 fc90 	bl	8001558 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007c38:	4852      	ldr	r0, [pc, #328]	; (8007d84 <HAL_UART_MspInit+0x1b8>)
 8007c3a:	4b53      	ldr	r3, [pc, #332]	; (8007d88 <HAL_UART_MspInit+0x1bc>)
 8007c3c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007c3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c42:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c44:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c46:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c4c:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c4e:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c50:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007c52:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007c54:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c56:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007c58:	f7f9 fa98 	bl	800118c <HAL_DMA_Init>
 8007c5c:	bb18      	cbnz	r0, 8007ca6 <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007c5e:	4b49      	ldr	r3, [pc, #292]	; (8007d84 <HAL_UART_MspInit+0x1b8>)
 8007c60:	6363      	str	r3, [r4, #52]	; 0x34
 8007c62:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007c64:	4849      	ldr	r0, [pc, #292]	; (8007d8c <HAL_UART_MspInit+0x1c0>)
 8007c66:	4b4a      	ldr	r3, [pc, #296]	; (8007d90 <HAL_UART_MspInit+0x1c4>)
 8007c68:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c6e:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c7c:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c7e:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c80:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007c82:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c84:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c86:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007c88:	f7f9 fa80 	bl	800118c <HAL_DMA_Init>
 8007c8c:	b970      	cbnz	r0, 8007cac <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007c8e:	4b3f      	ldr	r3, [pc, #252]	; (8007d8c <HAL_UART_MspInit+0x1c0>)
 8007c90:	6323      	str	r3, [r4, #48]	; 0x30
 8007c92:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007c94:	2200      	movs	r2, #0
 8007c96:	4611      	mov	r1, r2
 8007c98:	2026      	movs	r0, #38	; 0x26
 8007c9a:	f7f9 f99f 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007c9e:	2026      	movs	r0, #38	; 0x26
 8007ca0:	f7f9 f9d0 	bl	8001044 <HAL_NVIC_EnableIRQ>
 8007ca4:	e7a2      	b.n	8007bec <HAL_UART_MspInit+0x20>
      Error_Handler();
 8007ca6:	f7ff fed7 	bl	8007a58 <Error_Handler>
 8007caa:	e7d8      	b.n	8007c5e <HAL_UART_MspInit+0x92>
      Error_Handler();
 8007cac:	f7ff fed4 	bl	8007a58 <Error_Handler>
 8007cb0:	e7ed      	b.n	8007c8e <HAL_UART_MspInit+0xc2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	9503      	str	r5, [sp, #12]
 8007cb6:	4b31      	ldr	r3, [pc, #196]	; (8007d7c <HAL_UART_MspInit+0x1b0>)
 8007cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cba:	f042 0220 	orr.w	r2, r2, #32
 8007cbe:	645a      	str	r2, [r3, #68]	; 0x44
 8007cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc2:	f002 0220 	and.w	r2, r2, #32
 8007cc6:	9203      	str	r2, [sp, #12]
 8007cc8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cca:	9504      	str	r5, [sp, #16]
 8007ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cce:	f042 0204 	orr.w	r2, r2, #4
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TXD_CCD_Pin|RXD_CCD_Pin;
 8007cde:	23c0      	movs	r3, #192	; 0xc0
 8007ce0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cea:	2303      	movs	r3, #3
 8007cec:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007cee:	2308      	movs	r3, #8
 8007cf0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cf2:	a905      	add	r1, sp, #20
 8007cf4:	4827      	ldr	r0, [pc, #156]	; (8007d94 <HAL_UART_MspInit+0x1c8>)
 8007cf6:	f7f9 fc2f 	bl	8001558 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007cfa:	4827      	ldr	r0, [pc, #156]	; (8007d98 <HAL_UART_MspInit+0x1cc>)
 8007cfc:	4b27      	ldr	r3, [pc, #156]	; (8007d9c <HAL_UART_MspInit+0x1d0>)
 8007cfe:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007d00:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8007d04:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d06:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d08:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0e:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d10:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d12:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8007d14:	61c5      	str	r5, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007d16:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d18:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007d1a:	f7f9 fa37 	bl	800118c <HAL_DMA_Init>
 8007d1e:	bb18      	cbnz	r0, 8007d68 <HAL_UART_MspInit+0x19c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007d20:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <HAL_UART_MspInit+0x1cc>)
 8007d22:	6363      	str	r3, [r4, #52]	; 0x34
 8007d24:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007d26:	481e      	ldr	r0, [pc, #120]	; (8007da0 <HAL_UART_MspInit+0x1d4>)
 8007d28:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <HAL_UART_MspInit+0x1d8>)
 8007d2a:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007d2c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8007d30:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d32:	2340      	movs	r3, #64	; 0x40
 8007d34:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d3e:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d40:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d42:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007d44:	61c3      	str	r3, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d46:	6203      	str	r3, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d48:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007d4a:	f7f9 fa1f 	bl	800118c <HAL_DMA_Init>
 8007d4e:	b970      	cbnz	r0, 8007d6e <HAL_UART_MspInit+0x1a2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8007d50:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <HAL_UART_MspInit+0x1d4>)
 8007d52:	6323      	str	r3, [r4, #48]	; 0x30
 8007d54:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007d56:	2200      	movs	r2, #0
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2047      	movs	r0, #71	; 0x47
 8007d5c:	f7f9 f93e 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007d60:	2047      	movs	r0, #71	; 0x47
 8007d62:	f7f9 f96f 	bl	8001044 <HAL_NVIC_EnableIRQ>
}
 8007d66:	e741      	b.n	8007bec <HAL_UART_MspInit+0x20>
      Error_Handler();
 8007d68:	f7ff fe76 	bl	8007a58 <Error_Handler>
 8007d6c:	e7d8      	b.n	8007d20 <HAL_UART_MspInit+0x154>
      Error_Handler();
 8007d6e:	f7ff fe73 	bl	8007a58 <Error_Handler>
 8007d72:	e7ed      	b.n	8007d50 <HAL_UART_MspInit+0x184>
 8007d74:	40004400 	.word	0x40004400
 8007d78:	40011400 	.word	0x40011400
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	40020c00 	.word	0x40020c00
 8007d84:	200006ec 	.word	0x200006ec
 8007d88:	40026088 	.word	0x40026088
 8007d8c:	20000c80 	.word	0x20000c80
 8007d90:	400260a0 	.word	0x400260a0
 8007d94:	40020800 	.word	0x40020800
 8007d98:	20000750 	.word	0x20000750
 8007d9c:	40026428 	.word	0x40026428
 8007da0:	20000c20 	.word	0x20000c20
 8007da4:	400264a0 	.word	0x400264a0

08007da8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007da8:	4770      	bx	lr

08007daa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007daa:	e7fe      	b.n	8007daa <HardFault_Handler>

08007dac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007dac:	e7fe      	b.n	8007dac <MemManage_Handler>

08007dae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dae:	e7fe      	b.n	8007dae <BusFault_Handler>

08007db0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007db0:	e7fe      	b.n	8007db0 <UsageFault_Handler>

08007db2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007db2:	4770      	bx	lr

08007db4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007db4:	4770      	bx	lr

08007db6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007db6:	4770      	bx	lr

08007db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007dba:	f7f9 f8d7 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007dbe:	bd08      	pop	{r3, pc}

08007dc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007dc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007dc2:	4802      	ldr	r0, [pc, #8]	; (8007dcc <DMA1_Stream5_IRQHandler+0xc>)
 8007dc4:	f7f9 fada 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007dc8:	bd08      	pop	{r3, pc}
 8007dca:	bf00      	nop
 8007dcc:	200006ec 	.word	0x200006ec

08007dd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007dd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007dd2:	4802      	ldr	r0, [pc, #8]	; (8007ddc <DMA1_Stream6_IRQHandler+0xc>)
 8007dd4:	f7f9 fad2 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007dd8:	bd08      	pop	{r3, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000c80 	.word	0x20000c80

08007de0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007de0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007de2:	4802      	ldr	r0, [pc, #8]	; (8007dec <RTC_Alarm_IRQHandler+0xc>)
 8007de4:	f7fa f97a 	bl	80020dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007de8:	bd08      	pop	{r3, pc}
 8007dea:	bf00      	nop
 8007dec:	200010e8 	.word	0x200010e8

08007df0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007df0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007df2:	4802      	ldr	r0, [pc, #8]	; (8007dfc <TIM6_DAC_IRQHandler+0xc>)
 8007df4:	f7fb f80c 	bl	8002e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007df8:	bd08      	pop	{r3, pc}
 8007dfa:	bf00      	nop
 8007dfc:	2000110c 	.word	0x2000110c

08007e00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007e00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007e02:	4802      	ldr	r0, [pc, #8]	; (8007e0c <DMA2_Stream1_IRQHandler+0xc>)
 8007e04:	f7f9 faba 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007e08:	bd08      	pop	{r3, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000750 	.word	0x20000750

08007e10 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007e12:	4802      	ldr	r0, [pc, #8]	; (8007e1c <DMA2_Stream6_IRQHandler+0xc>)
 8007e14:	f7f9 fab2 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007e18:	bd08      	pop	{r3, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000c20 	.word	0x20000c20

08007e20 <USER_UART_IRQHandler>:
  /* USER CODE END USART6_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e20:	b500      	push	{lr}
 8007e22:	b085      	sub	sp, #20
 8007e24:	9001      	str	r0, [sp, #4]
	   if(USART6 == huart6.Instance)                                   //Determine whether it is serial port 1
 8007e26:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <USER_UART_IRQHandler+0x5c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a15      	ldr	r2, [pc, #84]	; (8007e80 <USER_UART_IRQHandler+0x60>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d007      	beq.n	8007e40 <USER_UART_IRQHandler+0x20>
	            //printf("\r\nUART1 Idle IQR Detected\r\n");
	            USER_UART6_IDLE_Callback(&huart);                          //Call interrupt handler
	        }
	    }

	   if(USART2 == huart2.Instance)                                   //Determine whether it is serial port 1
 8007e30:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <USER_UART_IRQHandler+0x64>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <USER_UART_IRQHandler+0x68>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d011      	beq.n	8007e5e <USER_UART_IRQHandler+0x3e>
	            __HAL_UART_CLEAR_IDLEFLAG(&huart2);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
	            //printf("\r\nUART1 Idle IQR Detected\r\n");
	            USER_UART2_IDLE_Callback(&huart);                          //Call interrupt handler
	        }
	    }
}
 8007e3a:	b005      	add	sp, #20
 8007e3c:	f85d fb04 	ldr.w	pc, [sp], #4
	        if(RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	f012 0f10 	tst.w	r2, #16
 8007e46:	d0f3      	beq.n	8007e30 <USER_UART_IRQHandler+0x10>
	            __HAL_UART_CLEAR_IDLEFLAG(&huart6);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	9202      	str	r2, [sp, #8]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	9202      	str	r2, [sp, #8]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	9302      	str	r3, [sp, #8]
 8007e54:	9b02      	ldr	r3, [sp, #8]
	            USER_UART6_IDLE_Callback(&huart);                          //Call interrupt handler
 8007e56:	a801      	add	r0, sp, #4
 8007e58:	f7fe feec 	bl	8006c34 <USER_UART6_IDLE_Callback>
 8007e5c:	e7e8      	b.n	8007e30 <USER_UART_IRQHandler+0x10>
	        if(RESET != __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	f012 0f10 	tst.w	r2, #16
 8007e64:	d0e9      	beq.n	8007e3a <USER_UART_IRQHandler+0x1a>
	            __HAL_UART_CLEAR_IDLEFLAG(&huart2);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8007e66:	2200      	movs	r2, #0
 8007e68:	9203      	str	r2, [sp, #12]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	9203      	str	r2, [sp, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	9b03      	ldr	r3, [sp, #12]
	            USER_UART2_IDLE_Callback(&huart);                          //Call interrupt handler
 8007e74:	a801      	add	r0, sp, #4
 8007e76:	f7fe fe33 	bl	8006ae0 <USER_UART2_IDLE_Callback>
}
 8007e7a:	e7de      	b.n	8007e3a <USER_UART_IRQHandler+0x1a>
 8007e7c:	20001684 	.word	0x20001684
 8007e80:	40011400 	.word	0x40011400
 8007e84:	20001720 	.word	0x20001720
 8007e88:	40004400 	.word	0x40004400

08007e8c <USART2_IRQHandler>:
{
 8007e8c:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart2);
 8007e8e:	4c04      	ldr	r4, [pc, #16]	; (8007ea0 <USART2_IRQHandler+0x14>)
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7fb fc59 	bl	8003748 <HAL_UART_IRQHandler>
  USER_UART_IRQHandler(&huart2);
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7ff ffc2 	bl	8007e20 <USER_UART_IRQHandler>
}
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20001720 	.word	0x20001720

08007ea4 <USART6_IRQHandler>:
{
 8007ea4:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart6);
 8007ea6:	4c04      	ldr	r4, [pc, #16]	; (8007eb8 <USART6_IRQHandler+0x14>)
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f7fb fc4d 	bl	8003748 <HAL_UART_IRQHandler>
  USER_UART_IRQHandler(&huart6);
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7ff ffb6 	bl	8007e20 <USER_UART_IRQHandler>
}
 8007eb4:	bd10      	pop	{r4, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20001684 	.word	0x20001684

08007ebc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	4770      	bx	lr

08007ec0 <_kill>:

int _kill(int pid, int sig)
{
 8007ec0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007ec2:	f000 f88b 	bl	8007fdc <__errno>
 8007ec6:	2316      	movs	r3, #22
 8007ec8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ece:	bd08      	pop	{r3, pc}

08007ed0 <_exit>:

void _exit (int status)
{
 8007ed0:	b508      	push	{r3, lr}
	_kill(status, -1);
 8007ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed6:	f7ff fff3 	bl	8007ec0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007eda:	e7fe      	b.n	8007eda <_exit+0xa>

08007edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	42b5      	cmp	r5, r6
 8007ee6:	da07      	bge.n	8007ef8 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8007ee8:	f3af 8000 	nop.w
 8007eec:	4621      	mov	r1, r4
 8007eee:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ef2:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	e7f5      	b.n	8007ee4 <_read+0x8>
	}

return len;
}
 8007ef8:	4630      	mov	r0, r6
 8007efa:	bd70      	pop	{r4, r5, r6, pc}

08007efc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	460c      	mov	r4, r1
 8007f00:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f02:	2500      	movs	r5, #0
 8007f04:	42b5      	cmp	r5, r6
 8007f06:	da05      	bge.n	8007f14 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8007f08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f0c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f10:	3501      	adds	r5, #1
 8007f12:	e7f7      	b.n	8007f04 <_write+0x8>
	}
	return len;
}
 8007f14:	4630      	mov	r0, r6
 8007f16:	bd70      	pop	{r4, r5, r6, pc}

08007f18 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007f18:	b508      	push	{r3, lr}
 8007f1a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007f1c:	4a0b      	ldr	r2, [pc, #44]	; (8007f4c <_sbrk+0x34>)
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	b142      	cbz	r2, 8007f34 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007f22:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <_sbrk+0x34>)
 8007f24:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007f26:	4403      	add	r3, r0
 8007f28:	466a      	mov	r2, sp
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d806      	bhi.n	8007f3c <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007f2e:	4a07      	ldr	r2, [pc, #28]	; (8007f4c <_sbrk+0x34>)
 8007f30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007f32:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007f34:	4a05      	ldr	r2, [pc, #20]	; (8007f4c <_sbrk+0x34>)
 8007f36:	4906      	ldr	r1, [pc, #24]	; (8007f50 <_sbrk+0x38>)
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	e7f2      	b.n	8007f22 <_sbrk+0xa>
		errno = ENOMEM;
 8007f3c:	f000 f84e 	bl	8007fdc <__errno>
 8007f40:	230c      	movs	r3, #12
 8007f42:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e7f3      	b.n	8007f32 <_sbrk+0x1a>
 8007f4a:	bf00      	nop
 8007f4c:	200006b0 	.word	0x200006b0
 8007f50:	20001788 	.word	0x20001788

08007f54 <_close>:

int _close(int file)
{
	return -1;
}
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295
 8007f58:	4770      	bx	lr

08007f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f5e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007f60:	2000      	movs	r0, #0
 8007f62:	4770      	bx	lr

08007f64 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007f64:	2001      	movs	r0, #1
 8007f66:	4770      	bx	lr

08007f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007f68:	2000      	movs	r0, #0
 8007f6a:	4770      	bx	lr

08007f6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <SystemInit+0x18>)
 8007f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	e000ed00 	.word	0xe000ed00

08007f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8007f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007fc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007f8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007f8e:	e003      	b.n	8007f98 <LoopCopyDataInit>

08007f90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007f92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007f94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007f96:	3104      	adds	r1, #4

08007f98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007f98:	480b      	ldr	r0, [pc, #44]	; (8007fc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007f9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007f9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007fa0:	d3f6      	bcc.n	8007f90 <CopyDataInit>
  ldr  r2, =_sbss
 8007fa2:	4a0b      	ldr	r2, [pc, #44]	; (8007fd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007fa4:	e002      	b.n	8007fac <LoopFillZerobss>

08007fa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007fa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007fa8:	f842 3b04 	str.w	r3, [r2], #4

08007fac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007fae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007fb0:	d3f9      	bcc.n	8007fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007fb2:	f7ff ffdb 	bl	8007f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fb6:	f000 f817 	bl	8007fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007fba:	f7fe ffe5 	bl	8006f88 <main>
  bx  lr    
 8007fbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007fc0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007fc4:	08010614 	.word	0x08010614
  ldr  r0, =_sdata
 8007fc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007fcc:	20000660 	.word	0x20000660
  ldr  r2, =_sbss
 8007fd0:	20000660 	.word	0x20000660
  ldr  r3, = _ebss
 8007fd4:	20001784 	.word	0x20001784

08007fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007fd8:	e7fe      	b.n	8007fd8 <ADC_IRQHandler>
	...

08007fdc <__errno>:
 8007fdc:	4b01      	ldr	r3, [pc, #4]	; (8007fe4 <__errno+0x8>)
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000490 	.word	0x20000490

08007fe8 <__libc_init_array>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4d0d      	ldr	r5, [pc, #52]	; (8008020 <__libc_init_array+0x38>)
 8007fec:	4c0d      	ldr	r4, [pc, #52]	; (8008024 <__libc_init_array+0x3c>)
 8007fee:	1b64      	subs	r4, r4, r5
 8007ff0:	10a4      	asrs	r4, r4, #2
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	42a6      	cmp	r6, r4
 8007ff6:	d109      	bne.n	800800c <__libc_init_array+0x24>
 8007ff8:	4d0b      	ldr	r5, [pc, #44]	; (8008028 <__libc_init_array+0x40>)
 8007ffa:	4c0c      	ldr	r4, [pc, #48]	; (800802c <__libc_init_array+0x44>)
 8007ffc:	f002 feb6 	bl	800ad6c <_init>
 8008000:	1b64      	subs	r4, r4, r5
 8008002:	10a4      	asrs	r4, r4, #2
 8008004:	2600      	movs	r6, #0
 8008006:	42a6      	cmp	r6, r4
 8008008:	d105      	bne.n	8008016 <__libc_init_array+0x2e>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008010:	4798      	blx	r3
 8008012:	3601      	adds	r6, #1
 8008014:	e7ee      	b.n	8007ff4 <__libc_init_array+0xc>
 8008016:	f855 3b04 	ldr.w	r3, [r5], #4
 800801a:	4798      	blx	r3
 800801c:	3601      	adds	r6, #1
 800801e:	e7f2      	b.n	8008006 <__libc_init_array+0x1e>
 8008020:	0801060c 	.word	0x0801060c
 8008024:	0801060c 	.word	0x0801060c
 8008028:	0801060c 	.word	0x0801060c
 800802c:	08010610 	.word	0x08010610

08008030 <memset>:
 8008030:	4402      	add	r2, r0
 8008032:	4603      	mov	r3, r0
 8008034:	4293      	cmp	r3, r2
 8008036:	d100      	bne.n	800803a <memset+0xa>
 8008038:	4770      	bx	lr
 800803a:	f803 1b01 	strb.w	r1, [r3], #1
 800803e:	e7f9      	b.n	8008034 <memset+0x4>

08008040 <__cvt>:
 8008040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008044:	ec55 4b10 	vmov	r4, r5, d0
 8008048:	2d00      	cmp	r5, #0
 800804a:	460e      	mov	r6, r1
 800804c:	4619      	mov	r1, r3
 800804e:	462b      	mov	r3, r5
 8008050:	bfbb      	ittet	lt
 8008052:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008056:	461d      	movlt	r5, r3
 8008058:	2300      	movge	r3, #0
 800805a:	232d      	movlt	r3, #45	; 0x2d
 800805c:	700b      	strb	r3, [r1, #0]
 800805e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008060:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008064:	4691      	mov	r9, r2
 8008066:	f023 0820 	bic.w	r8, r3, #32
 800806a:	bfbc      	itt	lt
 800806c:	4622      	movlt	r2, r4
 800806e:	4614      	movlt	r4, r2
 8008070:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008074:	d005      	beq.n	8008082 <__cvt+0x42>
 8008076:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800807a:	d100      	bne.n	800807e <__cvt+0x3e>
 800807c:	3601      	adds	r6, #1
 800807e:	2102      	movs	r1, #2
 8008080:	e000      	b.n	8008084 <__cvt+0x44>
 8008082:	2103      	movs	r1, #3
 8008084:	ab03      	add	r3, sp, #12
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	ab02      	add	r3, sp, #8
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	ec45 4b10 	vmov	d0, r4, r5
 8008090:	4653      	mov	r3, sl
 8008092:	4632      	mov	r2, r6
 8008094:	f000 fcec 	bl	8008a70 <_dtoa_r>
 8008098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800809c:	4607      	mov	r7, r0
 800809e:	d102      	bne.n	80080a6 <__cvt+0x66>
 80080a0:	f019 0f01 	tst.w	r9, #1
 80080a4:	d022      	beq.n	80080ec <__cvt+0xac>
 80080a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080aa:	eb07 0906 	add.w	r9, r7, r6
 80080ae:	d110      	bne.n	80080d2 <__cvt+0x92>
 80080b0:	783b      	ldrb	r3, [r7, #0]
 80080b2:	2b30      	cmp	r3, #48	; 0x30
 80080b4:	d10a      	bne.n	80080cc <__cvt+0x8c>
 80080b6:	2200      	movs	r2, #0
 80080b8:	2300      	movs	r3, #0
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80080c2:	b918      	cbnz	r0, 80080cc <__cvt+0x8c>
 80080c4:	f1c6 0601 	rsb	r6, r6, #1
 80080c8:	f8ca 6000 	str.w	r6, [sl]
 80080cc:	f8da 3000 	ldr.w	r3, [sl]
 80080d0:	4499      	add	r9, r3
 80080d2:	2200      	movs	r2, #0
 80080d4:	2300      	movs	r3, #0
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	f7f8 fd1d 	bl	8000b18 <__aeabi_dcmpeq>
 80080de:	b108      	cbz	r0, 80080e4 <__cvt+0xa4>
 80080e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80080e4:	2230      	movs	r2, #48	; 0x30
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	454b      	cmp	r3, r9
 80080ea:	d307      	bcc.n	80080fc <__cvt+0xbc>
 80080ec:	9b03      	ldr	r3, [sp, #12]
 80080ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080f0:	1bdb      	subs	r3, r3, r7
 80080f2:	4638      	mov	r0, r7
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	b004      	add	sp, #16
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	1c59      	adds	r1, r3, #1
 80080fe:	9103      	str	r1, [sp, #12]
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	e7f0      	b.n	80080e6 <__cvt+0xa6>

08008104 <__exponent>:
 8008104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008106:	4603      	mov	r3, r0
 8008108:	2900      	cmp	r1, #0
 800810a:	bfb8      	it	lt
 800810c:	4249      	neglt	r1, r1
 800810e:	f803 2b02 	strb.w	r2, [r3], #2
 8008112:	bfb4      	ite	lt
 8008114:	222d      	movlt	r2, #45	; 0x2d
 8008116:	222b      	movge	r2, #43	; 0x2b
 8008118:	2909      	cmp	r1, #9
 800811a:	7042      	strb	r2, [r0, #1]
 800811c:	dd2a      	ble.n	8008174 <__exponent+0x70>
 800811e:	f10d 0407 	add.w	r4, sp, #7
 8008122:	46a4      	mov	ip, r4
 8008124:	270a      	movs	r7, #10
 8008126:	46a6      	mov	lr, r4
 8008128:	460a      	mov	r2, r1
 800812a:	fb91 f6f7 	sdiv	r6, r1, r7
 800812e:	fb07 1516 	mls	r5, r7, r6, r1
 8008132:	3530      	adds	r5, #48	; 0x30
 8008134:	2a63      	cmp	r2, #99	; 0x63
 8008136:	f104 34ff 	add.w	r4, r4, #4294967295
 800813a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800813e:	4631      	mov	r1, r6
 8008140:	dcf1      	bgt.n	8008126 <__exponent+0x22>
 8008142:	3130      	adds	r1, #48	; 0x30
 8008144:	f1ae 0502 	sub.w	r5, lr, #2
 8008148:	f804 1c01 	strb.w	r1, [r4, #-1]
 800814c:	1c44      	adds	r4, r0, #1
 800814e:	4629      	mov	r1, r5
 8008150:	4561      	cmp	r1, ip
 8008152:	d30a      	bcc.n	800816a <__exponent+0x66>
 8008154:	f10d 0209 	add.w	r2, sp, #9
 8008158:	eba2 020e 	sub.w	r2, r2, lr
 800815c:	4565      	cmp	r5, ip
 800815e:	bf88      	it	hi
 8008160:	2200      	movhi	r2, #0
 8008162:	4413      	add	r3, r2
 8008164:	1a18      	subs	r0, r3, r0
 8008166:	b003      	add	sp, #12
 8008168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800816e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008172:	e7ed      	b.n	8008150 <__exponent+0x4c>
 8008174:	2330      	movs	r3, #48	; 0x30
 8008176:	3130      	adds	r1, #48	; 0x30
 8008178:	7083      	strb	r3, [r0, #2]
 800817a:	70c1      	strb	r1, [r0, #3]
 800817c:	1d03      	adds	r3, r0, #4
 800817e:	e7f1      	b.n	8008164 <__exponent+0x60>

08008180 <_printf_float>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	ed2d 8b02 	vpush	{d8}
 8008188:	b08d      	sub	sp, #52	; 0x34
 800818a:	460c      	mov	r4, r1
 800818c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008190:	4616      	mov	r6, r2
 8008192:	461f      	mov	r7, r3
 8008194:	4605      	mov	r5, r0
 8008196:	f001 fa57 	bl	8009648 <_localeconv_r>
 800819a:	f8d0 a000 	ldr.w	sl, [r0]
 800819e:	4650      	mov	r0, sl
 80081a0:	f7f8 f83e 	bl	8000220 <strlen>
 80081a4:	2300      	movs	r3, #0
 80081a6:	930a      	str	r3, [sp, #40]	; 0x28
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	f8d8 3000 	ldr.w	r3, [r8]
 80081b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081b4:	3307      	adds	r3, #7
 80081b6:	f023 0307 	bic.w	r3, r3, #7
 80081ba:	f103 0208 	add.w	r2, r3, #8
 80081be:	f8c8 2000 	str.w	r2, [r8]
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081d2:	9307      	str	r3, [sp, #28]
 80081d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80081d8:	ee08 0a10 	vmov	s16, r0
 80081dc:	4b9f      	ldr	r3, [pc, #636]	; (800845c <_printf_float+0x2dc>)
 80081de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295
 80081e6:	f7f8 fcc9 	bl	8000b7c <__aeabi_dcmpun>
 80081ea:	bb88      	cbnz	r0, 8008250 <_printf_float+0xd0>
 80081ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081f0:	4b9a      	ldr	r3, [pc, #616]	; (800845c <_printf_float+0x2dc>)
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	f7f8 fca3 	bl	8000b40 <__aeabi_dcmple>
 80081fa:	bb48      	cbnz	r0, 8008250 <_printf_float+0xd0>
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f8 fc92 	bl	8000b2c <__aeabi_dcmplt>
 8008208:	b110      	cbz	r0, 8008210 <_printf_float+0x90>
 800820a:	232d      	movs	r3, #45	; 0x2d
 800820c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008210:	4b93      	ldr	r3, [pc, #588]	; (8008460 <_printf_float+0x2e0>)
 8008212:	4894      	ldr	r0, [pc, #592]	; (8008464 <_printf_float+0x2e4>)
 8008214:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008218:	bf94      	ite	ls
 800821a:	4698      	movls	r8, r3
 800821c:	4680      	movhi	r8, r0
 800821e:	2303      	movs	r3, #3
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	9b05      	ldr	r3, [sp, #20]
 8008224:	f023 0204 	bic.w	r2, r3, #4
 8008228:	6022      	str	r2, [r4, #0]
 800822a:	f04f 0900 	mov.w	r9, #0
 800822e:	9700      	str	r7, [sp, #0]
 8008230:	4633      	mov	r3, r6
 8008232:	aa0b      	add	r2, sp, #44	; 0x2c
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f9d8 	bl	80085ec <_printf_common>
 800823c:	3001      	adds	r0, #1
 800823e:	f040 8090 	bne.w	8008362 <_printf_float+0x1e2>
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	b00d      	add	sp, #52	; 0x34
 8008248:	ecbd 8b02 	vpop	{d8}
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	4640      	mov	r0, r8
 8008256:	4649      	mov	r1, r9
 8008258:	f7f8 fc90 	bl	8000b7c <__aeabi_dcmpun>
 800825c:	b140      	cbz	r0, 8008270 <_printf_float+0xf0>
 800825e:	464b      	mov	r3, r9
 8008260:	2b00      	cmp	r3, #0
 8008262:	bfbc      	itt	lt
 8008264:	232d      	movlt	r3, #45	; 0x2d
 8008266:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800826a:	487f      	ldr	r0, [pc, #508]	; (8008468 <_printf_float+0x2e8>)
 800826c:	4b7f      	ldr	r3, [pc, #508]	; (800846c <_printf_float+0x2ec>)
 800826e:	e7d1      	b.n	8008214 <_printf_float+0x94>
 8008270:	6863      	ldr	r3, [r4, #4]
 8008272:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008276:	9206      	str	r2, [sp, #24]
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	d13f      	bne.n	80082fc <_printf_float+0x17c>
 800827c:	2306      	movs	r3, #6
 800827e:	6063      	str	r3, [r4, #4]
 8008280:	9b05      	ldr	r3, [sp, #20]
 8008282:	6861      	ldr	r1, [r4, #4]
 8008284:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008288:	2300      	movs	r3, #0
 800828a:	9303      	str	r3, [sp, #12]
 800828c:	ab0a      	add	r3, sp, #40	; 0x28
 800828e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008292:	ab09      	add	r3, sp, #36	; 0x24
 8008294:	ec49 8b10 	vmov	d0, r8, r9
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	6022      	str	r2, [r4, #0]
 800829c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082a0:	4628      	mov	r0, r5
 80082a2:	f7ff fecd 	bl	8008040 <__cvt>
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082aa:	2b47      	cmp	r3, #71	; 0x47
 80082ac:	4680      	mov	r8, r0
 80082ae:	d108      	bne.n	80082c2 <_printf_float+0x142>
 80082b0:	1cc8      	adds	r0, r1, #3
 80082b2:	db02      	blt.n	80082ba <_printf_float+0x13a>
 80082b4:	6863      	ldr	r3, [r4, #4]
 80082b6:	4299      	cmp	r1, r3
 80082b8:	dd41      	ble.n	800833e <_printf_float+0x1be>
 80082ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80082be:	fa5f fb8b 	uxtb.w	fp, fp
 80082c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082c6:	d820      	bhi.n	800830a <_printf_float+0x18a>
 80082c8:	3901      	subs	r1, #1
 80082ca:	465a      	mov	r2, fp
 80082cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082d0:	9109      	str	r1, [sp, #36]	; 0x24
 80082d2:	f7ff ff17 	bl	8008104 <__exponent>
 80082d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082d8:	1813      	adds	r3, r2, r0
 80082da:	2a01      	cmp	r2, #1
 80082dc:	4681      	mov	r9, r0
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	dc02      	bgt.n	80082e8 <_printf_float+0x168>
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	07d2      	lsls	r2, r2, #31
 80082e6:	d501      	bpl.n	80082ec <_printf_float+0x16c>
 80082e8:	3301      	adds	r3, #1
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d09c      	beq.n	800822e <_printf_float+0xae>
 80082f4:	232d      	movs	r3, #45	; 0x2d
 80082f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082fa:	e798      	b.n	800822e <_printf_float+0xae>
 80082fc:	9a06      	ldr	r2, [sp, #24]
 80082fe:	2a47      	cmp	r2, #71	; 0x47
 8008300:	d1be      	bne.n	8008280 <_printf_float+0x100>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1bc      	bne.n	8008280 <_printf_float+0x100>
 8008306:	2301      	movs	r3, #1
 8008308:	e7b9      	b.n	800827e <_printf_float+0xfe>
 800830a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800830e:	d118      	bne.n	8008342 <_printf_float+0x1c2>
 8008310:	2900      	cmp	r1, #0
 8008312:	6863      	ldr	r3, [r4, #4]
 8008314:	dd0b      	ble.n	800832e <_printf_float+0x1ae>
 8008316:	6121      	str	r1, [r4, #16]
 8008318:	b913      	cbnz	r3, 8008320 <_printf_float+0x1a0>
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	07d0      	lsls	r0, r2, #31
 800831e:	d502      	bpl.n	8008326 <_printf_float+0x1a6>
 8008320:	3301      	adds	r3, #1
 8008322:	440b      	add	r3, r1
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	65a1      	str	r1, [r4, #88]	; 0x58
 8008328:	f04f 0900 	mov.w	r9, #0
 800832c:	e7de      	b.n	80082ec <_printf_float+0x16c>
 800832e:	b913      	cbnz	r3, 8008336 <_printf_float+0x1b6>
 8008330:	6822      	ldr	r2, [r4, #0]
 8008332:	07d2      	lsls	r2, r2, #31
 8008334:	d501      	bpl.n	800833a <_printf_float+0x1ba>
 8008336:	3302      	adds	r3, #2
 8008338:	e7f4      	b.n	8008324 <_printf_float+0x1a4>
 800833a:	2301      	movs	r3, #1
 800833c:	e7f2      	b.n	8008324 <_printf_float+0x1a4>
 800833e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008344:	4299      	cmp	r1, r3
 8008346:	db05      	blt.n	8008354 <_printf_float+0x1d4>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	6121      	str	r1, [r4, #16]
 800834c:	07d8      	lsls	r0, r3, #31
 800834e:	d5ea      	bpl.n	8008326 <_printf_float+0x1a6>
 8008350:	1c4b      	adds	r3, r1, #1
 8008352:	e7e7      	b.n	8008324 <_printf_float+0x1a4>
 8008354:	2900      	cmp	r1, #0
 8008356:	bfd4      	ite	le
 8008358:	f1c1 0202 	rsble	r2, r1, #2
 800835c:	2201      	movgt	r2, #1
 800835e:	4413      	add	r3, r2
 8008360:	e7e0      	b.n	8008324 <_printf_float+0x1a4>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	055a      	lsls	r2, r3, #21
 8008366:	d407      	bmi.n	8008378 <_printf_float+0x1f8>
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	4642      	mov	r2, r8
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	d12c      	bne.n	80083d0 <_printf_float+0x250>
 8008376:	e764      	b.n	8008242 <_printf_float+0xc2>
 8008378:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800837c:	f240 80e0 	bls.w	8008540 <_printf_float+0x3c0>
 8008380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008384:	2200      	movs	r2, #0
 8008386:	2300      	movs	r3, #0
 8008388:	f7f8 fbc6 	bl	8000b18 <__aeabi_dcmpeq>
 800838c:	2800      	cmp	r0, #0
 800838e:	d034      	beq.n	80083fa <_printf_float+0x27a>
 8008390:	4a37      	ldr	r2, [pc, #220]	; (8008470 <_printf_float+0x2f0>)
 8008392:	2301      	movs	r3, #1
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af51 	beq.w	8008242 <_printf_float+0xc2>
 80083a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a4:	429a      	cmp	r2, r3
 80083a6:	db02      	blt.n	80083ae <_printf_float+0x22e>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	07d8      	lsls	r0, r3, #31
 80083ac:	d510      	bpl.n	80083d0 <_printf_float+0x250>
 80083ae:	ee18 3a10 	vmov	r3, s16
 80083b2:	4652      	mov	r2, sl
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	f43f af41 	beq.w	8008242 <_printf_float+0xc2>
 80083c0:	f04f 0800 	mov.w	r8, #0
 80083c4:	f104 091a 	add.w	r9, r4, #26
 80083c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ca:	3b01      	subs	r3, #1
 80083cc:	4543      	cmp	r3, r8
 80083ce:	dc09      	bgt.n	80083e4 <_printf_float+0x264>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	079b      	lsls	r3, r3, #30
 80083d4:	f100 8105 	bmi.w	80085e2 <_printf_float+0x462>
 80083d8:	68e0      	ldr	r0, [r4, #12]
 80083da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083dc:	4298      	cmp	r0, r3
 80083de:	bfb8      	it	lt
 80083e0:	4618      	movlt	r0, r3
 80083e2:	e730      	b.n	8008246 <_printf_float+0xc6>
 80083e4:	2301      	movs	r3, #1
 80083e6:	464a      	mov	r2, r9
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	f43f af27 	beq.w	8008242 <_printf_float+0xc2>
 80083f4:	f108 0801 	add.w	r8, r8, #1
 80083f8:	e7e6      	b.n	80083c8 <_printf_float+0x248>
 80083fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dc39      	bgt.n	8008474 <_printf_float+0x2f4>
 8008400:	4a1b      	ldr	r2, [pc, #108]	; (8008470 <_printf_float+0x2f0>)
 8008402:	2301      	movs	r3, #1
 8008404:	4631      	mov	r1, r6
 8008406:	4628      	mov	r0, r5
 8008408:	47b8      	blx	r7
 800840a:	3001      	adds	r0, #1
 800840c:	f43f af19 	beq.w	8008242 <_printf_float+0xc2>
 8008410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008414:	4313      	orrs	r3, r2
 8008416:	d102      	bne.n	800841e <_printf_float+0x29e>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	d5d8      	bpl.n	80083d0 <_printf_float+0x250>
 800841e:	ee18 3a10 	vmov	r3, s16
 8008422:	4652      	mov	r2, sl
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	47b8      	blx	r7
 800842a:	3001      	adds	r0, #1
 800842c:	f43f af09 	beq.w	8008242 <_printf_float+0xc2>
 8008430:	f04f 0900 	mov.w	r9, #0
 8008434:	f104 0a1a 	add.w	sl, r4, #26
 8008438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843a:	425b      	negs	r3, r3
 800843c:	454b      	cmp	r3, r9
 800843e:	dc01      	bgt.n	8008444 <_printf_float+0x2c4>
 8008440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008442:	e792      	b.n	800836a <_printf_float+0x1ea>
 8008444:	2301      	movs	r3, #1
 8008446:	4652      	mov	r2, sl
 8008448:	4631      	mov	r1, r6
 800844a:	4628      	mov	r0, r5
 800844c:	47b8      	blx	r7
 800844e:	3001      	adds	r0, #1
 8008450:	f43f aef7 	beq.w	8008242 <_printf_float+0xc2>
 8008454:	f109 0901 	add.w	r9, r9, #1
 8008458:	e7ee      	b.n	8008438 <_printf_float+0x2b8>
 800845a:	bf00      	nop
 800845c:	7fefffff 	.word	0x7fefffff
 8008460:	08010224 	.word	0x08010224
 8008464:	08010228 	.word	0x08010228
 8008468:	08010230 	.word	0x08010230
 800846c:	0801022c 	.word	0x0801022c
 8008470:	08010234 	.word	0x08010234
 8008474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008478:	429a      	cmp	r2, r3
 800847a:	bfa8      	it	ge
 800847c:	461a      	movge	r2, r3
 800847e:	2a00      	cmp	r2, #0
 8008480:	4691      	mov	r9, r2
 8008482:	dc37      	bgt.n	80084f4 <_printf_float+0x374>
 8008484:	f04f 0b00 	mov.w	fp, #0
 8008488:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800848c:	f104 021a 	add.w	r2, r4, #26
 8008490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	eba3 0309 	sub.w	r3, r3, r9
 8008498:	455b      	cmp	r3, fp
 800849a:	dc33      	bgt.n	8008504 <_printf_float+0x384>
 800849c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a0:	429a      	cmp	r2, r3
 80084a2:	db3b      	blt.n	800851c <_printf_float+0x39c>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	07da      	lsls	r2, r3, #31
 80084a8:	d438      	bmi.n	800851c <_printf_float+0x39c>
 80084aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ac:	9b05      	ldr	r3, [sp, #20]
 80084ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	eba2 0901 	sub.w	r9, r2, r1
 80084b6:	4599      	cmp	r9, r3
 80084b8:	bfa8      	it	ge
 80084ba:	4699      	movge	r9, r3
 80084bc:	f1b9 0f00 	cmp.w	r9, #0
 80084c0:	dc35      	bgt.n	800852e <_printf_float+0x3ae>
 80084c2:	f04f 0800 	mov.w	r8, #0
 80084c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ca:	f104 0a1a 	add.w	sl, r4, #26
 80084ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	eba3 0309 	sub.w	r3, r3, r9
 80084d8:	4543      	cmp	r3, r8
 80084da:	f77f af79 	ble.w	80083d0 <_printf_float+0x250>
 80084de:	2301      	movs	r3, #1
 80084e0:	4652      	mov	r2, sl
 80084e2:	4631      	mov	r1, r6
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b8      	blx	r7
 80084e8:	3001      	adds	r0, #1
 80084ea:	f43f aeaa 	beq.w	8008242 <_printf_float+0xc2>
 80084ee:	f108 0801 	add.w	r8, r8, #1
 80084f2:	e7ec      	b.n	80084ce <_printf_float+0x34e>
 80084f4:	4613      	mov	r3, r2
 80084f6:	4631      	mov	r1, r6
 80084f8:	4642      	mov	r2, r8
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	d1c0      	bne.n	8008484 <_printf_float+0x304>
 8008502:	e69e      	b.n	8008242 <_printf_float+0xc2>
 8008504:	2301      	movs	r3, #1
 8008506:	4631      	mov	r1, r6
 8008508:	4628      	mov	r0, r5
 800850a:	9205      	str	r2, [sp, #20]
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f ae97 	beq.w	8008242 <_printf_float+0xc2>
 8008514:	9a05      	ldr	r2, [sp, #20]
 8008516:	f10b 0b01 	add.w	fp, fp, #1
 800851a:	e7b9      	b.n	8008490 <_printf_float+0x310>
 800851c:	ee18 3a10 	vmov	r3, s16
 8008520:	4652      	mov	r2, sl
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	47b8      	blx	r7
 8008528:	3001      	adds	r0, #1
 800852a:	d1be      	bne.n	80084aa <_printf_float+0x32a>
 800852c:	e689      	b.n	8008242 <_printf_float+0xc2>
 800852e:	9a05      	ldr	r2, [sp, #20]
 8008530:	464b      	mov	r3, r9
 8008532:	4442      	add	r2, r8
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	d1c1      	bne.n	80084c2 <_printf_float+0x342>
 800853e:	e680      	b.n	8008242 <_printf_float+0xc2>
 8008540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008542:	2a01      	cmp	r2, #1
 8008544:	dc01      	bgt.n	800854a <_printf_float+0x3ca>
 8008546:	07db      	lsls	r3, r3, #31
 8008548:	d538      	bpl.n	80085bc <_printf_float+0x43c>
 800854a:	2301      	movs	r3, #1
 800854c:	4642      	mov	r2, r8
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	47b8      	blx	r7
 8008554:	3001      	adds	r0, #1
 8008556:	f43f ae74 	beq.w	8008242 <_printf_float+0xc2>
 800855a:	ee18 3a10 	vmov	r3, s16
 800855e:	4652      	mov	r2, sl
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f ae6b 	beq.w	8008242 <_printf_float+0xc2>
 800856c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008570:	2200      	movs	r2, #0
 8008572:	2300      	movs	r3, #0
 8008574:	f7f8 fad0 	bl	8000b18 <__aeabi_dcmpeq>
 8008578:	b9d8      	cbnz	r0, 80085b2 <_printf_float+0x432>
 800857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857c:	f108 0201 	add.w	r2, r8, #1
 8008580:	3b01      	subs	r3, #1
 8008582:	4631      	mov	r1, r6
 8008584:	4628      	mov	r0, r5
 8008586:	47b8      	blx	r7
 8008588:	3001      	adds	r0, #1
 800858a:	d10e      	bne.n	80085aa <_printf_float+0x42a>
 800858c:	e659      	b.n	8008242 <_printf_float+0xc2>
 800858e:	2301      	movs	r3, #1
 8008590:	4652      	mov	r2, sl
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	f43f ae52 	beq.w	8008242 <_printf_float+0xc2>
 800859e:	f108 0801 	add.w	r8, r8, #1
 80085a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a4:	3b01      	subs	r3, #1
 80085a6:	4543      	cmp	r3, r8
 80085a8:	dcf1      	bgt.n	800858e <_printf_float+0x40e>
 80085aa:	464b      	mov	r3, r9
 80085ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085b0:	e6dc      	b.n	800836c <_printf_float+0x1ec>
 80085b2:	f04f 0800 	mov.w	r8, #0
 80085b6:	f104 0a1a 	add.w	sl, r4, #26
 80085ba:	e7f2      	b.n	80085a2 <_printf_float+0x422>
 80085bc:	2301      	movs	r3, #1
 80085be:	4642      	mov	r2, r8
 80085c0:	e7df      	b.n	8008582 <_printf_float+0x402>
 80085c2:	2301      	movs	r3, #1
 80085c4:	464a      	mov	r2, r9
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	f43f ae38 	beq.w	8008242 <_printf_float+0xc2>
 80085d2:	f108 0801 	add.w	r8, r8, #1
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085da:	1a5b      	subs	r3, r3, r1
 80085dc:	4543      	cmp	r3, r8
 80085de:	dcf0      	bgt.n	80085c2 <_printf_float+0x442>
 80085e0:	e6fa      	b.n	80083d8 <_printf_float+0x258>
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	f104 0919 	add.w	r9, r4, #25
 80085ea:	e7f4      	b.n	80085d6 <_printf_float+0x456>

080085ec <_printf_common>:
 80085ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f0:	4616      	mov	r6, r2
 80085f2:	4699      	mov	r9, r3
 80085f4:	688a      	ldr	r2, [r1, #8]
 80085f6:	690b      	ldr	r3, [r1, #16]
 80085f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085fc:	4293      	cmp	r3, r2
 80085fe:	bfb8      	it	lt
 8008600:	4613      	movlt	r3, r2
 8008602:	6033      	str	r3, [r6, #0]
 8008604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008608:	4607      	mov	r7, r0
 800860a:	460c      	mov	r4, r1
 800860c:	b10a      	cbz	r2, 8008612 <_printf_common+0x26>
 800860e:	3301      	adds	r3, #1
 8008610:	6033      	str	r3, [r6, #0]
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	0699      	lsls	r1, r3, #26
 8008616:	bf42      	ittt	mi
 8008618:	6833      	ldrmi	r3, [r6, #0]
 800861a:	3302      	addmi	r3, #2
 800861c:	6033      	strmi	r3, [r6, #0]
 800861e:	6825      	ldr	r5, [r4, #0]
 8008620:	f015 0506 	ands.w	r5, r5, #6
 8008624:	d106      	bne.n	8008634 <_printf_common+0x48>
 8008626:	f104 0a19 	add.w	sl, r4, #25
 800862a:	68e3      	ldr	r3, [r4, #12]
 800862c:	6832      	ldr	r2, [r6, #0]
 800862e:	1a9b      	subs	r3, r3, r2
 8008630:	42ab      	cmp	r3, r5
 8008632:	dc26      	bgt.n	8008682 <_printf_common+0x96>
 8008634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008638:	1e13      	subs	r3, r2, #0
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	bf18      	it	ne
 800863e:	2301      	movne	r3, #1
 8008640:	0692      	lsls	r2, r2, #26
 8008642:	d42b      	bmi.n	800869c <_printf_common+0xb0>
 8008644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008648:	4649      	mov	r1, r9
 800864a:	4638      	mov	r0, r7
 800864c:	47c0      	blx	r8
 800864e:	3001      	adds	r0, #1
 8008650:	d01e      	beq.n	8008690 <_printf_common+0xa4>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	68e5      	ldr	r5, [r4, #12]
 8008656:	6832      	ldr	r2, [r6, #0]
 8008658:	f003 0306 	and.w	r3, r3, #6
 800865c:	2b04      	cmp	r3, #4
 800865e:	bf08      	it	eq
 8008660:	1aad      	subeq	r5, r5, r2
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	bf0c      	ite	eq
 8008668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800866c:	2500      	movne	r5, #0
 800866e:	4293      	cmp	r3, r2
 8008670:	bfc4      	itt	gt
 8008672:	1a9b      	subgt	r3, r3, r2
 8008674:	18ed      	addgt	r5, r5, r3
 8008676:	2600      	movs	r6, #0
 8008678:	341a      	adds	r4, #26
 800867a:	42b5      	cmp	r5, r6
 800867c:	d11a      	bne.n	80086b4 <_printf_common+0xc8>
 800867e:	2000      	movs	r0, #0
 8008680:	e008      	b.n	8008694 <_printf_common+0xa8>
 8008682:	2301      	movs	r3, #1
 8008684:	4652      	mov	r2, sl
 8008686:	4649      	mov	r1, r9
 8008688:	4638      	mov	r0, r7
 800868a:	47c0      	blx	r8
 800868c:	3001      	adds	r0, #1
 800868e:	d103      	bne.n	8008698 <_printf_common+0xac>
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008698:	3501      	adds	r5, #1
 800869a:	e7c6      	b.n	800862a <_printf_common+0x3e>
 800869c:	18e1      	adds	r1, r4, r3
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	2030      	movs	r0, #48	; 0x30
 80086a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086a6:	4422      	add	r2, r4
 80086a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086b0:	3302      	adds	r3, #2
 80086b2:	e7c7      	b.n	8008644 <_printf_common+0x58>
 80086b4:	2301      	movs	r3, #1
 80086b6:	4622      	mov	r2, r4
 80086b8:	4649      	mov	r1, r9
 80086ba:	4638      	mov	r0, r7
 80086bc:	47c0      	blx	r8
 80086be:	3001      	adds	r0, #1
 80086c0:	d0e6      	beq.n	8008690 <_printf_common+0xa4>
 80086c2:	3601      	adds	r6, #1
 80086c4:	e7d9      	b.n	800867a <_printf_common+0x8e>
	...

080086c8 <_printf_i>:
 80086c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086cc:	460c      	mov	r4, r1
 80086ce:	4691      	mov	r9, r2
 80086d0:	7e27      	ldrb	r7, [r4, #24]
 80086d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086d4:	2f78      	cmp	r7, #120	; 0x78
 80086d6:	4680      	mov	r8, r0
 80086d8:	469a      	mov	sl, r3
 80086da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086de:	d807      	bhi.n	80086f0 <_printf_i+0x28>
 80086e0:	2f62      	cmp	r7, #98	; 0x62
 80086e2:	d80a      	bhi.n	80086fa <_printf_i+0x32>
 80086e4:	2f00      	cmp	r7, #0
 80086e6:	f000 80d8 	beq.w	800889a <_printf_i+0x1d2>
 80086ea:	2f58      	cmp	r7, #88	; 0x58
 80086ec:	f000 80a3 	beq.w	8008836 <_printf_i+0x16e>
 80086f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086f8:	e03a      	b.n	8008770 <_printf_i+0xa8>
 80086fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086fe:	2b15      	cmp	r3, #21
 8008700:	d8f6      	bhi.n	80086f0 <_printf_i+0x28>
 8008702:	a001      	add	r0, pc, #4	; (adr r0, 8008708 <_printf_i+0x40>)
 8008704:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008708:	08008761 	.word	0x08008761
 800870c:	08008775 	.word	0x08008775
 8008710:	080086f1 	.word	0x080086f1
 8008714:	080086f1 	.word	0x080086f1
 8008718:	080086f1 	.word	0x080086f1
 800871c:	080086f1 	.word	0x080086f1
 8008720:	08008775 	.word	0x08008775
 8008724:	080086f1 	.word	0x080086f1
 8008728:	080086f1 	.word	0x080086f1
 800872c:	080086f1 	.word	0x080086f1
 8008730:	080086f1 	.word	0x080086f1
 8008734:	08008881 	.word	0x08008881
 8008738:	080087a5 	.word	0x080087a5
 800873c:	08008863 	.word	0x08008863
 8008740:	080086f1 	.word	0x080086f1
 8008744:	080086f1 	.word	0x080086f1
 8008748:	080088a3 	.word	0x080088a3
 800874c:	080086f1 	.word	0x080086f1
 8008750:	080087a5 	.word	0x080087a5
 8008754:	080086f1 	.word	0x080086f1
 8008758:	080086f1 	.word	0x080086f1
 800875c:	0800886b 	.word	0x0800886b
 8008760:	680b      	ldr	r3, [r1, #0]
 8008762:	1d1a      	adds	r2, r3, #4
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	600a      	str	r2, [r1, #0]
 8008768:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800876c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008770:	2301      	movs	r3, #1
 8008772:	e0a3      	b.n	80088bc <_printf_i+0x1f4>
 8008774:	6825      	ldr	r5, [r4, #0]
 8008776:	6808      	ldr	r0, [r1, #0]
 8008778:	062e      	lsls	r6, r5, #24
 800877a:	f100 0304 	add.w	r3, r0, #4
 800877e:	d50a      	bpl.n	8008796 <_printf_i+0xce>
 8008780:	6805      	ldr	r5, [r0, #0]
 8008782:	600b      	str	r3, [r1, #0]
 8008784:	2d00      	cmp	r5, #0
 8008786:	da03      	bge.n	8008790 <_printf_i+0xc8>
 8008788:	232d      	movs	r3, #45	; 0x2d
 800878a:	426d      	negs	r5, r5
 800878c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008790:	485e      	ldr	r0, [pc, #376]	; (800890c <_printf_i+0x244>)
 8008792:	230a      	movs	r3, #10
 8008794:	e019      	b.n	80087ca <_printf_i+0x102>
 8008796:	f015 0f40 	tst.w	r5, #64	; 0x40
 800879a:	6805      	ldr	r5, [r0, #0]
 800879c:	600b      	str	r3, [r1, #0]
 800879e:	bf18      	it	ne
 80087a0:	b22d      	sxthne	r5, r5
 80087a2:	e7ef      	b.n	8008784 <_printf_i+0xbc>
 80087a4:	680b      	ldr	r3, [r1, #0]
 80087a6:	6825      	ldr	r5, [r4, #0]
 80087a8:	1d18      	adds	r0, r3, #4
 80087aa:	6008      	str	r0, [r1, #0]
 80087ac:	0628      	lsls	r0, r5, #24
 80087ae:	d501      	bpl.n	80087b4 <_printf_i+0xec>
 80087b0:	681d      	ldr	r5, [r3, #0]
 80087b2:	e002      	b.n	80087ba <_printf_i+0xf2>
 80087b4:	0669      	lsls	r1, r5, #25
 80087b6:	d5fb      	bpl.n	80087b0 <_printf_i+0xe8>
 80087b8:	881d      	ldrh	r5, [r3, #0]
 80087ba:	4854      	ldr	r0, [pc, #336]	; (800890c <_printf_i+0x244>)
 80087bc:	2f6f      	cmp	r7, #111	; 0x6f
 80087be:	bf0c      	ite	eq
 80087c0:	2308      	moveq	r3, #8
 80087c2:	230a      	movne	r3, #10
 80087c4:	2100      	movs	r1, #0
 80087c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ca:	6866      	ldr	r6, [r4, #4]
 80087cc:	60a6      	str	r6, [r4, #8]
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	bfa2      	ittt	ge
 80087d2:	6821      	ldrge	r1, [r4, #0]
 80087d4:	f021 0104 	bicge.w	r1, r1, #4
 80087d8:	6021      	strge	r1, [r4, #0]
 80087da:	b90d      	cbnz	r5, 80087e0 <_printf_i+0x118>
 80087dc:	2e00      	cmp	r6, #0
 80087de:	d04d      	beq.n	800887c <_printf_i+0x1b4>
 80087e0:	4616      	mov	r6, r2
 80087e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80087e6:	fb03 5711 	mls	r7, r3, r1, r5
 80087ea:	5dc7      	ldrb	r7, [r0, r7]
 80087ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087f0:	462f      	mov	r7, r5
 80087f2:	42bb      	cmp	r3, r7
 80087f4:	460d      	mov	r5, r1
 80087f6:	d9f4      	bls.n	80087e2 <_printf_i+0x11a>
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d10b      	bne.n	8008814 <_printf_i+0x14c>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	07df      	lsls	r7, r3, #31
 8008800:	d508      	bpl.n	8008814 <_printf_i+0x14c>
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	6861      	ldr	r1, [r4, #4]
 8008806:	4299      	cmp	r1, r3
 8008808:	bfde      	ittt	le
 800880a:	2330      	movle	r3, #48	; 0x30
 800880c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008810:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008814:	1b92      	subs	r2, r2, r6
 8008816:	6122      	str	r2, [r4, #16]
 8008818:	f8cd a000 	str.w	sl, [sp]
 800881c:	464b      	mov	r3, r9
 800881e:	aa03      	add	r2, sp, #12
 8008820:	4621      	mov	r1, r4
 8008822:	4640      	mov	r0, r8
 8008824:	f7ff fee2 	bl	80085ec <_printf_common>
 8008828:	3001      	adds	r0, #1
 800882a:	d14c      	bne.n	80088c6 <_printf_i+0x1fe>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	b004      	add	sp, #16
 8008832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008836:	4835      	ldr	r0, [pc, #212]	; (800890c <_printf_i+0x244>)
 8008838:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	680e      	ldr	r6, [r1, #0]
 8008840:	061f      	lsls	r7, r3, #24
 8008842:	f856 5b04 	ldr.w	r5, [r6], #4
 8008846:	600e      	str	r6, [r1, #0]
 8008848:	d514      	bpl.n	8008874 <_printf_i+0x1ac>
 800884a:	07d9      	lsls	r1, r3, #31
 800884c:	bf44      	itt	mi
 800884e:	f043 0320 	orrmi.w	r3, r3, #32
 8008852:	6023      	strmi	r3, [r4, #0]
 8008854:	b91d      	cbnz	r5, 800885e <_printf_i+0x196>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	f023 0320 	bic.w	r3, r3, #32
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	2310      	movs	r3, #16
 8008860:	e7b0      	b.n	80087c4 <_printf_i+0xfc>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f043 0320 	orr.w	r3, r3, #32
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2378      	movs	r3, #120	; 0x78
 800886c:	4828      	ldr	r0, [pc, #160]	; (8008910 <_printf_i+0x248>)
 800886e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008872:	e7e3      	b.n	800883c <_printf_i+0x174>
 8008874:	065e      	lsls	r6, r3, #25
 8008876:	bf48      	it	mi
 8008878:	b2ad      	uxthmi	r5, r5
 800887a:	e7e6      	b.n	800884a <_printf_i+0x182>
 800887c:	4616      	mov	r6, r2
 800887e:	e7bb      	b.n	80087f8 <_printf_i+0x130>
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	6826      	ldr	r6, [r4, #0]
 8008884:	6960      	ldr	r0, [r4, #20]
 8008886:	1d1d      	adds	r5, r3, #4
 8008888:	600d      	str	r5, [r1, #0]
 800888a:	0635      	lsls	r5, r6, #24
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	d501      	bpl.n	8008894 <_printf_i+0x1cc>
 8008890:	6018      	str	r0, [r3, #0]
 8008892:	e002      	b.n	800889a <_printf_i+0x1d2>
 8008894:	0671      	lsls	r1, r6, #25
 8008896:	d5fb      	bpl.n	8008890 <_printf_i+0x1c8>
 8008898:	8018      	strh	r0, [r3, #0]
 800889a:	2300      	movs	r3, #0
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	4616      	mov	r6, r2
 80088a0:	e7ba      	b.n	8008818 <_printf_i+0x150>
 80088a2:	680b      	ldr	r3, [r1, #0]
 80088a4:	1d1a      	adds	r2, r3, #4
 80088a6:	600a      	str	r2, [r1, #0]
 80088a8:	681e      	ldr	r6, [r3, #0]
 80088aa:	6862      	ldr	r2, [r4, #4]
 80088ac:	2100      	movs	r1, #0
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7f7 fcbe 	bl	8000230 <memchr>
 80088b4:	b108      	cbz	r0, 80088ba <_printf_i+0x1f2>
 80088b6:	1b80      	subs	r0, r0, r6
 80088b8:	6060      	str	r0, [r4, #4]
 80088ba:	6863      	ldr	r3, [r4, #4]
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	2300      	movs	r3, #0
 80088c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c4:	e7a8      	b.n	8008818 <_printf_i+0x150>
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	4632      	mov	r2, r6
 80088ca:	4649      	mov	r1, r9
 80088cc:	4640      	mov	r0, r8
 80088ce:	47d0      	blx	sl
 80088d0:	3001      	adds	r0, #1
 80088d2:	d0ab      	beq.n	800882c <_printf_i+0x164>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	079b      	lsls	r3, r3, #30
 80088d8:	d413      	bmi.n	8008902 <_printf_i+0x23a>
 80088da:	68e0      	ldr	r0, [r4, #12]
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	4298      	cmp	r0, r3
 80088e0:	bfb8      	it	lt
 80088e2:	4618      	movlt	r0, r3
 80088e4:	e7a4      	b.n	8008830 <_printf_i+0x168>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4632      	mov	r2, r6
 80088ea:	4649      	mov	r1, r9
 80088ec:	4640      	mov	r0, r8
 80088ee:	47d0      	blx	sl
 80088f0:	3001      	adds	r0, #1
 80088f2:	d09b      	beq.n	800882c <_printf_i+0x164>
 80088f4:	3501      	adds	r5, #1
 80088f6:	68e3      	ldr	r3, [r4, #12]
 80088f8:	9903      	ldr	r1, [sp, #12]
 80088fa:	1a5b      	subs	r3, r3, r1
 80088fc:	42ab      	cmp	r3, r5
 80088fe:	dcf2      	bgt.n	80088e6 <_printf_i+0x21e>
 8008900:	e7eb      	b.n	80088da <_printf_i+0x212>
 8008902:	2500      	movs	r5, #0
 8008904:	f104 0619 	add.w	r6, r4, #25
 8008908:	e7f5      	b.n	80088f6 <_printf_i+0x22e>
 800890a:	bf00      	nop
 800890c:	08010236 	.word	0x08010236
 8008910:	08010247 	.word	0x08010247

08008914 <siprintf>:
 8008914:	b40e      	push	{r1, r2, r3}
 8008916:	b500      	push	{lr}
 8008918:	b09c      	sub	sp, #112	; 0x70
 800891a:	ab1d      	add	r3, sp, #116	; 0x74
 800891c:	9002      	str	r0, [sp, #8]
 800891e:	9006      	str	r0, [sp, #24]
 8008920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008924:	4809      	ldr	r0, [pc, #36]	; (800894c <siprintf+0x38>)
 8008926:	9107      	str	r1, [sp, #28]
 8008928:	9104      	str	r1, [sp, #16]
 800892a:	4909      	ldr	r1, [pc, #36]	; (8008950 <siprintf+0x3c>)
 800892c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008930:	9105      	str	r1, [sp, #20]
 8008932:	6800      	ldr	r0, [r0, #0]
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	a902      	add	r1, sp, #8
 8008938:	f001 fb34 	bl	8009fa4 <_svfiprintf_r>
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	b01c      	add	sp, #112	; 0x70
 8008944:	f85d eb04 	ldr.w	lr, [sp], #4
 8008948:	b003      	add	sp, #12
 800894a:	4770      	bx	lr
 800894c:	20000490 	.word	0x20000490
 8008950:	ffff0208 	.word	0xffff0208

08008954 <quorem>:
 8008954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	6903      	ldr	r3, [r0, #16]
 800895a:	690c      	ldr	r4, [r1, #16]
 800895c:	42a3      	cmp	r3, r4
 800895e:	4607      	mov	r7, r0
 8008960:	f2c0 8081 	blt.w	8008a66 <quorem+0x112>
 8008964:	3c01      	subs	r4, #1
 8008966:	f101 0814 	add.w	r8, r1, #20
 800896a:	f100 0514 	add.w	r5, r0, #20
 800896e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800897c:	3301      	adds	r3, #1
 800897e:	429a      	cmp	r2, r3
 8008980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008988:	fbb2 f6f3 	udiv	r6, r2, r3
 800898c:	d331      	bcc.n	80089f2 <quorem+0x9e>
 800898e:	f04f 0e00 	mov.w	lr, #0
 8008992:	4640      	mov	r0, r8
 8008994:	46ac      	mov	ip, r5
 8008996:	46f2      	mov	sl, lr
 8008998:	f850 2b04 	ldr.w	r2, [r0], #4
 800899c:	b293      	uxth	r3, r2
 800899e:	fb06 e303 	mla	r3, r6, r3, lr
 80089a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	ebaa 0303 	sub.w	r3, sl, r3
 80089ac:	0c12      	lsrs	r2, r2, #16
 80089ae:	f8dc a000 	ldr.w	sl, [ip]
 80089b2:	fb06 e202 	mla	r2, r6, r2, lr
 80089b6:	fa13 f38a 	uxtah	r3, r3, sl
 80089ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089be:	fa1f fa82 	uxth.w	sl, r2
 80089c2:	f8dc 2000 	ldr.w	r2, [ip]
 80089c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80089ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089d4:	4581      	cmp	r9, r0
 80089d6:	f84c 3b04 	str.w	r3, [ip], #4
 80089da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089de:	d2db      	bcs.n	8008998 <quorem+0x44>
 80089e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80089e4:	b92b      	cbnz	r3, 80089f2 <quorem+0x9e>
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	429d      	cmp	r5, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	d32e      	bcc.n	8008a4e <quorem+0xfa>
 80089f0:	613c      	str	r4, [r7, #16]
 80089f2:	4638      	mov	r0, r7
 80089f4:	f001 f8c0 	bl	8009b78 <__mcmp>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	db24      	blt.n	8008a46 <quorem+0xf2>
 80089fc:	3601      	adds	r6, #1
 80089fe:	4628      	mov	r0, r5
 8008a00:	f04f 0c00 	mov.w	ip, #0
 8008a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a08:	f8d0 e000 	ldr.w	lr, [r0]
 8008a0c:	b293      	uxth	r3, r2
 8008a0e:	ebac 0303 	sub.w	r3, ip, r3
 8008a12:	0c12      	lsrs	r2, r2, #16
 8008a14:	fa13 f38e 	uxtah	r3, r3, lr
 8008a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a26:	45c1      	cmp	r9, r8
 8008a28:	f840 3b04 	str.w	r3, [r0], #4
 8008a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a30:	d2e8      	bcs.n	8008a04 <quorem+0xb0>
 8008a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3a:	b922      	cbnz	r2, 8008a46 <quorem+0xf2>
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	461a      	mov	r2, r3
 8008a42:	d30a      	bcc.n	8008a5a <quorem+0x106>
 8008a44:	613c      	str	r4, [r7, #16]
 8008a46:	4630      	mov	r0, r6
 8008a48:	b003      	add	sp, #12
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	6812      	ldr	r2, [r2, #0]
 8008a50:	3b04      	subs	r3, #4
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	d1cc      	bne.n	80089f0 <quorem+0x9c>
 8008a56:	3c01      	subs	r4, #1
 8008a58:	e7c7      	b.n	80089ea <quorem+0x96>
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	3b04      	subs	r3, #4
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	d1f0      	bne.n	8008a44 <quorem+0xf0>
 8008a62:	3c01      	subs	r4, #1
 8008a64:	e7eb      	b.n	8008a3e <quorem+0xea>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e7ee      	b.n	8008a48 <quorem+0xf4>
 8008a6a:	0000      	movs	r0, r0
 8008a6c:	0000      	movs	r0, r0
	...

08008a70 <_dtoa_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	ed2d 8b02 	vpush	{d8}
 8008a78:	ec57 6b10 	vmov	r6, r7, d0
 8008a7c:	b095      	sub	sp, #84	; 0x54
 8008a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a84:	9105      	str	r1, [sp, #20]
 8008a86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a90:	b975      	cbnz	r5, 8008ab0 <_dtoa_r+0x40>
 8008a92:	2010      	movs	r0, #16
 8008a94:	f000 fddc 	bl	8009650 <malloc>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8008a9c:	b920      	cbnz	r0, 8008aa8 <_dtoa_r+0x38>
 8008a9e:	4bb2      	ldr	r3, [pc, #712]	; (8008d68 <_dtoa_r+0x2f8>)
 8008aa0:	21ea      	movs	r1, #234	; 0xea
 8008aa2:	48b2      	ldr	r0, [pc, #712]	; (8008d6c <_dtoa_r+0x2fc>)
 8008aa4:	f001 fb8e 	bl	800a1c4 <__assert_func>
 8008aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008aac:	6005      	str	r5, [r0, #0]
 8008aae:	60c5      	str	r5, [r0, #12]
 8008ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	b151      	cbz	r1, 8008acc <_dtoa_r+0x5c>
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	604a      	str	r2, [r1, #4]
 8008aba:	2301      	movs	r3, #1
 8008abc:	4093      	lsls	r3, r2
 8008abe:	608b      	str	r3, [r1, #8]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fe1b 	bl	80096fc <_Bfree>
 8008ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	1e3b      	subs	r3, r7, #0
 8008ace:	bfb9      	ittee	lt
 8008ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	9303      	strlt	r3, [sp, #12]
 8008ad6:	2300      	movge	r3, #0
 8008ad8:	f8c8 3000 	strge.w	r3, [r8]
 8008adc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ae0:	4ba3      	ldr	r3, [pc, #652]	; (8008d70 <_dtoa_r+0x300>)
 8008ae2:	bfbc      	itt	lt
 8008ae4:	2201      	movlt	r2, #1
 8008ae6:	f8c8 2000 	strlt.w	r2, [r8]
 8008aea:	ea33 0309 	bics.w	r3, r3, r9
 8008aee:	d11b      	bne.n	8008b28 <_dtoa_r+0xb8>
 8008af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008afc:	4333      	orrs	r3, r6
 8008afe:	f000 857a 	beq.w	80095f6 <_dtoa_r+0xb86>
 8008b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b04:	b963      	cbnz	r3, 8008b20 <_dtoa_r+0xb0>
 8008b06:	4b9b      	ldr	r3, [pc, #620]	; (8008d74 <_dtoa_r+0x304>)
 8008b08:	e024      	b.n	8008b54 <_dtoa_r+0xe4>
 8008b0a:	4b9b      	ldr	r3, [pc, #620]	; (8008d78 <_dtoa_r+0x308>)
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	9800      	ldr	r0, [sp, #0]
 8008b16:	b015      	add	sp, #84	; 0x54
 8008b18:	ecbd 8b02 	vpop	{d8}
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	4b94      	ldr	r3, [pc, #592]	; (8008d74 <_dtoa_r+0x304>)
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	3303      	adds	r3, #3
 8008b26:	e7f3      	b.n	8008b10 <_dtoa_r+0xa0>
 8008b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	ec51 0b17 	vmov	r0, r1, d7
 8008b32:	2300      	movs	r3, #0
 8008b34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008b38:	f7f7 ffee 	bl	8000b18 <__aeabi_dcmpeq>
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	b158      	cbz	r0, 8008b58 <_dtoa_r+0xe8>
 8008b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b42:	2301      	movs	r3, #1
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 8551 	beq.w	80095f0 <_dtoa_r+0xb80>
 8008b4e:	488b      	ldr	r0, [pc, #556]	; (8008d7c <_dtoa_r+0x30c>)
 8008b50:	6018      	str	r0, [r3, #0]
 8008b52:	1e43      	subs	r3, r0, #1
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	e7dd      	b.n	8008b14 <_dtoa_r+0xa4>
 8008b58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008b5c:	aa12      	add	r2, sp, #72	; 0x48
 8008b5e:	a913      	add	r1, sp, #76	; 0x4c
 8008b60:	4620      	mov	r0, r4
 8008b62:	f001 f8ad 	bl	8009cc0 <__d2b>
 8008b66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b6a:	4683      	mov	fp, r0
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d07c      	beq.n	8008c6a <_dtoa_r+0x1fa>
 8008b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008b7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b8a:	4b7d      	ldr	r3, [pc, #500]	; (8008d80 <_dtoa_r+0x310>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fba1 	bl	80002d8 <__aeabi_dsub>
 8008b96:	a36e      	add	r3, pc, #440	; (adr r3, 8008d50 <_dtoa_r+0x2e0>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f7f7 fd54 	bl	8000648 <__aeabi_dmul>
 8008ba0:	a36d      	add	r3, pc, #436	; (adr r3, 8008d58 <_dtoa_r+0x2e8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fb99 	bl	80002dc <__adddf3>
 8008baa:	4606      	mov	r6, r0
 8008bac:	4628      	mov	r0, r5
 8008bae:	460f      	mov	r7, r1
 8008bb0:	f7f7 fce0 	bl	8000574 <__aeabi_i2d>
 8008bb4:	a36a      	add	r3, pc, #424	; (adr r3, 8008d60 <_dtoa_r+0x2f0>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fd45 	bl	8000648 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	f7f7 fb89 	bl	80002dc <__adddf3>
 8008bca:	4606      	mov	r6, r0
 8008bcc:	460f      	mov	r7, r1
 8008bce:	f7f7 ffeb 	bl	8000ba8 <__aeabi_d2iz>
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4630      	mov	r0, r6
 8008bda:	4639      	mov	r1, r7
 8008bdc:	f7f7 ffa6 	bl	8000b2c <__aeabi_dcmplt>
 8008be0:	b148      	cbz	r0, 8008bf6 <_dtoa_r+0x186>
 8008be2:	4650      	mov	r0, sl
 8008be4:	f7f7 fcc6 	bl	8000574 <__aeabi_i2d>
 8008be8:	4632      	mov	r2, r6
 8008bea:	463b      	mov	r3, r7
 8008bec:	f7f7 ff94 	bl	8000b18 <__aeabi_dcmpeq>
 8008bf0:	b908      	cbnz	r0, 8008bf6 <_dtoa_r+0x186>
 8008bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bf6:	f1ba 0f16 	cmp.w	sl, #22
 8008bfa:	d854      	bhi.n	8008ca6 <_dtoa_r+0x236>
 8008bfc:	4b61      	ldr	r3, [pc, #388]	; (8008d84 <_dtoa_r+0x314>)
 8008bfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c0a:	f7f7 ff8f 	bl	8000b2c <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d04b      	beq.n	8008caa <_dtoa_r+0x23a>
 8008c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c16:	2300      	movs	r3, #0
 8008c18:	930e      	str	r3, [sp, #56]	; 0x38
 8008c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c1c:	1b5d      	subs	r5, r3, r5
 8008c1e:	1e6b      	subs	r3, r5, #1
 8008c20:	9304      	str	r3, [sp, #16]
 8008c22:	bf43      	ittte	mi
 8008c24:	2300      	movmi	r3, #0
 8008c26:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c2a:	9304      	strmi	r3, [sp, #16]
 8008c2c:	f04f 0800 	movpl.w	r8, #0
 8008c30:	f1ba 0f00 	cmp.w	sl, #0
 8008c34:	db3b      	blt.n	8008cae <_dtoa_r+0x23e>
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c3c:	4453      	add	r3, sl
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	2300      	movs	r3, #0
 8008c42:	9306      	str	r3, [sp, #24]
 8008c44:	9b05      	ldr	r3, [sp, #20]
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	d869      	bhi.n	8008d1e <_dtoa_r+0x2ae>
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	bfc4      	itt	gt
 8008c4e:	3b04      	subgt	r3, #4
 8008c50:	9305      	strgt	r3, [sp, #20]
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	f1a3 0302 	sub.w	r3, r3, #2
 8008c58:	bfcc      	ite	gt
 8008c5a:	2500      	movgt	r5, #0
 8008c5c:	2501      	movle	r5, #1
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d869      	bhi.n	8008d36 <_dtoa_r+0x2c6>
 8008c62:	e8df f003 	tbb	[pc, r3]
 8008c66:	4e2c      	.short	0x4e2c
 8008c68:	5a4c      	.short	0x5a4c
 8008c6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008c6e:	441d      	add	r5, r3
 8008c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	bfc1      	itttt	gt
 8008c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c80:	fa09 f303 	lslgt.w	r3, r9, r3
 8008c84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c88:	bfda      	itte	le
 8008c8a:	f1c3 0320 	rsble	r3, r3, #32
 8008c8e:	fa06 f003 	lslle.w	r0, r6, r3
 8008c92:	4318      	orrgt	r0, r3
 8008c94:	f7f7 fc5e 	bl	8000554 <__aeabi_ui2d>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ca0:	3d01      	subs	r5, #1
 8008ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8008ca4:	e771      	b.n	8008b8a <_dtoa_r+0x11a>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7b6      	b.n	8008c18 <_dtoa_r+0x1a8>
 8008caa:	900e      	str	r0, [sp, #56]	; 0x38
 8008cac:	e7b5      	b.n	8008c1a <_dtoa_r+0x1aa>
 8008cae:	f1ca 0300 	rsb	r3, sl, #0
 8008cb2:	9306      	str	r3, [sp, #24]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	eba8 080a 	sub.w	r8, r8, sl
 8008cba:	930d      	str	r3, [sp, #52]	; 0x34
 8008cbc:	e7c2      	b.n	8008c44 <_dtoa_r+0x1d4>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dc39      	bgt.n	8008d3c <_dtoa_r+0x2cc>
 8008cc8:	f04f 0901 	mov.w	r9, #1
 8008ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cd0:	464b      	mov	r3, r9
 8008cd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cd8:	2200      	movs	r2, #0
 8008cda:	6042      	str	r2, [r0, #4]
 8008cdc:	2204      	movs	r2, #4
 8008cde:	f102 0614 	add.w	r6, r2, #20
 8008ce2:	429e      	cmp	r6, r3
 8008ce4:	6841      	ldr	r1, [r0, #4]
 8008ce6:	d92f      	bls.n	8008d48 <_dtoa_r+0x2d8>
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fcc7 	bl	800967c <_Balloc>
 8008cee:	9000      	str	r0, [sp, #0]
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d14b      	bne.n	8008d8c <_dtoa_r+0x31c>
 8008cf4:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <_dtoa_r+0x318>)
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cfc:	e6d1      	b.n	8008aa2 <_dtoa_r+0x32>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e7de      	b.n	8008cc0 <_dtoa_r+0x250>
 8008d02:	2300      	movs	r3, #0
 8008d04:	9308      	str	r3, [sp, #32]
 8008d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d08:	eb0a 0903 	add.w	r9, sl, r3
 8008d0c:	f109 0301 	add.w	r3, r9, #1
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	bfb8      	it	lt
 8008d16:	2301      	movlt	r3, #1
 8008d18:	e7dd      	b.n	8008cd6 <_dtoa_r+0x266>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e7f2      	b.n	8008d04 <_dtoa_r+0x294>
 8008d1e:	2501      	movs	r5, #1
 8008d20:	2300      	movs	r3, #0
 8008d22:	9305      	str	r3, [sp, #20]
 8008d24:	9508      	str	r5, [sp, #32]
 8008d26:	f04f 39ff 	mov.w	r9, #4294967295
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d30:	2312      	movs	r3, #18
 8008d32:	9209      	str	r2, [sp, #36]	; 0x24
 8008d34:	e7cf      	b.n	8008cd6 <_dtoa_r+0x266>
 8008d36:	2301      	movs	r3, #1
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	e7f4      	b.n	8008d26 <_dtoa_r+0x2b6>
 8008d3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d40:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d44:	464b      	mov	r3, r9
 8008d46:	e7c6      	b.n	8008cd6 <_dtoa_r+0x266>
 8008d48:	3101      	adds	r1, #1
 8008d4a:	6041      	str	r1, [r0, #4]
 8008d4c:	0052      	lsls	r2, r2, #1
 8008d4e:	e7c6      	b.n	8008cde <_dtoa_r+0x26e>
 8008d50:	636f4361 	.word	0x636f4361
 8008d54:	3fd287a7 	.word	0x3fd287a7
 8008d58:	8b60c8b3 	.word	0x8b60c8b3
 8008d5c:	3fc68a28 	.word	0x3fc68a28
 8008d60:	509f79fb 	.word	0x509f79fb
 8008d64:	3fd34413 	.word	0x3fd34413
 8008d68:	08010265 	.word	0x08010265
 8008d6c:	0801027c 	.word	0x0801027c
 8008d70:	7ff00000 	.word	0x7ff00000
 8008d74:	08010261 	.word	0x08010261
 8008d78:	08010258 	.word	0x08010258
 8008d7c:	08010235 	.word	0x08010235
 8008d80:	3ff80000 	.word	0x3ff80000
 8008d84:	08010378 	.word	0x08010378
 8008d88:	080102db 	.word	0x080102db
 8008d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d8e:	9a00      	ldr	r2, [sp, #0]
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	2b0e      	cmp	r3, #14
 8008d96:	f200 80ad 	bhi.w	8008ef4 <_dtoa_r+0x484>
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	f000 80aa 	beq.w	8008ef4 <_dtoa_r+0x484>
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	dd36      	ble.n	8008e14 <_dtoa_r+0x3a4>
 8008da6:	4ac3      	ldr	r2, [pc, #780]	; (80090b4 <_dtoa_r+0x644>)
 8008da8:	f00a 030f 	and.w	r3, sl, #15
 8008dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008db0:	ed93 7b00 	vldr	d7, [r3]
 8008db4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008db8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008dbc:	eeb0 8a47 	vmov.f32	s16, s14
 8008dc0:	eef0 8a67 	vmov.f32	s17, s15
 8008dc4:	d016      	beq.n	8008df4 <_dtoa_r+0x384>
 8008dc6:	4bbc      	ldr	r3, [pc, #752]	; (80090b8 <_dtoa_r+0x648>)
 8008dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dd0:	f7f7 fd64 	bl	800089c <__aeabi_ddiv>
 8008dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd8:	f007 070f 	and.w	r7, r7, #15
 8008ddc:	2503      	movs	r5, #3
 8008dde:	4eb6      	ldr	r6, [pc, #728]	; (80090b8 <_dtoa_r+0x648>)
 8008de0:	b957      	cbnz	r7, 8008df8 <_dtoa_r+0x388>
 8008de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de6:	ec53 2b18 	vmov	r2, r3, d8
 8008dea:	f7f7 fd57 	bl	800089c <__aeabi_ddiv>
 8008dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df2:	e029      	b.n	8008e48 <_dtoa_r+0x3d8>
 8008df4:	2502      	movs	r5, #2
 8008df6:	e7f2      	b.n	8008dde <_dtoa_r+0x36e>
 8008df8:	07f9      	lsls	r1, r7, #31
 8008dfa:	d508      	bpl.n	8008e0e <_dtoa_r+0x39e>
 8008dfc:	ec51 0b18 	vmov	r0, r1, d8
 8008e00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e04:	f7f7 fc20 	bl	8000648 <__aeabi_dmul>
 8008e08:	ec41 0b18 	vmov	d8, r0, r1
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	107f      	asrs	r7, r7, #1
 8008e10:	3608      	adds	r6, #8
 8008e12:	e7e5      	b.n	8008de0 <_dtoa_r+0x370>
 8008e14:	f000 80a6 	beq.w	8008f64 <_dtoa_r+0x4f4>
 8008e18:	f1ca 0600 	rsb	r6, sl, #0
 8008e1c:	4ba5      	ldr	r3, [pc, #660]	; (80090b4 <_dtoa_r+0x644>)
 8008e1e:	4fa6      	ldr	r7, [pc, #664]	; (80090b8 <_dtoa_r+0x648>)
 8008e20:	f006 020f 	and.w	r2, r6, #15
 8008e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e30:	f7f7 fc0a 	bl	8000648 <__aeabi_dmul>
 8008e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e38:	1136      	asrs	r6, r6, #4
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2502      	movs	r5, #2
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	f040 8085 	bne.w	8008f4e <_dtoa_r+0x4de>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1d2      	bne.n	8008dee <_dtoa_r+0x37e>
 8008e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 808c 	beq.w	8008f68 <_dtoa_r+0x4f8>
 8008e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e54:	4b99      	ldr	r3, [pc, #612]	; (80090bc <_dtoa_r+0x64c>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 fe66 	bl	8000b2c <__aeabi_dcmplt>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	f000 8081 	beq.w	8008f68 <_dtoa_r+0x4f8>
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d07d      	beq.n	8008f68 <_dtoa_r+0x4f8>
 8008e6c:	f1b9 0f00 	cmp.w	r9, #0
 8008e70:	dd3c      	ble.n	8008eec <_dtoa_r+0x47c>
 8008e72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e76:	9307      	str	r3, [sp, #28]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4b91      	ldr	r3, [pc, #580]	; (80090c0 <_dtoa_r+0x650>)
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 fbe2 	bl	8000648 <__aeabi_dmul>
 8008e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e88:	3501      	adds	r5, #1
 8008e8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7f7 fb6e 	bl	8000574 <__aeabi_i2d>
 8008e98:	4632      	mov	r2, r6
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	f7f7 fbd4 	bl	8000648 <__aeabi_dmul>
 8008ea0:	4b88      	ldr	r3, [pc, #544]	; (80090c4 <_dtoa_r+0x654>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f7f7 fa1a 	bl	80002dc <__adddf3>
 8008ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d15c      	bne.n	8008f72 <_dtoa_r+0x502>
 8008eb8:	4b83      	ldr	r3, [pc, #524]	; (80090c8 <_dtoa_r+0x658>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f7f7 fa0a 	bl	80002d8 <__aeabi_dsub>
 8008ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec8:	4606      	mov	r6, r0
 8008eca:	460f      	mov	r7, r1
 8008ecc:	f7f7 fe4c 	bl	8000b68 <__aeabi_dcmpgt>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	f040 8296 	bne.w	8009402 <_dtoa_r+0x992>
 8008ed6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008eda:	4630      	mov	r0, r6
 8008edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 fe23 	bl	8000b2c <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f040 8288 	bne.w	80093fc <_dtoa_r+0x98c>
 8008eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f2c0 8158 	blt.w	80091ac <_dtoa_r+0x73c>
 8008efc:	f1ba 0f0e 	cmp.w	sl, #14
 8008f00:	f300 8154 	bgt.w	80091ac <_dtoa_r+0x73c>
 8008f04:	4b6b      	ldr	r3, [pc, #428]	; (80090b4 <_dtoa_r+0x644>)
 8008f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f280 80e3 	bge.w	80090dc <_dtoa_r+0x66c>
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f300 80df 	bgt.w	80090dc <_dtoa_r+0x66c>
 8008f1e:	f040 826d 	bne.w	80093fc <_dtoa_r+0x98c>
 8008f22:	4b69      	ldr	r3, [pc, #420]	; (80090c8 <_dtoa_r+0x658>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	4640      	mov	r0, r8
 8008f28:	4649      	mov	r1, r9
 8008f2a:	f7f7 fb8d 	bl	8000648 <__aeabi_dmul>
 8008f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f32:	f7f7 fe0f 	bl	8000b54 <__aeabi_dcmpge>
 8008f36:	9e01      	ldr	r6, [sp, #4]
 8008f38:	4637      	mov	r7, r6
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f040 8243 	bne.w	80093c6 <_dtoa_r+0x956>
 8008f40:	9d00      	ldr	r5, [sp, #0]
 8008f42:	2331      	movs	r3, #49	; 0x31
 8008f44:	f805 3b01 	strb.w	r3, [r5], #1
 8008f48:	f10a 0a01 	add.w	sl, sl, #1
 8008f4c:	e23f      	b.n	80093ce <_dtoa_r+0x95e>
 8008f4e:	07f2      	lsls	r2, r6, #31
 8008f50:	d505      	bpl.n	8008f5e <_dtoa_r+0x4ee>
 8008f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f56:	f7f7 fb77 	bl	8000648 <__aeabi_dmul>
 8008f5a:	3501      	adds	r5, #1
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	1076      	asrs	r6, r6, #1
 8008f60:	3708      	adds	r7, #8
 8008f62:	e76c      	b.n	8008e3e <_dtoa_r+0x3ce>
 8008f64:	2502      	movs	r5, #2
 8008f66:	e76f      	b.n	8008e48 <_dtoa_r+0x3d8>
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f70:	e78d      	b.n	8008e8e <_dtoa_r+0x41e>
 8008f72:	9900      	ldr	r1, [sp, #0]
 8008f74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f78:	4b4e      	ldr	r3, [pc, #312]	; (80090b4 <_dtoa_r+0x644>)
 8008f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f7e:	4401      	add	r1, r0
 8008f80:	9102      	str	r1, [sp, #8]
 8008f82:	9908      	ldr	r1, [sp, #32]
 8008f84:	eeb0 8a47 	vmov.f32	s16, s14
 8008f88:	eef0 8a67 	vmov.f32	s17, s15
 8008f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d045      	beq.n	8009024 <_dtoa_r+0x5b4>
 8008f98:	494c      	ldr	r1, [pc, #304]	; (80090cc <_dtoa_r+0x65c>)
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f7f7 fc7e 	bl	800089c <__aeabi_ddiv>
 8008fa0:	ec53 2b18 	vmov	r2, r3, d8
 8008fa4:	f7f7 f998 	bl	80002d8 <__aeabi_dsub>
 8008fa8:	9d00      	ldr	r5, [sp, #0]
 8008faa:	ec41 0b18 	vmov	d8, r0, r1
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7f7 fdf9 	bl	8000ba8 <__aeabi_d2iz>
 8008fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8008fb8:	f7f7 fadc 	bl	8000574 <__aeabi_i2d>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 f988 	bl	80002d8 <__aeabi_dsub>
 8008fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fca:	3330      	adds	r3, #48	; 0x30
 8008fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8008fd0:	ec53 2b18 	vmov	r2, r3, d8
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	f7f7 fda8 	bl	8000b2c <__aeabi_dcmplt>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d165      	bne.n	80090ac <_dtoa_r+0x63c>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4935      	ldr	r1, [pc, #212]	; (80090bc <_dtoa_r+0x64c>)
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f7f7 f976 	bl	80002d8 <__aeabi_dsub>
 8008fec:	ec53 2b18 	vmov	r2, r3, d8
 8008ff0:	f7f7 fd9c 	bl	8000b2c <__aeabi_dcmplt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f040 80b9 	bne.w	800916c <_dtoa_r+0x6fc>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	429d      	cmp	r5, r3
 8008ffe:	f43f af75 	beq.w	8008eec <_dtoa_r+0x47c>
 8009002:	4b2f      	ldr	r3, [pc, #188]	; (80090c0 <_dtoa_r+0x650>)
 8009004:	ec51 0b18 	vmov	r0, r1, d8
 8009008:	2200      	movs	r2, #0
 800900a:	f7f7 fb1d 	bl	8000648 <__aeabi_dmul>
 800900e:	4b2c      	ldr	r3, [pc, #176]	; (80090c0 <_dtoa_r+0x650>)
 8009010:	ec41 0b18 	vmov	d8, r0, r1
 8009014:	2200      	movs	r2, #0
 8009016:	4630      	mov	r0, r6
 8009018:	4639      	mov	r1, r7
 800901a:	f7f7 fb15 	bl	8000648 <__aeabi_dmul>
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	e7c4      	b.n	8008fae <_dtoa_r+0x53e>
 8009024:	ec51 0b17 	vmov	r0, r1, d7
 8009028:	f7f7 fb0e 	bl	8000648 <__aeabi_dmul>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	9d00      	ldr	r5, [sp, #0]
 8009030:	930c      	str	r3, [sp, #48]	; 0x30
 8009032:	ec41 0b18 	vmov	d8, r0, r1
 8009036:	4639      	mov	r1, r7
 8009038:	4630      	mov	r0, r6
 800903a:	f7f7 fdb5 	bl	8000ba8 <__aeabi_d2iz>
 800903e:	9011      	str	r0, [sp, #68]	; 0x44
 8009040:	f7f7 fa98 	bl	8000574 <__aeabi_i2d>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 f944 	bl	80002d8 <__aeabi_dsub>
 8009050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009052:	3330      	adds	r3, #48	; 0x30
 8009054:	f805 3b01 	strb.w	r3, [r5], #1
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	429d      	cmp	r5, r3
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	d134      	bne.n	80090d0 <_dtoa_r+0x660>
 8009066:	4b19      	ldr	r3, [pc, #100]	; (80090cc <_dtoa_r+0x65c>)
 8009068:	ec51 0b18 	vmov	r0, r1, d8
 800906c:	f7f7 f936 	bl	80002dc <__adddf3>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4630      	mov	r0, r6
 8009076:	4639      	mov	r1, r7
 8009078:	f7f7 fd76 	bl	8000b68 <__aeabi_dcmpgt>
 800907c:	2800      	cmp	r0, #0
 800907e:	d175      	bne.n	800916c <_dtoa_r+0x6fc>
 8009080:	ec53 2b18 	vmov	r2, r3, d8
 8009084:	4911      	ldr	r1, [pc, #68]	; (80090cc <_dtoa_r+0x65c>)
 8009086:	2000      	movs	r0, #0
 8009088:	f7f7 f926 	bl	80002d8 <__aeabi_dsub>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 fd4a 	bl	8000b2c <__aeabi_dcmplt>
 8009098:	2800      	cmp	r0, #0
 800909a:	f43f af27 	beq.w	8008eec <_dtoa_r+0x47c>
 800909e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090a0:	1e6b      	subs	r3, r5, #1
 80090a2:	930c      	str	r3, [sp, #48]	; 0x30
 80090a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090a8:	2b30      	cmp	r3, #48	; 0x30
 80090aa:	d0f8      	beq.n	800909e <_dtoa_r+0x62e>
 80090ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090b0:	e04a      	b.n	8009148 <_dtoa_r+0x6d8>
 80090b2:	bf00      	nop
 80090b4:	08010378 	.word	0x08010378
 80090b8:	08010350 	.word	0x08010350
 80090bc:	3ff00000 	.word	0x3ff00000
 80090c0:	40240000 	.word	0x40240000
 80090c4:	401c0000 	.word	0x401c0000
 80090c8:	40140000 	.word	0x40140000
 80090cc:	3fe00000 	.word	0x3fe00000
 80090d0:	4baf      	ldr	r3, [pc, #700]	; (8009390 <_dtoa_r+0x920>)
 80090d2:	f7f7 fab9 	bl	8000648 <__aeabi_dmul>
 80090d6:	4606      	mov	r6, r0
 80090d8:	460f      	mov	r7, r1
 80090da:	e7ac      	b.n	8009036 <_dtoa_r+0x5c6>
 80090dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090e0:	9d00      	ldr	r5, [sp, #0]
 80090e2:	4642      	mov	r2, r8
 80090e4:	464b      	mov	r3, r9
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fbd7 	bl	800089c <__aeabi_ddiv>
 80090ee:	f7f7 fd5b 	bl	8000ba8 <__aeabi_d2iz>
 80090f2:	9002      	str	r0, [sp, #8]
 80090f4:	f7f7 fa3e 	bl	8000574 <__aeabi_i2d>
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	f7f7 faa4 	bl	8000648 <__aeabi_dmul>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 f8e6 	bl	80002d8 <__aeabi_dsub>
 800910c:	9e02      	ldr	r6, [sp, #8]
 800910e:	9f01      	ldr	r7, [sp, #4]
 8009110:	3630      	adds	r6, #48	; 0x30
 8009112:	f805 6b01 	strb.w	r6, [r5], #1
 8009116:	9e00      	ldr	r6, [sp, #0]
 8009118:	1bae      	subs	r6, r5, r6
 800911a:	42b7      	cmp	r7, r6
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	d137      	bne.n	8009192 <_dtoa_r+0x722>
 8009122:	f7f7 f8db 	bl	80002dc <__adddf3>
 8009126:	4642      	mov	r2, r8
 8009128:	464b      	mov	r3, r9
 800912a:	4606      	mov	r6, r0
 800912c:	460f      	mov	r7, r1
 800912e:	f7f7 fd1b 	bl	8000b68 <__aeabi_dcmpgt>
 8009132:	b9c8      	cbnz	r0, 8009168 <_dtoa_r+0x6f8>
 8009134:	4642      	mov	r2, r8
 8009136:	464b      	mov	r3, r9
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 fcec 	bl	8000b18 <__aeabi_dcmpeq>
 8009140:	b110      	cbz	r0, 8009148 <_dtoa_r+0x6d8>
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	07d9      	lsls	r1, r3, #31
 8009146:	d40f      	bmi.n	8009168 <_dtoa_r+0x6f8>
 8009148:	4620      	mov	r0, r4
 800914a:	4659      	mov	r1, fp
 800914c:	f000 fad6 	bl	80096fc <_Bfree>
 8009150:	2300      	movs	r3, #0
 8009152:	702b      	strb	r3, [r5, #0]
 8009154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009156:	f10a 0001 	add.w	r0, sl, #1
 800915a:	6018      	str	r0, [r3, #0]
 800915c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800915e:	2b00      	cmp	r3, #0
 8009160:	f43f acd8 	beq.w	8008b14 <_dtoa_r+0xa4>
 8009164:	601d      	str	r5, [r3, #0]
 8009166:	e4d5      	b.n	8008b14 <_dtoa_r+0xa4>
 8009168:	f8cd a01c 	str.w	sl, [sp, #28]
 800916c:	462b      	mov	r3, r5
 800916e:	461d      	mov	r5, r3
 8009170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009174:	2a39      	cmp	r2, #57	; 0x39
 8009176:	d108      	bne.n	800918a <_dtoa_r+0x71a>
 8009178:	9a00      	ldr	r2, [sp, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d1f7      	bne.n	800916e <_dtoa_r+0x6fe>
 800917e:	9a07      	ldr	r2, [sp, #28]
 8009180:	9900      	ldr	r1, [sp, #0]
 8009182:	3201      	adds	r2, #1
 8009184:	9207      	str	r2, [sp, #28]
 8009186:	2230      	movs	r2, #48	; 0x30
 8009188:	700a      	strb	r2, [r1, #0]
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	3201      	adds	r2, #1
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	e78c      	b.n	80090ac <_dtoa_r+0x63c>
 8009192:	4b7f      	ldr	r3, [pc, #508]	; (8009390 <_dtoa_r+0x920>)
 8009194:	2200      	movs	r2, #0
 8009196:	f7f7 fa57 	bl	8000648 <__aeabi_dmul>
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	4606      	mov	r6, r0
 80091a0:	460f      	mov	r7, r1
 80091a2:	f7f7 fcb9 	bl	8000b18 <__aeabi_dcmpeq>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d09b      	beq.n	80090e2 <_dtoa_r+0x672>
 80091aa:	e7cd      	b.n	8009148 <_dtoa_r+0x6d8>
 80091ac:	9a08      	ldr	r2, [sp, #32]
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	f000 80c4 	beq.w	800933c <_dtoa_r+0x8cc>
 80091b4:	9a05      	ldr	r2, [sp, #20]
 80091b6:	2a01      	cmp	r2, #1
 80091b8:	f300 80a8 	bgt.w	800930c <_dtoa_r+0x89c>
 80091bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091be:	2a00      	cmp	r2, #0
 80091c0:	f000 80a0 	beq.w	8009304 <_dtoa_r+0x894>
 80091c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091c8:	9e06      	ldr	r6, [sp, #24]
 80091ca:	4645      	mov	r5, r8
 80091cc:	9a04      	ldr	r2, [sp, #16]
 80091ce:	2101      	movs	r1, #1
 80091d0:	441a      	add	r2, r3
 80091d2:	4620      	mov	r0, r4
 80091d4:	4498      	add	r8, r3
 80091d6:	9204      	str	r2, [sp, #16]
 80091d8:	f000 fb4c 	bl	8009874 <__i2b>
 80091dc:	4607      	mov	r7, r0
 80091de:	2d00      	cmp	r5, #0
 80091e0:	dd0b      	ble.n	80091fa <_dtoa_r+0x78a>
 80091e2:	9b04      	ldr	r3, [sp, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd08      	ble.n	80091fa <_dtoa_r+0x78a>
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	bfa8      	it	ge
 80091ee:	462b      	movge	r3, r5
 80091f0:	eba8 0803 	sub.w	r8, r8, r3
 80091f4:	1aed      	subs	r5, r5, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9b06      	ldr	r3, [sp, #24]
 80091fc:	b1fb      	cbz	r3, 800923e <_dtoa_r+0x7ce>
 80091fe:	9b08      	ldr	r3, [sp, #32]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 809f 	beq.w	8009344 <_dtoa_r+0x8d4>
 8009206:	2e00      	cmp	r6, #0
 8009208:	dd11      	ble.n	800922e <_dtoa_r+0x7be>
 800920a:	4639      	mov	r1, r7
 800920c:	4632      	mov	r2, r6
 800920e:	4620      	mov	r0, r4
 8009210:	f000 fbec 	bl	80099ec <__pow5mult>
 8009214:	465a      	mov	r2, fp
 8009216:	4601      	mov	r1, r0
 8009218:	4607      	mov	r7, r0
 800921a:	4620      	mov	r0, r4
 800921c:	f000 fb40 	bl	80098a0 <__multiply>
 8009220:	4659      	mov	r1, fp
 8009222:	9007      	str	r0, [sp, #28]
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fa69 	bl	80096fc <_Bfree>
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	469b      	mov	fp, r3
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	1b9a      	subs	r2, r3, r6
 8009232:	d004      	beq.n	800923e <_dtoa_r+0x7ce>
 8009234:	4659      	mov	r1, fp
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fbd8 	bl	80099ec <__pow5mult>
 800923c:	4683      	mov	fp, r0
 800923e:	2101      	movs	r1, #1
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fb17 	bl	8009874 <__i2b>
 8009246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009248:	2b00      	cmp	r3, #0
 800924a:	4606      	mov	r6, r0
 800924c:	dd7c      	ble.n	8009348 <_dtoa_r+0x8d8>
 800924e:	461a      	mov	r2, r3
 8009250:	4601      	mov	r1, r0
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fbca 	bl	80099ec <__pow5mult>
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	2b01      	cmp	r3, #1
 800925c:	4606      	mov	r6, r0
 800925e:	dd76      	ble.n	800934e <_dtoa_r+0x8de>
 8009260:	2300      	movs	r3, #0
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	6933      	ldr	r3, [r6, #16]
 8009266:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800926a:	6918      	ldr	r0, [r3, #16]
 800926c:	f000 fab2 	bl	80097d4 <__hi0bits>
 8009270:	f1c0 0020 	rsb	r0, r0, #32
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	4418      	add	r0, r3
 8009278:	f010 001f 	ands.w	r0, r0, #31
 800927c:	f000 8086 	beq.w	800938c <_dtoa_r+0x91c>
 8009280:	f1c0 0320 	rsb	r3, r0, #32
 8009284:	2b04      	cmp	r3, #4
 8009286:	dd7f      	ble.n	8009388 <_dtoa_r+0x918>
 8009288:	f1c0 001c 	rsb	r0, r0, #28
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	4403      	add	r3, r0
 8009290:	4480      	add	r8, r0
 8009292:	4405      	add	r5, r0
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	f1b8 0f00 	cmp.w	r8, #0
 800929a:	dd05      	ble.n	80092a8 <_dtoa_r+0x838>
 800929c:	4659      	mov	r1, fp
 800929e:	4642      	mov	r2, r8
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 fbfd 	bl	8009aa0 <__lshift>
 80092a6:	4683      	mov	fp, r0
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd05      	ble.n	80092ba <_dtoa_r+0x84a>
 80092ae:	4631      	mov	r1, r6
 80092b0:	461a      	mov	r2, r3
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fbf4 	bl	8009aa0 <__lshift>
 80092b8:	4606      	mov	r6, r0
 80092ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d069      	beq.n	8009394 <_dtoa_r+0x924>
 80092c0:	4631      	mov	r1, r6
 80092c2:	4658      	mov	r0, fp
 80092c4:	f000 fc58 	bl	8009b78 <__mcmp>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	da63      	bge.n	8009394 <_dtoa_r+0x924>
 80092cc:	2300      	movs	r3, #0
 80092ce:	4659      	mov	r1, fp
 80092d0:	220a      	movs	r2, #10
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 fa34 	bl	8009740 <__multadd>
 80092d8:	9b08      	ldr	r3, [sp, #32]
 80092da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092de:	4683      	mov	fp, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 818f 	beq.w	8009604 <_dtoa_r+0xb94>
 80092e6:	4639      	mov	r1, r7
 80092e8:	2300      	movs	r3, #0
 80092ea:	220a      	movs	r2, #10
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fa27 	bl	8009740 <__multadd>
 80092f2:	f1b9 0f00 	cmp.w	r9, #0
 80092f6:	4607      	mov	r7, r0
 80092f8:	f300 808e 	bgt.w	8009418 <_dtoa_r+0x9a8>
 80092fc:	9b05      	ldr	r3, [sp, #20]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	dc50      	bgt.n	80093a4 <_dtoa_r+0x934>
 8009302:	e089      	b.n	8009418 <_dtoa_r+0x9a8>
 8009304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800930a:	e75d      	b.n	80091c8 <_dtoa_r+0x758>
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	1e5e      	subs	r6, r3, #1
 8009310:	9b06      	ldr	r3, [sp, #24]
 8009312:	42b3      	cmp	r3, r6
 8009314:	bfbf      	itttt	lt
 8009316:	9b06      	ldrlt	r3, [sp, #24]
 8009318:	9606      	strlt	r6, [sp, #24]
 800931a:	1af2      	sublt	r2, r6, r3
 800931c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800931e:	bfb6      	itet	lt
 8009320:	189b      	addlt	r3, r3, r2
 8009322:	1b9e      	subge	r6, r3, r6
 8009324:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	bfb8      	it	lt
 800932a:	2600      	movlt	r6, #0
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfb5      	itete	lt
 8009330:	eba8 0503 	sublt.w	r5, r8, r3
 8009334:	9b01      	ldrge	r3, [sp, #4]
 8009336:	2300      	movlt	r3, #0
 8009338:	4645      	movge	r5, r8
 800933a:	e747      	b.n	80091cc <_dtoa_r+0x75c>
 800933c:	9e06      	ldr	r6, [sp, #24]
 800933e:	9f08      	ldr	r7, [sp, #32]
 8009340:	4645      	mov	r5, r8
 8009342:	e74c      	b.n	80091de <_dtoa_r+0x76e>
 8009344:	9a06      	ldr	r2, [sp, #24]
 8009346:	e775      	b.n	8009234 <_dtoa_r+0x7c4>
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	2b01      	cmp	r3, #1
 800934c:	dc18      	bgt.n	8009380 <_dtoa_r+0x910>
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	b9b3      	cbnz	r3, 8009380 <_dtoa_r+0x910>
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009358:	b9a3      	cbnz	r3, 8009384 <_dtoa_r+0x914>
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	051b      	lsls	r3, r3, #20
 8009364:	b12b      	cbz	r3, 8009372 <_dtoa_r+0x902>
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	3301      	adds	r3, #1
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	f108 0801 	add.w	r8, r8, #1
 8009370:	2301      	movs	r3, #1
 8009372:	9306      	str	r3, [sp, #24]
 8009374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009376:	2b00      	cmp	r3, #0
 8009378:	f47f af74 	bne.w	8009264 <_dtoa_r+0x7f4>
 800937c:	2001      	movs	r0, #1
 800937e:	e779      	b.n	8009274 <_dtoa_r+0x804>
 8009380:	2300      	movs	r3, #0
 8009382:	e7f6      	b.n	8009372 <_dtoa_r+0x902>
 8009384:	9b02      	ldr	r3, [sp, #8]
 8009386:	e7f4      	b.n	8009372 <_dtoa_r+0x902>
 8009388:	d085      	beq.n	8009296 <_dtoa_r+0x826>
 800938a:	4618      	mov	r0, r3
 800938c:	301c      	adds	r0, #28
 800938e:	e77d      	b.n	800928c <_dtoa_r+0x81c>
 8009390:	40240000 	.word	0x40240000
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	dc38      	bgt.n	800940c <_dtoa_r+0x99c>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	2b02      	cmp	r3, #2
 800939e:	dd35      	ble.n	800940c <_dtoa_r+0x99c>
 80093a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	d10d      	bne.n	80093c6 <_dtoa_r+0x956>
 80093aa:	4631      	mov	r1, r6
 80093ac:	464b      	mov	r3, r9
 80093ae:	2205      	movs	r2, #5
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 f9c5 	bl	8009740 <__multadd>
 80093b6:	4601      	mov	r1, r0
 80093b8:	4606      	mov	r6, r0
 80093ba:	4658      	mov	r0, fp
 80093bc:	f000 fbdc 	bl	8009b78 <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f73f adbd 	bgt.w	8008f40 <_dtoa_r+0x4d0>
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	9d00      	ldr	r5, [sp, #0]
 80093ca:	ea6f 0a03 	mvn.w	sl, r3
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	4631      	mov	r1, r6
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 f991 	bl	80096fc <_Bfree>
 80093da:	2f00      	cmp	r7, #0
 80093dc:	f43f aeb4 	beq.w	8009148 <_dtoa_r+0x6d8>
 80093e0:	f1b8 0f00 	cmp.w	r8, #0
 80093e4:	d005      	beq.n	80093f2 <_dtoa_r+0x982>
 80093e6:	45b8      	cmp	r8, r7
 80093e8:	d003      	beq.n	80093f2 <_dtoa_r+0x982>
 80093ea:	4641      	mov	r1, r8
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 f985 	bl	80096fc <_Bfree>
 80093f2:	4639      	mov	r1, r7
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 f981 	bl	80096fc <_Bfree>
 80093fa:	e6a5      	b.n	8009148 <_dtoa_r+0x6d8>
 80093fc:	2600      	movs	r6, #0
 80093fe:	4637      	mov	r7, r6
 8009400:	e7e1      	b.n	80093c6 <_dtoa_r+0x956>
 8009402:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009408:	4637      	mov	r7, r6
 800940a:	e599      	b.n	8008f40 <_dtoa_r+0x4d0>
 800940c:	9b08      	ldr	r3, [sp, #32]
 800940e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 80fd 	beq.w	8009612 <_dtoa_r+0xba2>
 8009418:	2d00      	cmp	r5, #0
 800941a:	dd05      	ble.n	8009428 <_dtoa_r+0x9b8>
 800941c:	4639      	mov	r1, r7
 800941e:	462a      	mov	r2, r5
 8009420:	4620      	mov	r0, r4
 8009422:	f000 fb3d 	bl	8009aa0 <__lshift>
 8009426:	4607      	mov	r7, r0
 8009428:	9b06      	ldr	r3, [sp, #24]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d05c      	beq.n	80094e8 <_dtoa_r+0xa78>
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4620      	mov	r0, r4
 8009432:	f000 f923 	bl	800967c <_Balloc>
 8009436:	4605      	mov	r5, r0
 8009438:	b928      	cbnz	r0, 8009446 <_dtoa_r+0x9d6>
 800943a:	4b80      	ldr	r3, [pc, #512]	; (800963c <_dtoa_r+0xbcc>)
 800943c:	4602      	mov	r2, r0
 800943e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009442:	f7ff bb2e 	b.w	8008aa2 <_dtoa_r+0x32>
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	3202      	adds	r2, #2
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	f107 010c 	add.w	r1, r7, #12
 8009450:	300c      	adds	r0, #12
 8009452:	f000 f905 	bl	8009660 <memcpy>
 8009456:	2201      	movs	r2, #1
 8009458:	4629      	mov	r1, r5
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fb20 	bl	8009aa0 <__lshift>
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	444b      	add	r3, r9
 800946a:	9307      	str	r3, [sp, #28]
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	46b8      	mov	r8, r7
 8009474:	9306      	str	r3, [sp, #24]
 8009476:	4607      	mov	r7, r0
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	4631      	mov	r1, r6
 800947c:	3b01      	subs	r3, #1
 800947e:	4658      	mov	r0, fp
 8009480:	9302      	str	r3, [sp, #8]
 8009482:	f7ff fa67 	bl	8008954 <quorem>
 8009486:	4603      	mov	r3, r0
 8009488:	3330      	adds	r3, #48	; 0x30
 800948a:	9004      	str	r0, [sp, #16]
 800948c:	4641      	mov	r1, r8
 800948e:	4658      	mov	r0, fp
 8009490:	9308      	str	r3, [sp, #32]
 8009492:	f000 fb71 	bl	8009b78 <__mcmp>
 8009496:	463a      	mov	r2, r7
 8009498:	4681      	mov	r9, r0
 800949a:	4631      	mov	r1, r6
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fb87 	bl	8009bb0 <__mdiff>
 80094a2:	68c2      	ldr	r2, [r0, #12]
 80094a4:	9b08      	ldr	r3, [sp, #32]
 80094a6:	4605      	mov	r5, r0
 80094a8:	bb02      	cbnz	r2, 80094ec <_dtoa_r+0xa7c>
 80094aa:	4601      	mov	r1, r0
 80094ac:	4658      	mov	r0, fp
 80094ae:	f000 fb63 	bl	8009b78 <__mcmp>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	4602      	mov	r2, r0
 80094b6:	4629      	mov	r1, r5
 80094b8:	4620      	mov	r0, r4
 80094ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80094be:	f000 f91d 	bl	80096fc <_Bfree>
 80094c2:	9b05      	ldr	r3, [sp, #20]
 80094c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c6:	9d01      	ldr	r5, [sp, #4]
 80094c8:	ea43 0102 	orr.w	r1, r3, r2
 80094cc:	9b06      	ldr	r3, [sp, #24]
 80094ce:	430b      	orrs	r3, r1
 80094d0:	9b08      	ldr	r3, [sp, #32]
 80094d2:	d10d      	bne.n	80094f0 <_dtoa_r+0xa80>
 80094d4:	2b39      	cmp	r3, #57	; 0x39
 80094d6:	d029      	beq.n	800952c <_dtoa_r+0xabc>
 80094d8:	f1b9 0f00 	cmp.w	r9, #0
 80094dc:	dd01      	ble.n	80094e2 <_dtoa_r+0xa72>
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	3331      	adds	r3, #49	; 0x31
 80094e2:	9a02      	ldr	r2, [sp, #8]
 80094e4:	7013      	strb	r3, [r2, #0]
 80094e6:	e774      	b.n	80093d2 <_dtoa_r+0x962>
 80094e8:	4638      	mov	r0, r7
 80094ea:	e7b9      	b.n	8009460 <_dtoa_r+0x9f0>
 80094ec:	2201      	movs	r2, #1
 80094ee:	e7e2      	b.n	80094b6 <_dtoa_r+0xa46>
 80094f0:	f1b9 0f00 	cmp.w	r9, #0
 80094f4:	db06      	blt.n	8009504 <_dtoa_r+0xa94>
 80094f6:	9905      	ldr	r1, [sp, #20]
 80094f8:	ea41 0909 	orr.w	r9, r1, r9
 80094fc:	9906      	ldr	r1, [sp, #24]
 80094fe:	ea59 0101 	orrs.w	r1, r9, r1
 8009502:	d120      	bne.n	8009546 <_dtoa_r+0xad6>
 8009504:	2a00      	cmp	r2, #0
 8009506:	ddec      	ble.n	80094e2 <_dtoa_r+0xa72>
 8009508:	4659      	mov	r1, fp
 800950a:	2201      	movs	r2, #1
 800950c:	4620      	mov	r0, r4
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	f000 fac6 	bl	8009aa0 <__lshift>
 8009514:	4631      	mov	r1, r6
 8009516:	4683      	mov	fp, r0
 8009518:	f000 fb2e 	bl	8009b78 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	dc02      	bgt.n	8009528 <_dtoa_r+0xab8>
 8009522:	d1de      	bne.n	80094e2 <_dtoa_r+0xa72>
 8009524:	07da      	lsls	r2, r3, #31
 8009526:	d5dc      	bpl.n	80094e2 <_dtoa_r+0xa72>
 8009528:	2b39      	cmp	r3, #57	; 0x39
 800952a:	d1d8      	bne.n	80094de <_dtoa_r+0xa6e>
 800952c:	9a02      	ldr	r2, [sp, #8]
 800952e:	2339      	movs	r3, #57	; 0x39
 8009530:	7013      	strb	r3, [r2, #0]
 8009532:	462b      	mov	r3, r5
 8009534:	461d      	mov	r5, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800953c:	2a39      	cmp	r2, #57	; 0x39
 800953e:	d050      	beq.n	80095e2 <_dtoa_r+0xb72>
 8009540:	3201      	adds	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e745      	b.n	80093d2 <_dtoa_r+0x962>
 8009546:	2a00      	cmp	r2, #0
 8009548:	dd03      	ble.n	8009552 <_dtoa_r+0xae2>
 800954a:	2b39      	cmp	r3, #57	; 0x39
 800954c:	d0ee      	beq.n	800952c <_dtoa_r+0xabc>
 800954e:	3301      	adds	r3, #1
 8009550:	e7c7      	b.n	80094e2 <_dtoa_r+0xa72>
 8009552:	9a01      	ldr	r2, [sp, #4]
 8009554:	9907      	ldr	r1, [sp, #28]
 8009556:	f802 3c01 	strb.w	r3, [r2, #-1]
 800955a:	428a      	cmp	r2, r1
 800955c:	d02a      	beq.n	80095b4 <_dtoa_r+0xb44>
 800955e:	4659      	mov	r1, fp
 8009560:	2300      	movs	r3, #0
 8009562:	220a      	movs	r2, #10
 8009564:	4620      	mov	r0, r4
 8009566:	f000 f8eb 	bl	8009740 <__multadd>
 800956a:	45b8      	cmp	r8, r7
 800956c:	4683      	mov	fp, r0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	f04f 020a 	mov.w	r2, #10
 8009576:	4641      	mov	r1, r8
 8009578:	4620      	mov	r0, r4
 800957a:	d107      	bne.n	800958c <_dtoa_r+0xb1c>
 800957c:	f000 f8e0 	bl	8009740 <__multadd>
 8009580:	4680      	mov	r8, r0
 8009582:	4607      	mov	r7, r0
 8009584:	9b01      	ldr	r3, [sp, #4]
 8009586:	3301      	adds	r3, #1
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	e775      	b.n	8009478 <_dtoa_r+0xa08>
 800958c:	f000 f8d8 	bl	8009740 <__multadd>
 8009590:	4639      	mov	r1, r7
 8009592:	4680      	mov	r8, r0
 8009594:	2300      	movs	r3, #0
 8009596:	220a      	movs	r2, #10
 8009598:	4620      	mov	r0, r4
 800959a:	f000 f8d1 	bl	8009740 <__multadd>
 800959e:	4607      	mov	r7, r0
 80095a0:	e7f0      	b.n	8009584 <_dtoa_r+0xb14>
 80095a2:	f1b9 0f00 	cmp.w	r9, #0
 80095a6:	9a00      	ldr	r2, [sp, #0]
 80095a8:	bfcc      	ite	gt
 80095aa:	464d      	movgt	r5, r9
 80095ac:	2501      	movle	r5, #1
 80095ae:	4415      	add	r5, r2
 80095b0:	f04f 0800 	mov.w	r8, #0
 80095b4:	4659      	mov	r1, fp
 80095b6:	2201      	movs	r2, #1
 80095b8:	4620      	mov	r0, r4
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	f000 fa70 	bl	8009aa0 <__lshift>
 80095c0:	4631      	mov	r1, r6
 80095c2:	4683      	mov	fp, r0
 80095c4:	f000 fad8 	bl	8009b78 <__mcmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	dcb2      	bgt.n	8009532 <_dtoa_r+0xac2>
 80095cc:	d102      	bne.n	80095d4 <_dtoa_r+0xb64>
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	07db      	lsls	r3, r3, #31
 80095d2:	d4ae      	bmi.n	8009532 <_dtoa_r+0xac2>
 80095d4:	462b      	mov	r3, r5
 80095d6:	461d      	mov	r5, r3
 80095d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095dc:	2a30      	cmp	r2, #48	; 0x30
 80095de:	d0fa      	beq.n	80095d6 <_dtoa_r+0xb66>
 80095e0:	e6f7      	b.n	80093d2 <_dtoa_r+0x962>
 80095e2:	9a00      	ldr	r2, [sp, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d1a5      	bne.n	8009534 <_dtoa_r+0xac4>
 80095e8:	f10a 0a01 	add.w	sl, sl, #1
 80095ec:	2331      	movs	r3, #49	; 0x31
 80095ee:	e779      	b.n	80094e4 <_dtoa_r+0xa74>
 80095f0:	4b13      	ldr	r3, [pc, #76]	; (8009640 <_dtoa_r+0xbd0>)
 80095f2:	f7ff baaf 	b.w	8008b54 <_dtoa_r+0xe4>
 80095f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f47f aa86 	bne.w	8008b0a <_dtoa_r+0x9a>
 80095fe:	4b11      	ldr	r3, [pc, #68]	; (8009644 <_dtoa_r+0xbd4>)
 8009600:	f7ff baa8 	b.w	8008b54 <_dtoa_r+0xe4>
 8009604:	f1b9 0f00 	cmp.w	r9, #0
 8009608:	dc03      	bgt.n	8009612 <_dtoa_r+0xba2>
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	2b02      	cmp	r3, #2
 800960e:	f73f aec9 	bgt.w	80093a4 <_dtoa_r+0x934>
 8009612:	9d00      	ldr	r5, [sp, #0]
 8009614:	4631      	mov	r1, r6
 8009616:	4658      	mov	r0, fp
 8009618:	f7ff f99c 	bl	8008954 <quorem>
 800961c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009620:	f805 3b01 	strb.w	r3, [r5], #1
 8009624:	9a00      	ldr	r2, [sp, #0]
 8009626:	1aaa      	subs	r2, r5, r2
 8009628:	4591      	cmp	r9, r2
 800962a:	ddba      	ble.n	80095a2 <_dtoa_r+0xb32>
 800962c:	4659      	mov	r1, fp
 800962e:	2300      	movs	r3, #0
 8009630:	220a      	movs	r2, #10
 8009632:	4620      	mov	r0, r4
 8009634:	f000 f884 	bl	8009740 <__multadd>
 8009638:	4683      	mov	fp, r0
 800963a:	e7eb      	b.n	8009614 <_dtoa_r+0xba4>
 800963c:	080102db 	.word	0x080102db
 8009640:	08010234 	.word	0x08010234
 8009644:	08010258 	.word	0x08010258

08009648 <_localeconv_r>:
 8009648:	4800      	ldr	r0, [pc, #0]	; (800964c <_localeconv_r+0x4>)
 800964a:	4770      	bx	lr
 800964c:	200005e4 	.word	0x200005e4

08009650 <malloc>:
 8009650:	4b02      	ldr	r3, [pc, #8]	; (800965c <malloc+0xc>)
 8009652:	4601      	mov	r1, r0
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	f000 bbef 	b.w	8009e38 <_malloc_r>
 800965a:	bf00      	nop
 800965c:	20000490 	.word	0x20000490

08009660 <memcpy>:
 8009660:	440a      	add	r2, r1
 8009662:	4291      	cmp	r1, r2
 8009664:	f100 33ff 	add.w	r3, r0, #4294967295
 8009668:	d100      	bne.n	800966c <memcpy+0xc>
 800966a:	4770      	bx	lr
 800966c:	b510      	push	{r4, lr}
 800966e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009676:	4291      	cmp	r1, r2
 8009678:	d1f9      	bne.n	800966e <memcpy+0xe>
 800967a:	bd10      	pop	{r4, pc}

0800967c <_Balloc>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009680:	4604      	mov	r4, r0
 8009682:	460d      	mov	r5, r1
 8009684:	b976      	cbnz	r6, 80096a4 <_Balloc+0x28>
 8009686:	2010      	movs	r0, #16
 8009688:	f7ff ffe2 	bl	8009650 <malloc>
 800968c:	4602      	mov	r2, r0
 800968e:	6260      	str	r0, [r4, #36]	; 0x24
 8009690:	b920      	cbnz	r0, 800969c <_Balloc+0x20>
 8009692:	4b18      	ldr	r3, [pc, #96]	; (80096f4 <_Balloc+0x78>)
 8009694:	4818      	ldr	r0, [pc, #96]	; (80096f8 <_Balloc+0x7c>)
 8009696:	2166      	movs	r1, #102	; 0x66
 8009698:	f000 fd94 	bl	800a1c4 <__assert_func>
 800969c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a0:	6006      	str	r6, [r0, #0]
 80096a2:	60c6      	str	r6, [r0, #12]
 80096a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096a6:	68f3      	ldr	r3, [r6, #12]
 80096a8:	b183      	cbz	r3, 80096cc <_Balloc+0x50>
 80096aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096b2:	b9b8      	cbnz	r0, 80096e4 <_Balloc+0x68>
 80096b4:	2101      	movs	r1, #1
 80096b6:	fa01 f605 	lsl.w	r6, r1, r5
 80096ba:	1d72      	adds	r2, r6, #5
 80096bc:	0092      	lsls	r2, r2, #2
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 fb5a 	bl	8009d78 <_calloc_r>
 80096c4:	b160      	cbz	r0, 80096e0 <_Balloc+0x64>
 80096c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096ca:	e00e      	b.n	80096ea <_Balloc+0x6e>
 80096cc:	2221      	movs	r2, #33	; 0x21
 80096ce:	2104      	movs	r1, #4
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fb51 	bl	8009d78 <_calloc_r>
 80096d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d8:	60f0      	str	r0, [r6, #12]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e4      	bne.n	80096aa <_Balloc+0x2e>
 80096e0:	2000      	movs	r0, #0
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	6802      	ldr	r2, [r0, #0]
 80096e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096ea:	2300      	movs	r3, #0
 80096ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f0:	e7f7      	b.n	80096e2 <_Balloc+0x66>
 80096f2:	bf00      	nop
 80096f4:	08010265 	.word	0x08010265
 80096f8:	080102ec 	.word	0x080102ec

080096fc <_Bfree>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009700:	4605      	mov	r5, r0
 8009702:	460c      	mov	r4, r1
 8009704:	b976      	cbnz	r6, 8009724 <_Bfree+0x28>
 8009706:	2010      	movs	r0, #16
 8009708:	f7ff ffa2 	bl	8009650 <malloc>
 800970c:	4602      	mov	r2, r0
 800970e:	6268      	str	r0, [r5, #36]	; 0x24
 8009710:	b920      	cbnz	r0, 800971c <_Bfree+0x20>
 8009712:	4b09      	ldr	r3, [pc, #36]	; (8009738 <_Bfree+0x3c>)
 8009714:	4809      	ldr	r0, [pc, #36]	; (800973c <_Bfree+0x40>)
 8009716:	218a      	movs	r1, #138	; 0x8a
 8009718:	f000 fd54 	bl	800a1c4 <__assert_func>
 800971c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009720:	6006      	str	r6, [r0, #0]
 8009722:	60c6      	str	r6, [r0, #12]
 8009724:	b13c      	cbz	r4, 8009736 <_Bfree+0x3a>
 8009726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009728:	6862      	ldr	r2, [r4, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009730:	6021      	str	r1, [r4, #0]
 8009732:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	08010265 	.word	0x08010265
 800973c:	080102ec 	.word	0x080102ec

08009740 <__multadd>:
 8009740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009744:	690e      	ldr	r6, [r1, #16]
 8009746:	4607      	mov	r7, r0
 8009748:	4698      	mov	r8, r3
 800974a:	460c      	mov	r4, r1
 800974c:	f101 0014 	add.w	r0, r1, #20
 8009750:	2300      	movs	r3, #0
 8009752:	6805      	ldr	r5, [r0, #0]
 8009754:	b2a9      	uxth	r1, r5
 8009756:	fb02 8101 	mla	r1, r2, r1, r8
 800975a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800975e:	0c2d      	lsrs	r5, r5, #16
 8009760:	fb02 c505 	mla	r5, r2, r5, ip
 8009764:	b289      	uxth	r1, r1
 8009766:	3301      	adds	r3, #1
 8009768:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800976c:	429e      	cmp	r6, r3
 800976e:	f840 1b04 	str.w	r1, [r0], #4
 8009772:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009776:	dcec      	bgt.n	8009752 <__multadd+0x12>
 8009778:	f1b8 0f00 	cmp.w	r8, #0
 800977c:	d022      	beq.n	80097c4 <__multadd+0x84>
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	42b3      	cmp	r3, r6
 8009782:	dc19      	bgt.n	80097b8 <__multadd+0x78>
 8009784:	6861      	ldr	r1, [r4, #4]
 8009786:	4638      	mov	r0, r7
 8009788:	3101      	adds	r1, #1
 800978a:	f7ff ff77 	bl	800967c <_Balloc>
 800978e:	4605      	mov	r5, r0
 8009790:	b928      	cbnz	r0, 800979e <__multadd+0x5e>
 8009792:	4602      	mov	r2, r0
 8009794:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <__multadd+0x8c>)
 8009796:	480e      	ldr	r0, [pc, #56]	; (80097d0 <__multadd+0x90>)
 8009798:	21b5      	movs	r1, #181	; 0xb5
 800979a:	f000 fd13 	bl	800a1c4 <__assert_func>
 800979e:	6922      	ldr	r2, [r4, #16]
 80097a0:	3202      	adds	r2, #2
 80097a2:	f104 010c 	add.w	r1, r4, #12
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	300c      	adds	r0, #12
 80097aa:	f7ff ff59 	bl	8009660 <memcpy>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ffa3 	bl	80096fc <_Bfree>
 80097b6:	462c      	mov	r4, r5
 80097b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80097bc:	3601      	adds	r6, #1
 80097be:	f8c3 8014 	str.w	r8, [r3, #20]
 80097c2:	6126      	str	r6, [r4, #16]
 80097c4:	4620      	mov	r0, r4
 80097c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ca:	bf00      	nop
 80097cc:	080102db 	.word	0x080102db
 80097d0:	080102ec 	.word	0x080102ec

080097d4 <__hi0bits>:
 80097d4:	0c03      	lsrs	r3, r0, #16
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	b9d3      	cbnz	r3, 8009810 <__hi0bits+0x3c>
 80097da:	0400      	lsls	r0, r0, #16
 80097dc:	2310      	movs	r3, #16
 80097de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097e2:	bf04      	itt	eq
 80097e4:	0200      	lsleq	r0, r0, #8
 80097e6:	3308      	addeq	r3, #8
 80097e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097ec:	bf04      	itt	eq
 80097ee:	0100      	lsleq	r0, r0, #4
 80097f0:	3304      	addeq	r3, #4
 80097f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097f6:	bf04      	itt	eq
 80097f8:	0080      	lsleq	r0, r0, #2
 80097fa:	3302      	addeq	r3, #2
 80097fc:	2800      	cmp	r0, #0
 80097fe:	db05      	blt.n	800980c <__hi0bits+0x38>
 8009800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009804:	f103 0301 	add.w	r3, r3, #1
 8009808:	bf08      	it	eq
 800980a:	2320      	moveq	r3, #32
 800980c:	4618      	mov	r0, r3
 800980e:	4770      	bx	lr
 8009810:	2300      	movs	r3, #0
 8009812:	e7e4      	b.n	80097de <__hi0bits+0xa>

08009814 <__lo0bits>:
 8009814:	6803      	ldr	r3, [r0, #0]
 8009816:	f013 0207 	ands.w	r2, r3, #7
 800981a:	4601      	mov	r1, r0
 800981c:	d00b      	beq.n	8009836 <__lo0bits+0x22>
 800981e:	07da      	lsls	r2, r3, #31
 8009820:	d424      	bmi.n	800986c <__lo0bits+0x58>
 8009822:	0798      	lsls	r0, r3, #30
 8009824:	bf49      	itett	mi
 8009826:	085b      	lsrmi	r3, r3, #1
 8009828:	089b      	lsrpl	r3, r3, #2
 800982a:	2001      	movmi	r0, #1
 800982c:	600b      	strmi	r3, [r1, #0]
 800982e:	bf5c      	itt	pl
 8009830:	600b      	strpl	r3, [r1, #0]
 8009832:	2002      	movpl	r0, #2
 8009834:	4770      	bx	lr
 8009836:	b298      	uxth	r0, r3
 8009838:	b9b0      	cbnz	r0, 8009868 <__lo0bits+0x54>
 800983a:	0c1b      	lsrs	r3, r3, #16
 800983c:	2010      	movs	r0, #16
 800983e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009842:	bf04      	itt	eq
 8009844:	0a1b      	lsreq	r3, r3, #8
 8009846:	3008      	addeq	r0, #8
 8009848:	071a      	lsls	r2, r3, #28
 800984a:	bf04      	itt	eq
 800984c:	091b      	lsreq	r3, r3, #4
 800984e:	3004      	addeq	r0, #4
 8009850:	079a      	lsls	r2, r3, #30
 8009852:	bf04      	itt	eq
 8009854:	089b      	lsreq	r3, r3, #2
 8009856:	3002      	addeq	r0, #2
 8009858:	07da      	lsls	r2, r3, #31
 800985a:	d403      	bmi.n	8009864 <__lo0bits+0x50>
 800985c:	085b      	lsrs	r3, r3, #1
 800985e:	f100 0001 	add.w	r0, r0, #1
 8009862:	d005      	beq.n	8009870 <__lo0bits+0x5c>
 8009864:	600b      	str	r3, [r1, #0]
 8009866:	4770      	bx	lr
 8009868:	4610      	mov	r0, r2
 800986a:	e7e8      	b.n	800983e <__lo0bits+0x2a>
 800986c:	2000      	movs	r0, #0
 800986e:	4770      	bx	lr
 8009870:	2020      	movs	r0, #32
 8009872:	4770      	bx	lr

08009874 <__i2b>:
 8009874:	b510      	push	{r4, lr}
 8009876:	460c      	mov	r4, r1
 8009878:	2101      	movs	r1, #1
 800987a:	f7ff feff 	bl	800967c <_Balloc>
 800987e:	4602      	mov	r2, r0
 8009880:	b928      	cbnz	r0, 800988e <__i2b+0x1a>
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <__i2b+0x24>)
 8009884:	4805      	ldr	r0, [pc, #20]	; (800989c <__i2b+0x28>)
 8009886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800988a:	f000 fc9b 	bl	800a1c4 <__assert_func>
 800988e:	2301      	movs	r3, #1
 8009890:	6144      	str	r4, [r0, #20]
 8009892:	6103      	str	r3, [r0, #16]
 8009894:	bd10      	pop	{r4, pc}
 8009896:	bf00      	nop
 8009898:	080102db 	.word	0x080102db
 800989c:	080102ec 	.word	0x080102ec

080098a0 <__multiply>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4614      	mov	r4, r2
 80098a6:	690a      	ldr	r2, [r1, #16]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	bfb8      	it	lt
 80098ae:	460b      	movlt	r3, r1
 80098b0:	460d      	mov	r5, r1
 80098b2:	bfbc      	itt	lt
 80098b4:	4625      	movlt	r5, r4
 80098b6:	461c      	movlt	r4, r3
 80098b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80098bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098c0:	68ab      	ldr	r3, [r5, #8]
 80098c2:	6869      	ldr	r1, [r5, #4]
 80098c4:	eb0a 0709 	add.w	r7, sl, r9
 80098c8:	42bb      	cmp	r3, r7
 80098ca:	b085      	sub	sp, #20
 80098cc:	bfb8      	it	lt
 80098ce:	3101      	addlt	r1, #1
 80098d0:	f7ff fed4 	bl	800967c <_Balloc>
 80098d4:	b930      	cbnz	r0, 80098e4 <__multiply+0x44>
 80098d6:	4602      	mov	r2, r0
 80098d8:	4b42      	ldr	r3, [pc, #264]	; (80099e4 <__multiply+0x144>)
 80098da:	4843      	ldr	r0, [pc, #268]	; (80099e8 <__multiply+0x148>)
 80098dc:	f240 115d 	movw	r1, #349	; 0x15d
 80098e0:	f000 fc70 	bl	800a1c4 <__assert_func>
 80098e4:	f100 0614 	add.w	r6, r0, #20
 80098e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80098ec:	4633      	mov	r3, r6
 80098ee:	2200      	movs	r2, #0
 80098f0:	4543      	cmp	r3, r8
 80098f2:	d31e      	bcc.n	8009932 <__multiply+0x92>
 80098f4:	f105 0c14 	add.w	ip, r5, #20
 80098f8:	f104 0314 	add.w	r3, r4, #20
 80098fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009900:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009904:	9202      	str	r2, [sp, #8]
 8009906:	ebac 0205 	sub.w	r2, ip, r5
 800990a:	3a15      	subs	r2, #21
 800990c:	f022 0203 	bic.w	r2, r2, #3
 8009910:	3204      	adds	r2, #4
 8009912:	f105 0115 	add.w	r1, r5, #21
 8009916:	458c      	cmp	ip, r1
 8009918:	bf38      	it	cc
 800991a:	2204      	movcc	r2, #4
 800991c:	9201      	str	r2, [sp, #4]
 800991e:	9a02      	ldr	r2, [sp, #8]
 8009920:	9303      	str	r3, [sp, #12]
 8009922:	429a      	cmp	r2, r3
 8009924:	d808      	bhi.n	8009938 <__multiply+0x98>
 8009926:	2f00      	cmp	r7, #0
 8009928:	dc55      	bgt.n	80099d6 <__multiply+0x136>
 800992a:	6107      	str	r7, [r0, #16]
 800992c:	b005      	add	sp, #20
 800992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009932:	f843 2b04 	str.w	r2, [r3], #4
 8009936:	e7db      	b.n	80098f0 <__multiply+0x50>
 8009938:	f8b3 a000 	ldrh.w	sl, [r3]
 800993c:	f1ba 0f00 	cmp.w	sl, #0
 8009940:	d020      	beq.n	8009984 <__multiply+0xe4>
 8009942:	f105 0e14 	add.w	lr, r5, #20
 8009946:	46b1      	mov	r9, r6
 8009948:	2200      	movs	r2, #0
 800994a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800994e:	f8d9 b000 	ldr.w	fp, [r9]
 8009952:	b2a1      	uxth	r1, r4
 8009954:	fa1f fb8b 	uxth.w	fp, fp
 8009958:	fb0a b101 	mla	r1, sl, r1, fp
 800995c:	4411      	add	r1, r2
 800995e:	f8d9 2000 	ldr.w	r2, [r9]
 8009962:	0c24      	lsrs	r4, r4, #16
 8009964:	0c12      	lsrs	r2, r2, #16
 8009966:	fb0a 2404 	mla	r4, sl, r4, r2
 800996a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800996e:	b289      	uxth	r1, r1
 8009970:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009974:	45f4      	cmp	ip, lr
 8009976:	f849 1b04 	str.w	r1, [r9], #4
 800997a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800997e:	d8e4      	bhi.n	800994a <__multiply+0xaa>
 8009980:	9901      	ldr	r1, [sp, #4]
 8009982:	5072      	str	r2, [r6, r1]
 8009984:	9a03      	ldr	r2, [sp, #12]
 8009986:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800998a:	3304      	adds	r3, #4
 800998c:	f1b9 0f00 	cmp.w	r9, #0
 8009990:	d01f      	beq.n	80099d2 <__multiply+0x132>
 8009992:	6834      	ldr	r4, [r6, #0]
 8009994:	f105 0114 	add.w	r1, r5, #20
 8009998:	46b6      	mov	lr, r6
 800999a:	f04f 0a00 	mov.w	sl, #0
 800999e:	880a      	ldrh	r2, [r1, #0]
 80099a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80099a4:	fb09 b202 	mla	r2, r9, r2, fp
 80099a8:	4492      	add	sl, r2
 80099aa:	b2a4      	uxth	r4, r4
 80099ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80099b0:	f84e 4b04 	str.w	r4, [lr], #4
 80099b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80099b8:	f8be 2000 	ldrh.w	r2, [lr]
 80099bc:	0c24      	lsrs	r4, r4, #16
 80099be:	fb09 2404 	mla	r4, r9, r4, r2
 80099c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80099c6:	458c      	cmp	ip, r1
 80099c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099cc:	d8e7      	bhi.n	800999e <__multiply+0xfe>
 80099ce:	9a01      	ldr	r2, [sp, #4]
 80099d0:	50b4      	str	r4, [r6, r2]
 80099d2:	3604      	adds	r6, #4
 80099d4:	e7a3      	b.n	800991e <__multiply+0x7e>
 80099d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1a5      	bne.n	800992a <__multiply+0x8a>
 80099de:	3f01      	subs	r7, #1
 80099e0:	e7a1      	b.n	8009926 <__multiply+0x86>
 80099e2:	bf00      	nop
 80099e4:	080102db 	.word	0x080102db
 80099e8:	080102ec 	.word	0x080102ec

080099ec <__pow5mult>:
 80099ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f0:	4615      	mov	r5, r2
 80099f2:	f012 0203 	ands.w	r2, r2, #3
 80099f6:	4606      	mov	r6, r0
 80099f8:	460f      	mov	r7, r1
 80099fa:	d007      	beq.n	8009a0c <__pow5mult+0x20>
 80099fc:	4c25      	ldr	r4, [pc, #148]	; (8009a94 <__pow5mult+0xa8>)
 80099fe:	3a01      	subs	r2, #1
 8009a00:	2300      	movs	r3, #0
 8009a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a06:	f7ff fe9b 	bl	8009740 <__multadd>
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	10ad      	asrs	r5, r5, #2
 8009a0e:	d03d      	beq.n	8009a8c <__pow5mult+0xa0>
 8009a10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a12:	b97c      	cbnz	r4, 8009a34 <__pow5mult+0x48>
 8009a14:	2010      	movs	r0, #16
 8009a16:	f7ff fe1b 	bl	8009650 <malloc>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a1e:	b928      	cbnz	r0, 8009a2c <__pow5mult+0x40>
 8009a20:	4b1d      	ldr	r3, [pc, #116]	; (8009a98 <__pow5mult+0xac>)
 8009a22:	481e      	ldr	r0, [pc, #120]	; (8009a9c <__pow5mult+0xb0>)
 8009a24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a28:	f000 fbcc 	bl	800a1c4 <__assert_func>
 8009a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a30:	6004      	str	r4, [r0, #0]
 8009a32:	60c4      	str	r4, [r0, #12]
 8009a34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a3c:	b94c      	cbnz	r4, 8009a52 <__pow5mult+0x66>
 8009a3e:	f240 2171 	movw	r1, #625	; 0x271
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff16 	bl	8009874 <__i2b>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a4e:	4604      	mov	r4, r0
 8009a50:	6003      	str	r3, [r0, #0]
 8009a52:	f04f 0900 	mov.w	r9, #0
 8009a56:	07eb      	lsls	r3, r5, #31
 8009a58:	d50a      	bpl.n	8009a70 <__pow5mult+0x84>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f7ff ff1e 	bl	80098a0 <__multiply>
 8009a64:	4639      	mov	r1, r7
 8009a66:	4680      	mov	r8, r0
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff fe47 	bl	80096fc <_Bfree>
 8009a6e:	4647      	mov	r7, r8
 8009a70:	106d      	asrs	r5, r5, #1
 8009a72:	d00b      	beq.n	8009a8c <__pow5mult+0xa0>
 8009a74:	6820      	ldr	r0, [r4, #0]
 8009a76:	b938      	cbnz	r0, 8009a88 <__pow5mult+0x9c>
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff ff0f 	bl	80098a0 <__multiply>
 8009a82:	6020      	str	r0, [r4, #0]
 8009a84:	f8c0 9000 	str.w	r9, [r0]
 8009a88:	4604      	mov	r4, r0
 8009a8a:	e7e4      	b.n	8009a56 <__pow5mult+0x6a>
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a92:	bf00      	nop
 8009a94:	08010440 	.word	0x08010440
 8009a98:	08010265 	.word	0x08010265
 8009a9c:	080102ec 	.word	0x080102ec

08009aa0 <__lshift>:
 8009aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	6849      	ldr	r1, [r1, #4]
 8009aa8:	6923      	ldr	r3, [r4, #16]
 8009aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aae:	68a3      	ldr	r3, [r4, #8]
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	4691      	mov	r9, r2
 8009ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ab8:	f108 0601 	add.w	r6, r8, #1
 8009abc:	42b3      	cmp	r3, r6
 8009abe:	db0b      	blt.n	8009ad8 <__lshift+0x38>
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f7ff fddb 	bl	800967c <_Balloc>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b948      	cbnz	r0, 8009ade <__lshift+0x3e>
 8009aca:	4602      	mov	r2, r0
 8009acc:	4b28      	ldr	r3, [pc, #160]	; (8009b70 <__lshift+0xd0>)
 8009ace:	4829      	ldr	r0, [pc, #164]	; (8009b74 <__lshift+0xd4>)
 8009ad0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ad4:	f000 fb76 	bl	800a1c4 <__assert_func>
 8009ad8:	3101      	adds	r1, #1
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	e7ee      	b.n	8009abc <__lshift+0x1c>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f100 0114 	add.w	r1, r0, #20
 8009ae4:	f100 0210 	add.w	r2, r0, #16
 8009ae8:	4618      	mov	r0, r3
 8009aea:	4553      	cmp	r3, sl
 8009aec:	db33      	blt.n	8009b56 <__lshift+0xb6>
 8009aee:	6920      	ldr	r0, [r4, #16]
 8009af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009af4:	f104 0314 	add.w	r3, r4, #20
 8009af8:	f019 091f 	ands.w	r9, r9, #31
 8009afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b04:	d02b      	beq.n	8009b5e <__lshift+0xbe>
 8009b06:	f1c9 0e20 	rsb	lr, r9, #32
 8009b0a:	468a      	mov	sl, r1
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	fa00 f009 	lsl.w	r0, r0, r9
 8009b14:	4302      	orrs	r2, r0
 8009b16:	f84a 2b04 	str.w	r2, [sl], #4
 8009b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1e:	459c      	cmp	ip, r3
 8009b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b24:	d8f3      	bhi.n	8009b0e <__lshift+0x6e>
 8009b26:	ebac 0304 	sub.w	r3, ip, r4
 8009b2a:	3b15      	subs	r3, #21
 8009b2c:	f023 0303 	bic.w	r3, r3, #3
 8009b30:	3304      	adds	r3, #4
 8009b32:	f104 0015 	add.w	r0, r4, #21
 8009b36:	4584      	cmp	ip, r0
 8009b38:	bf38      	it	cc
 8009b3a:	2304      	movcc	r3, #4
 8009b3c:	50ca      	str	r2, [r1, r3]
 8009b3e:	b10a      	cbz	r2, 8009b44 <__lshift+0xa4>
 8009b40:	f108 0602 	add.w	r6, r8, #2
 8009b44:	3e01      	subs	r6, #1
 8009b46:	4638      	mov	r0, r7
 8009b48:	612e      	str	r6, [r5, #16]
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f7ff fdd6 	bl	80096fc <_Bfree>
 8009b50:	4628      	mov	r0, r5
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	e7c5      	b.n	8009aea <__lshift+0x4a>
 8009b5e:	3904      	subs	r1, #4
 8009b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b68:	459c      	cmp	ip, r3
 8009b6a:	d8f9      	bhi.n	8009b60 <__lshift+0xc0>
 8009b6c:	e7ea      	b.n	8009b44 <__lshift+0xa4>
 8009b6e:	bf00      	nop
 8009b70:	080102db 	.word	0x080102db
 8009b74:	080102ec 	.word	0x080102ec

08009b78 <__mcmp>:
 8009b78:	b530      	push	{r4, r5, lr}
 8009b7a:	6902      	ldr	r2, [r0, #16]
 8009b7c:	690c      	ldr	r4, [r1, #16]
 8009b7e:	1b12      	subs	r2, r2, r4
 8009b80:	d10e      	bne.n	8009ba0 <__mcmp+0x28>
 8009b82:	f100 0314 	add.w	r3, r0, #20
 8009b86:	3114      	adds	r1, #20
 8009b88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b98:	42a5      	cmp	r5, r4
 8009b9a:	d003      	beq.n	8009ba4 <__mcmp+0x2c>
 8009b9c:	d305      	bcc.n	8009baa <__mcmp+0x32>
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	bd30      	pop	{r4, r5, pc}
 8009ba4:	4283      	cmp	r3, r0
 8009ba6:	d3f3      	bcc.n	8009b90 <__mcmp+0x18>
 8009ba8:	e7fa      	b.n	8009ba0 <__mcmp+0x28>
 8009baa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bae:	e7f7      	b.n	8009ba0 <__mcmp+0x28>

08009bb0 <__mdiff>:
 8009bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4617      	mov	r7, r2
 8009bbe:	f7ff ffdb 	bl	8009b78 <__mcmp>
 8009bc2:	1e05      	subs	r5, r0, #0
 8009bc4:	d110      	bne.n	8009be8 <__mdiff+0x38>
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff fd57 	bl	800967c <_Balloc>
 8009bce:	b930      	cbnz	r0, 8009bde <__mdiff+0x2e>
 8009bd0:	4b39      	ldr	r3, [pc, #228]	; (8009cb8 <__mdiff+0x108>)
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	f240 2132 	movw	r1, #562	; 0x232
 8009bd8:	4838      	ldr	r0, [pc, #224]	; (8009cbc <__mdiff+0x10c>)
 8009bda:	f000 faf3 	bl	800a1c4 <__assert_func>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	bfa4      	itt	ge
 8009bea:	463b      	movge	r3, r7
 8009bec:	4627      	movge	r7, r4
 8009bee:	4630      	mov	r0, r6
 8009bf0:	6879      	ldr	r1, [r7, #4]
 8009bf2:	bfa6      	itte	ge
 8009bf4:	461c      	movge	r4, r3
 8009bf6:	2500      	movge	r5, #0
 8009bf8:	2501      	movlt	r5, #1
 8009bfa:	f7ff fd3f 	bl	800967c <_Balloc>
 8009bfe:	b920      	cbnz	r0, 8009c0a <__mdiff+0x5a>
 8009c00:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <__mdiff+0x108>)
 8009c02:	4602      	mov	r2, r0
 8009c04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c08:	e7e6      	b.n	8009bd8 <__mdiff+0x28>
 8009c0a:	693e      	ldr	r6, [r7, #16]
 8009c0c:	60c5      	str	r5, [r0, #12]
 8009c0e:	6925      	ldr	r5, [r4, #16]
 8009c10:	f107 0114 	add.w	r1, r7, #20
 8009c14:	f104 0914 	add.w	r9, r4, #20
 8009c18:	f100 0e14 	add.w	lr, r0, #20
 8009c1c:	f107 0210 	add.w	r2, r7, #16
 8009c20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c28:	46f2      	mov	sl, lr
 8009c2a:	2700      	movs	r7, #0
 8009c2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c34:	fa1f f883 	uxth.w	r8, r3
 8009c38:	fa17 f78b 	uxtah	r7, r7, fp
 8009c3c:	0c1b      	lsrs	r3, r3, #16
 8009c3e:	eba7 0808 	sub.w	r8, r7, r8
 8009c42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c4a:	fa1f f888 	uxth.w	r8, r8
 8009c4e:	141f      	asrs	r7, r3, #16
 8009c50:	454d      	cmp	r5, r9
 8009c52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c56:	f84a 3b04 	str.w	r3, [sl], #4
 8009c5a:	d8e7      	bhi.n	8009c2c <__mdiff+0x7c>
 8009c5c:	1b2b      	subs	r3, r5, r4
 8009c5e:	3b15      	subs	r3, #21
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	3304      	adds	r3, #4
 8009c66:	3415      	adds	r4, #21
 8009c68:	42a5      	cmp	r5, r4
 8009c6a:	bf38      	it	cc
 8009c6c:	2304      	movcc	r3, #4
 8009c6e:	4419      	add	r1, r3
 8009c70:	4473      	add	r3, lr
 8009c72:	469e      	mov	lr, r3
 8009c74:	460d      	mov	r5, r1
 8009c76:	4565      	cmp	r5, ip
 8009c78:	d30e      	bcc.n	8009c98 <__mdiff+0xe8>
 8009c7a:	f10c 0203 	add.w	r2, ip, #3
 8009c7e:	1a52      	subs	r2, r2, r1
 8009c80:	f022 0203 	bic.w	r2, r2, #3
 8009c84:	3903      	subs	r1, #3
 8009c86:	458c      	cmp	ip, r1
 8009c88:	bf38      	it	cc
 8009c8a:	2200      	movcc	r2, #0
 8009c8c:	441a      	add	r2, r3
 8009c8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c92:	b17b      	cbz	r3, 8009cb4 <__mdiff+0x104>
 8009c94:	6106      	str	r6, [r0, #16]
 8009c96:	e7a5      	b.n	8009be4 <__mdiff+0x34>
 8009c98:	f855 8b04 	ldr.w	r8, [r5], #4
 8009c9c:	fa17 f488 	uxtah	r4, r7, r8
 8009ca0:	1422      	asrs	r2, r4, #16
 8009ca2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009ca6:	b2a4      	uxth	r4, r4
 8009ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009cac:	f84e 4b04 	str.w	r4, [lr], #4
 8009cb0:	1417      	asrs	r7, r2, #16
 8009cb2:	e7e0      	b.n	8009c76 <__mdiff+0xc6>
 8009cb4:	3e01      	subs	r6, #1
 8009cb6:	e7ea      	b.n	8009c8e <__mdiff+0xde>
 8009cb8:	080102db 	.word	0x080102db
 8009cbc:	080102ec 	.word	0x080102ec

08009cc0 <__d2b>:
 8009cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	ec57 6b10 	vmov	r6, r7, d0
 8009ccc:	4690      	mov	r8, r2
 8009cce:	f7ff fcd5 	bl	800967c <_Balloc>
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	b930      	cbnz	r0, 8009ce4 <__d2b+0x24>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <__d2b+0xb0>)
 8009cda:	4826      	ldr	r0, [pc, #152]	; (8009d74 <__d2b+0xb4>)
 8009cdc:	f240 310a 	movw	r1, #778	; 0x30a
 8009ce0:	f000 fa70 	bl	800a1c4 <__assert_func>
 8009ce4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cec:	bb35      	cbnz	r5, 8009d3c <__d2b+0x7c>
 8009cee:	2e00      	cmp	r6, #0
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	d028      	beq.n	8009d46 <__d2b+0x86>
 8009cf4:	4668      	mov	r0, sp
 8009cf6:	9600      	str	r6, [sp, #0]
 8009cf8:	f7ff fd8c 	bl	8009814 <__lo0bits>
 8009cfc:	9900      	ldr	r1, [sp, #0]
 8009cfe:	b300      	cbz	r0, 8009d42 <__d2b+0x82>
 8009d00:	9a01      	ldr	r2, [sp, #4]
 8009d02:	f1c0 0320 	rsb	r3, r0, #32
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	40c2      	lsrs	r2, r0
 8009d0e:	6163      	str	r3, [r4, #20]
 8009d10:	9201      	str	r2, [sp, #4]
 8009d12:	9b01      	ldr	r3, [sp, #4]
 8009d14:	61a3      	str	r3, [r4, #24]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bf14      	ite	ne
 8009d1a:	2202      	movne	r2, #2
 8009d1c:	2201      	moveq	r2, #1
 8009d1e:	6122      	str	r2, [r4, #16]
 8009d20:	b1d5      	cbz	r5, 8009d58 <__d2b+0x98>
 8009d22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d26:	4405      	add	r5, r0
 8009d28:	f8c9 5000 	str.w	r5, [r9]
 8009d2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d30:	f8c8 0000 	str.w	r0, [r8]
 8009d34:	4620      	mov	r0, r4
 8009d36:	b003      	add	sp, #12
 8009d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d40:	e7d5      	b.n	8009cee <__d2b+0x2e>
 8009d42:	6161      	str	r1, [r4, #20]
 8009d44:	e7e5      	b.n	8009d12 <__d2b+0x52>
 8009d46:	a801      	add	r0, sp, #4
 8009d48:	f7ff fd64 	bl	8009814 <__lo0bits>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	2201      	movs	r2, #1
 8009d52:	6122      	str	r2, [r4, #16]
 8009d54:	3020      	adds	r0, #32
 8009d56:	e7e3      	b.n	8009d20 <__d2b+0x60>
 8009d58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d60:	f8c9 0000 	str.w	r0, [r9]
 8009d64:	6918      	ldr	r0, [r3, #16]
 8009d66:	f7ff fd35 	bl	80097d4 <__hi0bits>
 8009d6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d6e:	e7df      	b.n	8009d30 <__d2b+0x70>
 8009d70:	080102db 	.word	0x080102db
 8009d74:	080102ec 	.word	0x080102ec

08009d78 <_calloc_r>:
 8009d78:	b513      	push	{r0, r1, r4, lr}
 8009d7a:	434a      	muls	r2, r1
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	9201      	str	r2, [sp, #4]
 8009d80:	f000 f85a 	bl	8009e38 <_malloc_r>
 8009d84:	4604      	mov	r4, r0
 8009d86:	b118      	cbz	r0, 8009d90 <_calloc_r+0x18>
 8009d88:	9a01      	ldr	r2, [sp, #4]
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	f7fe f950 	bl	8008030 <memset>
 8009d90:	4620      	mov	r0, r4
 8009d92:	b002      	add	sp, #8
 8009d94:	bd10      	pop	{r4, pc}
	...

08009d98 <_free_r>:
 8009d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d048      	beq.n	8009e30 <_free_r+0x98>
 8009d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da2:	9001      	str	r0, [sp, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f1a1 0404 	sub.w	r4, r1, #4
 8009daa:	bfb8      	it	lt
 8009dac:	18e4      	addlt	r4, r4, r3
 8009dae:	f000 fa65 	bl	800a27c <__malloc_lock>
 8009db2:	4a20      	ldr	r2, [pc, #128]	; (8009e34 <_free_r+0x9c>)
 8009db4:	9801      	ldr	r0, [sp, #4]
 8009db6:	6813      	ldr	r3, [r2, #0]
 8009db8:	4615      	mov	r5, r2
 8009dba:	b933      	cbnz	r3, 8009dca <_free_r+0x32>
 8009dbc:	6063      	str	r3, [r4, #4]
 8009dbe:	6014      	str	r4, [r2, #0]
 8009dc0:	b003      	add	sp, #12
 8009dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dc6:	f000 ba5f 	b.w	800a288 <__malloc_unlock>
 8009dca:	42a3      	cmp	r3, r4
 8009dcc:	d90b      	bls.n	8009de6 <_free_r+0x4e>
 8009dce:	6821      	ldr	r1, [r4, #0]
 8009dd0:	1862      	adds	r2, r4, r1
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	bf04      	itt	eq
 8009dd6:	681a      	ldreq	r2, [r3, #0]
 8009dd8:	685b      	ldreq	r3, [r3, #4]
 8009dda:	6063      	str	r3, [r4, #4]
 8009ddc:	bf04      	itt	eq
 8009dde:	1852      	addeq	r2, r2, r1
 8009de0:	6022      	streq	r2, [r4, #0]
 8009de2:	602c      	str	r4, [r5, #0]
 8009de4:	e7ec      	b.n	8009dc0 <_free_r+0x28>
 8009de6:	461a      	mov	r2, r3
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	b10b      	cbz	r3, 8009df0 <_free_r+0x58>
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d9fa      	bls.n	8009de6 <_free_r+0x4e>
 8009df0:	6811      	ldr	r1, [r2, #0]
 8009df2:	1855      	adds	r5, r2, r1
 8009df4:	42a5      	cmp	r5, r4
 8009df6:	d10b      	bne.n	8009e10 <_free_r+0x78>
 8009df8:	6824      	ldr	r4, [r4, #0]
 8009dfa:	4421      	add	r1, r4
 8009dfc:	1854      	adds	r4, r2, r1
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	6011      	str	r1, [r2, #0]
 8009e02:	d1dd      	bne.n	8009dc0 <_free_r+0x28>
 8009e04:	681c      	ldr	r4, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	6053      	str	r3, [r2, #4]
 8009e0a:	4421      	add	r1, r4
 8009e0c:	6011      	str	r1, [r2, #0]
 8009e0e:	e7d7      	b.n	8009dc0 <_free_r+0x28>
 8009e10:	d902      	bls.n	8009e18 <_free_r+0x80>
 8009e12:	230c      	movs	r3, #12
 8009e14:	6003      	str	r3, [r0, #0]
 8009e16:	e7d3      	b.n	8009dc0 <_free_r+0x28>
 8009e18:	6825      	ldr	r5, [r4, #0]
 8009e1a:	1961      	adds	r1, r4, r5
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	bf04      	itt	eq
 8009e20:	6819      	ldreq	r1, [r3, #0]
 8009e22:	685b      	ldreq	r3, [r3, #4]
 8009e24:	6063      	str	r3, [r4, #4]
 8009e26:	bf04      	itt	eq
 8009e28:	1949      	addeq	r1, r1, r5
 8009e2a:	6021      	streq	r1, [r4, #0]
 8009e2c:	6054      	str	r4, [r2, #4]
 8009e2e:	e7c7      	b.n	8009dc0 <_free_r+0x28>
 8009e30:	b003      	add	sp, #12
 8009e32:	bd30      	pop	{r4, r5, pc}
 8009e34:	200006b8 	.word	0x200006b8

08009e38 <_malloc_r>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	1ccd      	adds	r5, r1, #3
 8009e3c:	f025 0503 	bic.w	r5, r5, #3
 8009e40:	3508      	adds	r5, #8
 8009e42:	2d0c      	cmp	r5, #12
 8009e44:	bf38      	it	cc
 8009e46:	250c      	movcc	r5, #12
 8009e48:	2d00      	cmp	r5, #0
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	db01      	blt.n	8009e52 <_malloc_r+0x1a>
 8009e4e:	42a9      	cmp	r1, r5
 8009e50:	d903      	bls.n	8009e5a <_malloc_r+0x22>
 8009e52:	230c      	movs	r3, #12
 8009e54:	6033      	str	r3, [r6, #0]
 8009e56:	2000      	movs	r0, #0
 8009e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5a:	f000 fa0f 	bl	800a27c <__malloc_lock>
 8009e5e:	4921      	ldr	r1, [pc, #132]	; (8009ee4 <_malloc_r+0xac>)
 8009e60:	680a      	ldr	r2, [r1, #0]
 8009e62:	4614      	mov	r4, r2
 8009e64:	b99c      	cbnz	r4, 8009e8e <_malloc_r+0x56>
 8009e66:	4f20      	ldr	r7, [pc, #128]	; (8009ee8 <_malloc_r+0xb0>)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	b923      	cbnz	r3, 8009e76 <_malloc_r+0x3e>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 f998 	bl	800a1a4 <_sbrk_r>
 8009e74:	6038      	str	r0, [r7, #0]
 8009e76:	4629      	mov	r1, r5
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f993 	bl	800a1a4 <_sbrk_r>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	d123      	bne.n	8009eca <_malloc_r+0x92>
 8009e82:	230c      	movs	r3, #12
 8009e84:	6033      	str	r3, [r6, #0]
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 f9fe 	bl	800a288 <__malloc_unlock>
 8009e8c:	e7e3      	b.n	8009e56 <_malloc_r+0x1e>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	1b5b      	subs	r3, r3, r5
 8009e92:	d417      	bmi.n	8009ec4 <_malloc_r+0x8c>
 8009e94:	2b0b      	cmp	r3, #11
 8009e96:	d903      	bls.n	8009ea0 <_malloc_r+0x68>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	441c      	add	r4, r3
 8009e9c:	6025      	str	r5, [r4, #0]
 8009e9e:	e004      	b.n	8009eaa <_malloc_r+0x72>
 8009ea0:	6863      	ldr	r3, [r4, #4]
 8009ea2:	42a2      	cmp	r2, r4
 8009ea4:	bf0c      	ite	eq
 8009ea6:	600b      	streq	r3, [r1, #0]
 8009ea8:	6053      	strne	r3, [r2, #4]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f000 f9ec 	bl	800a288 <__malloc_unlock>
 8009eb0:	f104 000b 	add.w	r0, r4, #11
 8009eb4:	1d23      	adds	r3, r4, #4
 8009eb6:	f020 0007 	bic.w	r0, r0, #7
 8009eba:	1ac2      	subs	r2, r0, r3
 8009ebc:	d0cc      	beq.n	8009e58 <_malloc_r+0x20>
 8009ebe:	1a1b      	subs	r3, r3, r0
 8009ec0:	50a3      	str	r3, [r4, r2]
 8009ec2:	e7c9      	b.n	8009e58 <_malloc_r+0x20>
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	6864      	ldr	r4, [r4, #4]
 8009ec8:	e7cc      	b.n	8009e64 <_malloc_r+0x2c>
 8009eca:	1cc4      	adds	r4, r0, #3
 8009ecc:	f024 0403 	bic.w	r4, r4, #3
 8009ed0:	42a0      	cmp	r0, r4
 8009ed2:	d0e3      	beq.n	8009e9c <_malloc_r+0x64>
 8009ed4:	1a21      	subs	r1, r4, r0
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f000 f964 	bl	800a1a4 <_sbrk_r>
 8009edc:	3001      	adds	r0, #1
 8009ede:	d1dd      	bne.n	8009e9c <_malloc_r+0x64>
 8009ee0:	e7cf      	b.n	8009e82 <_malloc_r+0x4a>
 8009ee2:	bf00      	nop
 8009ee4:	200006b8 	.word	0x200006b8
 8009ee8:	200006bc 	.word	0x200006bc

08009eec <__ssputs_r>:
 8009eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	688e      	ldr	r6, [r1, #8]
 8009ef2:	429e      	cmp	r6, r3
 8009ef4:	4682      	mov	sl, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	4690      	mov	r8, r2
 8009efa:	461f      	mov	r7, r3
 8009efc:	d838      	bhi.n	8009f70 <__ssputs_r+0x84>
 8009efe:	898a      	ldrh	r2, [r1, #12]
 8009f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f04:	d032      	beq.n	8009f6c <__ssputs_r+0x80>
 8009f06:	6825      	ldr	r5, [r4, #0]
 8009f08:	6909      	ldr	r1, [r1, #16]
 8009f0a:	eba5 0901 	sub.w	r9, r5, r1
 8009f0e:	6965      	ldr	r5, [r4, #20]
 8009f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f18:	3301      	adds	r3, #1
 8009f1a:	444b      	add	r3, r9
 8009f1c:	106d      	asrs	r5, r5, #1
 8009f1e:	429d      	cmp	r5, r3
 8009f20:	bf38      	it	cc
 8009f22:	461d      	movcc	r5, r3
 8009f24:	0553      	lsls	r3, r2, #21
 8009f26:	d531      	bpl.n	8009f8c <__ssputs_r+0xa0>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7ff ff85 	bl	8009e38 <_malloc_r>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	b950      	cbnz	r0, 8009f48 <__ssputs_r+0x5c>
 8009f32:	230c      	movs	r3, #12
 8009f34:	f8ca 3000 	str.w	r3, [sl]
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	f04f 30ff 	mov.w	r0, #4294967295
 8009f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f48:	6921      	ldr	r1, [r4, #16]
 8009f4a:	464a      	mov	r2, r9
 8009f4c:	f7ff fb88 	bl	8009660 <memcpy>
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	6126      	str	r6, [r4, #16]
 8009f5e:	6165      	str	r5, [r4, #20]
 8009f60:	444e      	add	r6, r9
 8009f62:	eba5 0509 	sub.w	r5, r5, r9
 8009f66:	6026      	str	r6, [r4, #0]
 8009f68:	60a5      	str	r5, [r4, #8]
 8009f6a:	463e      	mov	r6, r7
 8009f6c:	42be      	cmp	r6, r7
 8009f6e:	d900      	bls.n	8009f72 <__ssputs_r+0x86>
 8009f70:	463e      	mov	r6, r7
 8009f72:	4632      	mov	r2, r6
 8009f74:	6820      	ldr	r0, [r4, #0]
 8009f76:	4641      	mov	r1, r8
 8009f78:	f000 f966 	bl	800a248 <memmove>
 8009f7c:	68a3      	ldr	r3, [r4, #8]
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	1b9b      	subs	r3, r3, r6
 8009f82:	4432      	add	r2, r6
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7db      	b.n	8009f44 <__ssputs_r+0x58>
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	f000 f981 	bl	800a294 <_realloc_r>
 8009f92:	4606      	mov	r6, r0
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d1e1      	bne.n	8009f5c <__ssputs_r+0x70>
 8009f98:	6921      	ldr	r1, [r4, #16]
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f7ff fefc 	bl	8009d98 <_free_r>
 8009fa0:	e7c7      	b.n	8009f32 <__ssputs_r+0x46>
	...

08009fa4 <_svfiprintf_r>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	4698      	mov	r8, r3
 8009faa:	898b      	ldrh	r3, [r1, #12]
 8009fac:	061b      	lsls	r3, r3, #24
 8009fae:	b09d      	sub	sp, #116	; 0x74
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	d50e      	bpl.n	8009fd6 <_svfiprintf_r+0x32>
 8009fb8:	690b      	ldr	r3, [r1, #16]
 8009fba:	b963      	cbnz	r3, 8009fd6 <_svfiprintf_r+0x32>
 8009fbc:	2140      	movs	r1, #64	; 0x40
 8009fbe:	f7ff ff3b 	bl	8009e38 <_malloc_r>
 8009fc2:	6028      	str	r0, [r5, #0]
 8009fc4:	6128      	str	r0, [r5, #16]
 8009fc6:	b920      	cbnz	r0, 8009fd2 <_svfiprintf_r+0x2e>
 8009fc8:	230c      	movs	r3, #12
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	e0d1      	b.n	800a176 <_svfiprintf_r+0x1d2>
 8009fd2:	2340      	movs	r3, #64	; 0x40
 8009fd4:	616b      	str	r3, [r5, #20]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fda:	2320      	movs	r3, #32
 8009fdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe4:	2330      	movs	r3, #48	; 0x30
 8009fe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a190 <_svfiprintf_r+0x1ec>
 8009fea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fee:	f04f 0901 	mov.w	r9, #1
 8009ff2:	4623      	mov	r3, r4
 8009ff4:	469a      	mov	sl, r3
 8009ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffa:	b10a      	cbz	r2, 800a000 <_svfiprintf_r+0x5c>
 8009ffc:	2a25      	cmp	r2, #37	; 0x25
 8009ffe:	d1f9      	bne.n	8009ff4 <_svfiprintf_r+0x50>
 800a000:	ebba 0b04 	subs.w	fp, sl, r4
 800a004:	d00b      	beq.n	800a01e <_svfiprintf_r+0x7a>
 800a006:	465b      	mov	r3, fp
 800a008:	4622      	mov	r2, r4
 800a00a:	4629      	mov	r1, r5
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff ff6d 	bl	8009eec <__ssputs_r>
 800a012:	3001      	adds	r0, #1
 800a014:	f000 80aa 	beq.w	800a16c <_svfiprintf_r+0x1c8>
 800a018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a01a:	445a      	add	r2, fp
 800a01c:	9209      	str	r2, [sp, #36]	; 0x24
 800a01e:	f89a 3000 	ldrb.w	r3, [sl]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 80a2 	beq.w	800a16c <_svfiprintf_r+0x1c8>
 800a028:	2300      	movs	r3, #0
 800a02a:	f04f 32ff 	mov.w	r2, #4294967295
 800a02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a032:	f10a 0a01 	add.w	sl, sl, #1
 800a036:	9304      	str	r3, [sp, #16]
 800a038:	9307      	str	r3, [sp, #28]
 800a03a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a03e:	931a      	str	r3, [sp, #104]	; 0x68
 800a040:	4654      	mov	r4, sl
 800a042:	2205      	movs	r2, #5
 800a044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a048:	4851      	ldr	r0, [pc, #324]	; (800a190 <_svfiprintf_r+0x1ec>)
 800a04a:	f7f6 f8f1 	bl	8000230 <memchr>
 800a04e:	9a04      	ldr	r2, [sp, #16]
 800a050:	b9d8      	cbnz	r0, 800a08a <_svfiprintf_r+0xe6>
 800a052:	06d0      	lsls	r0, r2, #27
 800a054:	bf44      	itt	mi
 800a056:	2320      	movmi	r3, #32
 800a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a05c:	0711      	lsls	r1, r2, #28
 800a05e:	bf44      	itt	mi
 800a060:	232b      	movmi	r3, #43	; 0x2b
 800a062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a066:	f89a 3000 	ldrb.w	r3, [sl]
 800a06a:	2b2a      	cmp	r3, #42	; 0x2a
 800a06c:	d015      	beq.n	800a09a <_svfiprintf_r+0xf6>
 800a06e:	9a07      	ldr	r2, [sp, #28]
 800a070:	4654      	mov	r4, sl
 800a072:	2000      	movs	r0, #0
 800a074:	f04f 0c0a 	mov.w	ip, #10
 800a078:	4621      	mov	r1, r4
 800a07a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a07e:	3b30      	subs	r3, #48	; 0x30
 800a080:	2b09      	cmp	r3, #9
 800a082:	d94e      	bls.n	800a122 <_svfiprintf_r+0x17e>
 800a084:	b1b0      	cbz	r0, 800a0b4 <_svfiprintf_r+0x110>
 800a086:	9207      	str	r2, [sp, #28]
 800a088:	e014      	b.n	800a0b4 <_svfiprintf_r+0x110>
 800a08a:	eba0 0308 	sub.w	r3, r0, r8
 800a08e:	fa09 f303 	lsl.w	r3, r9, r3
 800a092:	4313      	orrs	r3, r2
 800a094:	9304      	str	r3, [sp, #16]
 800a096:	46a2      	mov	sl, r4
 800a098:	e7d2      	b.n	800a040 <_svfiprintf_r+0x9c>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	1d19      	adds	r1, r3, #4
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	9103      	str	r1, [sp, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bfbb      	ittet	lt
 800a0a6:	425b      	neglt	r3, r3
 800a0a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ac:	9307      	strge	r3, [sp, #28]
 800a0ae:	9307      	strlt	r3, [sp, #28]
 800a0b0:	bfb8      	it	lt
 800a0b2:	9204      	strlt	r2, [sp, #16]
 800a0b4:	7823      	ldrb	r3, [r4, #0]
 800a0b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b8:	d10c      	bne.n	800a0d4 <_svfiprintf_r+0x130>
 800a0ba:	7863      	ldrb	r3, [r4, #1]
 800a0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0be:	d135      	bne.n	800a12c <_svfiprintf_r+0x188>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	1d1a      	adds	r2, r3, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	9203      	str	r2, [sp, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfb8      	it	lt
 800a0cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0d0:	3402      	adds	r4, #2
 800a0d2:	9305      	str	r3, [sp, #20]
 800a0d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1a0 <_svfiprintf_r+0x1fc>
 800a0d8:	7821      	ldrb	r1, [r4, #0]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	4650      	mov	r0, sl
 800a0de:	f7f6 f8a7 	bl	8000230 <memchr>
 800a0e2:	b140      	cbz	r0, 800a0f6 <_svfiprintf_r+0x152>
 800a0e4:	2340      	movs	r3, #64	; 0x40
 800a0e6:	eba0 000a 	sub.w	r0, r0, sl
 800a0ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	4303      	orrs	r3, r0
 800a0f2:	3401      	adds	r4, #1
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fa:	4826      	ldr	r0, [pc, #152]	; (800a194 <_svfiprintf_r+0x1f0>)
 800a0fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a100:	2206      	movs	r2, #6
 800a102:	f7f6 f895 	bl	8000230 <memchr>
 800a106:	2800      	cmp	r0, #0
 800a108:	d038      	beq.n	800a17c <_svfiprintf_r+0x1d8>
 800a10a:	4b23      	ldr	r3, [pc, #140]	; (800a198 <_svfiprintf_r+0x1f4>)
 800a10c:	bb1b      	cbnz	r3, 800a156 <_svfiprintf_r+0x1b2>
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	3307      	adds	r3, #7
 800a112:	f023 0307 	bic.w	r3, r3, #7
 800a116:	3308      	adds	r3, #8
 800a118:	9303      	str	r3, [sp, #12]
 800a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11c:	4433      	add	r3, r6
 800a11e:	9309      	str	r3, [sp, #36]	; 0x24
 800a120:	e767      	b.n	8009ff2 <_svfiprintf_r+0x4e>
 800a122:	fb0c 3202 	mla	r2, ip, r2, r3
 800a126:	460c      	mov	r4, r1
 800a128:	2001      	movs	r0, #1
 800a12a:	e7a5      	b.n	800a078 <_svfiprintf_r+0xd4>
 800a12c:	2300      	movs	r3, #0
 800a12e:	3401      	adds	r4, #1
 800a130:	9305      	str	r3, [sp, #20]
 800a132:	4619      	mov	r1, r3
 800a134:	f04f 0c0a 	mov.w	ip, #10
 800a138:	4620      	mov	r0, r4
 800a13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a13e:	3a30      	subs	r2, #48	; 0x30
 800a140:	2a09      	cmp	r2, #9
 800a142:	d903      	bls.n	800a14c <_svfiprintf_r+0x1a8>
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0c5      	beq.n	800a0d4 <_svfiprintf_r+0x130>
 800a148:	9105      	str	r1, [sp, #20]
 800a14a:	e7c3      	b.n	800a0d4 <_svfiprintf_r+0x130>
 800a14c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a150:	4604      	mov	r4, r0
 800a152:	2301      	movs	r3, #1
 800a154:	e7f0      	b.n	800a138 <_svfiprintf_r+0x194>
 800a156:	ab03      	add	r3, sp, #12
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	462a      	mov	r2, r5
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <_svfiprintf_r+0x1f8>)
 800a15e:	a904      	add	r1, sp, #16
 800a160:	4638      	mov	r0, r7
 800a162:	f7fe f80d 	bl	8008180 <_printf_float>
 800a166:	1c42      	adds	r2, r0, #1
 800a168:	4606      	mov	r6, r0
 800a16a:	d1d6      	bne.n	800a11a <_svfiprintf_r+0x176>
 800a16c:	89ab      	ldrh	r3, [r5, #12]
 800a16e:	065b      	lsls	r3, r3, #25
 800a170:	f53f af2c 	bmi.w	8009fcc <_svfiprintf_r+0x28>
 800a174:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a176:	b01d      	add	sp, #116	; 0x74
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	ab03      	add	r3, sp, #12
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	462a      	mov	r2, r5
 800a182:	4b06      	ldr	r3, [pc, #24]	; (800a19c <_svfiprintf_r+0x1f8>)
 800a184:	a904      	add	r1, sp, #16
 800a186:	4638      	mov	r0, r7
 800a188:	f7fe fa9e 	bl	80086c8 <_printf_i>
 800a18c:	e7eb      	b.n	800a166 <_svfiprintf_r+0x1c2>
 800a18e:	bf00      	nop
 800a190:	0801044c 	.word	0x0801044c
 800a194:	08010456 	.word	0x08010456
 800a198:	08008181 	.word	0x08008181
 800a19c:	08009eed 	.word	0x08009eed
 800a1a0:	08010452 	.word	0x08010452

0800a1a4 <_sbrk_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d06      	ldr	r5, [pc, #24]	; (800a1c0 <_sbrk_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	f7fd feb2 	bl	8007f18 <_sbrk>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_sbrk_r+0x1a>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_sbrk_r+0x1a>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	20001774 	.word	0x20001774

0800a1c4 <__assert_func>:
 800a1c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1c6:	4614      	mov	r4, r2
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <__assert_func+0x2c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	68d8      	ldr	r0, [r3, #12]
 800a1d2:	b14c      	cbz	r4, 800a1e8 <__assert_func+0x24>
 800a1d4:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <__assert_func+0x30>)
 800a1d6:	9100      	str	r1, [sp, #0]
 800a1d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1dc:	4906      	ldr	r1, [pc, #24]	; (800a1f8 <__assert_func+0x34>)
 800a1de:	462b      	mov	r3, r5
 800a1e0:	f000 f80e 	bl	800a200 <fiprintf>
 800a1e4:	f000 faa4 	bl	800a730 <abort>
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <__assert_func+0x38>)
 800a1ea:	461c      	mov	r4, r3
 800a1ec:	e7f3      	b.n	800a1d6 <__assert_func+0x12>
 800a1ee:	bf00      	nop
 800a1f0:	20000490 	.word	0x20000490
 800a1f4:	0801045d 	.word	0x0801045d
 800a1f8:	0801046a 	.word	0x0801046a
 800a1fc:	08010498 	.word	0x08010498

0800a200 <fiprintf>:
 800a200:	b40e      	push	{r1, r2, r3}
 800a202:	b503      	push	{r0, r1, lr}
 800a204:	4601      	mov	r1, r0
 800a206:	ab03      	add	r3, sp, #12
 800a208:	4805      	ldr	r0, [pc, #20]	; (800a220 <fiprintf+0x20>)
 800a20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	f000 f88f 	bl	800a334 <_vfiprintf_r>
 800a216:	b002      	add	sp, #8
 800a218:	f85d eb04 	ldr.w	lr, [sp], #4
 800a21c:	b003      	add	sp, #12
 800a21e:	4770      	bx	lr
 800a220:	20000490 	.word	0x20000490

0800a224 <__ascii_mbtowc>:
 800a224:	b082      	sub	sp, #8
 800a226:	b901      	cbnz	r1, 800a22a <__ascii_mbtowc+0x6>
 800a228:	a901      	add	r1, sp, #4
 800a22a:	b142      	cbz	r2, 800a23e <__ascii_mbtowc+0x1a>
 800a22c:	b14b      	cbz	r3, 800a242 <__ascii_mbtowc+0x1e>
 800a22e:	7813      	ldrb	r3, [r2, #0]
 800a230:	600b      	str	r3, [r1, #0]
 800a232:	7812      	ldrb	r2, [r2, #0]
 800a234:	1e10      	subs	r0, r2, #0
 800a236:	bf18      	it	ne
 800a238:	2001      	movne	r0, #1
 800a23a:	b002      	add	sp, #8
 800a23c:	4770      	bx	lr
 800a23e:	4610      	mov	r0, r2
 800a240:	e7fb      	b.n	800a23a <__ascii_mbtowc+0x16>
 800a242:	f06f 0001 	mvn.w	r0, #1
 800a246:	e7f8      	b.n	800a23a <__ascii_mbtowc+0x16>

0800a248 <memmove>:
 800a248:	4288      	cmp	r0, r1
 800a24a:	b510      	push	{r4, lr}
 800a24c:	eb01 0402 	add.w	r4, r1, r2
 800a250:	d902      	bls.n	800a258 <memmove+0x10>
 800a252:	4284      	cmp	r4, r0
 800a254:	4623      	mov	r3, r4
 800a256:	d807      	bhi.n	800a268 <memmove+0x20>
 800a258:	1e43      	subs	r3, r0, #1
 800a25a:	42a1      	cmp	r1, r4
 800a25c:	d008      	beq.n	800a270 <memmove+0x28>
 800a25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a266:	e7f8      	b.n	800a25a <memmove+0x12>
 800a268:	4402      	add	r2, r0
 800a26a:	4601      	mov	r1, r0
 800a26c:	428a      	cmp	r2, r1
 800a26e:	d100      	bne.n	800a272 <memmove+0x2a>
 800a270:	bd10      	pop	{r4, pc}
 800a272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a27a:	e7f7      	b.n	800a26c <memmove+0x24>

0800a27c <__malloc_lock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__malloc_lock+0x8>)
 800a27e:	f000 bc17 	b.w	800aab0 <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	2000177c 	.word	0x2000177c

0800a288 <__malloc_unlock>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__malloc_unlock+0x8>)
 800a28a:	f000 bc12 	b.w	800aab2 <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	2000177c 	.word	0x2000177c

0800a294 <_realloc_r>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	4607      	mov	r7, r0
 800a298:	4614      	mov	r4, r2
 800a29a:	460e      	mov	r6, r1
 800a29c:	b921      	cbnz	r1, 800a2a8 <_realloc_r+0x14>
 800a29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	f7ff bdc8 	b.w	8009e38 <_malloc_r>
 800a2a8:	b922      	cbnz	r2, 800a2b4 <_realloc_r+0x20>
 800a2aa:	f7ff fd75 	bl	8009d98 <_free_r>
 800a2ae:	4625      	mov	r5, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2b4:	f000 fc62 	bl	800ab7c <_malloc_usable_size_r>
 800a2b8:	42a0      	cmp	r0, r4
 800a2ba:	d20f      	bcs.n	800a2dc <_realloc_r+0x48>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4638      	mov	r0, r7
 800a2c0:	f7ff fdba 	bl	8009e38 <_malloc_r>
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d0f2      	beq.n	800a2b0 <_realloc_r+0x1c>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	f7ff f9c7 	bl	8009660 <memcpy>
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff fd5f 	bl	8009d98 <_free_r>
 800a2da:	e7e9      	b.n	800a2b0 <_realloc_r+0x1c>
 800a2dc:	4635      	mov	r5, r6
 800a2de:	e7e7      	b.n	800a2b0 <_realloc_r+0x1c>

0800a2e0 <__sfputc_r>:
 800a2e0:	6893      	ldr	r3, [r2, #8]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	b410      	push	{r4}
 800a2e8:	6093      	str	r3, [r2, #8]
 800a2ea:	da08      	bge.n	800a2fe <__sfputc_r+0x1e>
 800a2ec:	6994      	ldr	r4, [r2, #24]
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	db01      	blt.n	800a2f6 <__sfputc_r+0x16>
 800a2f2:	290a      	cmp	r1, #10
 800a2f4:	d103      	bne.n	800a2fe <__sfputc_r+0x1e>
 800a2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fa:	f000 b94b 	b.w	800a594 <__swbuf_r>
 800a2fe:	6813      	ldr	r3, [r2, #0]
 800a300:	1c58      	adds	r0, r3, #1
 800a302:	6010      	str	r0, [r2, #0]
 800a304:	7019      	strb	r1, [r3, #0]
 800a306:	4608      	mov	r0, r1
 800a308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <__sfputs_r>:
 800a30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a310:	4606      	mov	r6, r0
 800a312:	460f      	mov	r7, r1
 800a314:	4614      	mov	r4, r2
 800a316:	18d5      	adds	r5, r2, r3
 800a318:	42ac      	cmp	r4, r5
 800a31a:	d101      	bne.n	800a320 <__sfputs_r+0x12>
 800a31c:	2000      	movs	r0, #0
 800a31e:	e007      	b.n	800a330 <__sfputs_r+0x22>
 800a320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a324:	463a      	mov	r2, r7
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff ffda 	bl	800a2e0 <__sfputc_r>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d1f3      	bne.n	800a318 <__sfputs_r+0xa>
 800a330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a334 <_vfiprintf_r>:
 800a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	460d      	mov	r5, r1
 800a33a:	b09d      	sub	sp, #116	; 0x74
 800a33c:	4614      	mov	r4, r2
 800a33e:	4698      	mov	r8, r3
 800a340:	4606      	mov	r6, r0
 800a342:	b118      	cbz	r0, 800a34c <_vfiprintf_r+0x18>
 800a344:	6983      	ldr	r3, [r0, #24]
 800a346:	b90b      	cbnz	r3, 800a34c <_vfiprintf_r+0x18>
 800a348:	f000 fb14 	bl	800a974 <__sinit>
 800a34c:	4b89      	ldr	r3, [pc, #548]	; (800a574 <_vfiprintf_r+0x240>)
 800a34e:	429d      	cmp	r5, r3
 800a350:	d11b      	bne.n	800a38a <_vfiprintf_r+0x56>
 800a352:	6875      	ldr	r5, [r6, #4]
 800a354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a356:	07d9      	lsls	r1, r3, #31
 800a358:	d405      	bmi.n	800a366 <_vfiprintf_r+0x32>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	059a      	lsls	r2, r3, #22
 800a35e:	d402      	bmi.n	800a366 <_vfiprintf_r+0x32>
 800a360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a362:	f000 fba5 	bl	800aab0 <__retarget_lock_acquire_recursive>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	071b      	lsls	r3, r3, #28
 800a36a:	d501      	bpl.n	800a370 <_vfiprintf_r+0x3c>
 800a36c:	692b      	ldr	r3, [r5, #16]
 800a36e:	b9eb      	cbnz	r3, 800a3ac <_vfiprintf_r+0x78>
 800a370:	4629      	mov	r1, r5
 800a372:	4630      	mov	r0, r6
 800a374:	f000 f96e 	bl	800a654 <__swsetup_r>
 800a378:	b1c0      	cbz	r0, 800a3ac <_vfiprintf_r+0x78>
 800a37a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a37c:	07dc      	lsls	r4, r3, #31
 800a37e:	d50e      	bpl.n	800a39e <_vfiprintf_r+0x6a>
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	b01d      	add	sp, #116	; 0x74
 800a386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38a:	4b7b      	ldr	r3, [pc, #492]	; (800a578 <_vfiprintf_r+0x244>)
 800a38c:	429d      	cmp	r5, r3
 800a38e:	d101      	bne.n	800a394 <_vfiprintf_r+0x60>
 800a390:	68b5      	ldr	r5, [r6, #8]
 800a392:	e7df      	b.n	800a354 <_vfiprintf_r+0x20>
 800a394:	4b79      	ldr	r3, [pc, #484]	; (800a57c <_vfiprintf_r+0x248>)
 800a396:	429d      	cmp	r5, r3
 800a398:	bf08      	it	eq
 800a39a:	68f5      	ldreq	r5, [r6, #12]
 800a39c:	e7da      	b.n	800a354 <_vfiprintf_r+0x20>
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	0598      	lsls	r0, r3, #22
 800a3a2:	d4ed      	bmi.n	800a380 <_vfiprintf_r+0x4c>
 800a3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3a6:	f000 fb84 	bl	800aab2 <__retarget_lock_release_recursive>
 800a3aa:	e7e9      	b.n	800a380 <_vfiprintf_r+0x4c>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ba:	2330      	movs	r3, #48	; 0x30
 800a3bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a580 <_vfiprintf_r+0x24c>
 800a3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3c4:	f04f 0901 	mov.w	r9, #1
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	469a      	mov	sl, r3
 800a3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d0:	b10a      	cbz	r2, 800a3d6 <_vfiprintf_r+0xa2>
 800a3d2:	2a25      	cmp	r2, #37	; 0x25
 800a3d4:	d1f9      	bne.n	800a3ca <_vfiprintf_r+0x96>
 800a3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3da:	d00b      	beq.n	800a3f4 <_vfiprintf_r+0xc0>
 800a3dc:	465b      	mov	r3, fp
 800a3de:	4622      	mov	r2, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7ff ff93 	bl	800a30e <__sfputs_r>
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	f000 80aa 	beq.w	800a542 <_vfiprintf_r+0x20e>
 800a3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f0:	445a      	add	r2, fp
 800a3f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 80a2 	beq.w	800a542 <_vfiprintf_r+0x20e>
 800a3fe:	2300      	movs	r3, #0
 800a400:	f04f 32ff 	mov.w	r2, #4294967295
 800a404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a408:	f10a 0a01 	add.w	sl, sl, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	9307      	str	r3, [sp, #28]
 800a410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a414:	931a      	str	r3, [sp, #104]	; 0x68
 800a416:	4654      	mov	r4, sl
 800a418:	2205      	movs	r2, #5
 800a41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41e:	4858      	ldr	r0, [pc, #352]	; (800a580 <_vfiprintf_r+0x24c>)
 800a420:	f7f5 ff06 	bl	8000230 <memchr>
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	b9d8      	cbnz	r0, 800a460 <_vfiprintf_r+0x12c>
 800a428:	06d1      	lsls	r1, r2, #27
 800a42a:	bf44      	itt	mi
 800a42c:	2320      	movmi	r3, #32
 800a42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a432:	0713      	lsls	r3, r2, #28
 800a434:	bf44      	itt	mi
 800a436:	232b      	movmi	r3, #43	; 0x2b
 800a438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a43c:	f89a 3000 	ldrb.w	r3, [sl]
 800a440:	2b2a      	cmp	r3, #42	; 0x2a
 800a442:	d015      	beq.n	800a470 <_vfiprintf_r+0x13c>
 800a444:	9a07      	ldr	r2, [sp, #28]
 800a446:	4654      	mov	r4, sl
 800a448:	2000      	movs	r0, #0
 800a44a:	f04f 0c0a 	mov.w	ip, #10
 800a44e:	4621      	mov	r1, r4
 800a450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a454:	3b30      	subs	r3, #48	; 0x30
 800a456:	2b09      	cmp	r3, #9
 800a458:	d94e      	bls.n	800a4f8 <_vfiprintf_r+0x1c4>
 800a45a:	b1b0      	cbz	r0, 800a48a <_vfiprintf_r+0x156>
 800a45c:	9207      	str	r2, [sp, #28]
 800a45e:	e014      	b.n	800a48a <_vfiprintf_r+0x156>
 800a460:	eba0 0308 	sub.w	r3, r0, r8
 800a464:	fa09 f303 	lsl.w	r3, r9, r3
 800a468:	4313      	orrs	r3, r2
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	46a2      	mov	sl, r4
 800a46e:	e7d2      	b.n	800a416 <_vfiprintf_r+0xe2>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	1d19      	adds	r1, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	9103      	str	r1, [sp, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfbb      	ittet	lt
 800a47c:	425b      	neglt	r3, r3
 800a47e:	f042 0202 	orrlt.w	r2, r2, #2
 800a482:	9307      	strge	r3, [sp, #28]
 800a484:	9307      	strlt	r3, [sp, #28]
 800a486:	bfb8      	it	lt
 800a488:	9204      	strlt	r2, [sp, #16]
 800a48a:	7823      	ldrb	r3, [r4, #0]
 800a48c:	2b2e      	cmp	r3, #46	; 0x2e
 800a48e:	d10c      	bne.n	800a4aa <_vfiprintf_r+0x176>
 800a490:	7863      	ldrb	r3, [r4, #1]
 800a492:	2b2a      	cmp	r3, #42	; 0x2a
 800a494:	d135      	bne.n	800a502 <_vfiprintf_r+0x1ce>
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	1d1a      	adds	r2, r3, #4
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	9203      	str	r2, [sp, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bfb8      	it	lt
 800a4a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4a6:	3402      	adds	r4, #2
 800a4a8:	9305      	str	r3, [sp, #20]
 800a4aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a590 <_vfiprintf_r+0x25c>
 800a4ae:	7821      	ldrb	r1, [r4, #0]
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	f7f5 febc 	bl	8000230 <memchr>
 800a4b8:	b140      	cbz	r0, 800a4cc <_vfiprintf_r+0x198>
 800a4ba:	2340      	movs	r3, #64	; 0x40
 800a4bc:	eba0 000a 	sub.w	r0, r0, sl
 800a4c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	4303      	orrs	r3, r0
 800a4c8:	3401      	adds	r4, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d0:	482c      	ldr	r0, [pc, #176]	; (800a584 <_vfiprintf_r+0x250>)
 800a4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4d6:	2206      	movs	r2, #6
 800a4d8:	f7f5 feaa 	bl	8000230 <memchr>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d03f      	beq.n	800a560 <_vfiprintf_r+0x22c>
 800a4e0:	4b29      	ldr	r3, [pc, #164]	; (800a588 <_vfiprintf_r+0x254>)
 800a4e2:	bb1b      	cbnz	r3, 800a52c <_vfiprintf_r+0x1f8>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	3307      	adds	r3, #7
 800a4e8:	f023 0307 	bic.w	r3, r3, #7
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	9303      	str	r3, [sp, #12]
 800a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f2:	443b      	add	r3, r7
 800a4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f6:	e767      	b.n	800a3c8 <_vfiprintf_r+0x94>
 800a4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	2001      	movs	r0, #1
 800a500:	e7a5      	b.n	800a44e <_vfiprintf_r+0x11a>
 800a502:	2300      	movs	r3, #0
 800a504:	3401      	adds	r4, #1
 800a506:	9305      	str	r3, [sp, #20]
 800a508:	4619      	mov	r1, r3
 800a50a:	f04f 0c0a 	mov.w	ip, #10
 800a50e:	4620      	mov	r0, r4
 800a510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a514:	3a30      	subs	r2, #48	; 0x30
 800a516:	2a09      	cmp	r2, #9
 800a518:	d903      	bls.n	800a522 <_vfiprintf_r+0x1ee>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0c5      	beq.n	800a4aa <_vfiprintf_r+0x176>
 800a51e:	9105      	str	r1, [sp, #20]
 800a520:	e7c3      	b.n	800a4aa <_vfiprintf_r+0x176>
 800a522:	fb0c 2101 	mla	r1, ip, r1, r2
 800a526:	4604      	mov	r4, r0
 800a528:	2301      	movs	r3, #1
 800a52a:	e7f0      	b.n	800a50e <_vfiprintf_r+0x1da>
 800a52c:	ab03      	add	r3, sp, #12
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	462a      	mov	r2, r5
 800a532:	4b16      	ldr	r3, [pc, #88]	; (800a58c <_vfiprintf_r+0x258>)
 800a534:	a904      	add	r1, sp, #16
 800a536:	4630      	mov	r0, r6
 800a538:	f7fd fe22 	bl	8008180 <_printf_float>
 800a53c:	4607      	mov	r7, r0
 800a53e:	1c78      	adds	r0, r7, #1
 800a540:	d1d6      	bne.n	800a4f0 <_vfiprintf_r+0x1bc>
 800a542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a544:	07d9      	lsls	r1, r3, #31
 800a546:	d405      	bmi.n	800a554 <_vfiprintf_r+0x220>
 800a548:	89ab      	ldrh	r3, [r5, #12]
 800a54a:	059a      	lsls	r2, r3, #22
 800a54c:	d402      	bmi.n	800a554 <_vfiprintf_r+0x220>
 800a54e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a550:	f000 faaf 	bl	800aab2 <__retarget_lock_release_recursive>
 800a554:	89ab      	ldrh	r3, [r5, #12]
 800a556:	065b      	lsls	r3, r3, #25
 800a558:	f53f af12 	bmi.w	800a380 <_vfiprintf_r+0x4c>
 800a55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a55e:	e711      	b.n	800a384 <_vfiprintf_r+0x50>
 800a560:	ab03      	add	r3, sp, #12
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	462a      	mov	r2, r5
 800a566:	4b09      	ldr	r3, [pc, #36]	; (800a58c <_vfiprintf_r+0x258>)
 800a568:	a904      	add	r1, sp, #16
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7fe f8ac 	bl	80086c8 <_printf_i>
 800a570:	e7e4      	b.n	800a53c <_vfiprintf_r+0x208>
 800a572:	bf00      	nop
 800a574:	080105c4 	.word	0x080105c4
 800a578:	080105e4 	.word	0x080105e4
 800a57c:	080105a4 	.word	0x080105a4
 800a580:	0801044c 	.word	0x0801044c
 800a584:	08010456 	.word	0x08010456
 800a588:	08008181 	.word	0x08008181
 800a58c:	0800a30f 	.word	0x0800a30f
 800a590:	08010452 	.word	0x08010452

0800a594 <__swbuf_r>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	460e      	mov	r6, r1
 800a598:	4614      	mov	r4, r2
 800a59a:	4605      	mov	r5, r0
 800a59c:	b118      	cbz	r0, 800a5a6 <__swbuf_r+0x12>
 800a59e:	6983      	ldr	r3, [r0, #24]
 800a5a0:	b90b      	cbnz	r3, 800a5a6 <__swbuf_r+0x12>
 800a5a2:	f000 f9e7 	bl	800a974 <__sinit>
 800a5a6:	4b21      	ldr	r3, [pc, #132]	; (800a62c <__swbuf_r+0x98>)
 800a5a8:	429c      	cmp	r4, r3
 800a5aa:	d12b      	bne.n	800a604 <__swbuf_r+0x70>
 800a5ac:	686c      	ldr	r4, [r5, #4]
 800a5ae:	69a3      	ldr	r3, [r4, #24]
 800a5b0:	60a3      	str	r3, [r4, #8]
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	071a      	lsls	r2, r3, #28
 800a5b6:	d52f      	bpl.n	800a618 <__swbuf_r+0x84>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	b36b      	cbz	r3, 800a618 <__swbuf_r+0x84>
 800a5bc:	6923      	ldr	r3, [r4, #16]
 800a5be:	6820      	ldr	r0, [r4, #0]
 800a5c0:	1ac0      	subs	r0, r0, r3
 800a5c2:	6963      	ldr	r3, [r4, #20]
 800a5c4:	b2f6      	uxtb	r6, r6
 800a5c6:	4283      	cmp	r3, r0
 800a5c8:	4637      	mov	r7, r6
 800a5ca:	dc04      	bgt.n	800a5d6 <__swbuf_r+0x42>
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 f93c 	bl	800a84c <_fflush_r>
 800a5d4:	bb30      	cbnz	r0, 800a624 <__swbuf_r+0x90>
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	60a3      	str	r3, [r4, #8]
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	6022      	str	r2, [r4, #0]
 800a5e2:	701e      	strb	r6, [r3, #0]
 800a5e4:	6963      	ldr	r3, [r4, #20]
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	d004      	beq.n	800a5f6 <__swbuf_r+0x62>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	07db      	lsls	r3, r3, #31
 800a5f0:	d506      	bpl.n	800a600 <__swbuf_r+0x6c>
 800a5f2:	2e0a      	cmp	r6, #10
 800a5f4:	d104      	bne.n	800a600 <__swbuf_r+0x6c>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f000 f927 	bl	800a84c <_fflush_r>
 800a5fe:	b988      	cbnz	r0, 800a624 <__swbuf_r+0x90>
 800a600:	4638      	mov	r0, r7
 800a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a604:	4b0a      	ldr	r3, [pc, #40]	; (800a630 <__swbuf_r+0x9c>)
 800a606:	429c      	cmp	r4, r3
 800a608:	d101      	bne.n	800a60e <__swbuf_r+0x7a>
 800a60a:	68ac      	ldr	r4, [r5, #8]
 800a60c:	e7cf      	b.n	800a5ae <__swbuf_r+0x1a>
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <__swbuf_r+0xa0>)
 800a610:	429c      	cmp	r4, r3
 800a612:	bf08      	it	eq
 800a614:	68ec      	ldreq	r4, [r5, #12]
 800a616:	e7ca      	b.n	800a5ae <__swbuf_r+0x1a>
 800a618:	4621      	mov	r1, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 f81a 	bl	800a654 <__swsetup_r>
 800a620:	2800      	cmp	r0, #0
 800a622:	d0cb      	beq.n	800a5bc <__swbuf_r+0x28>
 800a624:	f04f 37ff 	mov.w	r7, #4294967295
 800a628:	e7ea      	b.n	800a600 <__swbuf_r+0x6c>
 800a62a:	bf00      	nop
 800a62c:	080105c4 	.word	0x080105c4
 800a630:	080105e4 	.word	0x080105e4
 800a634:	080105a4 	.word	0x080105a4

0800a638 <__ascii_wctomb>:
 800a638:	b149      	cbz	r1, 800a64e <__ascii_wctomb+0x16>
 800a63a:	2aff      	cmp	r2, #255	; 0xff
 800a63c:	bf85      	ittet	hi
 800a63e:	238a      	movhi	r3, #138	; 0x8a
 800a640:	6003      	strhi	r3, [r0, #0]
 800a642:	700a      	strbls	r2, [r1, #0]
 800a644:	f04f 30ff 	movhi.w	r0, #4294967295
 800a648:	bf98      	it	ls
 800a64a:	2001      	movls	r0, #1
 800a64c:	4770      	bx	lr
 800a64e:	4608      	mov	r0, r1
 800a650:	4770      	bx	lr
	...

0800a654 <__swsetup_r>:
 800a654:	4b32      	ldr	r3, [pc, #200]	; (800a720 <__swsetup_r+0xcc>)
 800a656:	b570      	push	{r4, r5, r6, lr}
 800a658:	681d      	ldr	r5, [r3, #0]
 800a65a:	4606      	mov	r6, r0
 800a65c:	460c      	mov	r4, r1
 800a65e:	b125      	cbz	r5, 800a66a <__swsetup_r+0x16>
 800a660:	69ab      	ldr	r3, [r5, #24]
 800a662:	b913      	cbnz	r3, 800a66a <__swsetup_r+0x16>
 800a664:	4628      	mov	r0, r5
 800a666:	f000 f985 	bl	800a974 <__sinit>
 800a66a:	4b2e      	ldr	r3, [pc, #184]	; (800a724 <__swsetup_r+0xd0>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	d10f      	bne.n	800a690 <__swsetup_r+0x3c>
 800a670:	686c      	ldr	r4, [r5, #4]
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a678:	0719      	lsls	r1, r3, #28
 800a67a:	d42c      	bmi.n	800a6d6 <__swsetup_r+0x82>
 800a67c:	06dd      	lsls	r5, r3, #27
 800a67e:	d411      	bmi.n	800a6a4 <__swsetup_r+0x50>
 800a680:	2309      	movs	r3, #9
 800a682:	6033      	str	r3, [r6, #0]
 800a684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295
 800a68e:	e03e      	b.n	800a70e <__swsetup_r+0xba>
 800a690:	4b25      	ldr	r3, [pc, #148]	; (800a728 <__swsetup_r+0xd4>)
 800a692:	429c      	cmp	r4, r3
 800a694:	d101      	bne.n	800a69a <__swsetup_r+0x46>
 800a696:	68ac      	ldr	r4, [r5, #8]
 800a698:	e7eb      	b.n	800a672 <__swsetup_r+0x1e>
 800a69a:	4b24      	ldr	r3, [pc, #144]	; (800a72c <__swsetup_r+0xd8>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	bf08      	it	eq
 800a6a0:	68ec      	ldreq	r4, [r5, #12]
 800a6a2:	e7e6      	b.n	800a672 <__swsetup_r+0x1e>
 800a6a4:	0758      	lsls	r0, r3, #29
 800a6a6:	d512      	bpl.n	800a6ce <__swsetup_r+0x7a>
 800a6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6aa:	b141      	cbz	r1, 800a6be <__swsetup_r+0x6a>
 800a6ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b0:	4299      	cmp	r1, r3
 800a6b2:	d002      	beq.n	800a6ba <__swsetup_r+0x66>
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff fb6f 	bl	8009d98 <_free_r>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f043 0308 	orr.w	r3, r3, #8
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	b94b      	cbnz	r3, 800a6ee <__swsetup_r+0x9a>
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6e4:	d003      	beq.n	800a6ee <__swsetup_r+0x9a>
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f000 fa07 	bl	800aafc <__smakebuf_r>
 800a6ee:	89a0      	ldrh	r0, [r4, #12]
 800a6f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6f4:	f010 0301 	ands.w	r3, r0, #1
 800a6f8:	d00a      	beq.n	800a710 <__swsetup_r+0xbc>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60a3      	str	r3, [r4, #8]
 800a6fe:	6963      	ldr	r3, [r4, #20]
 800a700:	425b      	negs	r3, r3
 800a702:	61a3      	str	r3, [r4, #24]
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	b943      	cbnz	r3, 800a71a <__swsetup_r+0xc6>
 800a708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a70c:	d1ba      	bne.n	800a684 <__swsetup_r+0x30>
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	0781      	lsls	r1, r0, #30
 800a712:	bf58      	it	pl
 800a714:	6963      	ldrpl	r3, [r4, #20]
 800a716:	60a3      	str	r3, [r4, #8]
 800a718:	e7f4      	b.n	800a704 <__swsetup_r+0xb0>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e7f7      	b.n	800a70e <__swsetup_r+0xba>
 800a71e:	bf00      	nop
 800a720:	20000490 	.word	0x20000490
 800a724:	080105c4 	.word	0x080105c4
 800a728:	080105e4 	.word	0x080105e4
 800a72c:	080105a4 	.word	0x080105a4

0800a730 <abort>:
 800a730:	b508      	push	{r3, lr}
 800a732:	2006      	movs	r0, #6
 800a734:	f000 fa52 	bl	800abdc <raise>
 800a738:	2001      	movs	r0, #1
 800a73a:	f7fd fbc9 	bl	8007ed0 <_exit>
	...

0800a740 <__sflush_r>:
 800a740:	898a      	ldrh	r2, [r1, #12]
 800a742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a746:	4605      	mov	r5, r0
 800a748:	0710      	lsls	r0, r2, #28
 800a74a:	460c      	mov	r4, r1
 800a74c:	d458      	bmi.n	800a800 <__sflush_r+0xc0>
 800a74e:	684b      	ldr	r3, [r1, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	dc05      	bgt.n	800a760 <__sflush_r+0x20>
 800a754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	dc02      	bgt.n	800a760 <__sflush_r+0x20>
 800a75a:	2000      	movs	r0, #0
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a762:	2e00      	cmp	r6, #0
 800a764:	d0f9      	beq.n	800a75a <__sflush_r+0x1a>
 800a766:	2300      	movs	r3, #0
 800a768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a76c:	682f      	ldr	r7, [r5, #0]
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	d032      	beq.n	800a7d8 <__sflush_r+0x98>
 800a772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	075a      	lsls	r2, r3, #29
 800a778:	d505      	bpl.n	800a786 <__sflush_r+0x46>
 800a77a:	6863      	ldr	r3, [r4, #4]
 800a77c:	1ac0      	subs	r0, r0, r3
 800a77e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a780:	b10b      	cbz	r3, 800a786 <__sflush_r+0x46>
 800a782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a784:	1ac0      	subs	r0, r0, r3
 800a786:	2300      	movs	r3, #0
 800a788:	4602      	mov	r2, r0
 800a78a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a78c:	6a21      	ldr	r1, [r4, #32]
 800a78e:	4628      	mov	r0, r5
 800a790:	47b0      	blx	r6
 800a792:	1c43      	adds	r3, r0, #1
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	d106      	bne.n	800a7a6 <__sflush_r+0x66>
 800a798:	6829      	ldr	r1, [r5, #0]
 800a79a:	291d      	cmp	r1, #29
 800a79c:	d82c      	bhi.n	800a7f8 <__sflush_r+0xb8>
 800a79e:	4a2a      	ldr	r2, [pc, #168]	; (800a848 <__sflush_r+0x108>)
 800a7a0:	40ca      	lsrs	r2, r1
 800a7a2:	07d6      	lsls	r6, r2, #31
 800a7a4:	d528      	bpl.n	800a7f8 <__sflush_r+0xb8>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	6062      	str	r2, [r4, #4]
 800a7aa:	04d9      	lsls	r1, r3, #19
 800a7ac:	6922      	ldr	r2, [r4, #16]
 800a7ae:	6022      	str	r2, [r4, #0]
 800a7b0:	d504      	bpl.n	800a7bc <__sflush_r+0x7c>
 800a7b2:	1c42      	adds	r2, r0, #1
 800a7b4:	d101      	bne.n	800a7ba <__sflush_r+0x7a>
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	b903      	cbnz	r3, 800a7bc <__sflush_r+0x7c>
 800a7ba:	6560      	str	r0, [r4, #84]	; 0x54
 800a7bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7be:	602f      	str	r7, [r5, #0]
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	d0ca      	beq.n	800a75a <__sflush_r+0x1a>
 800a7c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7c8:	4299      	cmp	r1, r3
 800a7ca:	d002      	beq.n	800a7d2 <__sflush_r+0x92>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f7ff fae3 	bl	8009d98 <_free_r>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7d6:	e7c1      	b.n	800a75c <__sflush_r+0x1c>
 800a7d8:	6a21      	ldr	r1, [r4, #32]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b0      	blx	r6
 800a7e0:	1c41      	adds	r1, r0, #1
 800a7e2:	d1c7      	bne.n	800a774 <__sflush_r+0x34>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0c4      	beq.n	800a774 <__sflush_r+0x34>
 800a7ea:	2b1d      	cmp	r3, #29
 800a7ec:	d001      	beq.n	800a7f2 <__sflush_r+0xb2>
 800a7ee:	2b16      	cmp	r3, #22
 800a7f0:	d101      	bne.n	800a7f6 <__sflush_r+0xb6>
 800a7f2:	602f      	str	r7, [r5, #0]
 800a7f4:	e7b1      	b.n	800a75a <__sflush_r+0x1a>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7fc:	81a3      	strh	r3, [r4, #12]
 800a7fe:	e7ad      	b.n	800a75c <__sflush_r+0x1c>
 800a800:	690f      	ldr	r7, [r1, #16]
 800a802:	2f00      	cmp	r7, #0
 800a804:	d0a9      	beq.n	800a75a <__sflush_r+0x1a>
 800a806:	0793      	lsls	r3, r2, #30
 800a808:	680e      	ldr	r6, [r1, #0]
 800a80a:	bf08      	it	eq
 800a80c:	694b      	ldreq	r3, [r1, #20]
 800a80e:	600f      	str	r7, [r1, #0]
 800a810:	bf18      	it	ne
 800a812:	2300      	movne	r3, #0
 800a814:	eba6 0807 	sub.w	r8, r6, r7
 800a818:	608b      	str	r3, [r1, #8]
 800a81a:	f1b8 0f00 	cmp.w	r8, #0
 800a81e:	dd9c      	ble.n	800a75a <__sflush_r+0x1a>
 800a820:	6a21      	ldr	r1, [r4, #32]
 800a822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a824:	4643      	mov	r3, r8
 800a826:	463a      	mov	r2, r7
 800a828:	4628      	mov	r0, r5
 800a82a:	47b0      	blx	r6
 800a82c:	2800      	cmp	r0, #0
 800a82e:	dc06      	bgt.n	800a83e <__sflush_r+0xfe>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	e78e      	b.n	800a75c <__sflush_r+0x1c>
 800a83e:	4407      	add	r7, r0
 800a840:	eba8 0800 	sub.w	r8, r8, r0
 800a844:	e7e9      	b.n	800a81a <__sflush_r+0xda>
 800a846:	bf00      	nop
 800a848:	20400001 	.word	0x20400001

0800a84c <_fflush_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	690b      	ldr	r3, [r1, #16]
 800a850:	4605      	mov	r5, r0
 800a852:	460c      	mov	r4, r1
 800a854:	b913      	cbnz	r3, 800a85c <_fflush_r+0x10>
 800a856:	2500      	movs	r5, #0
 800a858:	4628      	mov	r0, r5
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	b118      	cbz	r0, 800a866 <_fflush_r+0x1a>
 800a85e:	6983      	ldr	r3, [r0, #24]
 800a860:	b90b      	cbnz	r3, 800a866 <_fflush_r+0x1a>
 800a862:	f000 f887 	bl	800a974 <__sinit>
 800a866:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <_fflush_r+0x6c>)
 800a868:	429c      	cmp	r4, r3
 800a86a:	d11b      	bne.n	800a8a4 <_fflush_r+0x58>
 800a86c:	686c      	ldr	r4, [r5, #4]
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0ef      	beq.n	800a856 <_fflush_r+0xa>
 800a876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a878:	07d0      	lsls	r0, r2, #31
 800a87a:	d404      	bmi.n	800a886 <_fflush_r+0x3a>
 800a87c:	0599      	lsls	r1, r3, #22
 800a87e:	d402      	bmi.n	800a886 <_fflush_r+0x3a>
 800a880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a882:	f000 f915 	bl	800aab0 <__retarget_lock_acquire_recursive>
 800a886:	4628      	mov	r0, r5
 800a888:	4621      	mov	r1, r4
 800a88a:	f7ff ff59 	bl	800a740 <__sflush_r>
 800a88e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a890:	07da      	lsls	r2, r3, #31
 800a892:	4605      	mov	r5, r0
 800a894:	d4e0      	bmi.n	800a858 <_fflush_r+0xc>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	059b      	lsls	r3, r3, #22
 800a89a:	d4dd      	bmi.n	800a858 <_fflush_r+0xc>
 800a89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a89e:	f000 f908 	bl	800aab2 <__retarget_lock_release_recursive>
 800a8a2:	e7d9      	b.n	800a858 <_fflush_r+0xc>
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <_fflush_r+0x70>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d101      	bne.n	800a8ae <_fflush_r+0x62>
 800a8aa:	68ac      	ldr	r4, [r5, #8]
 800a8ac:	e7df      	b.n	800a86e <_fflush_r+0x22>
 800a8ae:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <_fflush_r+0x74>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	bf08      	it	eq
 800a8b4:	68ec      	ldreq	r4, [r5, #12]
 800a8b6:	e7da      	b.n	800a86e <_fflush_r+0x22>
 800a8b8:	080105c4 	.word	0x080105c4
 800a8bc:	080105e4 	.word	0x080105e4
 800a8c0:	080105a4 	.word	0x080105a4

0800a8c4 <std>:
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8d2:	6083      	str	r3, [r0, #8]
 800a8d4:	8181      	strh	r1, [r0, #12]
 800a8d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8d8:	81c2      	strh	r2, [r0, #14]
 800a8da:	6183      	str	r3, [r0, #24]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	2208      	movs	r2, #8
 800a8e0:	305c      	adds	r0, #92	; 0x5c
 800a8e2:	f7fd fba5 	bl	8008030 <memset>
 800a8e6:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <std+0x38>)
 800a8e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <std+0x3c>)
 800a8ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <std+0x40>)
 800a8f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <std+0x44>)
 800a8f4:	6224      	str	r4, [r4, #32]
 800a8f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	bf00      	nop
 800a8fc:	0800ac15 	.word	0x0800ac15
 800a900:	0800ac37 	.word	0x0800ac37
 800a904:	0800ac6f 	.word	0x0800ac6f
 800a908:	0800ac93 	.word	0x0800ac93

0800a90c <_cleanup_r>:
 800a90c:	4901      	ldr	r1, [pc, #4]	; (800a914 <_cleanup_r+0x8>)
 800a90e:	f000 b8af 	b.w	800aa70 <_fwalk_reent>
 800a912:	bf00      	nop
 800a914:	0800a84d 	.word	0x0800a84d

0800a918 <__sfmoreglue>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	1e4a      	subs	r2, r1, #1
 800a91c:	2568      	movs	r5, #104	; 0x68
 800a91e:	4355      	muls	r5, r2
 800a920:	460e      	mov	r6, r1
 800a922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a926:	f7ff fa87 	bl	8009e38 <_malloc_r>
 800a92a:	4604      	mov	r4, r0
 800a92c:	b140      	cbz	r0, 800a940 <__sfmoreglue+0x28>
 800a92e:	2100      	movs	r1, #0
 800a930:	e9c0 1600 	strd	r1, r6, [r0]
 800a934:	300c      	adds	r0, #12
 800a936:	60a0      	str	r0, [r4, #8]
 800a938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a93c:	f7fd fb78 	bl	8008030 <memset>
 800a940:	4620      	mov	r0, r4
 800a942:	bd70      	pop	{r4, r5, r6, pc}

0800a944 <__sfp_lock_acquire>:
 800a944:	4801      	ldr	r0, [pc, #4]	; (800a94c <__sfp_lock_acquire+0x8>)
 800a946:	f000 b8b3 	b.w	800aab0 <__retarget_lock_acquire_recursive>
 800a94a:	bf00      	nop
 800a94c:	20001780 	.word	0x20001780

0800a950 <__sfp_lock_release>:
 800a950:	4801      	ldr	r0, [pc, #4]	; (800a958 <__sfp_lock_release+0x8>)
 800a952:	f000 b8ae 	b.w	800aab2 <__retarget_lock_release_recursive>
 800a956:	bf00      	nop
 800a958:	20001780 	.word	0x20001780

0800a95c <__sinit_lock_acquire>:
 800a95c:	4801      	ldr	r0, [pc, #4]	; (800a964 <__sinit_lock_acquire+0x8>)
 800a95e:	f000 b8a7 	b.w	800aab0 <__retarget_lock_acquire_recursive>
 800a962:	bf00      	nop
 800a964:	2000177b 	.word	0x2000177b

0800a968 <__sinit_lock_release>:
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__sinit_lock_release+0x8>)
 800a96a:	f000 b8a2 	b.w	800aab2 <__retarget_lock_release_recursive>
 800a96e:	bf00      	nop
 800a970:	2000177b 	.word	0x2000177b

0800a974 <__sinit>:
 800a974:	b510      	push	{r4, lr}
 800a976:	4604      	mov	r4, r0
 800a978:	f7ff fff0 	bl	800a95c <__sinit_lock_acquire>
 800a97c:	69a3      	ldr	r3, [r4, #24]
 800a97e:	b11b      	cbz	r3, 800a988 <__sinit+0x14>
 800a980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a984:	f7ff bff0 	b.w	800a968 <__sinit_lock_release>
 800a988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a98c:	6523      	str	r3, [r4, #80]	; 0x50
 800a98e:	4b13      	ldr	r3, [pc, #76]	; (800a9dc <__sinit+0x68>)
 800a990:	4a13      	ldr	r2, [pc, #76]	; (800a9e0 <__sinit+0x6c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	62a2      	str	r2, [r4, #40]	; 0x28
 800a996:	42a3      	cmp	r3, r4
 800a998:	bf04      	itt	eq
 800a99a:	2301      	moveq	r3, #1
 800a99c:	61a3      	streq	r3, [r4, #24]
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f820 	bl	800a9e4 <__sfp>
 800a9a4:	6060      	str	r0, [r4, #4]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f81c 	bl	800a9e4 <__sfp>
 800a9ac:	60a0      	str	r0, [r4, #8]
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 f818 	bl	800a9e4 <__sfp>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	60e0      	str	r0, [r4, #12]
 800a9b8:	2104      	movs	r1, #4
 800a9ba:	6860      	ldr	r0, [r4, #4]
 800a9bc:	f7ff ff82 	bl	800a8c4 <std>
 800a9c0:	68a0      	ldr	r0, [r4, #8]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	2109      	movs	r1, #9
 800a9c6:	f7ff ff7d 	bl	800a8c4 <std>
 800a9ca:	68e0      	ldr	r0, [r4, #12]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	2112      	movs	r1, #18
 800a9d0:	f7ff ff78 	bl	800a8c4 <std>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	61a3      	str	r3, [r4, #24]
 800a9d8:	e7d2      	b.n	800a980 <__sinit+0xc>
 800a9da:	bf00      	nop
 800a9dc:	08010220 	.word	0x08010220
 800a9e0:	0800a90d 	.word	0x0800a90d

0800a9e4 <__sfp>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	f7ff ffac 	bl	800a944 <__sfp_lock_acquire>
 800a9ec:	4b1e      	ldr	r3, [pc, #120]	; (800aa68 <__sfp+0x84>)
 800a9ee:	681e      	ldr	r6, [r3, #0]
 800a9f0:	69b3      	ldr	r3, [r6, #24]
 800a9f2:	b913      	cbnz	r3, 800a9fa <__sfp+0x16>
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff ffbd 	bl	800a974 <__sinit>
 800a9fa:	3648      	adds	r6, #72	; 0x48
 800a9fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	d503      	bpl.n	800aa0c <__sfp+0x28>
 800aa04:	6833      	ldr	r3, [r6, #0]
 800aa06:	b30b      	cbz	r3, 800aa4c <__sfp+0x68>
 800aa08:	6836      	ldr	r6, [r6, #0]
 800aa0a:	e7f7      	b.n	800a9fc <__sfp+0x18>
 800aa0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa10:	b9d5      	cbnz	r5, 800aa48 <__sfp+0x64>
 800aa12:	4b16      	ldr	r3, [pc, #88]	; (800aa6c <__sfp+0x88>)
 800aa14:	60e3      	str	r3, [r4, #12]
 800aa16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa1a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa1c:	f000 f847 	bl	800aaae <__retarget_lock_init_recursive>
 800aa20:	f7ff ff96 	bl	800a950 <__sfp_lock_release>
 800aa24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa2c:	6025      	str	r5, [r4, #0]
 800aa2e:	61a5      	str	r5, [r4, #24]
 800aa30:	2208      	movs	r2, #8
 800aa32:	4629      	mov	r1, r5
 800aa34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa38:	f7fd fafa 	bl	8008030 <memset>
 800aa3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa44:	4620      	mov	r0, r4
 800aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa48:	3468      	adds	r4, #104	; 0x68
 800aa4a:	e7d9      	b.n	800aa00 <__sfp+0x1c>
 800aa4c:	2104      	movs	r1, #4
 800aa4e:	4638      	mov	r0, r7
 800aa50:	f7ff ff62 	bl	800a918 <__sfmoreglue>
 800aa54:	4604      	mov	r4, r0
 800aa56:	6030      	str	r0, [r6, #0]
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d1d5      	bne.n	800aa08 <__sfp+0x24>
 800aa5c:	f7ff ff78 	bl	800a950 <__sfp_lock_release>
 800aa60:	230c      	movs	r3, #12
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	e7ee      	b.n	800aa44 <__sfp+0x60>
 800aa66:	bf00      	nop
 800aa68:	08010220 	.word	0x08010220
 800aa6c:	ffff0001 	.word	0xffff0001

0800aa70 <_fwalk_reent>:
 800aa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa74:	4606      	mov	r6, r0
 800aa76:	4688      	mov	r8, r1
 800aa78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa7c:	2700      	movs	r7, #0
 800aa7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa82:	f1b9 0901 	subs.w	r9, r9, #1
 800aa86:	d505      	bpl.n	800aa94 <_fwalk_reent+0x24>
 800aa88:	6824      	ldr	r4, [r4, #0]
 800aa8a:	2c00      	cmp	r4, #0
 800aa8c:	d1f7      	bne.n	800aa7e <_fwalk_reent+0xe>
 800aa8e:	4638      	mov	r0, r7
 800aa90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa94:	89ab      	ldrh	r3, [r5, #12]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d907      	bls.n	800aaaa <_fwalk_reent+0x3a>
 800aa9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	d003      	beq.n	800aaaa <_fwalk_reent+0x3a>
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	47c0      	blx	r8
 800aaa8:	4307      	orrs	r7, r0
 800aaaa:	3568      	adds	r5, #104	; 0x68
 800aaac:	e7e9      	b.n	800aa82 <_fwalk_reent+0x12>

0800aaae <__retarget_lock_init_recursive>:
 800aaae:	4770      	bx	lr

0800aab0 <__retarget_lock_acquire_recursive>:
 800aab0:	4770      	bx	lr

0800aab2 <__retarget_lock_release_recursive>:
 800aab2:	4770      	bx	lr

0800aab4 <__swhatbuf_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	460e      	mov	r6, r1
 800aab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aabc:	2900      	cmp	r1, #0
 800aabe:	b096      	sub	sp, #88	; 0x58
 800aac0:	4614      	mov	r4, r2
 800aac2:	461d      	mov	r5, r3
 800aac4:	da07      	bge.n	800aad6 <__swhatbuf_r+0x22>
 800aac6:	2300      	movs	r3, #0
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	89b3      	ldrh	r3, [r6, #12]
 800aacc:	061a      	lsls	r2, r3, #24
 800aace:	d410      	bmi.n	800aaf2 <__swhatbuf_r+0x3e>
 800aad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad4:	e00e      	b.n	800aaf4 <__swhatbuf_r+0x40>
 800aad6:	466a      	mov	r2, sp
 800aad8:	f000 f902 	bl	800ace0 <_fstat_r>
 800aadc:	2800      	cmp	r0, #0
 800aade:	dbf2      	blt.n	800aac6 <__swhatbuf_r+0x12>
 800aae0:	9a01      	ldr	r2, [sp, #4]
 800aae2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aae6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aaea:	425a      	negs	r2, r3
 800aaec:	415a      	adcs	r2, r3
 800aaee:	602a      	str	r2, [r5, #0]
 800aaf0:	e7ee      	b.n	800aad0 <__swhatbuf_r+0x1c>
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	b016      	add	sp, #88	; 0x58
 800aafa:	bd70      	pop	{r4, r5, r6, pc}

0800aafc <__smakebuf_r>:
 800aafc:	898b      	ldrh	r3, [r1, #12]
 800aafe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab00:	079d      	lsls	r5, r3, #30
 800ab02:	4606      	mov	r6, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	d507      	bpl.n	800ab18 <__smakebuf_r+0x1c>
 800ab08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	6123      	str	r3, [r4, #16]
 800ab10:	2301      	movs	r3, #1
 800ab12:	6163      	str	r3, [r4, #20]
 800ab14:	b002      	add	sp, #8
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	ab01      	add	r3, sp, #4
 800ab1a:	466a      	mov	r2, sp
 800ab1c:	f7ff ffca 	bl	800aab4 <__swhatbuf_r>
 800ab20:	9900      	ldr	r1, [sp, #0]
 800ab22:	4605      	mov	r5, r0
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff f987 	bl	8009e38 <_malloc_r>
 800ab2a:	b948      	cbnz	r0, 800ab40 <__smakebuf_r+0x44>
 800ab2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab30:	059a      	lsls	r2, r3, #22
 800ab32:	d4ef      	bmi.n	800ab14 <__smakebuf_r+0x18>
 800ab34:	f023 0303 	bic.w	r3, r3, #3
 800ab38:	f043 0302 	orr.w	r3, r3, #2
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	e7e3      	b.n	800ab08 <__smakebuf_r+0xc>
 800ab40:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <__smakebuf_r+0x7c>)
 800ab42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	6020      	str	r0, [r4, #0]
 800ab48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4c:	81a3      	strh	r3, [r4, #12]
 800ab4e:	9b00      	ldr	r3, [sp, #0]
 800ab50:	6163      	str	r3, [r4, #20]
 800ab52:	9b01      	ldr	r3, [sp, #4]
 800ab54:	6120      	str	r0, [r4, #16]
 800ab56:	b15b      	cbz	r3, 800ab70 <__smakebuf_r+0x74>
 800ab58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f000 f8d1 	bl	800ad04 <_isatty_r>
 800ab62:	b128      	cbz	r0, 800ab70 <__smakebuf_r+0x74>
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	f023 0303 	bic.w	r3, r3, #3
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	89a0      	ldrh	r0, [r4, #12]
 800ab72:	4305      	orrs	r5, r0
 800ab74:	81a5      	strh	r5, [r4, #12]
 800ab76:	e7cd      	b.n	800ab14 <__smakebuf_r+0x18>
 800ab78:	0800a90d 	.word	0x0800a90d

0800ab7c <_malloc_usable_size_r>:
 800ab7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab80:	1f18      	subs	r0, r3, #4
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	bfbc      	itt	lt
 800ab86:	580b      	ldrlt	r3, [r1, r0]
 800ab88:	18c0      	addlt	r0, r0, r3
 800ab8a:	4770      	bx	lr

0800ab8c <_raise_r>:
 800ab8c:	291f      	cmp	r1, #31
 800ab8e:	b538      	push	{r3, r4, r5, lr}
 800ab90:	4604      	mov	r4, r0
 800ab92:	460d      	mov	r5, r1
 800ab94:	d904      	bls.n	800aba0 <_raise_r+0x14>
 800ab96:	2316      	movs	r3, #22
 800ab98:	6003      	str	r3, [r0, #0]
 800ab9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aba2:	b112      	cbz	r2, 800abaa <_raise_r+0x1e>
 800aba4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba8:	b94b      	cbnz	r3, 800abbe <_raise_r+0x32>
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 f830 	bl	800ac10 <_getpid_r>
 800abb0:	462a      	mov	r2, r5
 800abb2:	4601      	mov	r1, r0
 800abb4:	4620      	mov	r0, r4
 800abb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abba:	f000 b817 	b.w	800abec <_kill_r>
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d00a      	beq.n	800abd8 <_raise_r+0x4c>
 800abc2:	1c59      	adds	r1, r3, #1
 800abc4:	d103      	bne.n	800abce <_raise_r+0x42>
 800abc6:	2316      	movs	r3, #22
 800abc8:	6003      	str	r3, [r0, #0]
 800abca:	2001      	movs	r0, #1
 800abcc:	e7e7      	b.n	800ab9e <_raise_r+0x12>
 800abce:	2400      	movs	r4, #0
 800abd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abd4:	4628      	mov	r0, r5
 800abd6:	4798      	blx	r3
 800abd8:	2000      	movs	r0, #0
 800abda:	e7e0      	b.n	800ab9e <_raise_r+0x12>

0800abdc <raise>:
 800abdc:	4b02      	ldr	r3, [pc, #8]	; (800abe8 <raise+0xc>)
 800abde:	4601      	mov	r1, r0
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	f7ff bfd3 	b.w	800ab8c <_raise_r>
 800abe6:	bf00      	nop
 800abe8:	20000490 	.word	0x20000490

0800abec <_kill_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	; (800ac0c <_kill_r+0x20>)
 800abf0:	2300      	movs	r3, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	4611      	mov	r1, r2
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	f7fd f961 	bl	8007ec0 <_kill>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	d102      	bne.n	800ac08 <_kill_r+0x1c>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b103      	cbz	r3, 800ac08 <_kill_r+0x1c>
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	bd38      	pop	{r3, r4, r5, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20001774 	.word	0x20001774

0800ac10 <_getpid_r>:
 800ac10:	f7fd b954 	b.w	8007ebc <_getpid>

0800ac14 <__sread>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	460c      	mov	r4, r1
 800ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1c:	f000 f894 	bl	800ad48 <_read_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	bfab      	itete	ge
 800ac24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac26:	89a3      	ldrhlt	r3, [r4, #12]
 800ac28:	181b      	addge	r3, r3, r0
 800ac2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac2e:	bfac      	ite	ge
 800ac30:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac32:	81a3      	strhlt	r3, [r4, #12]
 800ac34:	bd10      	pop	{r4, pc}

0800ac36 <__swrite>:
 800ac36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3a:	461f      	mov	r7, r3
 800ac3c:	898b      	ldrh	r3, [r1, #12]
 800ac3e:	05db      	lsls	r3, r3, #23
 800ac40:	4605      	mov	r5, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	4616      	mov	r6, r2
 800ac46:	d505      	bpl.n	800ac54 <__swrite+0x1e>
 800ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f000 f868 	bl	800ad24 <_lseek_r>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	4632      	mov	r2, r6
 800ac62:	463b      	mov	r3, r7
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6a:	f000 b817 	b.w	800ac9c <_write_r>

0800ac6e <__sseek>:
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	460c      	mov	r4, r1
 800ac72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac76:	f000 f855 	bl	800ad24 <_lseek_r>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	bf15      	itete	ne
 800ac80:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac8a:	81a3      	strheq	r3, [r4, #12]
 800ac8c:	bf18      	it	ne
 800ac8e:	81a3      	strhne	r3, [r4, #12]
 800ac90:	bd10      	pop	{r4, pc}

0800ac92 <__sclose>:
 800ac92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac96:	f000 b813 	b.w	800acc0 <_close_r>
	...

0800ac9c <_write_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4d07      	ldr	r5, [pc, #28]	; (800acbc <_write_r+0x20>)
 800aca0:	4604      	mov	r4, r0
 800aca2:	4608      	mov	r0, r1
 800aca4:	4611      	mov	r1, r2
 800aca6:	2200      	movs	r2, #0
 800aca8:	602a      	str	r2, [r5, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	f7fd f926 	bl	8007efc <_write>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_write_r+0x1e>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_write_r+0x1e>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20001774 	.word	0x20001774

0800acc0 <_close_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4d06      	ldr	r5, [pc, #24]	; (800acdc <_close_r+0x1c>)
 800acc4:	2300      	movs	r3, #0
 800acc6:	4604      	mov	r4, r0
 800acc8:	4608      	mov	r0, r1
 800acca:	602b      	str	r3, [r5, #0]
 800accc:	f7fd f942 	bl	8007f54 <_close>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d102      	bne.n	800acda <_close_r+0x1a>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	b103      	cbz	r3, 800acda <_close_r+0x1a>
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	bd38      	pop	{r3, r4, r5, pc}
 800acdc:	20001774 	.word	0x20001774

0800ace0 <_fstat_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d07      	ldr	r5, [pc, #28]	; (800ad00 <_fstat_r+0x20>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	4611      	mov	r1, r2
 800acec:	602b      	str	r3, [r5, #0]
 800acee:	f7fd f934 	bl	8007f5a <_fstat>
 800acf2:	1c43      	adds	r3, r0, #1
 800acf4:	d102      	bne.n	800acfc <_fstat_r+0x1c>
 800acf6:	682b      	ldr	r3, [r5, #0]
 800acf8:	b103      	cbz	r3, 800acfc <_fstat_r+0x1c>
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	bf00      	nop
 800ad00:	20001774 	.word	0x20001774

0800ad04 <_isatty_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d06      	ldr	r5, [pc, #24]	; (800ad20 <_isatty_r+0x1c>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	f7fd f928 	bl	8007f64 <_isatty>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_isatty_r+0x1a>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_isatty_r+0x1a>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	20001774 	.word	0x20001774

0800ad24 <_lseek_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	; (800ad44 <_lseek_r+0x20>)
 800ad28:	4604      	mov	r4, r0
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	602a      	str	r2, [r5, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	f7fd f918 	bl	8007f68 <_lseek>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_lseek_r+0x1e>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_lseek_r+0x1e>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20001774 	.word	0x20001774

0800ad48 <_read_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d07      	ldr	r5, [pc, #28]	; (800ad68 <_read_r+0x20>)
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7fd f8c0 	bl	8007edc <_read>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_read_r+0x1e>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_read_r+0x1e>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20001774 	.word	0x20001774

0800ad6c <_init>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr

0800ad78 <_fini>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	bf00      	nop
 800ad7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7e:	bc08      	pop	{r3}
 800ad80:	469e      	mov	lr, r3
 800ad82:	4770      	bx	lr
