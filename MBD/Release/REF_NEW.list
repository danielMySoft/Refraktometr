
REF_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e010  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005884  0800e1f0  0800e1f0  0001e1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013a74  08013a74  00023a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013a7c  08013a7c  00023a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013a80  08013a80  00023a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000660  20000000  08013a84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d64  20000660  080140e4  00030660  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200013c4  080140e4  000313c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030660  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017535  00000000  00000000  00030690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002db5  00000000  00000000  00047bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001240  00000000  00000000  0004a97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001100  00000000  00000000  0004bbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023f7b  00000000  00000000  0004ccba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014f52  00000000  00000000  00070c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d8801  00000000  00000000  00085b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0015e388  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f00  00000000  00000000  0015e3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000660 	.word	0x20000660
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e1d8 	.word	0x0800e1d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000664 	.word	0x20000664
 800021c:	0800e1d8 	.word	0x0800e1d8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f94f 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f009 fe8a 	bl	800ac3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f967 	bl	8001226 <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f92f 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000048c 	.word	0x2000048c
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000000 	.word	0x20000000

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	200006c0 	.word	0x200006c0

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200006c0 	.word	0x200006c0

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000004 	.word	0x20000004

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff29 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff3e 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff31 	bl	8001080 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa2 	bl	8001178 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff feb6 	bl	8000fbc <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e099      	b.n	8001390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127c:	e00f      	b.n	800129e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127e:	f7ff fe9d 	bl	8000fbc <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b05      	cmp	r3, #5
 800128a:	d908      	bls.n	800129e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2220      	movs	r2, #32
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2203      	movs	r2, #3
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e078      	b.n	8001390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e8      	bne.n	800127e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <HAL_DMA_Init+0x158>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d107      	bne.n	8001308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4313      	orrs	r3, r2
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f023 0307 	bic.w	r3, r3, #7
 800131e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	4313      	orrs	r3, r2
 8001328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	2b04      	cmp	r3, #4
 8001330:	d117      	bne.n	8001362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4313      	orrs	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00e      	beq.n	8001362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fb01 	bl	800194c <DMA_CheckFifoParam>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800135e:	2301      	movs	r3, #1
 8001360:	e016      	b.n	8001390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fab8 	bl	80018e0 <DMA_CalcBaseAndBitshift>
 8001370:	4603      	mov	r3, r0
 8001372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	223f      	movs	r2, #63	; 0x3f
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	e010803f 	.word	0xe010803f

0800139c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_DMA_Start_IT+0x26>
 80013be:	2302      	movs	r3, #2
 80013c0:	e040      	b.n	8001444 <HAL_DMA_Start_IT+0xa8>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d12f      	bne.n	8001436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2202      	movs	r2, #2
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 fa4a 	bl	8001884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f4:	223f      	movs	r2, #63	; 0x3f
 80013f6:	409a      	lsls	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0216 	orr.w	r2, r2, #22
 800140a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0208 	orr.w	r2, r2, #8
 8001422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e005      	b.n	8001442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800143e:	2302      	movs	r3, #2
 8001440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001442:	7dfb      	ldrb	r3, [r7, #23]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800145a:	f7ff fdaf 	bl	8000fbc <HAL_GetTick>
 800145e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d008      	beq.n	800147e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e052      	b.n	8001524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0216 	bic.w	r2, r2, #22
 800148c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <HAL_DMA_Abort+0x62>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0208 	bic.w	r2, r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ce:	e013      	b.n	80014f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d0:	f7ff fd74 	bl	8000fbc <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d90c      	bls.n	80014f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2203      	movs	r2, #3
 80014f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e015      	b.n	8001524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e4      	bne.n	80014d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150a:	223f      	movs	r2, #63	; 0x3f
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d004      	beq.n	800154a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00c      	b.n	8001564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2205      	movs	r2, #5
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_DMA_IRQHandler+0x258>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_DMA_IRQHandler+0x25c>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a9b      	lsrs	r3, r3, #10
 8001588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2208      	movs	r2, #8
 800159c:	409a      	lsls	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01a      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0204 	bic.w	r2, r2, #4
 80015c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2208      	movs	r2, #8
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2201      	movs	r2, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	f043 0202 	orr.w	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2204      	movs	r2, #4
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d012      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2204      	movs	r2, #4
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f043 0204 	orr.w	r2, r3, #4
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2210      	movs	r2, #16
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d043      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03c      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2210      	movs	r2, #16
 800166c:	409a      	lsls	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d018      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e01f      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
 80016b0:	e016      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0208 	bic.w	r2, r2, #8
 80016ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	2220      	movs	r2, #32
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 808e 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8086 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2220      	movs	r2, #32
 8001708:	409a      	lsls	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b05      	cmp	r3, #5
 8001718:	d136      	bne.n	8001788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0216 	bic.w	r2, r2, #22
 8001728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_DMA_IRQHandler+0x1da>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0208 	bic.w	r2, r2, #8
 8001758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	223f      	movs	r2, #63	; 0x3f
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	2b00      	cmp	r3, #0
 800177c:	d07d      	beq.n	800187a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
        }
        return;
 8001786:	e078      	b.n	800187a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01c      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d108      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d030      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
 80017b4:	e02b      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d027      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	e022      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
 80017c8:	2000048c 	.word	0x2000048c
 80017cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0210 	bic.w	r2, r2, #16
 80017ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	2b00      	cmp	r3, #0
 8001814:	d032      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d022      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	429a      	cmp	r2, r3
 8001844:	d307      	bcc.n	8001856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f2      	bne.n	800183a <HAL_DMA_IRQHandler+0x2ca>
 8001854:	e000      	b.n	8001858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x30c>
        return;
 800187a:	bf00      	nop
    }
  }
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop

08001884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d108      	bne.n	80018c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018c2:	e007      	b.n	80018d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3b10      	subs	r3, #16
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <DMA_CalcBaseAndBitshift+0x64>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <DMA_CalcBaseAndBitshift+0x68>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d909      	bls.n	8001922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	1d1a      	adds	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	659a      	str	r2, [r3, #88]	; 0x58
 8001920:	e007      	b.n	8001932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	aaaaaaab 	.word	0xaaaaaaab
 8001948:	0800e1f0 	.word	0x0800e1f0

0800194c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11f      	bne.n	80019a6 <DMA_CheckFifoParam+0x5a>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d856      	bhi.n	8001a1a <DMA_CheckFifoParam+0xce>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <DMA_CheckFifoParam+0x28>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	08001985 	.word	0x08001985
 8001978:	08001997 	.word	0x08001997
 800197c:	08001985 	.word	0x08001985
 8001980:	08001a1b 	.word	0x08001a1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d046      	beq.n	8001a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001994:	e043      	b.n	8001a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800199e:	d140      	bne.n	8001a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a4:	e03d      	b.n	8001a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ae:	d121      	bne.n	80019f4 <DMA_CheckFifoParam+0xa8>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d837      	bhi.n	8001a26 <DMA_CheckFifoParam+0xda>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <DMA_CheckFifoParam+0x70>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019d3 	.word	0x080019d3
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	080019e5 	.word	0x080019e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
      break;
 80019d0:	e030      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d025      	beq.n	8001a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e2:	e022      	b.n	8001a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ec:	d11f      	bne.n	8001a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019f2:	e01c      	b.n	8001a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d903      	bls.n	8001a02 <DMA_CheckFifoParam+0xb6>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d003      	beq.n	8001a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a00:	e018      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      break;
 8001a06:	e015      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e00b      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e00a      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e008      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e006      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
 8001a28:	e004      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e002      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a32:	bf00      	nop
    }
  } 
  
  return status; 
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e165      	b.n	8001d2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8154 	bne.w	8001d26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d00b      	beq.n	8001a9e <HAL_GPIO_Init+0x5a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d130      	bne.n	8001b00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 0201 	and.w	r2, r3, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0xfc>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b12      	cmp	r3, #18
 8001b3e:	d123      	bne.n	8001b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80ae 	beq.w	8001d26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a5c      	ldr	r2, [pc, #368]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4e      	ldr	r2, [pc, #312]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_GPIO_Init+0x314>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <HAL_GPIO_Init+0x318>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x20a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4a      	ldr	r2, [pc, #296]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a49      	ldr	r2, [pc, #292]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x202>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4935      	ldr	r1, [pc, #212]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca2:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae96 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40021400 	.word	0x40021400
 8001d64:	40021800 	.word	0x40021800
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cc      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d90c      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0b8      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df4:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e0c:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	494d      	ldr	r1, [pc, #308]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d044      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d119      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e067      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4934      	ldr	r1, [pc, #208]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7ff f894 	bl	8000fbc <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7ff f890 	bl	8000fbc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e04f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 020c 	and.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1eb      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d20c      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e032      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4916      	ldr	r1, [pc, #88]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490e      	ldr	r1, [pc, #56]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f26:	f000 f821 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	490a      	ldr	r1, [pc, #40]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fff4 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08013678 	.word	0x08013678
 8001f64:	2000048c 	.word	0x2000048c
 8001f68:	20000000 	.word	0x20000000

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f72:	2100      	movs	r1, #0
 8001f74:	6079      	str	r1, [r7, #4]
 8001f76:	2100      	movs	r1, #0
 8001f78:	60f9      	str	r1, [r7, #12]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2100      	movs	r1, #0
 8001f80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f82:	4952      	ldr	r1, [pc, #328]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001f84:	6889      	ldr	r1, [r1, #8]
 8001f86:	f001 010c 	and.w	r1, r1, #12
 8001f8a:	2908      	cmp	r1, #8
 8001f8c:	d00d      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x3e>
 8001f8e:	2908      	cmp	r1, #8
 8001f90:	f200 8094 	bhi.w	80020bc <HAL_RCC_GetSysClockFreq+0x150>
 8001f94:	2900      	cmp	r1, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x32>
 8001f98:	2904      	cmp	r1, #4
 8001f9a:	d003      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8001f9c:	e08e      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fa0:	60bb      	str	r3, [r7, #8]
       break;
 8001fa2:	e08e      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fa6:	60bb      	str	r3, [r7, #8]
      break;
 8001fa8:	e08b      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001faa:	4948      	ldr	r1, [pc, #288]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fac:	6849      	ldr	r1, [r1, #4]
 8001fae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001fb2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb4:	4945      	ldr	r1, [pc, #276]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fb6:	6849      	ldr	r1, [r1, #4]
 8001fb8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001fbc:	2900      	cmp	r1, #0
 8001fbe:	d024      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc0:	4942      	ldr	r1, [pc, #264]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fc2:	6849      	ldr	r1, [r1, #4]
 8001fc4:	0989      	lsrs	r1, r1, #6
 8001fc6:	4608      	mov	r0, r1
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001fd0:	f04f 0500 	mov.w	r5, #0
 8001fd4:	ea00 0204 	and.w	r2, r0, r4
 8001fd8:	ea01 0305 	and.w	r3, r1, r5
 8001fdc:	493d      	ldr	r1, [pc, #244]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fde:	fb01 f003 	mul.w	r0, r1, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	fb01 f102 	mul.w	r1, r1, r2
 8001fe8:	1844      	adds	r4, r0, r1
 8001fea:	493a      	ldr	r1, [pc, #232]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fec:	fba2 0101 	umull	r0, r1, r2, r1
 8001ff0:	1863      	adds	r3, r4, r1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	f7fe fdfc 	bl	8000bf8 <__aeabi_uldivmod>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4613      	mov	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e04a      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	461a      	mov	r2, r3
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	ea02 0400 	and.w	r4, r2, r0
 8002022:	ea03 0501 	and.w	r5, r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	014b      	lsls	r3, r1, #5
 8002034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002038:	0142      	lsls	r2, r0, #5
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	1b00      	subs	r0, r0, r4
 8002040:	eb61 0105 	sbc.w	r1, r1, r5
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	018b      	lsls	r3, r1, #6
 800204e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002052:	0182      	lsls	r2, r0, #6
 8002054:	1a12      	subs	r2, r2, r0
 8002056:	eb63 0301 	sbc.w	r3, r3, r1
 800205a:	f04f 0000 	mov.w	r0, #0
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	00d9      	lsls	r1, r3, #3
 8002064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002068:	00d0      	lsls	r0, r2, #3
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	1912      	adds	r2, r2, r4
 8002070:	eb45 0303 	adc.w	r3, r5, r3
 8002074:	f04f 0000 	mov.w	r0, #0
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	0299      	lsls	r1, r3, #10
 800207e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002082:	0290      	lsls	r0, r2, #10
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	461a      	mov	r2, r3
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	f7fe fdb0 	bl	8000bf8 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	60bb      	str	r3, [r7, #8]
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80020be:	60bb      	str	r3, [r7, #8]
      break;
 80020c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c2:	68bb      	ldr	r3, [r7, #8]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	00b71b00 	.word	0x00b71b00

080020d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000048c 	.word	0x2000048c

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a9b      	lsrs	r3, r3, #10
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	08013688 	.word	0x08013688

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800211c:	f7ff ffdc 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	08013688 	.word	0x08013688

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d010      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002164:	4b7a      	ldr	r3, [pc, #488]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800216a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4977      	ldr	r1, [pc, #476]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002192:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002198:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	496b      	ldr	r1, [pc, #428]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80021b0:	2301      	movs	r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d022      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80021c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	4960      	ldr	r1, [pc, #384]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80021de:	2301      	movs	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ea:	d10c      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80021ec:	4b58      	ldr	r3, [pc, #352]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80021ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	4954      	ldr	r1, [pc, #336]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d022      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002218:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	494b      	ldr	r1, [pc, #300]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002230:	2301      	movs	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800223c:	d10c      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800223e:	4b44      	ldr	r3, [pc, #272]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002244:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	3b01      	subs	r3, #1
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	493f      	ldr	r1, [pc, #252]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 808a 	beq.w	800237a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a38      	ldr	r2, [pc, #224]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a33      	ldr	r2, [pc, #204]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800228e:	f7fe fe95 	bl	8000fbc <HAL_GetTick>
 8002292:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7fe fe91 	bl	8000fbc <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1d1      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022bc:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02f      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d028      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022da:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022e8:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d114      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fe5f 	bl	8000fbc <HAL_GetTick>
 80022fe:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe fe5b 	bl	8000fbc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e199      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ee      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002330:	d114      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002346:	4902      	ldr	r1, [pc, #8]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
 800234c:	e00c      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40007000 	.word	0x40007000
 8002358:	42470e40 	.word	0x42470e40
 800235c:	4b89      	ldr	r3, [pc, #548]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a88      	ldr	r2, [pc, #544]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002362:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002366:	6093      	str	r3, [r2, #8]
 8002368:	4b86      	ldr	r3, [pc, #536]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800236a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	4983      	ldr	r1, [pc, #524]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002376:	4313      	orrs	r3, r2
 8002378:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800238c:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800238e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800239c:	4b79      	ldr	r3, [pc, #484]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	4976      	ldr	r1, [pc, #472]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d011      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023be:	4b71      	ldr	r3, [pc, #452]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80023c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	496d      	ldr	r1, [pc, #436]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80023ee:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	4961      	ldr	r1, [pc, #388]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d004      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b80      	cmp	r3, #128	; 0x80
 8002410:	f040 80c6 	bne.w	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002414:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800241a:	f7fe fdcf 	bl	8000fbc <HAL_GetTick>
 800241e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002422:	f7fe fdcb 	bl	8000fbc <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e10b      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002440:	4a53      	ldr	r2, [pc, #332]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d023      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d019      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002484:	d00e      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800248e:	2b00      	cmp	r3, #0
 8002490:	d019      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a2:	d110      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	4931      	ldr	r1, [pc, #196]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d026      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d122      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ee:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	0e1b      	lsrs	r3, r3, #24
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	431a      	orrs	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	061b      	lsls	r3, r3, #24
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	071b      	lsls	r3, r3, #28
 8002514:	491b      	ldr	r1, [pc, #108]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002522:	f023 021f 	bic.w	r2, r3, #31
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	3b01      	subs	r3, #1
 800252c:	4915      	ldr	r1, [pc, #84]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	019b      	lsls	r3, r3, #6
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	071b      	lsls	r3, r3, #28
 800255a:	490a      	ldr	r1, [pc, #40]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe fd28 	bl	8000fbc <HAL_GetTick>
 800256c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800256e:	e011      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002570:	f7fe fd24 	bl	8000fbc <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d90a      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e064      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	424711e0 	.word	0x424711e0
 800258c:	42470068 	.word	0x42470068
 8002590:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002594:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0e7      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80025ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ba:	4926      	ldr	r1, [pc, #152]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80025d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	491d      	ldr	r1, [pc, #116]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80025f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	4915      	ldr	r1, [pc, #84]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4904      	ldr	r1, [pc, #16]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800

08002658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d075      	beq.n	800275c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002670:	4ba2      	ldr	r3, [pc, #648]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b04      	cmp	r3, #4
 800267a:	d00c      	beq.n	8002696 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267c:	4b9f      	ldr	r3, [pc, #636]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002684:	2b08      	cmp	r3, #8
 8002686:	d112      	bne.n	80026ae <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002688:	4b9c      	ldr	r3, [pc, #624]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002694:	d10b      	bne.n	80026ae <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	4b99      	ldr	r3, [pc, #612]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d05b      	beq.n	800275a <HAL_RCC_OscConfig+0x102>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d157      	bne.n	800275a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e20b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x6e>
 80026b8:	4b90      	ldr	r3, [pc, #576]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a8f      	ldr	r2, [pc, #572]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e01d      	b.n	8002702 <HAL_RCC_OscConfig+0xaa>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x92>
 80026d0:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a89      	ldr	r2, [pc, #548]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b87      	ldr	r3, [pc, #540]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a86      	ldr	r2, [pc, #536]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0xaa>
 80026ea:	4b84      	ldr	r3, [pc, #528]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a83      	ldr	r2, [pc, #524]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a80      	ldr	r2, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d013      	beq.n	8002732 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fc57 	bl	8000fbc <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002712:	f7fe fc53 	bl	8000fbc <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1d0      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002724:	4b75      	ldr	r3, [pc, #468]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0xba>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fc43 	bl	8000fbc <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273a:	f7fe fc3f 	bl	8000fbc <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	; 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1bc      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274c:	4b6b      	ldr	r3, [pc, #428]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0xe2>
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d063      	beq.n	8002830 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002768:	4b64      	ldr	r3, [pc, #400]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002774:	4b61      	ldr	r3, [pc, #388]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11c      	bne.n	80027ba <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002780:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d116      	bne.n	80027ba <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278c:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x14c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e190      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b55      	ldr	r3, [pc, #340]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4952      	ldr	r1, [pc, #328]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b8:	e03a      	b.n	8002830 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d020      	beq.n	8002804 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <HAL_RCC_OscConfig+0x2a8>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe fbf8 	bl	8000fbc <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe fbf4 	bl	8000fbc <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e171      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	493f      	ldr	r1, [pc, #252]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
 8002802:	e015      	b.n	8002830 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002804:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_OscConfig+0x2a8>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fbd7 	bl	8000fbc <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002812:	f7fe fbd3 	bl	8000fbc <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e150      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d030      	beq.n	800289e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002844:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fe fbb7 	bl	8000fbc <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002852:	f7fe fbb3 	bl	8000fbc <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e130      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x1fa>
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe fba0 	bl	8000fbc <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7fe fb9c 	bl	8000fbc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e119      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 809f 	beq.w	80029ea <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10f      	bne.n	80028dc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x2a4>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_RCC_OscConfig+0x2b0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d120      	bne.n	800292a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_RCC_OscConfig+0x2b0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_RCC_OscConfig+0x2b0>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fb62 	bl	8000fbc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	e010      	b.n	800291e <HAL_RCC_OscConfig+0x2c6>
 80028fc:	40023800 	.word	0x40023800
 8002900:	42470000 	.word	0x42470000
 8002904:	42470e80 	.word	0x42470e80
 8002908:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7fe fb56 	bl	8000fbc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0d3      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b6c      	ldr	r3, [pc, #432]	; (8002ad0 <HAL_RCC_OscConfig+0x478>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x2e8>
 8002932:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a67      	ldr	r2, [pc, #412]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	e01c      	b.n	800297a <HAL_RCC_OscConfig+0x322>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_OscConfig+0x30a>
 8002948:	4b62      	ldr	r3, [pc, #392]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a61      	ldr	r2, [pc, #388]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a5e      	ldr	r2, [pc, #376]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e00b      	b.n	800297a <HAL_RCC_OscConfig+0x322>
 8002962:	4b5c      	ldr	r3, [pc, #368]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a5b      	ldr	r2, [pc, #364]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
 800296e:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fb1b 	bl	8000fbc <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fb17 	bl	8000fbc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e092      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ee      	beq.n	800298a <HAL_RCC_OscConfig+0x332>
 80029ac:	e014      	b.n	80029d8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe fb05 	bl	8000fbc <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fb01 	bl	8000fbc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e07c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ee      	bne.n	80029b6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a3c      	ldr	r2, [pc, #240]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d068      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f2:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d060      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d145      	bne.n	8002a92 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCC_OscConfig+0x480>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fad6 	bl	8000fbc <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fad2 	bl	8000fbc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e04f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	019b      	lsls	r3, r3, #6
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	071b      	lsls	r3, r3, #28
 8002a5e:	491d      	ldr	r1, [pc, #116]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_RCC_OscConfig+0x480>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe faa7 	bl	8000fbc <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe faa3 	bl	8000fbc <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e020      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x41a>
 8002a90:	e018      	b.n	8002ac4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_RCC_OscConfig+0x480>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fa90 	bl	8000fbc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fa8c 	bl	8000fbc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_RCC_OscConfig+0x47c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x448>
 8002abe:	e001      	b.n	8002ac4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470060 	.word	0x42470060

08002adc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e083      	b.n	8002bf6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7f5b      	ldrb	r3, [r3, #29]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f008 f8c4 	bl	800ac8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	22ca      	movs	r2, #202	; 0xca
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2253      	movs	r2, #83	; 0x53
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fc26 	bl	800336c <RTC_EnterInitMode>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	22ff      	movs	r2, #255	; 0xff
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2204      	movs	r2, #4
 8002b32:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e05e      	b.n	8002bf6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	041a      	lsls	r2, r3, #16
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b96:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fbb8 	bl	800331c <HAL_RTC_WaitForSynchro>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	22ff      	movs	r2, #255	; 0xff
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e018      	b.n	8002bf6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	22ff      	movs	r2, #255	; 0xff
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bfe:	b590      	push	{r4, r7, lr}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	7f1b      	ldrb	r3, [r3, #28]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_RTC_SetTime+0x1c>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0aa      	b.n	8002d70 <HAL_RTC_SetTime+0x172>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2202      	movs	r2, #2
 8002c24:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d126      	bne.n	8002c7a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fbbd 	bl	80033c4 <RTC_ByteToBcd2>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fbb6 	bl	80033c4 <RTC_ByteToBcd2>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c5c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	789b      	ldrb	r3, [r3, #2]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fbae 	bl	80033c4 <RTC_ByteToBcd2>
 8002c68:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c6a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	78db      	ldrb	r3, [r3, #3]
 8002c72:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e018      	b.n	8002cac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c9a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ca0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	78db      	ldrb	r3, [r3, #3]
 8002ca6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	22ca      	movs	r2, #202	; 0xca
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2253      	movs	r2, #83	; 0x53
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fb55 	bl	800336c <RTC_EnterInitMode>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00b      	beq.n	8002ce0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e047      	b.n	8002d70 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cfe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d111      	bne.n	8002d5a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 faf0 	bl	800331c <HAL_RTC_WaitForSynchro>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	22ff      	movs	r2, #255	; 0xff
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00a      	b.n	8002d70 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	22ff      	movs	r2, #255	; 0xff
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd90      	pop	{r4, r7, pc}

08002d78 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002daa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002dae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11a      	bne.n	8002e2a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fb01 	bl	8003400 <RTC_Bcd2ToByte>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 faf8 	bl	8003400 <RTC_Bcd2ToByte>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	789b      	ldrb	r3, [r3, #2]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 faef 	bl	8003400 <RTC_Bcd2ToByte>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	7f1b      	ldrb	r3, [r3, #28]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_RTC_SetDate+0x1c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e094      	b.n	8002f7a <HAL_RTC_SetDate+0x146>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_RTC_SetDate+0x4c>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	f023 0310 	bic.w	r3, r3, #16
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	330a      	adds	r3, #10
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	78db      	ldrb	r3, [r3, #3]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fa9a 	bl	80033c4 <RTC_ByteToBcd2>
 8002e90:	4603      	mov	r3, r0
 8002e92:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fa93 	bl	80033c4 <RTC_ByteToBcd2>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ea2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	789b      	ldrb	r3, [r3, #2]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fa8b 	bl	80033c4 <RTC_ByteToBcd2>
 8002eae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002eb0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e00e      	b.n	8002ede <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ecc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ed2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	22ca      	movs	r2, #202	; 0xca
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2253      	movs	r2, #83	; 0x53
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fa3c 	bl	800336c <RTC_EnterInitMode>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	22ff      	movs	r2, #255	; 0xff
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2204      	movs	r2, #4
 8002f06:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e033      	b.n	8002f7a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f20:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f30:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f9eb 	bl	800331c <HAL_RTC_WaitForSynchro>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2204      	movs	r2, #4
 8002f58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e00a      	b.n	8002f7a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	22ff      	movs	r2, #255	; 0xff
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}

08002f82 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	0b5b      	lsrs	r3, r3, #13
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11a      	bne.n	8003016 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	78db      	ldrb	r3, [r3, #3]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa0b 	bl	8003400 <RTC_Bcd2ToByte>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fa02 	bl	8003400 <RTC_Bcd2ToByte>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	789b      	ldrb	r3, [r3, #2]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f9f9 	bl	8003400 <RTC_Bcd2ToByte>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003034:	4b93      	ldr	r3, [pc, #588]	; (8003284 <HAL_RTC_SetAlarm_IT+0x264>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a93      	ldr	r2, [pc, #588]	; (8003288 <HAL_RTC_SetAlarm_IT+0x268>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0adb      	lsrs	r3, r3, #11
 8003040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	7f1b      	ldrb	r3, [r3, #28]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_RTC_SetAlarm_IT+0x36>
 8003052:	2302      	movs	r3, #2
 8003054:	e111      	b.n	800327a <HAL_RTC_SetAlarm_IT+0x25a>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2202      	movs	r2, #2
 8003060:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d137      	bne.n	80030d8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f99f 	bl	80033c4 <RTC_ByteToBcd2>
 8003086:	4603      	mov	r3, r0
 8003088:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f998 	bl	80033c4 <RTC_ByteToBcd2>
 8003094:	4603      	mov	r3, r0
 8003096:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003098:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	789b      	ldrb	r3, [r3, #2]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f990 	bl	80033c4 <RTC_ByteToBcd2>
 80030a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	78db      	ldrb	r3, [r3, #3]
 80030ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80030b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f982 	bl	80033c4 <RTC_ByteToBcd2>
 80030c0:	4603      	mov	r3, r0
 80030c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e023      	b.n	8003120 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030f8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003106:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003110:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003116:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800311c:	4313      	orrs	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	22ca      	movs	r2, #202	; 0xca
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2253      	movs	r2, #83	; 0x53
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003144:	d141      	bne.n	80031ca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003154:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003166:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	617a      	str	r2, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2203      	movs	r2, #3
 800317e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e077      	b.n	800327a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0e7      	beq.n	8003168 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e040      	b.n	800324c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031d8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80031ea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1e5a      	subs	r2, r3, #1
 80031f0:	617a      	str	r2, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2203      	movs	r2, #3
 8003202:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e035      	b.n	800327a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0e7      	beq.n	80031ec <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800324a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RTC_SetAlarm_IT+0x26c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0e      	ldr	r2, [pc, #56]	; (800328c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003256:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RTC_SetAlarm_IT+0x26c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_RTC_SetAlarm_IT+0x26c>)
 800325e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003262:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	22ff      	movs	r2, #255	; 0xff
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	; 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}
 8003282:	bf00      	nop
 8003284:	2000048c 	.word	0x2000048c
 8003288:	10624dd3 	.word	0x10624dd3
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d012      	beq.n	80032cc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f007 fc1b 	bl	800aaf0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8a7 	bl	800343c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 80032fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003306:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	775a      	strb	r2, [r3, #29]
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40013c00 	.word	0x40013c00

0800331c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003336:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003338:	f7fd fe40 	bl	8000fbc <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800333e:	e009      	b.n	8003354 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003340:	f7fd fe3c 	bl	8000fbc <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334e:	d901      	bls.n	8003354 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e007      	b.n	8003364 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d119      	bne.n	80033ba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f04f 32ff 	mov.w	r2, #4294967295
 800338e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003390:	f7fd fe14 	bl	8000fbc <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003396:	e009      	b.n	80033ac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003398:	f7fd fe10 	bl	8000fbc <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a6:	d901      	bls.n	80033ac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e007      	b.n	80033bc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ee      	beq.n	8003398 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80033d2:	e005      	b.n	80033e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	3b0a      	subs	r3, #10
 80033de:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2b09      	cmp	r3, #9
 80033e4:	d8f6      	bhi.n	80033d4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b2db      	uxtb	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	4413      	add	r3, r2
 800342e:	b2db      	uxtb	r3, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e056      	b.n	8003510 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f007 fc21 	bl	800acc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003498:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	ea42 0103 	orr.w	r1, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	f003 0104 	and.w	r1, r3, #4
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_SPI_Transmit+0x22>
 8003536:	2302      	movs	r3, #2
 8003538:	e11e      	b.n	8003778 <HAL_SPI_Transmit+0x260>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003542:	f7fd fd3b 	bl	8000fbc <HAL_GetTick>
 8003546:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d002      	beq.n	800355e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003558:	2302      	movs	r3, #2
 800355a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800355c:	e103      	b.n	8003766 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_SPI_Transmit+0x52>
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800356e:	e0fa      	b.n	8003766 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2203      	movs	r2, #3
 8003574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b6:	d107      	bne.n	80035c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d007      	beq.n	80035e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ee:	d14b      	bne.n	8003688 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_SPI_Transmit+0xe6>
 80035f8:	8afb      	ldrh	r3, [r7, #22]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d13e      	bne.n	800367c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	881a      	ldrh	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	1c9a      	adds	r2, r3, #2
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003622:	e02b      	b.n	800367c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d112      	bne.n	8003658 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	86da      	strh	r2, [r3, #54]	; 0x36
 8003656:	e011      	b.n	800367c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003658:	f7fd fcb0 	bl	8000fbc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d803      	bhi.n	8003670 <HAL_SPI_Transmit+0x158>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d102      	bne.n	8003676 <HAL_SPI_Transmit+0x15e>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	77fb      	strb	r3, [r7, #31]
          goto error;
 800367a:	e074      	b.n	8003766 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1ce      	bne.n	8003624 <HAL_SPI_Transmit+0x10c>
 8003686:	e04c      	b.n	8003722 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_SPI_Transmit+0x17e>
 8003690:	8afb      	ldrh	r3, [r7, #22]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d140      	bne.n	8003718 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036bc:	e02c      	b.n	8003718 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d113      	bne.n	80036f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	7812      	ldrb	r2, [r2, #0]
 80036d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80036f2:	e011      	b.n	8003718 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f4:	f7fd fc62 	bl	8000fbc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d803      	bhi.n	800370c <HAL_SPI_Transmit+0x1f4>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d102      	bne.n	8003712 <HAL_SPI_Transmit+0x1fa>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003716:	e026      	b.n	8003766 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1cd      	bne.n	80036be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fba4 	bl	8003e74 <SPI_EndRxTxTransaction>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e000      	b.n	8003766 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003776:	7ffb      	ldrb	r3, [r7, #31]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379c:	d112      	bne.n	80037c4 <HAL_SPI_Receive+0x44>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10e      	bne.n	80037c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2204      	movs	r2, #4
 80037aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f8e9 	bl	8003992 <HAL_SPI_TransmitReceive>
 80037c0:	4603      	mov	r3, r0
 80037c2:	e0e2      	b.n	800398a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_SPI_Receive+0x52>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0db      	b.n	800398a <HAL_SPI_Receive+0x20a>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037da:	f7fd fbef 	bl	8000fbc <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037f0:	e0c2      	b.n	8003978 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_Receive+0x7e>
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003802:	e0b9      	b.n	8003978 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2204      	movs	r2, #4
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	88fa      	ldrh	r2, [r7, #6]
 8003822:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384a:	d107      	bne.n	800385c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d007      	beq.n	800387a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003878:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d162      	bne.n	8003948 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003882:	e02e      	b.n	80038e2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d115      	bne.n	80038be <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f103 020c 	add.w	r2, r3, #12
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038bc:	e011      	b.n	80038e2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038be:	f7fd fb7d 	bl	8000fbc <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d803      	bhi.n	80038d6 <HAL_SPI_Receive+0x156>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_Receive+0x15c>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038e0:	e04a      	b.n	8003978 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1cb      	bne.n	8003884 <HAL_SPI_Receive+0x104>
 80038ec:	e031      	b.n	8003952 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d113      	bne.n	8003924 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003922:	e011      	b.n	8003948 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003924:	f7fd fb4a 	bl	8000fbc <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d803      	bhi.n	800393c <HAL_SPI_Receive+0x1bc>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d102      	bne.n	8003942 <HAL_SPI_Receive+0x1c2>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003946:	e017      	b.n	8003978 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1cd      	bne.n	80038ee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa27 	bl	8003daa <SPI_EndRxTransaction>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
 8003974:	e000      	b.n	8003978 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003976:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b08c      	sub	sp, #48	; 0x30
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039a0:	2301      	movs	r3, #1
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x26>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e18a      	b.n	8003cce <HAL_SPI_TransmitReceive+0x33c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c0:	f7fd fafc 	bl	8000fbc <HAL_GetTick>
 80039c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d00f      	beq.n	8003a02 <HAL_SPI_TransmitReceive+0x70>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e8:	d107      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x68>
 80039f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d003      	beq.n	8003a02 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a00:	e15b      	b.n	8003cba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x82>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x82>
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a1a:	e14e      	b.n	8003cba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d003      	beq.n	8003a30 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2205      	movs	r2, #5
 8003a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	887a      	ldrh	r2, [r7, #2]
 8003a52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d007      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d178      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x10a>
 8003a96:	8b7b      	ldrh	r3, [r7, #26]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d166      	bne.n	8003b6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac0:	e053      	b.n	8003b6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x176>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0x176>
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d113      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d119      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x1b8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d014      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b46:	2301      	movs	r3, #1
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b4a:	f7fd fa37 	bl	8000fbc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d807      	bhi.n	8003b6a <HAL_SPI_TransmitReceive+0x1d8>
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d003      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b68:	e0a7      	b.n	8003cba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1a6      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x130>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1a1      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x130>
 8003b7e:	e07c      	b.n	8003c7a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x1fc>
 8003b88:	8b7b      	ldrh	r3, [r7, #26]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d16b      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb4:	e057      	b.n	8003c66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11c      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x26c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d017      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x26c>
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d114      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d119      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x2ae>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d014      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c40:	f7fd f9bc 	bl	8000fbc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d803      	bhi.n	8003c58 <HAL_SPI_TransmitReceive+0x2c6>
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d102      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x2cc>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c64:	e029      	b.n	8003cba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1a2      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x224>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d19d      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f8f8 	bl	8003e74 <SPI_EndRxTxTransaction>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c96:	e010      	b.n	8003cba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	e000      	b.n	8003cba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3730      	adds	r7, #48	; 0x30
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce6:	e04c      	b.n	8003d82 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d048      	beq.n	8003d82 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cf0:	f7fd f964 	bl	8000fbc <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d902      	bls.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d13d      	bne.n	8003d82 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d111      	bne.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d28:	d004      	beq.n	8003d34 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d107      	bne.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4c:	d10f      	bne.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e00f      	b.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1a3      	bne.n	8003ce8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbe:	d111      	bne.n	8003de4 <SPI_EndRxTransaction+0x3a>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	d004      	beq.n	8003dd4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d107      	bne.n	8003de4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dec:	d12a      	bne.n	8003e44 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	d012      	beq.n	8003e1e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff ff67 	bl	8003cd6 <SPI_WaitFlagStateUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02d      	beq.n	8003e6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e026      	b.n	8003e6c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff ff54 	bl	8003cd6 <SPI_WaitFlagStateUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01a      	beq.n	8003e6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e013      	b.n	8003e6c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ff41 	bl	8003cd6 <SPI_WaitFlagStateUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e000      	b.n	8003e6c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <SPI_EndRxTxTransaction+0x7c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <SPI_EndRxTxTransaction+0x80>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	0d5b      	lsrs	r3, r3, #21
 8003e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9e:	d112      	bne.n	8003ec6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff13 	bl	8003cd6 <SPI_WaitFlagStateUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d0f2      	beq.n	8003ec6 <SPI_EndRxTxTransaction+0x52>
 8003ee0:	e000      	b.n	8003ee4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ee2:	bf00      	nop
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	2000048c 	.word	0x2000048c
 8003ef4:	165e9f81 	.word	0x165e9f81

08003ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e01d      	b.n	8003f46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f006 ff4e 	bl	800adc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f000 f95e 	bl	80041f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b06      	cmp	r3, #6
 8003f76:	d007      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d122      	bne.n	8003ff2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d11b      	bne.n	8003ff2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0202 	mvn.w	r2, #2
 8003fc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8ee 	bl	80041ba <HAL_TIM_IC_CaptureCallback>
 8003fde:	e005      	b.n	8003fec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8e0 	bl	80041a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8f1 	bl	80041ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d122      	bne.n	8004046 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b04      	cmp	r3, #4
 800400c:	d11b      	bne.n	8004046 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f06f 0204 	mvn.w	r2, #4
 8004016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8c4 	bl	80041ba <HAL_TIM_IC_CaptureCallback>
 8004032:	e005      	b.n	8004040 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f8b6 	bl	80041a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8c7 	bl	80041ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d122      	bne.n	800409a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b08      	cmp	r3, #8
 8004060:	d11b      	bne.n	800409a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f06f 0208 	mvn.w	r2, #8
 800406a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2204      	movs	r2, #4
 8004070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f89a 	bl	80041ba <HAL_TIM_IC_CaptureCallback>
 8004086:	e005      	b.n	8004094 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f88c 	bl	80041a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f89d 	bl	80041ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d122      	bne.n	80040ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d11b      	bne.n	80040ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 0210 	mvn.w	r2, #16
 80040be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2208      	movs	r2, #8
 80040c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f870 	bl	80041ba <HAL_TIM_IC_CaptureCallback>
 80040da:	e005      	b.n	80040e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f862 	bl	80041a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f873 	bl	80041ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10e      	bne.n	800411a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0201 	mvn.w	r2, #1
 8004112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f006 fca9 	bl	800aa6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d10e      	bne.n	8004146 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d107      	bne.n	8004146 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800413e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f97f 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d10e      	bne.n	8004172 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d107      	bne.n	8004172 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800416a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f838 	bl	80041e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b20      	cmp	r3, #32
 800417e:	d10e      	bne.n	800419e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b20      	cmp	r3, #32
 800418c:	d107      	bne.n	800419e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0220 	mvn.w	r2, #32
 8004196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f949 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a40      	ldr	r2, [pc, #256]	; (800430c <TIM_Base_SetConfig+0x114>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d00f      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3d      	ldr	r2, [pc, #244]	; (8004310 <TIM_Base_SetConfig+0x118>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00b      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <TIM_Base_SetConfig+0x11c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a3b      	ldr	r2, [pc, #236]	; (8004318 <TIM_Base_SetConfig+0x120>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3a      	ldr	r2, [pc, #232]	; (800431c <TIM_Base_SetConfig+0x124>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d108      	bne.n	800424a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2f      	ldr	r2, [pc, #188]	; (800430c <TIM_Base_SetConfig+0x114>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02b      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d027      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2c      	ldr	r2, [pc, #176]	; (8004310 <TIM_Base_SetConfig+0x118>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d023      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <TIM_Base_SetConfig+0x11c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <TIM_Base_SetConfig+0x120>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01b      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a29      	ldr	r2, [pc, #164]	; (800431c <TIM_Base_SetConfig+0x124>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d017      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <TIM_Base_SetConfig+0x128>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a27      	ldr	r2, [pc, #156]	; (8004324 <TIM_Base_SetConfig+0x12c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00f      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a26      	ldr	r2, [pc, #152]	; (8004328 <TIM_Base_SetConfig+0x130>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a25      	ldr	r2, [pc, #148]	; (800432c <TIM_Base_SetConfig+0x134>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <TIM_Base_SetConfig+0x138>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <TIM_Base_SetConfig+0x13c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <TIM_Base_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0xf8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0c      	ldr	r2, [pc, #48]	; (800431c <TIM_Base_SetConfig+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40010400 	.word	0x40010400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	40001800 	.word	0x40001800
 8004330:	40001c00 	.word	0x40001c00
 8004334:	40002000 	.word	0x40002000

08004338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800434c:	2302      	movs	r3, #2
 800434e:	e05a      	b.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a21      	ldr	r2, [pc, #132]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439c:	d01d      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10c      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40010000 	.word	0x40010000
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800
 8004420:	40000c00 	.word	0x40000c00
 8004424:	40010400 	.word	0x40010400
 8004428:	40014000 	.word	0x40014000
 800442c:	40001800 	.word	0x40001800

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e03f      	b.n	80044ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f006 fcc6 	bl	800ae10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	; 0x24
 8004488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fc9d 	bl	8004ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b20      	cmp	r3, #32
 800450c:	d153      	bne.n	80045b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_Transmit_DMA+0x26>
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e04c      	b.n	80045b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_UART_Transmit_DMA+0x38>
 8004528:	2302      	movs	r3, #2
 800452a:	e045      	b.n	80045b8 <HAL_UART_Transmit_DMA+0xc4>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2221      	movs	r2, #33	; 0x21
 8004550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_UART_Transmit_DMA+0xcc>)
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_UART_Transmit_DMA+0xd0>)
 8004562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <HAL_UART_Transmit_DMA+0xd4>)
 800456a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004574:	f107 0308 	add.w	r3, r7, #8
 8004578:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3304      	adds	r3, #4
 8004588:	461a      	mov	r2, r3
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	f7fc ff06 	bl	800139c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	080049e9 	.word	0x080049e9
 80045c4:	08004a3b 	.word	0x08004a3b
 80045c8:	08004adb 	.word	0x08004adb

080045cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	4613      	mov	r3, r2
 80045d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d166      	bne.n	80046b4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_UART_Receive_DMA+0x26>
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e05f      	b.n	80046b6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_UART_Receive_DMA+0x38>
 8004600:	2302      	movs	r3, #2
 8004602:	e058      	b.n	80046b6 <HAL_UART_Receive_DMA+0xea>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2222      	movs	r2, #34	; 0x22
 8004622:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462a:	4a25      	ldr	r2, [pc, #148]	; (80046c0 <HAL_UART_Receive_DMA+0xf4>)
 800462c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_UART_Receive_DMA+0xf8>)
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <HAL_UART_Receive_DMA+0xfc>)
 800463c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	2200      	movs	r2, #0
 8004644:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004646:	f107 0308 	add.w	r3, r7, #8
 800464a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	f7fc fe9d 	bl	800139c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	08004a57 	.word	0x08004a57
 80046c4:	08004abf 	.word	0x08004abf
 80046c8:	08004adb 	.word	0x08004adb

080046cc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b21      	cmp	r3, #33	; 0x21
 80046f8:	d116      	bne.n	8004728 <HAL_UART_DMAStop+0x5c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800470e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc fe95 	bl	800144c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa23 	bl	8004b6e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b22      	cmp	r3, #34	; 0x22
 8004748:	d116      	bne.n	8004778 <HAL_UART_DMAStop+0xac>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476c:	4618      	mov	r0, r3
 800476e:	f7fc fe6d 	bl	800144c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa11 	bl	8004b9a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10d      	bne.n	80047d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_UART_IRQHandler+0x52>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa83 	bl	8004cda <UART_Receive_IT>
      return;
 80047d4:	e0d0      	b.n	8004978 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80b0 	beq.w	800493e <HAL_UART_IRQHandler+0x1ba>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <HAL_UART_IRQHandler+0x70>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80a5 	beq.w	800493e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_UART_IRQHandler+0x90>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_UART_IRQHandler+0xb0>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	f043 0202 	orr.w	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_UART_IRQHandler+0xd0>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00f      	beq.n	800487e <HAL_UART_IRQHandler+0xfa>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_UART_IRQHandler+0xee>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	f043 0208 	orr.w	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d077      	beq.n	8004976 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_UART_IRQHandler+0x11c>
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa1d 	bl	8004cda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_UART_IRQHandler+0x144>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d031      	beq.n	800492c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f966 	bl	8004b9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d123      	bne.n	8004924 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	4a21      	ldr	r2, [pc, #132]	; (8004980 <HAL_UART_IRQHandler+0x1fc>)
 80048fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004900:	4618      	mov	r0, r3
 8004902:	f7fc fe13 	bl	800152c <HAL_DMA_Abort_IT>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004916:	4610      	mov	r0, r2
 8004918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491a:	e00e      	b.n	800493a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f859 	bl	80049d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004922:	e00a      	b.n	800493a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f855 	bl	80049d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492a:	e006      	b.n	800493a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f851 	bl	80049d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004938:	e01d      	b.n	8004976 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493a:	bf00      	nop
    return;
 800493c:	e01b      	b.n	8004976 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_UART_IRQHandler+0x1d6>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f953 	bl	8004bfe <UART_Transmit_IT>
    return;
 8004958:	e00e      	b.n	8004978 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <HAL_UART_IRQHandler+0x1f4>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f99b 	bl	8004caa <UART_EndTransmit_IT>
    return;
 8004974:	e000      	b.n	8004978 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004976:	bf00      	nop
  }
}
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	08004bd7 	.word	0x08004bd7

08004984 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d113      	bne.n	8004a2c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695a      	ldr	r2, [r3, #20]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a18:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a28:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a2a:	e002      	b.n	8004a32 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7ff ffa9 	bl	8004984 <HAL_UART_TxCpltCallback>
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff ffa5 	bl	8004998 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d11e      	bne.n	8004ab0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a86:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff ff7b 	bl	80049ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff ff77 	bl	80049c0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	bf0c      	ite	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	2300      	movne	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b21      	cmp	r3, #33	; 0x21
 8004b0c:	d108      	bne.n	8004b20 <UART_DMAError+0x46>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2200      	movs	r2, #0
 8004b18:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b1a:	68b8      	ldr	r0, [r7, #8]
 8004b1c:	f000 f827 	bl	8004b6e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	2300      	movne	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b22      	cmp	r3, #34	; 0x22
 8004b40:	d108      	bne.n	8004b54 <UART_DMAError+0x7a>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b4e:	68b8      	ldr	r0, [r7, #8]
 8004b50:	f000 f823 	bl	8004b9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	f043 0210 	orr.w	r2, r3, #16
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b60:	68b8      	ldr	r0, [r7, #8]
 8004b62:	f7ff ff37 	bl	80049d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b84:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bb0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff feef 	bl	80049d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b21      	cmp	r3, #33	; 0x21
 8004c10:	d144      	bne.n	8004c9c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1a:	d11a      	bne.n	8004c52 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d105      	bne.n	8004c46 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	1c9a      	adds	r2, r3, #2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	621a      	str	r2, [r3, #32]
 8004c44:	e00e      	b.n	8004c64 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	621a      	str	r2, [r3, #32]
 8004c50:	e008      	b.n	8004c64 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	1c59      	adds	r1, r3, #1
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6211      	str	r1, [r2, #32]
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4619      	mov	r1, r3
 8004c72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10f      	bne.n	8004c98 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fe5a 	bl	8004984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b22      	cmp	r3, #34	; 0x22
 8004cec:	d171      	bne.n	8004dd2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf6:	d123      	bne.n	8004d40 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10e      	bne.n	8004d24 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28
 8004d22:	e029      	b.n	8004d78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d3e:	e01b      	b.n	8004d78 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6858      	ldr	r0, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6291      	str	r1, [r2, #40]	; 0x28
 8004d58:	b2c2      	uxtb	r2, r0
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e00c      	b.n	8004d78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	1c58      	adds	r0, r3, #1
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	6288      	str	r0, [r1, #40]	; 0x28
 8004d70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d120      	bne.n	8004dce <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0220 	bic.w	r2, r2, #32
 8004d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695a      	ldr	r2, [r3, #20]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0201 	bic.w	r2, r2, #1
 8004dba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fdf1 	bl	80049ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e002      	b.n	8004dd4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	b0bd      	sub	sp, #244	; 0xf4
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	68d9      	ldr	r1, [r3, #12]
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	ea40 0301 	orr.w	r3, r0, r1
 8004e04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e34:	f021 010c 	bic.w	r1, r1, #12
 8004e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004e42:	430b      	orrs	r3, r1
 8004e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e56:	6999      	ldr	r1, [r3, #24]
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	ea40 0301 	orr.w	r3, r0, r1
 8004e62:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6e:	f040 81b6 	bne.w	80051de <UART_SetConfig+0x402>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b70      	ldr	r3, [pc, #448]	; (800503c <UART_SetConfig+0x260>)
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d012      	beq.n	8004ea4 <UART_SetConfig+0xc8>
 8004e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b6e      	ldr	r3, [pc, #440]	; (8005040 <UART_SetConfig+0x264>)
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d00c      	beq.n	8004ea4 <UART_SetConfig+0xc8>
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b6c      	ldr	r3, [pc, #432]	; (8005044 <UART_SetConfig+0x268>)
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d006      	beq.n	8004ea4 <UART_SetConfig+0xc8>
 8004e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b6a      	ldr	r3, [pc, #424]	; (8005048 <UART_SetConfig+0x26c>)
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	f040 80d6 	bne.w	8005050 <UART_SetConfig+0x274>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fd f938 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004eb0:	461c      	mov	r4, r3
 8004eb2:	f04f 0500 	mov.w	r5, #0
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	462b      	mov	r3, r5
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004ec0:	415b      	adcs	r3, r3
 8004ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ec6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004eca:	1912      	adds	r2, r2, r4
 8004ecc:	eb45 0303 	adc.w	r3, r5, r3
 8004ed0:	f04f 0000 	mov.w	r0, #0
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	00d9      	lsls	r1, r3, #3
 8004eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ede:	00d0      	lsls	r0, r2, #3
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	1911      	adds	r1, r2, r4
 8004ee6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004eea:	416b      	adcs	r3, r5
 8004eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004f02:	415b      	adcs	r3, r3
 8004f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f08:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004f0c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004f10:	f7fb fe72 	bl	8000bf8 <__aeabi_uldivmod>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4b4c      	ldr	r3, [pc, #304]	; (800504c <UART_SetConfig+0x270>)
 8004f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	011e      	lsls	r6, r3, #4
 8004f22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f26:	461c      	mov	r4, r3
 8004f28:	f04f 0500 	mov.w	r5, #0
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	462b      	mov	r3, r5
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	67b9      	str	r1, [r7, #120]	; 0x78
 8004f34:	415b      	adcs	r3, r3
 8004f36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004f3c:	1912      	adds	r2, r2, r4
 8004f3e:	eb45 0303 	adc.w	r3, r5, r3
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	00d9      	lsls	r1, r3, #3
 8004f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f50:	00d0      	lsls	r0, r2, #3
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	1911      	adds	r1, r2, r4
 8004f58:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004f5c:	416b      	adcs	r3, r5
 8004f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	1891      	adds	r1, r2, r2
 8004f70:	6739      	str	r1, [r7, #112]	; 0x70
 8004f72:	415b      	adcs	r3, r3
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
 8004f76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004f7a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004f7e:	f7fb fe3b 	bl	8000bf8 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b31      	ldr	r3, [pc, #196]	; (800504c <UART_SetConfig+0x270>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	; 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	3332      	adds	r3, #50	; 0x32
 8004f9a:	4a2c      	ldr	r2, [pc, #176]	; (800504c <UART_SetConfig+0x270>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fa8:	441e      	add	r6, r3
 8004faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f04f 0100 	mov.w	r1, #0
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	1894      	adds	r4, r2, r2
 8004fba:	66bc      	str	r4, [r7, #104]	; 0x68
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004fc4:	1812      	adds	r2, r2, r0
 8004fc6:	eb41 0303 	adc.w	r3, r1, r3
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	f04f 0500 	mov.w	r5, #0
 8004fd2:	00dd      	lsls	r5, r3, #3
 8004fd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fd8:	00d4      	lsls	r4, r2, #3
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	1814      	adds	r4, r2, r0
 8004fe0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004fe4:	414b      	adcs	r3, r1
 8004fe6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	1891      	adds	r1, r2, r2
 8004ff8:	6639      	str	r1, [r7, #96]	; 0x60
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005006:	f7fb fdf7 	bl	8000bf8 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b0f      	ldr	r3, [pc, #60]	; (800504c <UART_SetConfig+0x270>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	; 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	3332      	adds	r3, #50	; 0x32
 8005022:	4a0a      	ldr	r2, [pc, #40]	; (800504c <UART_SetConfig+0x270>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 0207 	and.w	r2, r3, #7
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4432      	add	r2, r6
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	e288      	b.n	800554c <UART_SetConfig+0x770>
 800503a:	bf00      	nop
 800503c:	40011000 	.word	0x40011000
 8005040:	40011400 	.word	0x40011400
 8005044:	40011800 	.word	0x40011800
 8005048:	40011c00 	.word	0x40011c00
 800504c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fd f84e 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8005054:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800505c:	461c      	mov	r4, r3
 800505e:	f04f 0500 	mov.w	r5, #0
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	1891      	adds	r1, r2, r2
 8005068:	65b9      	str	r1, [r7, #88]	; 0x58
 800506a:	415b      	adcs	r3, r3
 800506c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800506e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005072:	1912      	adds	r2, r2, r4
 8005074:	eb45 0303 	adc.w	r3, r5, r3
 8005078:	f04f 0000 	mov.w	r0, #0
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	00d9      	lsls	r1, r3, #3
 8005082:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005086:	00d0      	lsls	r0, r2, #3
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	1911      	adds	r1, r2, r4
 800508e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005092:	416b      	adcs	r3, r5
 8005094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	461a      	mov	r2, r3
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	6539      	str	r1, [r7, #80]	; 0x50
 80050a8:	415b      	adcs	r3, r3
 80050aa:	657b      	str	r3, [r7, #84]	; 0x54
 80050ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050b0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80050b4:	f7fb fda0 	bl	8000bf8 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4bb9      	ldr	r3, [pc, #740]	; (80053a4 <UART_SetConfig+0x5c8>)
 80050be:	fba3 2302 	umull	r2, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	011e      	lsls	r6, r3, #4
 80050c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050ca:	461c      	mov	r4, r3
 80050cc:	f04f 0500 	mov.w	r5, #0
 80050d0:	4622      	mov	r2, r4
 80050d2:	462b      	mov	r3, r5
 80050d4:	1891      	adds	r1, r2, r2
 80050d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80050d8:	415b      	adcs	r3, r3
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050e0:	1912      	adds	r2, r2, r4
 80050e2:	eb45 0303 	adc.w	r3, r5, r3
 80050e6:	f04f 0000 	mov.w	r0, #0
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	00d9      	lsls	r1, r3, #3
 80050f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f4:	00d0      	lsls	r0, r2, #3
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	1911      	adds	r1, r2, r4
 80050fc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005100:	416b      	adcs	r3, r5
 8005102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	461a      	mov	r2, r3
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	1891      	adds	r1, r2, r2
 8005114:	6439      	str	r1, [r7, #64]	; 0x40
 8005116:	415b      	adcs	r3, r3
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
 800511a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800511e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005122:	f7fb fd69 	bl	8000bf8 <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4b9e      	ldr	r3, [pc, #632]	; (80053a4 <UART_SetConfig+0x5c8>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	; 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	3332      	adds	r3, #50	; 0x32
 800513e:	4a99      	ldr	r2, [pc, #612]	; (80053a4 <UART_SetConfig+0x5c8>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800514c:	441e      	add	r6, r3
 800514e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005152:	4618      	mov	r0, r3
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	1894      	adds	r4, r2, r2
 800515e:	63bc      	str	r4, [r7, #56]	; 0x38
 8005160:	415b      	adcs	r3, r3
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005168:	1812      	adds	r2, r2, r0
 800516a:	eb41 0303 	adc.w	r3, r1, r3
 800516e:	f04f 0400 	mov.w	r4, #0
 8005172:	f04f 0500 	mov.w	r5, #0
 8005176:	00dd      	lsls	r5, r3, #3
 8005178:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800517c:	00d4      	lsls	r4, r2, #3
 800517e:	4622      	mov	r2, r4
 8005180:	462b      	mov	r3, r5
 8005182:	1814      	adds	r4, r2, r0
 8005184:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005188:	414b      	adcs	r3, r1
 800518a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	461a      	mov	r2, r3
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	1891      	adds	r1, r2, r2
 800519c:	6339      	str	r1, [r7, #48]	; 0x30
 800519e:	415b      	adcs	r3, r3
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
 80051a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051aa:	f7fb fd25 	bl	8000bf8 <__aeabi_uldivmod>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <UART_SetConfig+0x5c8>)
 80051b4:	fba3 1302 	umull	r1, r3, r3, r2
 80051b8:	095b      	lsrs	r3, r3, #5
 80051ba:	2164      	movs	r1, #100	; 0x64
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	3332      	adds	r3, #50	; 0x32
 80051c6:	4a77      	ldr	r2, [pc, #476]	; (80053a4 <UART_SetConfig+0x5c8>)
 80051c8:	fba2 2303 	umull	r2, r3, r2, r3
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	f003 0207 	and.w	r2, r3, #7
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4432      	add	r2, r6
 80051da:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80051dc:	e1b6      	b.n	800554c <UART_SetConfig+0x770>
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b70      	ldr	r3, [pc, #448]	; (80053a8 <UART_SetConfig+0x5cc>)
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d012      	beq.n	8005210 <UART_SetConfig+0x434>
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b6e      	ldr	r3, [pc, #440]	; (80053ac <UART_SetConfig+0x5d0>)
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d00c      	beq.n	8005210 <UART_SetConfig+0x434>
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4b6c      	ldr	r3, [pc, #432]	; (80053b0 <UART_SetConfig+0x5d4>)
 80051fe:	429a      	cmp	r2, r3
 8005200:	d006      	beq.n	8005210 <UART_SetConfig+0x434>
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <UART_SetConfig+0x5d8>)
 800520a:	429a      	cmp	r2, r3
 800520c:	f040 80d4 	bne.w	80053b8 <UART_SetConfig+0x5dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fc ff82 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8005214:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005218:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800521c:	461c      	mov	r4, r3
 800521e:	f04f 0500 	mov.w	r5, #0
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	1891      	adds	r1, r2, r2
 8005228:	62b9      	str	r1, [r7, #40]	; 0x28
 800522a:	415b      	adcs	r3, r3
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800522e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005232:	1912      	adds	r2, r2, r4
 8005234:	eb45 0303 	adc.w	r3, r5, r3
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	00d9      	lsls	r1, r3, #3
 8005242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005246:	00d0      	lsls	r0, r2, #3
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	eb12 0a04 	adds.w	sl, r2, r4
 8005250:	eb43 0b05 	adc.w	fp, r3, r5
 8005254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4618      	mov	r0, r3
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	008b      	lsls	r3, r1, #2
 800526a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800526e:	0082      	lsls	r2, r0, #2
 8005270:	4650      	mov	r0, sl
 8005272:	4659      	mov	r1, fp
 8005274:	f7fb fcc0 	bl	8000bf8 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <UART_SetConfig+0x5c8>)
 800527e:	fba3 2302 	umull	r2, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	011e      	lsls	r6, r3, #4
 8005286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800528a:	4618      	mov	r0, r3
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	1894      	adds	r4, r2, r2
 8005296:	623c      	str	r4, [r7, #32]
 8005298:	415b      	adcs	r3, r3
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
 800529c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052a0:	1812      	adds	r2, r2, r0
 80052a2:	eb41 0303 	adc.w	r3, r1, r3
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	f04f 0500 	mov.w	r5, #0
 80052ae:	00dd      	lsls	r5, r3, #3
 80052b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052b4:	00d4      	lsls	r4, r2, #3
 80052b6:	4622      	mov	r2, r4
 80052b8:	462b      	mov	r3, r5
 80052ba:	1814      	adds	r4, r2, r0
 80052bc:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80052c0:	414b      	adcs	r3, r1
 80052c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	008b      	lsls	r3, r1, #2
 80052dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052e0:	0082      	lsls	r2, r0, #2
 80052e2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80052e6:	f7fb fc87 	bl	8000bf8 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4b2d      	ldr	r3, [pc, #180]	; (80053a4 <UART_SetConfig+0x5c8>)
 80052f0:	fba3 1302 	umull	r1, r3, r3, r2
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	2164      	movs	r1, #100	; 0x64
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	3332      	adds	r3, #50	; 0x32
 8005302:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <UART_SetConfig+0x5c8>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530e:	441e      	add	r6, r3
 8005310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005314:	4618      	mov	r0, r3
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	1894      	adds	r4, r2, r2
 8005320:	61bc      	str	r4, [r7, #24]
 8005322:	415b      	adcs	r3, r3
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800532a:	1812      	adds	r2, r2, r0
 800532c:	eb41 0303 	adc.w	r3, r1, r3
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	f04f 0500 	mov.w	r5, #0
 8005338:	00dd      	lsls	r5, r3, #3
 800533a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800533e:	00d4      	lsls	r4, r2, #3
 8005340:	4622      	mov	r2, r4
 8005342:	462b      	mov	r3, r5
 8005344:	1814      	adds	r4, r2, r0
 8005346:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800534a:	414b      	adcs	r3, r1
 800534c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	008b      	lsls	r3, r1, #2
 8005366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800536a:	0082      	lsls	r2, r0, #2
 800536c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005370:	f7fb fc42 	bl	8000bf8 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <UART_SetConfig+0x5c8>)
 800537a:	fba3 1302 	umull	r1, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2164      	movs	r1, #100	; 0x64
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	3332      	adds	r3, #50	; 0x32
 800538c:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <UART_SetConfig+0x5c8>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4432      	add	r2, r6
 80053a0:	609a      	str	r2, [r3, #8]
 80053a2:	e0d3      	b.n	800554c <UART_SetConfig+0x770>
 80053a4:	51eb851f 	.word	0x51eb851f
 80053a8:	40011000 	.word	0x40011000
 80053ac:	40011400 	.word	0x40011400
 80053b0:	40011800 	.word	0x40011800
 80053b4:	40011c00 	.word	0x40011c00
      pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7fc fe9a 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80053bc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053c4:	461c      	mov	r4, r3
 80053c6:	f04f 0500 	mov.w	r5, #0
 80053ca:	4622      	mov	r2, r4
 80053cc:	462b      	mov	r3, r5
 80053ce:	1891      	adds	r1, r2, r2
 80053d0:	6139      	str	r1, [r7, #16]
 80053d2:	415b      	adcs	r3, r3
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053da:	1912      	adds	r2, r2, r4
 80053dc:	eb45 0303 	adc.w	r3, r5, r3
 80053e0:	f04f 0000 	mov.w	r0, #0
 80053e4:	f04f 0100 	mov.w	r1, #0
 80053e8:	00d9      	lsls	r1, r3, #3
 80053ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053ee:	00d0      	lsls	r0, r2, #3
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	eb12 0804 	adds.w	r8, r2, r4
 80053f8:	eb43 0905 	adc.w	r9, r3, r5
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4618      	mov	r0, r3
 8005404:	f04f 0100 	mov.w	r1, #0
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	008b      	lsls	r3, r1, #2
 8005412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005416:	0082      	lsls	r2, r0, #2
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fb fbec 	bl	8000bf8 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4b4c      	ldr	r3, [pc, #304]	; (8005558 <UART_SetConfig+0x77c>)
 8005426:	fba3 2302 	umull	r2, r3, r3, r2
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	011e      	lsls	r6, r3, #4
 800542e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005432:	4618      	mov	r0, r3
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	1894      	adds	r4, r2, r2
 800543e:	60bc      	str	r4, [r7, #8]
 8005440:	415b      	adcs	r3, r3
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005448:	1812      	adds	r2, r2, r0
 800544a:	eb41 0303 	adc.w	r3, r1, r3
 800544e:	f04f 0400 	mov.w	r4, #0
 8005452:	f04f 0500 	mov.w	r5, #0
 8005456:	00dd      	lsls	r5, r3, #3
 8005458:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800545c:	00d4      	lsls	r4, r2, #3
 800545e:	4622      	mov	r2, r4
 8005460:	462b      	mov	r3, r5
 8005462:	1814      	adds	r4, r2, r0
 8005464:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005468:	414b      	adcs	r3, r1
 800546a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	008b      	lsls	r3, r1, #2
 8005484:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005488:	0082      	lsls	r2, r0, #2
 800548a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800548e:	f7fb fbb3 	bl	8000bf8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4b30      	ldr	r3, [pc, #192]	; (8005558 <UART_SetConfig+0x77c>)
 8005498:	fba3 1302 	umull	r1, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	2164      	movs	r1, #100	; 0x64
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	3332      	adds	r3, #50	; 0x32
 80054aa:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <UART_SetConfig+0x77c>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b6:	441e      	add	r6, r3
 80054b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054bc:	4618      	mov	r0, r3
 80054be:	f04f 0100 	mov.w	r1, #0
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	1894      	adds	r4, r2, r2
 80054c8:	603c      	str	r4, [r7, #0]
 80054ca:	415b      	adcs	r3, r3
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d2:	1812      	adds	r2, r2, r0
 80054d4:	eb41 0303 	adc.w	r3, r1, r3
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	f04f 0500 	mov.w	r5, #0
 80054e0:	00dd      	lsls	r5, r3, #3
 80054e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054e6:	00d4      	lsls	r4, r2, #3
 80054e8:	4622      	mov	r2, r4
 80054ea:	462b      	mov	r3, r5
 80054ec:	1814      	adds	r4, r2, r0
 80054ee:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80054f2:	414b      	adcs	r3, r1
 80054f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4618      	mov	r0, r3
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	008b      	lsls	r3, r1, #2
 800550e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005512:	0082      	lsls	r2, r0, #2
 8005514:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005518:	f7fb fb6e 	bl	8000bf8 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <UART_SetConfig+0x77c>)
 8005522:	fba3 1302 	umull	r1, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2164      	movs	r1, #100	; 0x64
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	3332      	adds	r3, #50	; 0x32
 8005534:	4a08      	ldr	r2, [pc, #32]	; (8005558 <UART_SetConfig+0x77c>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4432      	add	r2, r6
 8005548:	609a      	str	r2, [r3, #8]
}
 800554a:	e7ff      	b.n	800554c <UART_SetConfig+0x770>
 800554c:	bf00      	nop
 800554e:	37f4      	adds	r7, #244	; 0xf4
 8005550:	46bd      	mov	sp, r7
 8005552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005556:	bf00      	nop
 8005558:	51eb851f 	.word	0x51eb851f

0800555c <spiTradeByte>:
 */

#include "EEPROM.h"
//Obsluga SPI i eepromu
uint8_t spiTradeByte(uint8_t byte)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af02      	add	r7, sp, #8
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
 uint8_t answer;

 HAL_SPI_TransmitReceive(&hspi2, &byte, &answer, 1, 5000);
 8005566:	f107 020f 	add.w	r2, r7, #15
 800556a:	1df9      	adds	r1, r7, #7
 800556c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2301      	movs	r3, #1
 8005574:	4803      	ldr	r0, [pc, #12]	; (8005584 <spiTradeByte+0x28>)
 8005576:	f7fe fa0c 	bl	8003992 <HAL_SPI_TransmitReceive>

 return answer;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	200007b0 	.word	0x200007b0

08005588 <EEPROM_read>:

uint8_t EEPROM_read(uint16_t address)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	80fb      	strh	r3, [r7, #6]
	uint8_t result;
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 8005592:	2200      	movs	r2, #0
 8005594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005598:	4810      	ldr	r0, [pc, #64]	; (80055dc <EEPROM_read+0x54>)
 800559a:	f7fc fbe7 	bl	8001d6c <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_READ);
 800559e:	2003      	movs	r0, #3
 80055a0:	f7ff ffdc 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ffd5 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff ffd0 	bl	800555c <spiTradeByte>
	result=spiTradeByte(0);
 80055bc:	2000      	movs	r0, #0
 80055be:	f7ff ffcd 	bl	800555c <spiTradeByte>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//select eeprom ic
 80055c6:	2201      	movs	r2, #1
 80055c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055cc:	4803      	ldr	r0, [pc, #12]	; (80055dc <EEPROM_read+0x54>)
 80055ce:	f7fc fbcd 	bl	8001d6c <HAL_GPIO_WritePin>
	return result;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40020400 	.word	0x40020400

080055e0 <EEPROM_readSettings>:

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//select eeprom ic
}

void EEPROM_readSettings(uint16_t address, struct SETTINGS* settingsStruct, uint8_t byteCount)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	6039      	str	r1, [r7, #0]
 80055ea:	80fb      	strh	r3, [r7, #6]
 80055ec:	4613      	mov	r3, r2
 80055ee:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055f6:	4812      	ldr	r0, [pc, #72]	; (8005640 <EEPROM_readSettings+0x60>)
 80055f8:	f7fc fbb8 	bl	8001d6c <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_READ);
 80055fc:	2003      	movs	r0, #3
 80055fe:	f7ff ffad 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	0a1b      	lsrs	r3, r3, #8
 8005606:	b29b      	uxth	r3, r3
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ffa6 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ffa1 	bl	800555c <spiTradeByte>

	HAL_SPI_Receive(&hspi2, (uint8_t*)((struct SETTINGS *)settingsStruct), byteCount, 5000);
 800561a:	797b      	ldrb	r3, [r7, #5]
 800561c:	b29a      	uxth	r2, r3
 800561e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	4807      	ldr	r0, [pc, #28]	; (8005644 <EEPROM_readSettings+0x64>)
 8005626:	f7fe f8ab 	bl	8003780 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//select eeprom ic
 800562a:	2201      	movs	r2, #1
 800562c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005630:	4803      	ldr	r0, [pc, #12]	; (8005640 <EEPROM_readSettings+0x60>)
 8005632:	f7fc fb9b 	bl	8001d6c <HAL_GPIO_WritePin>
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40020400 	.word	0x40020400
 8005644:	200007b0 	.word	0x200007b0

08005648 <EEPROM_write>:

void EEPROM_write(uint16_t address, uint8_t *byte)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 8005654:	2200      	movs	r2, #0
 8005656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800565a:	4819      	ldr	r0, [pc, #100]	; (80056c0 <EEPROM_write+0x78>)
 800565c:	f7fc fb86 	bl	8001d6c <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WREN);
 8005660:	2006      	movs	r0, #6
 8005662:	f7ff ff7b 	bl	800555c <spiTradeByte>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 8005666:	2201      	movs	r2, #1
 8005668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800566c:	4814      	ldr	r0, [pc, #80]	; (80056c0 <EEPROM_write+0x78>)
 800566e:	f7fc fb7d 	bl	8001d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8005672:	2200      	movs	r2, #0
 8005674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005678:	4811      	ldr	r0, [pc, #68]	; (80056c0 <EEPROM_write+0x78>)
 800567a:	f7fc fb77 	bl	8001d6c <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WRITE);
 800567e:	2002      	movs	r0, #2
 8005680:	f7ff ff6c 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	b29b      	uxth	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ff65 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff ff60 	bl	800555c <spiTradeByte>
	spiTradeByte(*byte);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff ff5b 	bl	800555c <spiTradeByte>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 80056a6:	2201      	movs	r2, #1
 80056a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056ac:	4804      	ldr	r0, [pc, #16]	; (80056c0 <EEPROM_write+0x78>)
 80056ae:	f7fc fb5d 	bl	8001d6c <HAL_GPIO_WritePin>
	HAL_Delay(6);
 80056b2:	2006      	movs	r0, #6
 80056b4:	f7fb fc8e 	bl	8000fd4 <HAL_Delay>
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40020400 	.word	0x40020400

080056c4 <EEPROM_write_multiple>:

void EEPROM_write_multiple(uint16_t address, uint8_t* bytes, uint8_t byteCount)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	80fb      	strh	r3, [r7, #6]
 80056d0:	4613      	mov	r3, r2
 80056d2:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 80056d4:	2200      	movs	r2, #0
 80056d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056da:	481b      	ldr	r0, [pc, #108]	; (8005748 <EEPROM_write_multiple+0x84>)
 80056dc:	f7fc fb46 	bl	8001d6c <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WREN);
 80056e0:	2006      	movs	r0, #6
 80056e2:	f7ff ff3b 	bl	800555c <spiTradeByte>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 80056e6:	2201      	movs	r2, #1
 80056e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056ec:	4816      	ldr	r0, [pc, #88]	; (8005748 <EEPROM_write_multiple+0x84>)
 80056ee:	f7fc fb3d 	bl	8001d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80056f2:	2200      	movs	r2, #0
 80056f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056f8:	4813      	ldr	r0, [pc, #76]	; (8005748 <EEPROM_write_multiple+0x84>)
 80056fa:	f7fc fb37 	bl	8001d6c <HAL_GPIO_WritePin>
	spiTradeByte(EEPROM_WRITE);
 80056fe:	2002      	movs	r0, #2
 8005700:	f7ff ff2c 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address >> 8));
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	b29b      	uxth	r3, r3
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff25 	bl	800555c <spiTradeByte>
	spiTradeByte((uint8_t)(address & 0x00FF));
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff ff20 	bl	800555c <spiTradeByte>
	HAL_SPI_Transmit(&hspi2, bytes, byteCount, 5000);
 800571c:	797b      	ldrb	r3, [r7, #5]
 800571e:	b29a      	uxth	r2, r3
 8005720:	f241 3388 	movw	r3, #5000	; 0x1388
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	4809      	ldr	r0, [pc, #36]	; (800574c <EEPROM_write_multiple+0x88>)
 8005728:	f7fd fef6 	bl	8003518 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 800572c:	2201      	movs	r2, #1
 800572e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005732:	4805      	ldr	r0, [pc, #20]	; (8005748 <EEPROM_write_multiple+0x84>)
 8005734:	f7fc fb1a 	bl	8001d6c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8005738:	200a      	movs	r0, #10
 800573a:	f7fb fc4b 	bl	8000fd4 <HAL_Delay>
}
 800573e:	bf00      	nop
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40020400 	.word	0x40020400
 800574c:	200007b0 	.word	0x200007b0

08005750 <EEPROM_add_archive_entry>:

//funkcje od archiwum

void EEPROM_add_archive_entry(struct ARCHIVE* ArchiveEntry, uint8_t byteCount)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
	uint16_t address;
	uint8_t currentPage;
	uint8_t diff;
	settings.archiveFirstEntryOffset = EEPROM_read(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR);
 800575c:	2007      	movs	r0, #7
 800575e:	f7ff ff13 	bl	8005588 <EEPROM_read>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	4b55      	ldr	r3, [pc, #340]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 8005768:	71da      	strb	r2, [r3, #7]
	settings.archiveEntriesTotal = EEPROM_read(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR);
 800576a:	2008      	movs	r0, #8
 800576c:	f7ff ff0c 	bl	8005588 <EEPROM_read>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	4b51      	ldr	r3, [pc, #324]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 8005776:	721a      	strb	r2, [r3, #8]

	if (settings.archiveEntriesTotal == ARCHIVE_SIZE)								//jezeli archiwum pelne
 8005778:	4b50      	ldr	r3, [pc, #320]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 800577a:	7a1b      	ldrb	r3, [r3, #8]
 800577c:	2bfa      	cmp	r3, #250	; 0xfa
 800577e:	d10a      	bne.n	8005796 <EEPROM_add_archive_entry+0x46>
	{
		address = EEPROM_ARCHIVE_BASE_ADDRESS + settings.archiveFirstEntryOffset * byteCount;
 8005780:	4b4e      	ldr	r3, [pc, #312]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 8005782:	79db      	ldrb	r3, [r3, #7]
 8005784:	b29a      	uxth	r2, r3
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	b29b      	uxth	r3, r3
 800578a:	fb12 f303 	smulbb	r3, r2, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	3380      	adds	r3, #128	; 0x80
 8005792:	81fb      	strh	r3, [r7, #14]
 8005794:	e009      	b.n	80057aa <EEPROM_add_archive_entry+0x5a>
	}
	else
	{
		address = EEPROM_ARCHIVE_BASE_ADDRESS + settings.archiveEntriesTotal * byteCount;
 8005796:	4b49      	ldr	r3, [pc, #292]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 8005798:	7a1b      	ldrb	r3, [r3, #8]
 800579a:	b29a      	uxth	r2, r3
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	fb12 f303 	smulbb	r3, r2, r3
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3380      	adds	r3, #128	; 0x80
 80057a8:	81fb      	strh	r3, [r7, #14]
	}


	for (currentPage = 1; currentPage <= 255; currentPage++)
 80057aa:	2301      	movs	r3, #1
 80057ac:	737b      	strb	r3, [r7, #13]
	{
		if (address < EEPROM_ARCHIVE_BASE_ADDRESS + currentPage * EEPROM_PAGE_SIZE) break;
 80057ae:	89fa      	ldrh	r2, [r7, #14]
 80057b0:	7b7b      	ldrb	r3, [r7, #13]
 80057b2:	3301      	adds	r3, #1
 80057b4:	01db      	lsls	r3, r3, #7
 80057b6:	429a      	cmp	r2, r3
 80057b8:	db03      	blt.n	80057c2 <EEPROM_add_archive_entry+0x72>
	for (currentPage = 1; currentPage <= 255; currentPage++)
 80057ba:	7b7b      	ldrb	r3, [r7, #13]
 80057bc:	3301      	adds	r3, #1
 80057be:	737b      	strb	r3, [r7, #13]
		if (address < EEPROM_ARCHIVE_BASE_ADDRESS + currentPage * EEPROM_PAGE_SIZE) break;
 80057c0:	e7f5      	b.n	80057ae <EEPROM_add_archive_entry+0x5e>
 80057c2:	bf00      	nop
	}
	diff = (currentPage + 1) * EEPROM_PAGE_SIZE - address;
 80057c4:	7b7b      	ldrb	r3, [r7, #13]
 80057c6:	3301      	adds	r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	01db      	lsls	r3, r3, #7
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	89fb      	ldrh	r3, [r7, #14]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	733b      	strb	r3, [r7, #12]

	if (diff >= sizeof(*ArchiveEntry))
 80057d6:	7b3b      	ldrb	r3, [r7, #12]
 80057d8:	2b1b      	cmp	r3, #27
 80057da:	d935      	bls.n	8005848 <EEPROM_add_archive_entry+0xf8>
	{
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	//select eeprom ic
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057e2:	4837      	ldr	r0, [pc, #220]	; (80058c0 <EEPROM_add_archive_entry+0x170>)
 80057e4:	f7fc fac2 	bl	8001d6c <HAL_GPIO_WritePin>
		spiTradeByte(EEPROM_WREN);
 80057e8:	2006      	movs	r0, #6
 80057ea:	f7ff feb7 	bl	800555c <spiTradeByte>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 80057ee:	2201      	movs	r2, #1
 80057f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057f4:	4832      	ldr	r0, [pc, #200]	; (80058c0 <EEPROM_add_archive_entry+0x170>)
 80057f6:	f7fc fab9 	bl	8001d6c <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80057fa:	2200      	movs	r2, #0
 80057fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005800:	482f      	ldr	r0, [pc, #188]	; (80058c0 <EEPROM_add_archive_entry+0x170>)
 8005802:	f7fc fab3 	bl	8001d6c <HAL_GPIO_WritePin>
		spiTradeByte(EEPROM_WRITE);
 8005806:	2002      	movs	r0, #2
 8005808:	f7ff fea8 	bl	800555c <spiTradeByte>
		spiTradeByte((uint8_t)(address>>8));
 800580c:	89fb      	ldrh	r3, [r7, #14]
 800580e:	0a1b      	lsrs	r3, r3, #8
 8005810:	b29b      	uxth	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fea1 	bl	800555c <spiTradeByte>
		spiTradeByte((uint8_t)(address&0x00FF));
 800581a:	89fb      	ldrh	r3, [r7, #14]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fe9c 	bl	800555c <spiTradeByte>
		HAL_SPI_Transmit(&hspi2,(uint8_t*) ArchiveEntry, byteCount, 5000);			//bylo bez (uint8_t*) ale dawalo warning. jakby cos swirowalo to trzeba poprawic
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	b29a      	uxth	r2, r3
 8005828:	f241 3388 	movw	r3, #5000	; 0x1388
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4825      	ldr	r0, [pc, #148]	; (80058c4 <EEPROM_add_archive_entry+0x174>)
 8005830:	f7fd fe72 	bl	8003518 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);	//deselect eeprom ic
 8005834:	2201      	movs	r2, #1
 8005836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800583a:	4821      	ldr	r0, [pc, #132]	; (80058c0 <EEPROM_add_archive_entry+0x170>)
 800583c:	f7fc fa96 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8005840:	200a      	movs	r0, #10
 8005842:	f7fb fbc7 	bl	8000fd4 <HAL_Delay>
 8005846:	e014      	b.n	8005872 <EEPROM_add_archive_entry+0x122>
	}
	else
	{
		EEPROM_write_multiple(address, (uint8_t*)(ArchiveEntry), diff);
 8005848:	7b3a      	ldrb	r2, [r7, #12]
 800584a:	89fb      	ldrh	r3, [r7, #14]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff ff38 	bl	80056c4 <EEPROM_write_multiple>
		EEPROM_write_multiple((currentPage + 1) * EEPROM_PAGE_SIZE, (uint8_t*)(ArchiveEntry)+diff, byteCount - diff);
 8005854:	7b7b      	ldrb	r3, [r7, #13]
 8005856:	3301      	adds	r3, #1
 8005858:	b29b      	uxth	r3, r3
 800585a:	01db      	lsls	r3, r3, #7
 800585c:	b298      	uxth	r0, r3
 800585e:	7b3b      	ldrb	r3, [r7, #12]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	18d1      	adds	r1, r2, r3
 8005864:	78fa      	ldrb	r2, [r7, #3]
 8005866:	7b3b      	ldrb	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	f7ff ff29 	bl	80056c4 <EEPROM_write_multiple>
	}

	if(settings.archiveEntriesTotal < ARCHIVE_SIZE)				//jezeli nie pelne zapamietaj ile zostalo zuzyte miejsca
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 8005874:	7a1b      	ldrb	r3, [r3, #8]
 8005876:	2bf9      	cmp	r3, #249	; 0xf9
 8005878:	d80a      	bhi.n	8005890 <EEPROM_add_archive_entry+0x140>
	{
		settings.archiveEntriesTotal++;
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 800587c:	7a1b      	ldrb	r3, [r3, #8]
 800587e:	3301      	adds	r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 8005884:	721a      	strb	r2, [r3, #8]
		EEPROM_write(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR, &settings.archiveEntriesTotal);
 8005886:	4910      	ldr	r1, [pc, #64]	; (80058c8 <EEPROM_add_archive_entry+0x178>)
 8005888:	2008      	movs	r0, #8
 800588a:	f7ff fedd 	bl	8005648 <EEPROM_write>
		}
		EEPROM_write(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR, &settings.archiveFirstEntryOffset);
	}


}
 800588e:	e011      	b.n	80058b4 <EEPROM_add_archive_entry+0x164>
		if(settings.archiveFirstEntryOffset < ARCHIVE_END_PTR)	//i pierwszy wpis byl przed koncowym adresem archiwum w eepromie
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 8005892:	79db      	ldrb	r3, [r3, #7]
 8005894:	2bf8      	cmp	r3, #248	; 0xf8
 8005896:	d806      	bhi.n	80058a6 <EEPROM_add_archive_entry+0x156>
			settings.archiveFirstEntryOffset++;
 8005898:	4b08      	ldr	r3, [pc, #32]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 800589a:	79db      	ldrb	r3, [r3, #7]
 800589c:	3301      	adds	r3, #1
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 80058a2:	71da      	strb	r2, [r3, #7]
 80058a4:	e002      	b.n	80058ac <EEPROM_add_archive_entry+0x15c>
			settings.archiveFirstEntryOffset = 0;				//jezeli wpis byl na ostatniej pozycji w pamieci archiwum to nadpisuj od najstarszej pozycji
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <EEPROM_add_archive_entry+0x16c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	71da      	strb	r2, [r3, #7]
		EEPROM_write(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR, &settings.archiveFirstEntryOffset);
 80058ac:	4907      	ldr	r1, [pc, #28]	; (80058cc <EEPROM_add_archive_entry+0x17c>)
 80058ae:	2007      	movs	r0, #7
 80058b0:	f7ff feca 	bl	8005648 <EEPROM_write>
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200006c4 	.word	0x200006c4
 80058c0:	40020400 	.word	0x40020400
 80058c4:	200007b0 	.word	0x200007b0
 80058c8:	200006cc 	.word	0x200006cc
 80058cc:	200006cb 	.word	0x200006cb

080058d0 <EEPROM_read_archive_entry>:

void EEPROM_read_archive_entry(uint8_t entryNO, struct ARCHIVE* ArchiveEntry, uint8_t byteCount)
{
 80058d0:	b590      	push	{r4, r7, lr}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	6039      	str	r1, [r7, #0]
 80058da:	71fb      	strb	r3, [r7, #7]
 80058dc:	4613      	mov	r3, r2
 80058de:	71bb      	strb	r3, [r7, #6]
	uint16_t address;
	settings.archiveFirstEntryOffset = EEPROM_read(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR);
 80058e0:	2007      	movs	r0, #7
 80058e2:	f7ff fe51 	bl	8005588 <EEPROM_read>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	4b32      	ldr	r3, [pc, #200]	; (80059b4 <EEPROM_read_archive_entry+0xe4>)
 80058ec:	71da      	strb	r2, [r3, #7]
	settings.archiveEntriesTotal = EEPROM_read(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR);
 80058ee:	2008      	movs	r0, #8
 80058f0:	f7ff fe4a 	bl	8005588 <EEPROM_read>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b2e      	ldr	r3, [pc, #184]	; (80059b4 <EEPROM_read_archive_entry+0xe4>)
 80058fa:	721a      	strb	r2, [r3, #8]

	if (entryNO > settings.archiveEntriesTotal - 1)	//jesli wybrano wpis o numerze wiekszym jak pojemnosc archiwum
 80058fc:	4b2d      	ldr	r3, [pc, #180]	; (80059b4 <EEPROM_read_archive_entry+0xe4>)
 80058fe:	7a1b      	ldrb	r3, [r3, #8]
 8005900:	79fa      	ldrb	r2, [r7, #7]
 8005902:	429a      	cmp	r2, r3
 8005904:	d306      	bcc.n	8005914 <EEPROM_read_archive_entry+0x44>
	{
		ArchiveEntry->day = 255;	//TODO: to dodane aby nie zapomniec ze taki przypadek sie moze teoretycznie zdazyc i bedzie zczytywac jakies smieci. trza tu cos bedzie powstawiac moze
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	22ff      	movs	r2, #255	; 0xff
 800590a:	701a      	strb	r2, [r3, #0]
		ArchiveEntry->month = 255;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	22ff      	movs	r2, #255	; 0xff
 8005910:	705a      	strb	r2, [r3, #1]
		for (uint8_t i=0; i<byteCount; i++)
		{
			*((uint8_t*)(ArchiveEntry) + i) = EEPROM_read(address+i);
		}
	}
}
 8005912:	e04a      	b.n	80059aa <EEPROM_read_archive_entry+0xda>
		if (entryNO + settings.archiveFirstEntryOffset > ARCHIVE_END_PTR)	//jezeli numer wpisu archiwum wychodzi poza przestrzen adresowa archiwum w eepromie(np. bo pierwszy wpis jest gdzies blizej konca)
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	4a27      	ldr	r2, [pc, #156]	; (80059b4 <EEPROM_read_archive_entry+0xe4>)
 8005918:	79d2      	ldrb	r2, [r2, #7]
 800591a:	4413      	add	r3, r2
 800591c:	2bf9      	cmp	r3, #249	; 0xf9
 800591e:	dd0d      	ble.n	800593c <EEPROM_read_archive_entry+0x6c>
			address = EEPROM_ARCHIVE_BASE_ADDRESS + (entryNO + settings.archiveFirstEntryOffset - ARCHIVE_SIZE) * byteCount; //to wylicz pozycje patrzac od poczatku przestrzeni adresowej
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	4a24      	ldr	r2, [pc, #144]	; (80059b4 <EEPROM_read_archive_entry+0xe4>)
 8005924:	79d2      	ldrb	r2, [r2, #7]
 8005926:	4413      	add	r3, r2
 8005928:	3bfa      	subs	r3, #250	; 0xfa
 800592a:	b29a      	uxth	r2, r3
 800592c:	79bb      	ldrb	r3, [r7, #6]
 800592e:	b29b      	uxth	r3, r3
 8005930:	fb12 f303 	smulbb	r3, r2, r3
 8005934:	b29b      	uxth	r3, r3
 8005936:	3380      	adds	r3, #128	; 0x80
 8005938:	81fb      	strh	r3, [r7, #14]
 800593a:	e01f      	b.n	800597c <EEPROM_read_archive_entry+0xac>
		else if (settings.archiveFirstEntryOffset == ARCHIVE_END_PTR && entryNO > 0)	//jezeli pierwszy wpis w ostatniej pozycji i odczytywany jest wlasnie on
 800593c:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <EEPROM_read_archive_entry+0xe4>)
 800593e:	79db      	ldrb	r3, [r3, #7]
 8005940:	2bf9      	cmp	r3, #249	; 0xf9
 8005942:	d10d      	bne.n	8005960 <EEPROM_read_archive_entry+0x90>
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <EEPROM_read_archive_entry+0x90>
			address = EEPROM_ARCHIVE_BASE_ADDRESS + (entryNO - 1) * byteCount;
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	79bb      	ldrb	r3, [r7, #6]
 8005952:	b29b      	uxth	r3, r3
 8005954:	fb12 f303 	smulbb	r3, r2, r3
 8005958:	b29b      	uxth	r3, r3
 800595a:	3380      	adds	r3, #128	; 0x80
 800595c:	81fb      	strh	r3, [r7, #14]
 800595e:	e00d      	b.n	800597c <EEPROM_read_archive_entry+0xac>
			address = EEPROM_ARCHIVE_BASE_ADDRESS + entryNO * byteCount + settings.archiveFirstEntryOffset * byteCount;
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	b29a      	uxth	r2, r3
 8005964:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <EEPROM_read_archive_entry+0xe4>)
 8005966:	79db      	ldrb	r3, [r3, #7]
 8005968:	b29b      	uxth	r3, r3
 800596a:	4413      	add	r3, r2
 800596c:	b29a      	uxth	r2, r3
 800596e:	79bb      	ldrb	r3, [r7, #6]
 8005970:	b29b      	uxth	r3, r3
 8005972:	fb12 f303 	smulbb	r3, r2, r3
 8005976:	b29b      	uxth	r3, r3
 8005978:	3380      	adds	r3, #128	; 0x80
 800597a:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i=0; i<byteCount; i++)
 800597c:	2300      	movs	r3, #0
 800597e:	737b      	strb	r3, [r7, #13]
 8005980:	e00f      	b.n	80059a2 <EEPROM_read_archive_entry+0xd2>
			*((uint8_t*)(ArchiveEntry) + i) = EEPROM_read(address+i);
 8005982:	7b7b      	ldrb	r3, [r7, #13]
 8005984:	b29a      	uxth	r2, r3
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	4413      	add	r3, r2
 800598a:	b299      	uxth	r1, r3
 800598c:	7b7b      	ldrb	r3, [r7, #13]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	18d4      	adds	r4, r2, r3
 8005992:	4608      	mov	r0, r1
 8005994:	f7ff fdf8 	bl	8005588 <EEPROM_read>
 8005998:	4603      	mov	r3, r0
 800599a:	7023      	strb	r3, [r4, #0]
		for (uint8_t i=0; i<byteCount; i++)
 800599c:	7b7b      	ldrb	r3, [r7, #13]
 800599e:	3301      	adds	r3, #1
 80059a0:	737b      	strb	r3, [r7, #13]
 80059a2:	7b7a      	ldrb	r2, [r7, #13]
 80059a4:	79bb      	ldrb	r3, [r7, #6]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3eb      	bcc.n	8005982 <EEPROM_read_archive_entry+0xb2>
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200006c4 	.word	0x200006c4

080059b8 <erase_archive>:

void erase_archive(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b0a2      	sub	sp, #136	; 0x88
 80059bc:	af00      	add	r7, sp, #0
	uint16_t archiveUsedPages;
	uint8_t a[128] = {0xFF};
 80059be:	23ff      	movs	r3, #255	; 0xff
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	227c      	movs	r2, #124	; 0x7c
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f005 fd74 	bl	800b4b8 <memset>
	archiveUsedPages = ARCHIVE_SIZE * sizeof(ArchiveEntry);
 80059d0:	f641 3358 	movw	r3, #7000	; 0x1b58
 80059d4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	if (archiveUsedPages % 128 == 0)
 80059d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <erase_archive+0x3a>
	{
		archiveUsedPages /= 128;
 80059e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059ea:	09db      	lsrs	r3, r3, #7
 80059ec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80059f0:	e009      	b.n	8005a06 <erase_archive+0x4e>
	}
	else
	{
		archiveUsedPages /= 128;
 80059f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		archiveUsedPages += 1;
 80059fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a00:	3301      	adds	r3, #1
 8005a02:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	}

	for (uint16_t i = 0; i < archiveUsedPages; i++) EEPROM_write_multiple(EEPROM_ARCHIVE_BASE_ADDRESS + i * EEPROM_PAGE_SIZE, a, sizeof(a));
 8005a06:	2300      	movs	r3, #0
 8005a08:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005a0c:	e00f      	b.n	8005a2e <erase_archive+0x76>
 8005a0e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a12:	3301      	adds	r3, #1
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	01db      	lsls	r3, r3, #7
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	1d39      	adds	r1, r7, #4
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fe50 	bl	80056c4 <EEPROM_write_multiple>
 8005a24:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005a2e:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005a32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3e9      	bcc.n	8005a0e <erase_archive+0x56>
	memset(&ArchiveEntry, 0, sizeof(ArchiveEntry));
 8005a3a:	221c      	movs	r2, #28
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	480a      	ldr	r0, [pc, #40]	; (8005a68 <erase_archive+0xb0>)
 8005a40:	f005 fd3a 	bl	800b4b8 <memset>
	settings.archiveFirstEntryOffset = 0;
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <erase_archive+0xb4>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	71da      	strb	r2, [r3, #7]
	settings.archiveEntriesTotal = 0;
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <erase_archive+0xb4>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	721a      	strb	r2, [r3, #8]
	EEPROM_write(EEPROM_ARCHIVE_FIRST_ENTRY_OFFSET_ADR, &settings.archiveFirstEntryOffset);
 8005a50:	4907      	ldr	r1, [pc, #28]	; (8005a70 <erase_archive+0xb8>)
 8005a52:	2007      	movs	r0, #7
 8005a54:	f7ff fdf8 	bl	8005648 <EEPROM_write>
	EEPROM_write(EEPROM_ARCHIVE_ENTRIES_TOTAL_ADR, &settings.archiveEntriesTotal);
 8005a58:	4906      	ldr	r1, [pc, #24]	; (8005a74 <erase_archive+0xbc>)
 8005a5a:	2008      	movs	r0, #8
 8005a5c:	f7ff fdf4 	bl	8005648 <EEPROM_write>
}
 8005a60:	bf00      	nop
 8005a62:	3788      	adds	r7, #136	; 0x88
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200006d0 	.word	0x200006d0
 8005a6c:	200006c4 	.word	0x200006c4
 8005a70:	200006cb 	.word	0x200006cb
 8005a74:	200006cc 	.word	0x200006cc

08005a78 <OLED_Power>:
 */
#include "OLED.h"
#include "font.h"

void OLED_Power(uint8_t enable)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
    if(enable)
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <OLED_Power+0x1c>
        HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 1);
 8005a88:	2201      	movs	r2, #1
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	4806      	ldr	r0, [pc, #24]	; (8005aa8 <OLED_Power+0x30>)
 8005a8e:	f7fc f96d 	bl	8001d6c <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 0);
}
 8005a92:	e004      	b.n	8005a9e <OLED_Power+0x26>
        HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 0);
 8005a94:	2200      	movs	r2, #0
 8005a96:	2102      	movs	r1, #2
 8005a98:	4803      	ldr	r0, [pc, #12]	; (8005aa8 <OLED_Power+0x30>)
 8005a9a:	f7fc f967 	bl	8001d6c <HAL_GPIO_WritePin>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40020000 	.word	0x40020000

08005aac <OLED_Reset>:

void OLED_Reset(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, 1);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	480a      	ldr	r0, [pc, #40]	; (8005ae0 <OLED_Reset+0x34>)
 8005ab6:	f7fc f959 	bl	8001d6c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005aba:	2064      	movs	r0, #100	; 0x64
 8005abc:	f7fb fa8a 	bl	8000fd4 <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, 0);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2104      	movs	r1, #4
 8005ac4:	4806      	ldr	r0, [pc, #24]	; (8005ae0 <OLED_Reset+0x34>)
 8005ac6:	f7fc f951 	bl	8001d6c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005aca:	2064      	movs	r0, #100	; 0x64
 8005acc:	f7fb fa82 	bl	8000fd4 <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, 1);
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	4802      	ldr	r0, [pc, #8]	; (8005ae0 <OLED_Reset+0x34>)
 8005ad6:	f7fc f949 	bl	8001d6c <HAL_GPIO_WritePin>
}
 8005ada:	bf00      	nop
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40020000 	.word	0x40020000

08005ae4 <OLED_WriteData>:

void OLED_WriteData(uint8_t data)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]
	//for(uint8_t a=0; a<200; a++);
    DC_PORT->BSRR|=(1<<DC_PIN);         //D/C high
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <OLED_WriteData+0x44>)
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <OLED_WriteData+0x44>)
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	6193      	str	r3, [r2, #24]
    CS_PORT->BSRR|=(1<<(CS_PIN+16));    //CS low
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <OLED_WriteData+0x44>)
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <OLED_WriteData+0x44>)
 8005b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b04:	6193      	str	r3, [r2, #24]

    /*for(uint8_t a=0; a<200; a++);
    *(uint8_t *)&SPI1->DR=data;
    while(SPI1->SR & SPI_SR_BSY);
    for(uint8_t a=0; a<200; a++);*/
    HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8005b06:	1df9      	adds	r1, r7, #7
 8005b08:	2364      	movs	r3, #100	; 0x64
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	4807      	ldr	r0, [pc, #28]	; (8005b2c <OLED_WriteData+0x48>)
 8005b0e:	f7fd fd03 	bl	8003518 <HAL_SPI_Transmit>

    CS_PORT->BSRR|=(1<<CS_PIN);         //CS high
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <OLED_WriteData+0x44>)
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <OLED_WriteData+0x44>)
 8005b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1c:	6193      	str	r3, [r2, #24]
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40020000 	.word	0x40020000
 8005b2c:	20001304 	.word	0x20001304

08005b30 <OLED_WriteCmd>:

void OLED_WriteCmd(uint8_t cmd)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	71fb      	strb	r3, [r7, #7]
	//for(uint8_t a=0; a<200; a++);

    DC_PORT->BSRR|=(1<<(DC_PIN+16));    //D/C low
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <OLED_WriteCmd+0x44>)
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <OLED_WriteCmd+0x44>)
 8005b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b44:	6193      	str	r3, [r2, #24]
    CS_PORT->BSRR|=(1<<(CS_PIN+16));    //CS low
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <OLED_WriteCmd+0x44>)
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <OLED_WriteCmd+0x44>)
 8005b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b50:	6193      	str	r3, [r2, #24]

    /*for(uint8_t a=0; a<200; a++);
    *(uint8_t *)&SPI1->DR=cmd;
    while(SPI1->SR & SPI_SR_BSY);
    for(uint8_t a=0; a<200; a++);*/
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8005b52:	1df9      	adds	r1, r7, #7
 8005b54:	2364      	movs	r3, #100	; 0x64
 8005b56:	2201      	movs	r2, #1
 8005b58:	4807      	ldr	r0, [pc, #28]	; (8005b78 <OLED_WriteCmd+0x48>)
 8005b5a:	f7fd fcdd 	bl	8003518 <HAL_SPI_Transmit>

    CS_PORT->BSRR|=(1<<CS_PIN);         //CS high
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <OLED_WriteCmd+0x44>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	4a04      	ldr	r2, [pc, #16]	; (8005b74 <OLED_WriteCmd+0x44>)
 8005b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b68:	6193      	str	r3, [r2, #24]
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40020000 	.word	0x40020000
 8005b78:	20001304 	.word	0x20001304

08005b7c <OLED_Init>:

void OLED_Init(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
    OLED_Reset();
 8005b82:	f7ff ff93 	bl	8005aac <OLED_Reset>
    HAL_Delay(200);
 8005b86:	20c8      	movs	r0, #200	; 0xc8
 8005b88:	f7fb fa24 	bl	8000fd4 <HAL_Delay>
    OLED_Power(1);
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7ff ff73 	bl	8005a78 <OLED_Power>
    HAL_Delay(200);
 8005b92:	20c8      	movs	r0, #200	; 0xc8
 8005b94:	f7fb fa1e 	bl	8000fd4 <HAL_Delay>

    OLED_WriteCmd(OLED_COLUMNS);
 8005b98:	2015      	movs	r0, #21
 8005b9a:	f7ff ffc9 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f7ff ffc6 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8005ba4:	203f      	movs	r0, #63	; 0x3f
 8005ba6:	f7ff ffc3 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_ROWS);
 8005baa:	2075      	movs	r0, #117	; 0x75
 8005bac:	f7ff ffc0 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f7ff ffbd 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8005bb6:	203f      	movs	r0, #63	; 0x3f
 8005bb8:	f7ff ffba 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_CONTRAST);
 8005bbc:	2081      	movs	r0, #129	; 0x81
 8005bbe:	f7ff ffb7 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x3F);
 8005bc2:	203f      	movs	r0, #63	; 0x3f
 8005bc4:	f7ff ffb4 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_CURRENT_FULL);
 8005bc8:	2086      	movs	r0, #134	; 0x86
 8005bca:	f7ff ffb1 	bl	8005b30 <OLED_WriteCmd>
    //OLED_WriteCmd(OLED_CURRENT_QUARTER);

    OLED_WriteCmd(OLED_RE_MAP);
 8005bce:	20a0      	movs	r0, #160	; 0xa0
 8005bd0:	f7ff ffae 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x52);
 8005bd4:	2052      	movs	r0, #82	; 0x52
 8005bd6:	f7ff ffab 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_START_LINE);
 8005bda:	20a1      	movs	r0, #161	; 0xa1
 8005bdc:	f7ff ffa8 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0);
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7ff ffa5 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_OFFSET);
 8005be6:	20a2      	movs	r0, #162	; 0xa2
 8005be8:	f7ff ffa2 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(76);
 8005bec:	204c      	movs	r0, #76	; 0x4c
 8005bee:	f7ff ff9f 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_MODE_NORMAL);
 8005bf2:	20a4      	movs	r0, #164	; 0xa4
 8005bf4:	f7ff ff9c 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_MULTIPLEKSER_RATIO);
 8005bf8:	20a8      	movs	r0, #168	; 0xa8
 8005bfa:	f7ff ff99 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8005bfe:	203f      	movs	r0, #63	; 0x3f
 8005c00:	f7ff ff96 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_PHASE_LENGHT);
 8005c04:	20b1      	movs	r0, #177	; 0xb1
 8005c06:	f7ff ff93 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x35);
 8005c0a:	2035      	movs	r0, #53	; 0x35
 8005c0c:	f7ff ff90 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_ROW_PERIOD);
 8005c10:	20b2      	movs	r0, #178	; 0xb2
 8005c12:	f7ff ff8d 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x46);
 8005c16:	2046      	movs	r0, #70	; 0x46
 8005c18:	f7ff ff8a 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(0xad);
    OLED_WriteCmd(3);
    */

    OLED_WriteCmd(OLED_DISPLAY_CLOCK);
 8005c1c:	20b3      	movs	r0, #179	; 0xb3
 8005c1e:	f7ff ff87 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x01);    // 00
 8005c22:	2001      	movs	r0, #1
 8005c24:	f7ff ff84 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_SEG_LOW_VOLTAGE);    //OLED_SEG_LOW_VOLTAGE
 8005c28:	20bf      	movs	r0, #191	; 0xbf
 8005c2a:	f7ff ff81 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x0);
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f7ff ff7e 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_SEG_VCOMH);
 8005c34:	20be      	movs	r0, #190	; 0xbe
 8005c36:	f7ff ff7b 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(11);      // 11
 8005c3a:	200b      	movs	r0, #11
 8005c3c:	f7ff ff78 	bl	8005b30 <OLED_WriteCmd>

    //OLED_WriteCmd(OLED_PRE_VOLTAGE);
    //OLED_WriteCmd(0x0B);


    OLED_WriteCmd(OLED_GREY_SCALE_TABLE);
 8005c40:	20b8      	movs	r0, #184	; 0xb8
 8005c42:	f7ff ff75 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x01);
 8005c46:	2001      	movs	r0, #1
 8005c48:	f7ff ff72 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x11);
 8005c4c:	2011      	movs	r0, #17
 8005c4e:	f7ff ff6f 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x22);
 8005c52:	2022      	movs	r0, #34	; 0x22
 8005c54:	f7ff ff6c 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x32);
 8005c58:	2032      	movs	r0, #50	; 0x32
 8005c5a:	f7ff ff69 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x43);
 8005c5e:	2043      	movs	r0, #67	; 0x43
 8005c60:	f7ff ff66 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x54);
 8005c64:	2054      	movs	r0, #84	; 0x54
 8005c66:	f7ff ff63 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x65);
 8005c6a:	2065      	movs	r0, #101	; 0x65
 8005c6c:	f7ff ff60 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x76);
 8005c70:	2076      	movs	r0, #118	; 0x76
 8005c72:	f7ff ff5d 	bl	8005b30 <OLED_WriteCmd>


    OLED_WriteCmd(OLED_MASTER_CONF);
 8005c76:	20ad      	movs	r0, #173	; 0xad
 8005c78:	f7ff ff5a 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x02);
 8005c7c:	2002      	movs	r0, #2
 8005c7e:	f7ff ff57 	bl	8005b30 <OLED_WriteCmd>

    OLED_WriteCmd(OLED_COLUMNS);
 8005c82:	2015      	movs	r0, #21
 8005c84:	f7ff ff54 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8005c88:	2000      	movs	r0, #0
 8005c8a:	f7ff ff51 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8005c8e:	203f      	movs	r0, #63	; 0x3f
 8005c90:	f7ff ff4e 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(OLED_ROWS);
 8005c94:	2075      	movs	r0, #117	; 0x75
 8005c96:	f7ff ff4b 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x00);
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7ff ff48 	bl	8005b30 <OLED_WriteCmd>
    OLED_WriteCmd(0x3f);
 8005ca0:	203f      	movs	r0, #63	; 0x3f
 8005ca2:	f7ff ff45 	bl	8005b30 <OLED_WriteCmd>
    for(uint16_t i=0; i<4096; i++)
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	80fb      	strh	r3, [r7, #6]
 8005caa:	e005      	b.n	8005cb8 <OLED_Init+0x13c>
        OLED_WriteData(0x00);
 8005cac:	2000      	movs	r0, #0
 8005cae:	f7ff ff19 	bl	8005ae4 <OLED_WriteData>
    for(uint16_t i=0; i<4096; i++)
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	80fb      	strh	r3, [r7, #6]
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbe:	d3f5      	bcc.n	8005cac <OLED_Init+0x130>

    OLED_WriteCmd(OLED_ON);
 8005cc0:	20af      	movs	r0, #175	; 0xaf
 8005cc2:	f7ff ff35 	bl	8005b30 <OLED_WriteCmd>
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <OLED_CLEAR>:

void OLED_CLEAR(void)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
int i;
	OLED_WriteCmd(OLED_COLUMNS);
 8005cd4:	2015      	movs	r0, #21
 8005cd6:	f7ff ff2b 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(0x00);
 8005cda:	2000      	movs	r0, #0
 8005cdc:	f7ff ff28 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(0x3f);
 8005ce0:	203f      	movs	r0, #63	; 0x3f
 8005ce2:	f7ff ff25 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 8005ce6:	2075      	movs	r0, #117	; 0x75
 8005ce8:	f7ff ff22 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(0x00);
 8005cec:	2000      	movs	r0, #0
 8005cee:	f7ff ff1f 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(0x3f);
 8005cf2:	203f      	movs	r0, #63	; 0x3f
 8005cf4:	f7ff ff1c 	bl	8005b30 <OLED_WriteCmd>
		for(i=0;i<4096;i++)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	e005      	b.n	8005d0a <OLED_CLEAR+0x3c>
		{
			OLED_WriteData(0x00);
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7ff fef0 	bl	8005ae4 <OLED_WriteData>
		for(i=0;i<4096;i++)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3301      	adds	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d10:	dbf5      	blt.n	8005cfe <OLED_CLEAR+0x30>
		}
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <OLED_font_5x7>:

    OLED_WriteData(color);
}

void OLED_font_5x7(uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
{
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4604      	mov	r4, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	71fb      	strb	r3, [r7, #7]
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71bb      	strb	r3, [r7, #6]
 8005d32:	460b      	mov	r3, r1
 8005d34:	717b      	strb	r3, [r7, #5]
 8005d36:	4613      	mov	r3, r2
 8005d38:	713b      	strb	r3, [r7, #4]
	uint8_t dwa_pixle;

	znak&=0x7f;
 8005d3a:	793b      	ldrb	r3, [r7, #4]
 8005d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d40:	713b      	strb	r3, [r7, #4]

	OLED_WriteCmd(OLED_COLUMNS);
 8005d42:	2015      	movs	r0, #21
 8005d44:	f7ff fef4 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fef0 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x+2);
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	3302      	adds	r3, #2
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff feea 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 8005d5c:	2075      	movs	r0, #117	; 0x75
 8005d5e:	f7ff fee7 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 8005d62:	79bb      	ldrb	r3, [r7, #6]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fee3 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y+8);
 8005d6a:	79bb      	ldrb	r3, [r7, #6]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff fedd 	bl	8005b30 <OLED_WriteCmd>

	for(uint8_t a=0; a<8; a++)
 8005d76:	2300      	movs	r3, #0
 8005d78:	73bb      	strb	r3, [r7, #14]
 8005d7a:	e02d      	b.n	8005dd8 <OLED_font_5x7+0xbc>
	{
		uint8_t c=gzn1[znak][a]<<2;
 8005d7c:	793b      	ldrb	r3, [r7, #4]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <OLED_font_5x7+0xdc>)
 8005d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
 8005d86:	4413      	add	r3, r2
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	737b      	strb	r3, [r7, #13]

		for(uint8_t b=0; b<3;b++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	733b      	strb	r3, [r7, #12]
 8005d92:	e01b      	b.n	8005dcc <OLED_font_5x7+0xb0>
		{
			dwa_pixle=0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]

			if(c & 0x80)
 8005d98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	da02      	bge.n	8005da6 <OLED_font_5x7+0x8a>
				dwa_pixle=color << 4;
 8005da0:	797b      	ldrb	r3, [r7, #5]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	73fb      	strb	r3, [r7, #15]
			if(c & 0x40)
 8005da6:	7b7b      	ldrb	r3, [r7, #13]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <OLED_font_5x7+0x9c>
				dwa_pixle+=color;
 8005db0:	7bfa      	ldrb	r2, [r7, #15]
 8005db2:	797b      	ldrb	r3, [r7, #5]
 8005db4:	4413      	add	r3, r2
 8005db6:	73fb      	strb	r3, [r7, #15]

			OLED_WriteData(dwa_pixle);
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fe92 	bl	8005ae4 <OLED_WriteData>
			c=c<<2;
 8005dc0:	7b7b      	ldrb	r3, [r7, #13]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	737b      	strb	r3, [r7, #13]
		for(uint8_t b=0; b<3;b++)
 8005dc6:	7b3b      	ldrb	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	733b      	strb	r3, [r7, #12]
 8005dcc:	7b3b      	ldrb	r3, [r7, #12]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d9e0      	bls.n	8005d94 <OLED_font_5x7+0x78>
	for(uint8_t a=0; a<8; a++)
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	73bb      	strb	r3, [r7, #14]
 8005dd8:	7bbb      	ldrb	r3, [r7, #14]
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	d9ce      	bls.n	8005d7c <OLED_font_5x7+0x60>
		}
	}
	OLED_WriteData(0);
 8005dde:	2000      	movs	r0, #0
 8005de0:	f7ff fe80 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 8005de4:	2000      	movs	r0, #0
 8005de6:	f7ff fe7d 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 8005dea:	2000      	movs	r0, #0
 8005dec:	f7ff fe7a 	bl	8005ae4 <OLED_WriteData>
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd90      	pop	{r4, r7, pc}
 8005df8:	20000008 	.word	0x20000008

08005dfc <OLED_font_10x14>:

void OLED_font_10x14 (uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	71fb      	strb	r3, [r7, #7]
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71bb      	strb	r3, [r7, #6]
 8005e12:	460b      	mov	r3, r1
 8005e14:	717b      	strb	r3, [r7, #5]
 8005e16:	4613      	mov	r3, r2
 8005e18:	713b      	strb	r3, [r7, #4]
unsigned char a,b;
unsigned short int c;
unsigned char dwa_pixle;
OLED_WriteCmd(OLED_COLUMNS);
 8005e1a:	2015      	movs	r0, #21
 8005e1c:	f7ff fe88 	bl	8005b30 <OLED_WriteCmd>
OLED_WriteCmd(x);
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fe84 	bl	8005b30 <OLED_WriteCmd>
OLED_WriteCmd(x+5);
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	3305      	adds	r3, #5
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fe7e 	bl	8005b30 <OLED_WriteCmd>
OLED_WriteCmd(OLED_ROWS);
 8005e34:	2075      	movs	r0, #117	; 0x75
 8005e36:	f7ff fe7b 	bl	8005b30 <OLED_WriteCmd>
OLED_WriteCmd(y);
 8005e3a:	79bb      	ldrb	r3, [r7, #6]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fe77 	bl	8005b30 <OLED_WriteCmd>
OLED_WriteCmd(y+16);
 8005e42:	79bb      	ldrb	r3, [r7, #6]
 8005e44:	3310      	adds	r3, #16
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fe71 	bl	8005b30 <OLED_WriteCmd>

	for(a=0;a<16;a++){
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]
 8005e52:	e02e      	b.n	8005eb2 <OLED_font_10x14+0xb6>
		c=gzn2[znak][a]<<4;
 8005e54:	793b      	ldrb	r3, [r7, #4]
 8005e56:	4a23      	ldr	r2, [pc, #140]	; (8005ee4 <OLED_font_10x14+0xe8>)
 8005e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	81bb      	strh	r3, [r7, #12]
		for(b=0;b<6;b++){
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73bb      	strb	r3, [r7, #14]
 8005e6c:	e01b      	b.n	8005ea6 <OLED_font_10x14+0xaa>
			dwa_pixle=0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	72fb      	strb	r3, [r7, #11]
			if(c & 0x8000){
 8005e72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da02      	bge.n	8005e80 <OLED_font_10x14+0x84>
				dwa_pixle=color << 4;
 8005e7a:	797b      	ldrb	r3, [r7, #5]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	72fb      	strb	r3, [r7, #11]
			}
			if(c & 0x4000){
 8005e80:	89bb      	ldrh	r3, [r7, #12]
 8005e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <OLED_font_10x14+0x96>
				dwa_pixle+=color;
 8005e8a:	7afa      	ldrb	r2, [r7, #11]
 8005e8c:	797b      	ldrb	r3, [r7, #5]
 8005e8e:	4413      	add	r3, r2
 8005e90:	72fb      	strb	r3, [r7, #11]
			}
			OLED_WriteData(dwa_pixle);
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fe25 	bl	8005ae4 <OLED_WriteData>
			c=c<<2;
 8005e9a:	89bb      	ldrh	r3, [r7, #12]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	81bb      	strh	r3, [r7, #12]
		for(b=0;b<6;b++){
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	73bb      	strb	r3, [r7, #14]
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d9e0      	bls.n	8005e6e <OLED_font_10x14+0x72>
	for(a=0;a<16;a++){
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b0f      	cmp	r3, #15
 8005eb6:	d9cd      	bls.n	8005e54 <OLED_font_10x14+0x58>
		}
	}
	OLED_WriteData(0);
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f7ff fe13 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f7ff fe10 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f7ff fe0d 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f7ff fe0a 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7ff fe07 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	f7ff fe04 	bl	8005ae4 <OLED_WriteData>
}
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}
 8005ee4:	20000208 	.word	0x20000208

08005ee8 <OLED_font_15x24>:

void OLED_font_15x24 (uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
{
 8005ee8:	b590      	push	{r4, r7, lr}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	71fb      	strb	r3, [r7, #7]
 8005efa:	4603      	mov	r3, r0
 8005efc:	71bb      	strb	r3, [r7, #6]
 8005efe:	460b      	mov	r3, r1
 8005f00:	717b      	strb	r3, [r7, #5]
 8005f02:	4613      	mov	r3, r2
 8005f04:	713b      	strb	r3, [r7, #4]
unsigned char a,b;
unsigned short int c;
unsigned char dwa_pixle;
	switch(znak){
 8005f06:	793b      	ldrb	r3, [r7, #4]
 8005f08:	3b0a      	subs	r3, #10
 8005f0a:	2b2f      	cmp	r3, #47	; 0x2f
 8005f0c:	d872      	bhi.n	8005ff4 <OLED_font_15x24+0x10c>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <OLED_font_15x24+0x2c>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005fe3 	.word	0x08005fe3
 8005f18:	08005ff5 	.word	0x08005ff5
 8005f1c:	08005ff5 	.word	0x08005ff5
 8005f20:	08005ff5 	.word	0x08005ff5
 8005f24:	08005ff5 	.word	0x08005ff5
 8005f28:	08005ff5 	.word	0x08005ff5
 8005f2c:	08005ff5 	.word	0x08005ff5
 8005f30:	08005ff5 	.word	0x08005ff5
 8005f34:	08005ff5 	.word	0x08005ff5
 8005f38:	08005ff5 	.word	0x08005ff5
 8005f3c:	08005ff5 	.word	0x08005ff5
 8005f40:	08005ff5 	.word	0x08005ff5
 8005f44:	08005ff5 	.word	0x08005ff5
 8005f48:	08005ff5 	.word	0x08005ff5
 8005f4c:	08005ff5 	.word	0x08005ff5
 8005f50:	08005ff5 	.word	0x08005ff5
 8005f54:	08005ff5 	.word	0x08005ff5
 8005f58:	08005ff5 	.word	0x08005ff5
 8005f5c:	08005ff5 	.word	0x08005ff5
 8005f60:	08005ff5 	.word	0x08005ff5
 8005f64:	08005ff5 	.word	0x08005ff5
 8005f68:	08005ff5 	.word	0x08005ff5
 8005f6c:	08005ff5 	.word	0x08005ff5
 8005f70:	08005ff5 	.word	0x08005ff5
 8005f74:	08005ff5 	.word	0x08005ff5
 8005f78:	08005ff5 	.word	0x08005ff5
 8005f7c:	08005ff5 	.word	0x08005ff5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005ff5 	.word	0x08005ff5
 8005f88:	08005ff5 	.word	0x08005ff5
 8005f8c:	08005ff5 	.word	0x08005ff5
 8005f90:	08005ff5 	.word	0x08005ff5
 8005f94:	08005ff5 	.word	0x08005ff5
 8005f98:	08005ff5 	.word	0x08005ff5
 8005f9c:	08005ff5 	.word	0x08005ff5
 8005fa0:	08005fdd 	.word	0x08005fdd
 8005fa4:	08005fef 	.word	0x08005fef
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	08005fd5 	.word	0x08005fd5
 8005fc0:	08005fd5 	.word	0x08005fd5
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fd5 	.word	0x08005fd5
 8005fcc:	08005fd5 	.word	0x08005fd5
 8005fd0:	08005fd5 	.word	0x08005fd5
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			znak=znak-'0';
 8005fd4:	793b      	ldrb	r3, [r7, #4]
 8005fd6:	3b30      	subs	r3, #48	; 0x30
 8005fd8:	713b      	strb	r3, [r7, #4]
		break;
 8005fda:	e00e      	b.n	8005ffa <OLED_font_15x24+0x112>
		case '-':
			znak=0xb;
 8005fdc:	230b      	movs	r3, #11
 8005fde:	713b      	strb	r3, [r7, #4]
		break;
 8005fe0:	e00b      	b.n	8005ffa <OLED_font_15x24+0x112>
		case 0xa:
			znak=0xa;
 8005fe2:	230a      	movs	r3, #10
 8005fe4:	713b      	strb	r3, [r7, #4]
		break;
 8005fe6:	e008      	b.n	8005ffa <OLED_font_15x24+0x112>
		case '%':
			znak=0xc;
 8005fe8:	230c      	movs	r3, #12
 8005fea:	713b      	strb	r3, [r7, #4]
		break;
 8005fec:	e005      	b.n	8005ffa <OLED_font_15x24+0x112>
		case '.':
			znak=0xf;
 8005fee:	230f      	movs	r3, #15
 8005ff0:	713b      	strb	r3, [r7, #4]
		break;
 8005ff2:	e002      	b.n	8005ffa <OLED_font_15x24+0x112>
		default:
			znak=0xe;
 8005ff4:	230e      	movs	r3, #14
 8005ff6:	713b      	strb	r3, [r7, #4]
		break;
 8005ff8:	bf00      	nop
	}
	OLED_WriteCmd(OLED_COLUMNS);
 8005ffa:	2015      	movs	r0, #21
 8005ffc:	f7ff fd98 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff fd94 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x+7);
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	3307      	adds	r3, #7
 800600c:	b2db      	uxtb	r3, r3
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fd8e 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 8006014:	2075      	movs	r0, #117	; 0x75
 8006016:	f7ff fd8b 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 800601a:	79bb      	ldrb	r3, [r7, #6]
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff fd87 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y+24);
 8006022:	79bb      	ldrb	r3, [r7, #6]
 8006024:	3318      	adds	r3, #24
 8006026:	b2db      	uxtb	r3, r3
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fd81 	bl	8005b30 <OLED_WriteCmd>

	for(a=0;a<24;a++){
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	e02e      	b.n	8006092 <OLED_font_15x24+0x1aa>
		c=gzn3[znak][a]<<1;
 8006034:	793b      	ldrb	r3, [r7, #4]
 8006036:	4a26      	ldr	r2, [pc, #152]	; (80060d0 <OLED_font_15x24+0x1e8>)
 8006038:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	81bb      	strh	r3, [r7, #12]
		for(b=0;b<8;b++){
 8006048:	2300      	movs	r3, #0
 800604a:	73bb      	strb	r3, [r7, #14]
 800604c:	e01b      	b.n	8006086 <OLED_font_15x24+0x19e>
			dwa_pixle=0;
 800604e:	2300      	movs	r3, #0
 8006050:	72fb      	strb	r3, [r7, #11]
			if(c & 0x8000){
 8006052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	da02      	bge.n	8006060 <OLED_font_15x24+0x178>
				dwa_pixle=color << 4;
 800605a:	797b      	ldrb	r3, [r7, #5]
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	72fb      	strb	r3, [r7, #11]
			}
			if(c & 0x4000){
 8006060:	89bb      	ldrh	r3, [r7, #12]
 8006062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <OLED_font_15x24+0x18a>
				dwa_pixle+=color;
 800606a:	7afa      	ldrb	r2, [r7, #11]
 800606c:	797b      	ldrb	r3, [r7, #5]
 800606e:	4413      	add	r3, r2
 8006070:	72fb      	strb	r3, [r7, #11]
			}
			OLED_WriteData(dwa_pixle);
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fd35 	bl	8005ae4 <OLED_WriteData>
			c=c<<2;
 800607a:	89bb      	ldrh	r3, [r7, #12]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	81bb      	strh	r3, [r7, #12]
		for(b=0;b<8;b++){
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	3301      	adds	r3, #1
 8006084:	73bb      	strb	r3, [r7, #14]
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	2b07      	cmp	r3, #7
 800608a:	d9e0      	bls.n	800604e <OLED_font_15x24+0x166>
	for(a=0;a<24;a++){
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	3301      	adds	r3, #1
 8006090:	73fb      	strb	r3, [r7, #15]
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b17      	cmp	r3, #23
 8006096:	d9cd      	bls.n	8006034 <OLED_font_15x24+0x14c>
		}
	}
	OLED_WriteData(0);
 8006098:	2000      	movs	r0, #0
 800609a:	f7ff fd23 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 800609e:	2000      	movs	r0, #0
 80060a0:	f7ff fd20 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 80060a4:	2000      	movs	r0, #0
 80060a6:	f7ff fd1d 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 80060aa:	2000      	movs	r0, #0
 80060ac:	f7ff fd1a 	bl	8005ae4 <OLED_WriteData>

	OLED_WriteData(0);
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7ff fd17 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 80060b6:	2000      	movs	r0, #0
 80060b8:	f7ff fd14 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 80060bc:	2000      	movs	r0, #0
 80060be:	f7ff fd11 	bl	8005ae4 <OLED_WriteData>
	OLED_WriteData(0);
 80060c2:	2000      	movs	r0, #0
 80060c4:	f7ff fd0e 	bl	8005ae4 <OLED_WriteData>
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd90      	pop	{r4, r7, pc}
 80060d0:	20000408 	.word	0x20000408

080060d4 <OLED_font_20x32>:

void OLED_font_20x32 (uint8_t x, uint8_t y, uint8_t color, uint8_t znak)
// -----------------------------------------------
{
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	461a      	mov	r2, r3
 80060e2:	4623      	mov	r3, r4
 80060e4:	71fb      	strb	r3, [r7, #7]
 80060e6:	4603      	mov	r3, r0
 80060e8:	71bb      	strb	r3, [r7, #6]
 80060ea:	460b      	mov	r3, r1
 80060ec:	717b      	strb	r3, [r7, #5]
 80060ee:	4613      	mov	r3, r2
 80060f0:	713b      	strb	r3, [r7, #4]
unsigned char a,b;
unsigned int c;
unsigned char dwa_pixle;

	switch(znak){
 80060f2:	793b      	ldrb	r3, [r7, #4]
 80060f4:	3b0a      	subs	r3, #10
 80060f6:	2b2f      	cmp	r3, #47	; 0x2f
 80060f8:	d872      	bhi.n	80061e0 <OLED_font_20x32+0x10c>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <OLED_font_20x32+0x2c>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	080061cf 	.word	0x080061cf
 8006104:	080061e1 	.word	0x080061e1
 8006108:	080061e1 	.word	0x080061e1
 800610c:	080061e1 	.word	0x080061e1
 8006110:	080061e1 	.word	0x080061e1
 8006114:	080061e1 	.word	0x080061e1
 8006118:	080061e1 	.word	0x080061e1
 800611c:	080061e1 	.word	0x080061e1
 8006120:	080061e1 	.word	0x080061e1
 8006124:	080061e1 	.word	0x080061e1
 8006128:	080061e1 	.word	0x080061e1
 800612c:	080061e1 	.word	0x080061e1
 8006130:	080061e1 	.word	0x080061e1
 8006134:	080061e1 	.word	0x080061e1
 8006138:	080061e1 	.word	0x080061e1
 800613c:	080061e1 	.word	0x080061e1
 8006140:	080061e1 	.word	0x080061e1
 8006144:	080061e1 	.word	0x080061e1
 8006148:	080061e1 	.word	0x080061e1
 800614c:	080061e1 	.word	0x080061e1
 8006150:	080061e1 	.word	0x080061e1
 8006154:	080061e1 	.word	0x080061e1
 8006158:	080061e1 	.word	0x080061e1
 800615c:	080061e1 	.word	0x080061e1
 8006160:	080061e1 	.word	0x080061e1
 8006164:	080061e1 	.word	0x080061e1
 8006168:	080061e1 	.word	0x080061e1
 800616c:	080061d5 	.word	0x080061d5
 8006170:	080061e1 	.word	0x080061e1
 8006174:	080061e1 	.word	0x080061e1
 8006178:	080061e1 	.word	0x080061e1
 800617c:	080061e1 	.word	0x080061e1
 8006180:	080061e1 	.word	0x080061e1
 8006184:	080061e1 	.word	0x080061e1
 8006188:	080061e1 	.word	0x080061e1
 800618c:	080061c9 	.word	0x080061c9
 8006190:	080061db 	.word	0x080061db
 8006194:	080061e1 	.word	0x080061e1
 8006198:	080061c1 	.word	0x080061c1
 800619c:	080061c1 	.word	0x080061c1
 80061a0:	080061c1 	.word	0x080061c1
 80061a4:	080061c1 	.word	0x080061c1
 80061a8:	080061c1 	.word	0x080061c1
 80061ac:	080061c1 	.word	0x080061c1
 80061b0:	080061c1 	.word	0x080061c1
 80061b4:	080061c1 	.word	0x080061c1
 80061b8:	080061c1 	.word	0x080061c1
 80061bc:	080061c1 	.word	0x080061c1
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			znak=znak-'0';
 80061c0:	793b      	ldrb	r3, [r7, #4]
 80061c2:	3b30      	subs	r3, #48	; 0x30
 80061c4:	713b      	strb	r3, [r7, #4]
		break;
 80061c6:	e00e      	b.n	80061e6 <OLED_font_20x32+0x112>
		case '-':
			znak=0xb;
 80061c8:	230b      	movs	r3, #11
 80061ca:	713b      	strb	r3, [r7, #4]
		break;
 80061cc:	e00b      	b.n	80061e6 <OLED_font_20x32+0x112>
		case 0xa:
			znak=0xa;
 80061ce:	230a      	movs	r3, #10
 80061d0:	713b      	strb	r3, [r7, #4]
		break;
 80061d2:	e008      	b.n	80061e6 <OLED_font_20x32+0x112>
		case '%':
			znak=0xc;
 80061d4:	230c      	movs	r3, #12
 80061d6:	713b      	strb	r3, [r7, #4]
		break;
 80061d8:	e005      	b.n	80061e6 <OLED_font_20x32+0x112>
		case '.':
			znak=0xf;
 80061da:	230f      	movs	r3, #15
 80061dc:	713b      	strb	r3, [r7, #4]
		break;
 80061de:	e002      	b.n	80061e6 <OLED_font_20x32+0x112>
		default:
			znak=0xe;
 80061e0:	230e      	movs	r3, #14
 80061e2:	713b      	strb	r3, [r7, #4]
		break;
 80061e4:	bf00      	nop
	}
	OLED_WriteCmd(OLED_COLUMNS);
 80061e6:	2015      	movs	r0, #21
 80061e8:	f7ff fca2 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fc9e 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x+12);
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	330c      	adds	r3, #12
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fc98 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 8006200:	2075      	movs	r0, #117	; 0x75
 8006202:	f7ff fc95 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 8006206:	79bb      	ldrb	r3, [r7, #6]
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fc91 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y+32);
 800620e:	79bb      	ldrb	r3, [r7, #6]
 8006210:	3320      	adds	r3, #32
 8006212:	b2db      	uxtb	r3, r3
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fc8b 	bl	8005b30 <OLED_WriteCmd>

	for(a=0;a<32;a++){
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
 800621e:	e02e      	b.n	800627e <OLED_font_20x32+0x1aa>
		c=gzn4[znak][a];
 8006220:	793b      	ldrb	r3, [r7, #4]
 8006222:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <OLED_font_20x32+0x1bc>)
 8006224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	613b      	str	r3, [r7, #16]
		for(b=0;b<13;b++){
 8006232:	2300      	movs	r3, #0
 8006234:	75bb      	strb	r3, [r7, #22]
 8006236:	e01c      	b.n	8006272 <OLED_font_20x32+0x19e>
			dwa_pixle=0;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
			if(c & 0x80000l){
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <OLED_font_20x32+0x178>
				dwa_pixle=color << 4;
 8006246:	797b      	ldrb	r3, [r7, #5]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	73fb      	strb	r3, [r7, #15]
			}
			if(c & 0x40000l){
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <OLED_font_20x32+0x18a>
				dwa_pixle+=color;
 8006256:	7bfa      	ldrb	r2, [r7, #15]
 8006258:	797b      	ldrb	r3, [r7, #5]
 800625a:	4413      	add	r3, r2
 800625c:	73fb      	strb	r3, [r7, #15]
			}
			OLED_WriteData(dwa_pixle);
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fc3f 	bl	8005ae4 <OLED_WriteData>
			c=c<<2;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	613b      	str	r3, [r7, #16]
		for(b=0;b<13;b++){
 800626c:	7dbb      	ldrb	r3, [r7, #22]
 800626e:	3301      	adds	r3, #1
 8006270:	75bb      	strb	r3, [r7, #22]
 8006272:	7dbb      	ldrb	r3, [r7, #22]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d9df      	bls.n	8006238 <OLED_font_20x32+0x164>
	for(a=0;a<32;a++){
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	3301      	adds	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	2b1f      	cmp	r3, #31
 8006282:	d9cd      	bls.n	8006220 <OLED_font_20x32+0x14c>
		}
	}
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	bd90      	pop	{r4, r7, pc}
 800628e:	bf00      	nop
 8006290:	20000448 	.word	0x20000448

08006294 <OLED_PutStr>:
// 1 - czcionka 10x14
// 2 - czcionka 15x24
// 3 - czcionka 20x32

void OLED_PutStr(uint8_t x, uint8_t y, const char *str, uint8_t font, uint8_t color)
{
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	603a      	str	r2, [r7, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	71fb      	strb	r3, [r7, #7]
 80062a2:	460b      	mov	r3, r1
 80062a4:	71bb      	strb	r3, [r7, #6]
 80062a6:	4613      	mov	r3, r2
 80062a8:	717b      	strb	r3, [r7, #5]
	switch(font)
 80062aa:	797b      	ldrb	r3, [r7, #5]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	f200 8088 	bhi.w	80063c2 <OLED_PutStr+0x12e>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <OLED_PutStr+0x24>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	08006307 	.word	0x08006307
 80062c0:	08006347 	.word	0x08006347
 80062c4:	08006381 	.word	0x08006381
	{
		case 0:
			for(uint8_t i=0; i<strlen(str); i++)
 80062c8:	2300      	movs	r3, #0
 80062ca:	73fb      	strb	r3, [r7, #15]
 80062cc:	e013      	b.n	80062f6 <OLED_PutStr+0x62>
				OLED_font_5x7(x+3*i , y, color, str[i]);
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	461a      	mov	r2, r3
 80062d2:	0052      	lsls	r2, r2, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	4413      	add	r3, r2
 80062dc:	b2d8      	uxtb	r0, r3
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80062ea:	79b9      	ldrb	r1, [r7, #6]
 80062ec:	f7ff fd16 	bl	8005d1c <OLED_font_5x7>
			for(uint8_t i=0; i<strlen(str); i++)
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	3301      	adds	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
 80062f6:	7bfc      	ldrb	r4, [r7, #15]
 80062f8:	6838      	ldr	r0, [r7, #0]
 80062fa:	f7f9 ff91 	bl	8000220 <strlen>
 80062fe:	4603      	mov	r3, r0
 8006300:	429c      	cmp	r4, r3
 8006302:	d3e4      	bcc.n	80062ce <OLED_PutStr+0x3a>

		break;
 8006304:	e05d      	b.n	80063c2 <OLED_PutStr+0x12e>

		case 1:
			for(uint8_t i=0; i<strlen(str); i++)
 8006306:	2300      	movs	r3, #0
 8006308:	73bb      	strb	r3, [r7, #14]
 800630a:	e014      	b.n	8006336 <OLED_PutStr+0xa2>
				OLED_font_10x14(x+6*i , y, color, str[i]);
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	461a      	mov	r2, r3
 8006310:	0052      	lsls	r2, r2, #1
 8006312:	4413      	add	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	b2da      	uxtb	r2, r3
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	4413      	add	r3, r2
 800631c:	b2d8      	uxtb	r0, r3
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	4413      	add	r3, r2
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	f897 2020 	ldrb.w	r2, [r7, #32]
 800632a:	79b9      	ldrb	r1, [r7, #6]
 800632c:	f7ff fd66 	bl	8005dfc <OLED_font_10x14>
			for(uint8_t i=0; i<strlen(str); i++)
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	3301      	adds	r3, #1
 8006334:	73bb      	strb	r3, [r7, #14]
 8006336:	7bbc      	ldrb	r4, [r7, #14]
 8006338:	6838      	ldr	r0, [r7, #0]
 800633a:	f7f9 ff71 	bl	8000220 <strlen>
 800633e:	4603      	mov	r3, r0
 8006340:	429c      	cmp	r4, r3
 8006342:	d3e3      	bcc.n	800630c <OLED_PutStr+0x78>
		break;
 8006344:	e03d      	b.n	80063c2 <OLED_PutStr+0x12e>

		case 2:
			for(uint8_t i=0; i<strlen(str); i++)
 8006346:	2300      	movs	r3, #0
 8006348:	737b      	strb	r3, [r7, #13]
 800634a:	e011      	b.n	8006370 <OLED_PutStr+0xdc>
				OLED_font_15x24(x+8*i , y, color, str[i]);
 800634c:	7b7b      	ldrb	r3, [r7, #13]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	b2da      	uxtb	r2, r3
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	4413      	add	r3, r2
 8006356:	b2d8      	uxtb	r0, r3
 8006358:	7b7b      	ldrb	r3, [r7, #13]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	4413      	add	r3, r2
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006364:	79b9      	ldrb	r1, [r7, #6]
 8006366:	f7ff fdbf 	bl	8005ee8 <OLED_font_15x24>
			for(uint8_t i=0; i<strlen(str); i++)
 800636a:	7b7b      	ldrb	r3, [r7, #13]
 800636c:	3301      	adds	r3, #1
 800636e:	737b      	strb	r3, [r7, #13]
 8006370:	7b7c      	ldrb	r4, [r7, #13]
 8006372:	6838      	ldr	r0, [r7, #0]
 8006374:	f7f9 ff54 	bl	8000220 <strlen>
 8006378:	4603      	mov	r3, r0
 800637a:	429c      	cmp	r4, r3
 800637c:	d3e6      	bcc.n	800634c <OLED_PutStr+0xb8>
		break;
 800637e:	e020      	b.n	80063c2 <OLED_PutStr+0x12e>

		case 3:
			for(uint8_t i=0; i<strlen(str); i++)
 8006380:	2300      	movs	r3, #0
 8006382:	733b      	strb	r3, [r7, #12]
 8006384:	e015      	b.n	80063b2 <OLED_PutStr+0x11e>
				OLED_font_20x32(x+11*i , y, color, str[i]);
 8006386:	7b3b      	ldrb	r3, [r7, #12]
 8006388:	461a      	mov	r2, r3
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	441a      	add	r2, r3
 800638e:	0052      	lsls	r2, r2, #1
 8006390:	4413      	add	r3, r2
 8006392:	b2da      	uxtb	r2, r3
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	4413      	add	r3, r2
 8006398:	b2d8      	uxtb	r0, r3
 800639a:	7b3b      	ldrb	r3, [r7, #12]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80063a6:	79b9      	ldrb	r1, [r7, #6]
 80063a8:	f7ff fe94 	bl	80060d4 <OLED_font_20x32>
			for(uint8_t i=0; i<strlen(str); i++)
 80063ac:	7b3b      	ldrb	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	733b      	strb	r3, [r7, #12]
 80063b2:	7b3c      	ldrb	r4, [r7, #12]
 80063b4:	6838      	ldr	r0, [r7, #0]
 80063b6:	f7f9 ff33 	bl	8000220 <strlen>
 80063ba:	4603      	mov	r3, r0
 80063bc:	429c      	cmp	r4, r3
 80063be:	d3e2      	bcc.n	8006386 <OLED_PutStr+0xf2>
		break;
 80063c0:	bf00      	nop
	}
}
 80063c2:	bf00      	nop
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd90      	pop	{r4, r7, pc}
 80063ca:	bf00      	nop

080063cc <OLED_bitmap>:

void OLED_bitmap (unsigned char x, unsigned char y, const unsigned char s[])
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	603a      	str	r2, [r7, #0]
 80063d6:	71fb      	strb	r3, [r7, #7]
 80063d8:	460b      	mov	r3, r1
 80063da:	71bb      	strb	r3, [r7, #6]
int	a,lb;
	lb=(unsigned short int)s[0]*(unsigned short int)s[1]/2;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	fb03 f302 	mul.w	r3, r3, r2
 80063ec:	0fda      	lsrs	r2, r3, #31
 80063ee:	4413      	add	r3, r2
 80063f0:	105b      	asrs	r3, r3, #1
 80063f2:	60bb      	str	r3, [r7, #8]
	OLED_WriteCmd(OLED_COLUMNS);
 80063f4:	2015      	movs	r0, #21
 80063f6:	f7ff fb9b 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x);
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fb97 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(x+s[0]/2-1);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	b2da      	uxtb	r2, r3
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	4413      	add	r3, r2
 800640e:	b2db      	uxtb	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fb8b 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(OLED_ROWS);
 800641a:	2075      	movs	r0, #117	; 0x75
 800641c:	f7ff fb88 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y);
 8006420:	79bb      	ldrb	r3, [r7, #6]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fb84 	bl	8005b30 <OLED_WriteCmd>
	OLED_WriteCmd(y+s[1]);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	79bb      	ldrb	r3, [r7, #6]
 8006430:	4413      	add	r3, r2
 8006432:	b2db      	uxtb	r3, r3
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fb7b 	bl	8005b30 <OLED_WriteCmd>
	for(a=2;a<lb+2;a++){
 800643a:	2302      	movs	r3, #2
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	e00e      	b.n	800645e <OLED_bitmap+0x92>
		OLED_WriteData(s[a] * settings.contrast);		//dodany kontrast żeby kreske nad O w BRAK PROBKI wyswietlac
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4413      	add	r3, r2
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <OLED_bitmap+0xa8>)
 800644a:	795b      	ldrb	r3, [r3, #5]
 800644c:	fb12 f303 	smulbb	r3, r2, r3
 8006450:	b2db      	uxtb	r3, r3
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fb46 	bl	8005ae4 <OLED_WriteData>
	for(a=2;a<lb+2;a++){
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	3301      	adds	r3, #1
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	ddeb      	ble.n	8006440 <OLED_bitmap+0x74>
	}													//zeby normalnie wyswietlic obrazek to kontrast trzeba wywalic albo tuz przed wyswietleniem obrazka zmienic na 0x01
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200006c4 	.word	0x200006c4

08006478 <register_on_key_press_callback>:
static volatile uint8_t keyCode;

static void (*on_key_press_callback)(uint8_t key, uint8_t context);

void register_on_key_press_callback(void (*callback)(uint8_t key, uint8_t context))
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	on_key_press_callback = callback;
 8006480:	4a04      	ldr	r2, [pc, #16]	; (8006494 <register_on_key_press_callback+0x1c>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6013      	str	r3, [r2, #0]
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000680 	.word	0x20000680

08006498 <isr_kbd>:

inline void isr_kbd(void)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
	static uint8_t i;
	static uint8_t keyState[2];
	uint32_t k;
	k = GPIOE->IDR;						//keyboard row and column port
 800649e:	4b33      	ldr	r3, [pc, #204]	; (800656c <isr_kbd+0xd4>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	607b      	str	r3, [r7, #4]
	k >>= 4;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	607b      	str	r3, [r7, #4]
	k = k & 0x7;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	607b      	str	r3, [r7, #4]
//	k = (GPIOE->IDR & 0x7);
	if(k < 7)							//if any button pressed
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b06      	cmp	r3, #6
 80064b6:	d824      	bhi.n	8006502 <isr_kbd+0x6a>
	{
		keyCode |= k;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	4b2c      	ldr	r3, [pc, #176]	; (8006570 <isr_kbd+0xd8>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	4b2a      	ldr	r3, [pc, #168]	; (8006570 <isr_kbd+0xd8>)
 80064c8:	701a      	strb	r2, [r3, #0]
		keyCode = (keyCode | (i<<3));
 80064ca:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <isr_kbd+0xdc>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	b25a      	sxtb	r2, r3
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <isr_kbd+0xd8>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	4313      	orrs	r3, r2
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	4b23      	ldr	r3, [pc, #140]	; (8006570 <isr_kbd+0xd8>)
 80064e2:	701a      	strb	r2, [r3, #0]
		keyState[i] = KEY_PRESSED;
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <isr_kbd+0xdc>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <isr_kbd+0xe0>)
 80064ec:	2101      	movs	r1, #1
 80064ee:	5499      	strb	r1, [r3, r2]
		keyCode |= KEY_PRESSED_MASK;
 80064f0:	4b1f      	ldr	r3, [pc, #124]	; (8006570 <isr_kbd+0xd8>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	4b1c      	ldr	r3, [pc, #112]	; (8006570 <isr_kbd+0xd8>)
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e005      	b.n	800650e <isr_kbd+0x76>
	}
	else keyState[i] = KEY_NOT_PRESSED;
 8006502:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <isr_kbd+0xdc>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <isr_kbd+0xe0>)
 800650a:	2100      	movs	r1, #0
 800650c:	5499      	strb	r1, [r3, r2]

	if (keyState[0] == KEY_NOT_PRESSED && keyState[1] == KEY_NOT_PRESSED) keyCode &= (~KEY_PRESSED_MASK);
 800650e:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <isr_kbd+0xe0>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <isr_kbd+0x96>
 8006516:	4b18      	ldr	r3, [pc, #96]	; (8006578 <isr_kbd+0xe0>)
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d107      	bne.n	800652e <isr_kbd+0x96>
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <isr_kbd+0xd8>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006528:	b2da      	uxtb	r2, r3
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <isr_kbd+0xd8>)
 800652c:	701a      	strb	r2, [r3, #0]

	if (++i > 1) i = 0;
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <isr_kbd+0xdc>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <isr_kbd+0xdc>)
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <isr_kbd+0xdc>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d902      	bls.n	8006548 <isr_kbd+0xb0>
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <isr_kbd+0xdc>)
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]

	if (i == 0) GPIOE -> BSRR = (1 << 2) | ((1 << 3) << 16);	//Scan next column
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <isr_kbd+0xdc>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <isr_kbd+0xc0>
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <isr_kbd+0xd4>)
 8006552:	4a0a      	ldr	r2, [pc, #40]	; (800657c <isr_kbd+0xe4>)
 8006554:	619a      	str	r2, [r3, #24]
	else GPIOE -> BSRR = (1 << 3) | ((1 << 2) << 16);


}
 8006556:	e002      	b.n	800655e <isr_kbd+0xc6>
	else GPIOE -> BSRR = (1 << 3) | ((1 << 2) << 16);
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <isr_kbd+0xd4>)
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <isr_kbd+0xe8>)
 800655c:	619a      	str	r2, [r3, #24]
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40021000 	.word	0x40021000
 8006570:	2000067c 	.word	0x2000067c
 8006574:	20000684 	.word	0x20000684
 8006578:	20000688 	.word	0x20000688
 800657c:	00080004 	.word	0x00080004
 8006580:	00040008 	.word	0x00040008

08006584 <kbd_event_handler>:


void kbd_event_handler(uint8_t context)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	71fb      	strb	r3, [r7, #7]
	//uint8_t kk[10];
	static uint8_t keyFlags;
	keyFlags = keyCode >> 6;
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <kbd_event_handler+0x74>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	099b      	lsrs	r3, r3, #6
 8006596:	b2da      	uxtb	r2, r3
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <kbd_event_handler+0x78>)
 800659a:	701a      	strb	r2, [r3, #0]
	if (keyFlags && keyFlags < 3)		//if any key flags set
 800659c:	4b17      	ldr	r3, [pc, #92]	; (80065fc <kbd_event_handler+0x78>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d025      	beq.n	80065f0 <kbd_event_handler+0x6c>
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <kbd_event_handler+0x78>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d821      	bhi.n	80065f0 <kbd_event_handler+0x6c>
	{
		if (KEY_PRESSED_FLAG_SET)
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <kbd_event_handler+0x78>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d116      	bne.n	80065e2 <kbd_event_handler+0x5e>
		{
//			UART_print("KEY_PRESSED\r\n");
//			sprintf(kk,"%d\r\n", keyCode & 0x0F);
//			UART_print(kk);

			keyCode |= KEY_RELEASED_MASK;
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <kbd_event_handler+0x74>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <kbd_event_handler+0x74>)
 80065c2:	701a      	strb	r2, [r3, #0]
			if (on_key_press_callback) on_key_press_callback(keyCode & 0x0F, context);
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <kbd_event_handler+0x7c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <kbd_event_handler+0x5e>
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <kbd_event_handler+0x7c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <kbd_event_handler+0x74>)
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	f002 020f 	and.w	r2, r2, #15
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	79f9      	ldrb	r1, [r7, #7]
 80065de:	4610      	mov	r0, r2
 80065e0:	4798      	blx	r3
		}
		if (KEY_RELEASED_FLAG_SET)
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <kbd_event_handler+0x78>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d102      	bne.n	80065f0 <kbd_event_handler+0x6c>
		{
//			UART_print("KEY_RELEASED\r\n");
			keyCode = KEY_READ_MASK;
 80065ea:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <kbd_event_handler+0x74>)
 80065ec:	2210      	movs	r2, #16
 80065ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	2000067c 	.word	0x2000067c
 80065fc:	2000068a 	.word	0x2000068a
 8006600:	20000680 	.word	0x20000680

08006604 <CalcChecksum>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t CalcChecksum(volatile uint8_t *arr, uint8_t checkSumPositionInPacket)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
	uint8_t sum=0;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0; i<checkSumPositionInPacket; i++)
 8006614:	2300      	movs	r3, #0
 8006616:	73bb      	strb	r3, [r7, #14]
 8006618:	e00a      	b.n	8006630 <CalcChecksum+0x2c>
		sum+=arr[i];
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	4413      	add	r3, r2
 8006628:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i<checkSumPositionInPacket; i++)
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	3301      	adds	r3, #1
 800662e:	73bb      	strb	r3, [r7, #14]
 8006630:	7bba      	ldrb	r2, [r7, #14]
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	429a      	cmp	r2, r3
 8006636:	d3f0      	bcc.n	800661a <CalcChecksum+0x16>

	return sum;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <No_of_days_a_month>:
//}


//funkcje od daty
uint8_t No_of_days_a_month(uint8_t month)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	71fb      	strb	r3, [r7, #7]
	if(gDate.Year % 4 == 0)
 8006652:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <No_of_days_a_month+0xa8>)
 8006654:	78db      	ldrb	r3, [r3, #3]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <No_of_days_a_month+0x22>
	{
		if (month == 2) return 29;
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d106      	bne.n	8006674 <No_of_days_a_month+0x2c>
 8006666:	231d      	movs	r3, #29
 8006668:	e03b      	b.n	80066e2 <No_of_days_a_month+0x9a>
	}
	else
	{
		if (month == 2) return 28;
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d101      	bne.n	8006674 <No_of_days_a_month+0x2c>
 8006670:	231c      	movs	r3, #28
 8006672:	e036      	b.n	80066e2 <No_of_days_a_month+0x9a>
	}

	switch(month)
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	3b01      	subs	r3, #1
 8006678:	2b0b      	cmp	r3, #11
 800667a:	d831      	bhi.n	80066e0 <No_of_days_a_month+0x98>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <No_of_days_a_month+0x3c>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066b5 	.word	0x080066b5
 8006688:	080066e1 	.word	0x080066e1
 800668c:	080066b9 	.word	0x080066b9
 8006690:	080066bd 	.word	0x080066bd
 8006694:	080066c1 	.word	0x080066c1
 8006698:	080066c5 	.word	0x080066c5
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066dd 	.word	0x080066dd
	{
		case 1:
			return 31;
 80066b4:	231f      	movs	r3, #31
 80066b6:	e014      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 3:
			return 31;
 80066b8:	231f      	movs	r3, #31
 80066ba:	e012      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 4:
			return 30;
 80066bc:	231e      	movs	r3, #30
 80066be:	e010      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 5:
			return 31;
 80066c0:	231f      	movs	r3, #31
 80066c2:	e00e      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 6:
			return 30;
 80066c4:	231e      	movs	r3, #30
 80066c6:	e00c      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 7:
			return 31;
 80066c8:	231f      	movs	r3, #31
 80066ca:	e00a      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 8:
			return 31;
 80066cc:	231f      	movs	r3, #31
 80066ce:	e008      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 9:
			return 30;
 80066d0:	231e      	movs	r3, #30
 80066d2:	e006      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 10:
			return 31;
 80066d4:	231f      	movs	r3, #31
 80066d6:	e004      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 11:
			return 30;
 80066d8:	231e      	movs	r3, #30
 80066da:	e002      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;

		case 12:
			return 31;
 80066dc:	231f      	movs	r3, #31
 80066de:	e000      	b.n	80066e2 <No_of_days_a_month+0x9a>
			break;
	}
	return 0;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	200006a0 	.word	0x200006a0

080066f4 <verify_date>:

void verify_date(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
	if(gDate.Year % 4 == 0)
 80066f8:	4ba5      	ldr	r3, [pc, #660]	; (8006990 <verify_date+0x29c>)
 80066fa:	78db      	ldrb	r3, [r3, #3]
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 808e 	bne.w	8006824 <verify_date+0x130>
	{
		switch(gDate.Month)
 8006708:	4ba1      	ldr	r3, [pc, #644]	; (8006990 <verify_date+0x29c>)
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	3b01      	subs	r3, #1
 800670e:	2b0b      	cmp	r3, #11
 8006710:	f200 8139 	bhi.w	8006986 <verify_date+0x292>
 8006714:	a201      	add	r2, pc, #4	; (adr r2, 800671c <verify_date+0x28>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	0800674d 	.word	0x0800674d
 8006720:	0800675f 	.word	0x0800675f
 8006724:	08006771 	.word	0x08006771
 8006728:	08006783 	.word	0x08006783
 800672c:	08006795 	.word	0x08006795
 8006730:	080067a7 	.word	0x080067a7
 8006734:	080067b9 	.word	0x080067b9
 8006738:	080067cb 	.word	0x080067cb
 800673c:	080067dd 	.word	0x080067dd
 8006740:	080067ef 	.word	0x080067ef
 8006744:	08006801 	.word	0x08006801
 8006748:	08006813 	.word	0x08006813
		{
			case 1:
				if(gDate.Date > 31) gDate.Date = 31;
 800674c:	4b90      	ldr	r3, [pc, #576]	; (8006990 <verify_date+0x29c>)
 800674e:	789b      	ldrb	r3, [r3, #2]
 8006750:	2b1f      	cmp	r3, #31
 8006752:	f240 80e9 	bls.w	8006928 <verify_date+0x234>
 8006756:	4b8e      	ldr	r3, [pc, #568]	; (8006990 <verify_date+0x29c>)
 8006758:	221f      	movs	r2, #31
 800675a:	709a      	strb	r2, [r3, #2]
				break;
 800675c:	e0e4      	b.n	8006928 <verify_date+0x234>

			case 2:
				if(gDate.Date > 29) gDate.Date = 29;
 800675e:	4b8c      	ldr	r3, [pc, #560]	; (8006990 <verify_date+0x29c>)
 8006760:	789b      	ldrb	r3, [r3, #2]
 8006762:	2b1d      	cmp	r3, #29
 8006764:	f240 80e2 	bls.w	800692c <verify_date+0x238>
 8006768:	4b89      	ldr	r3, [pc, #548]	; (8006990 <verify_date+0x29c>)
 800676a:	221d      	movs	r2, #29
 800676c:	709a      	strb	r2, [r3, #2]
				break;
 800676e:	e0dd      	b.n	800692c <verify_date+0x238>

			case 3:
				if(gDate.Date > 31) gDate.Date = 31;
 8006770:	4b87      	ldr	r3, [pc, #540]	; (8006990 <verify_date+0x29c>)
 8006772:	789b      	ldrb	r3, [r3, #2]
 8006774:	2b1f      	cmp	r3, #31
 8006776:	f240 80db 	bls.w	8006930 <verify_date+0x23c>
 800677a:	4b85      	ldr	r3, [pc, #532]	; (8006990 <verify_date+0x29c>)
 800677c:	221f      	movs	r2, #31
 800677e:	709a      	strb	r2, [r3, #2]
				break;
 8006780:	e0d6      	b.n	8006930 <verify_date+0x23c>

			case 4:
				if(gDate.Date > 30) gDate.Date = 30;
 8006782:	4b83      	ldr	r3, [pc, #524]	; (8006990 <verify_date+0x29c>)
 8006784:	789b      	ldrb	r3, [r3, #2]
 8006786:	2b1e      	cmp	r3, #30
 8006788:	f240 80d4 	bls.w	8006934 <verify_date+0x240>
 800678c:	4b80      	ldr	r3, [pc, #512]	; (8006990 <verify_date+0x29c>)
 800678e:	221e      	movs	r2, #30
 8006790:	709a      	strb	r2, [r3, #2]
				break;
 8006792:	e0cf      	b.n	8006934 <verify_date+0x240>

			case 5:
				if(gDate.Date > 31) gDate.Date = 31;
 8006794:	4b7e      	ldr	r3, [pc, #504]	; (8006990 <verify_date+0x29c>)
 8006796:	789b      	ldrb	r3, [r3, #2]
 8006798:	2b1f      	cmp	r3, #31
 800679a:	f240 80cd 	bls.w	8006938 <verify_date+0x244>
 800679e:	4b7c      	ldr	r3, [pc, #496]	; (8006990 <verify_date+0x29c>)
 80067a0:	221f      	movs	r2, #31
 80067a2:	709a      	strb	r2, [r3, #2]
				break;
 80067a4:	e0c8      	b.n	8006938 <verify_date+0x244>

			case 6:
				if(gDate.Date > 30) gDate.Date = 30;
 80067a6:	4b7a      	ldr	r3, [pc, #488]	; (8006990 <verify_date+0x29c>)
 80067a8:	789b      	ldrb	r3, [r3, #2]
 80067aa:	2b1e      	cmp	r3, #30
 80067ac:	f240 80c6 	bls.w	800693c <verify_date+0x248>
 80067b0:	4b77      	ldr	r3, [pc, #476]	; (8006990 <verify_date+0x29c>)
 80067b2:	221e      	movs	r2, #30
 80067b4:	709a      	strb	r2, [r3, #2]
				break;
 80067b6:	e0c1      	b.n	800693c <verify_date+0x248>

			case 7:
				if(gDate.Date > 31) gDate.Date = 31;
 80067b8:	4b75      	ldr	r3, [pc, #468]	; (8006990 <verify_date+0x29c>)
 80067ba:	789b      	ldrb	r3, [r3, #2]
 80067bc:	2b1f      	cmp	r3, #31
 80067be:	f240 80bf 	bls.w	8006940 <verify_date+0x24c>
 80067c2:	4b73      	ldr	r3, [pc, #460]	; (8006990 <verify_date+0x29c>)
 80067c4:	221f      	movs	r2, #31
 80067c6:	709a      	strb	r2, [r3, #2]
				break;
 80067c8:	e0ba      	b.n	8006940 <verify_date+0x24c>

			case 8:
				if(gDate.Date > 31) gDate.Date = 31;
 80067ca:	4b71      	ldr	r3, [pc, #452]	; (8006990 <verify_date+0x29c>)
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	2b1f      	cmp	r3, #31
 80067d0:	f240 80b8 	bls.w	8006944 <verify_date+0x250>
 80067d4:	4b6e      	ldr	r3, [pc, #440]	; (8006990 <verify_date+0x29c>)
 80067d6:	221f      	movs	r2, #31
 80067d8:	709a      	strb	r2, [r3, #2]
				break;
 80067da:	e0b3      	b.n	8006944 <verify_date+0x250>

			case 9:
				if(gDate.Date > 30) gDate.Date = 30;
 80067dc:	4b6c      	ldr	r3, [pc, #432]	; (8006990 <verify_date+0x29c>)
 80067de:	789b      	ldrb	r3, [r3, #2]
 80067e0:	2b1e      	cmp	r3, #30
 80067e2:	f240 80b1 	bls.w	8006948 <verify_date+0x254>
 80067e6:	4b6a      	ldr	r3, [pc, #424]	; (8006990 <verify_date+0x29c>)
 80067e8:	221e      	movs	r2, #30
 80067ea:	709a      	strb	r2, [r3, #2]
				break;
 80067ec:	e0ac      	b.n	8006948 <verify_date+0x254>

			case 10:
				if(gDate.Date > 31) gDate.Date = 31;
 80067ee:	4b68      	ldr	r3, [pc, #416]	; (8006990 <verify_date+0x29c>)
 80067f0:	789b      	ldrb	r3, [r3, #2]
 80067f2:	2b1f      	cmp	r3, #31
 80067f4:	f240 80aa 	bls.w	800694c <verify_date+0x258>
 80067f8:	4b65      	ldr	r3, [pc, #404]	; (8006990 <verify_date+0x29c>)
 80067fa:	221f      	movs	r2, #31
 80067fc:	709a      	strb	r2, [r3, #2]
				break;
 80067fe:	e0a5      	b.n	800694c <verify_date+0x258>

			case 11:
				if(gDate.Date > 30) gDate.Date = 30;
 8006800:	4b63      	ldr	r3, [pc, #396]	; (8006990 <verify_date+0x29c>)
 8006802:	789b      	ldrb	r3, [r3, #2]
 8006804:	2b1e      	cmp	r3, #30
 8006806:	f240 80a3 	bls.w	8006950 <verify_date+0x25c>
 800680a:	4b61      	ldr	r3, [pc, #388]	; (8006990 <verify_date+0x29c>)
 800680c:	221e      	movs	r2, #30
 800680e:	709a      	strb	r2, [r3, #2]
				break;
 8006810:	e09e      	b.n	8006950 <verify_date+0x25c>

			case 12:
				if(gDate.Date > 31) gDate.Date = 31;
 8006812:	4b5f      	ldr	r3, [pc, #380]	; (8006990 <verify_date+0x29c>)
 8006814:	789b      	ldrb	r3, [r3, #2]
 8006816:	2b1f      	cmp	r3, #31
 8006818:	f240 809c 	bls.w	8006954 <verify_date+0x260>
 800681c:	4b5c      	ldr	r3, [pc, #368]	; (8006990 <verify_date+0x29c>)
 800681e:	221f      	movs	r2, #31
 8006820:	709a      	strb	r2, [r3, #2]
				break;
 8006822:	e097      	b.n	8006954 <verify_date+0x260>
		}
	}
	else
	{
		switch(gDate.Month)
 8006824:	4b5a      	ldr	r3, [pc, #360]	; (8006990 <verify_date+0x29c>)
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	3b01      	subs	r3, #1
 800682a:	2b0b      	cmp	r3, #11
 800682c:	f200 80ab 	bhi.w	8006986 <verify_date+0x292>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <verify_date+0x144>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006869 	.word	0x08006869
 800683c:	08006879 	.word	0x08006879
 8006840:	08006889 	.word	0x08006889
 8006844:	08006899 	.word	0x08006899
 8006848:	080068a9 	.word	0x080068a9
 800684c:	080068b9 	.word	0x080068b9
 8006850:	080068c9 	.word	0x080068c9
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068e9 	.word	0x080068e9
 800685c:	080068f9 	.word	0x080068f9
 8006860:	08006909 	.word	0x08006909
 8006864:	08006919 	.word	0x08006919
		{
			case 1:
				if(gDate.Date > 31) gDate.Date = 31;
 8006868:	4b49      	ldr	r3, [pc, #292]	; (8006990 <verify_date+0x29c>)
 800686a:	789b      	ldrb	r3, [r3, #2]
 800686c:	2b1f      	cmp	r3, #31
 800686e:	d973      	bls.n	8006958 <verify_date+0x264>
 8006870:	4b47      	ldr	r3, [pc, #284]	; (8006990 <verify_date+0x29c>)
 8006872:	221f      	movs	r2, #31
 8006874:	709a      	strb	r2, [r3, #2]
				break;
 8006876:	e06f      	b.n	8006958 <verify_date+0x264>

			case 2:
				if(gDate.Date > 28) gDate.Date = 28;
 8006878:	4b45      	ldr	r3, [pc, #276]	; (8006990 <verify_date+0x29c>)
 800687a:	789b      	ldrb	r3, [r3, #2]
 800687c:	2b1c      	cmp	r3, #28
 800687e:	d96d      	bls.n	800695c <verify_date+0x268>
 8006880:	4b43      	ldr	r3, [pc, #268]	; (8006990 <verify_date+0x29c>)
 8006882:	221c      	movs	r2, #28
 8006884:	709a      	strb	r2, [r3, #2]
				break;
 8006886:	e069      	b.n	800695c <verify_date+0x268>

			case 3:
				if(gDate.Date > 31) gDate.Date = 31;
 8006888:	4b41      	ldr	r3, [pc, #260]	; (8006990 <verify_date+0x29c>)
 800688a:	789b      	ldrb	r3, [r3, #2]
 800688c:	2b1f      	cmp	r3, #31
 800688e:	d967      	bls.n	8006960 <verify_date+0x26c>
 8006890:	4b3f      	ldr	r3, [pc, #252]	; (8006990 <verify_date+0x29c>)
 8006892:	221f      	movs	r2, #31
 8006894:	709a      	strb	r2, [r3, #2]
				break;
 8006896:	e063      	b.n	8006960 <verify_date+0x26c>

			case 4:
				if(gDate.Date > 30) gDate.Date = 30;
 8006898:	4b3d      	ldr	r3, [pc, #244]	; (8006990 <verify_date+0x29c>)
 800689a:	789b      	ldrb	r3, [r3, #2]
 800689c:	2b1e      	cmp	r3, #30
 800689e:	d961      	bls.n	8006964 <verify_date+0x270>
 80068a0:	4b3b      	ldr	r3, [pc, #236]	; (8006990 <verify_date+0x29c>)
 80068a2:	221e      	movs	r2, #30
 80068a4:	709a      	strb	r2, [r3, #2]
				break;
 80068a6:	e05d      	b.n	8006964 <verify_date+0x270>

			case 5:
				if(gDate.Date > 31) gDate.Date = 31;
 80068a8:	4b39      	ldr	r3, [pc, #228]	; (8006990 <verify_date+0x29c>)
 80068aa:	789b      	ldrb	r3, [r3, #2]
 80068ac:	2b1f      	cmp	r3, #31
 80068ae:	d95b      	bls.n	8006968 <verify_date+0x274>
 80068b0:	4b37      	ldr	r3, [pc, #220]	; (8006990 <verify_date+0x29c>)
 80068b2:	221f      	movs	r2, #31
 80068b4:	709a      	strb	r2, [r3, #2]
				break;
 80068b6:	e057      	b.n	8006968 <verify_date+0x274>

			case 6:
				if(gDate.Date > 30) gDate.Date = 30;
 80068b8:	4b35      	ldr	r3, [pc, #212]	; (8006990 <verify_date+0x29c>)
 80068ba:	789b      	ldrb	r3, [r3, #2]
 80068bc:	2b1e      	cmp	r3, #30
 80068be:	d955      	bls.n	800696c <verify_date+0x278>
 80068c0:	4b33      	ldr	r3, [pc, #204]	; (8006990 <verify_date+0x29c>)
 80068c2:	221e      	movs	r2, #30
 80068c4:	709a      	strb	r2, [r3, #2]
				break;
 80068c6:	e051      	b.n	800696c <verify_date+0x278>

			case 7:
				if(gDate.Date > 31) gDate.Date = 31;
 80068c8:	4b31      	ldr	r3, [pc, #196]	; (8006990 <verify_date+0x29c>)
 80068ca:	789b      	ldrb	r3, [r3, #2]
 80068cc:	2b1f      	cmp	r3, #31
 80068ce:	d94f      	bls.n	8006970 <verify_date+0x27c>
 80068d0:	4b2f      	ldr	r3, [pc, #188]	; (8006990 <verify_date+0x29c>)
 80068d2:	221f      	movs	r2, #31
 80068d4:	709a      	strb	r2, [r3, #2]
				break;
 80068d6:	e04b      	b.n	8006970 <verify_date+0x27c>

			case 8:
				if(gDate.Date > 31) gDate.Date = 31;
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <verify_date+0x29c>)
 80068da:	789b      	ldrb	r3, [r3, #2]
 80068dc:	2b1f      	cmp	r3, #31
 80068de:	d949      	bls.n	8006974 <verify_date+0x280>
 80068e0:	4b2b      	ldr	r3, [pc, #172]	; (8006990 <verify_date+0x29c>)
 80068e2:	221f      	movs	r2, #31
 80068e4:	709a      	strb	r2, [r3, #2]
				break;
 80068e6:	e045      	b.n	8006974 <verify_date+0x280>

			case 9:
				if(gDate.Date > 30) gDate.Date = 30;
 80068e8:	4b29      	ldr	r3, [pc, #164]	; (8006990 <verify_date+0x29c>)
 80068ea:	789b      	ldrb	r3, [r3, #2]
 80068ec:	2b1e      	cmp	r3, #30
 80068ee:	d943      	bls.n	8006978 <verify_date+0x284>
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <verify_date+0x29c>)
 80068f2:	221e      	movs	r2, #30
 80068f4:	709a      	strb	r2, [r3, #2]
				break;
 80068f6:	e03f      	b.n	8006978 <verify_date+0x284>

			case 10:
				if(gDate.Date > 31) gDate.Date = 31;
 80068f8:	4b25      	ldr	r3, [pc, #148]	; (8006990 <verify_date+0x29c>)
 80068fa:	789b      	ldrb	r3, [r3, #2]
 80068fc:	2b1f      	cmp	r3, #31
 80068fe:	d93d      	bls.n	800697c <verify_date+0x288>
 8006900:	4b23      	ldr	r3, [pc, #140]	; (8006990 <verify_date+0x29c>)
 8006902:	221f      	movs	r2, #31
 8006904:	709a      	strb	r2, [r3, #2]
				break;
 8006906:	e039      	b.n	800697c <verify_date+0x288>

			case 11:
				if(gDate.Date > 30) gDate.Date = 30;
 8006908:	4b21      	ldr	r3, [pc, #132]	; (8006990 <verify_date+0x29c>)
 800690a:	789b      	ldrb	r3, [r3, #2]
 800690c:	2b1e      	cmp	r3, #30
 800690e:	d937      	bls.n	8006980 <verify_date+0x28c>
 8006910:	4b1f      	ldr	r3, [pc, #124]	; (8006990 <verify_date+0x29c>)
 8006912:	221e      	movs	r2, #30
 8006914:	709a      	strb	r2, [r3, #2]
				break;
 8006916:	e033      	b.n	8006980 <verify_date+0x28c>

			case 12:
				if(gDate.Date > 31) gDate.Date = 31;
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <verify_date+0x29c>)
 800691a:	789b      	ldrb	r3, [r3, #2]
 800691c:	2b1f      	cmp	r3, #31
 800691e:	d931      	bls.n	8006984 <verify_date+0x290>
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <verify_date+0x29c>)
 8006922:	221f      	movs	r2, #31
 8006924:	709a      	strb	r2, [r3, #2]
				break;
 8006926:	e02d      	b.n	8006984 <verify_date+0x290>
				break;
 8006928:	bf00      	nop
 800692a:	e02c      	b.n	8006986 <verify_date+0x292>
				break;
 800692c:	bf00      	nop
 800692e:	e02a      	b.n	8006986 <verify_date+0x292>
				break;
 8006930:	bf00      	nop
 8006932:	e028      	b.n	8006986 <verify_date+0x292>
				break;
 8006934:	bf00      	nop
 8006936:	e026      	b.n	8006986 <verify_date+0x292>
				break;
 8006938:	bf00      	nop
 800693a:	e024      	b.n	8006986 <verify_date+0x292>
				break;
 800693c:	bf00      	nop
 800693e:	e022      	b.n	8006986 <verify_date+0x292>
				break;
 8006940:	bf00      	nop
 8006942:	e020      	b.n	8006986 <verify_date+0x292>
				break;
 8006944:	bf00      	nop
 8006946:	e01e      	b.n	8006986 <verify_date+0x292>
				break;
 8006948:	bf00      	nop
 800694a:	e01c      	b.n	8006986 <verify_date+0x292>
				break;
 800694c:	bf00      	nop
 800694e:	e01a      	b.n	8006986 <verify_date+0x292>
				break;
 8006950:	bf00      	nop
 8006952:	e018      	b.n	8006986 <verify_date+0x292>
				break;
 8006954:	bf00      	nop
 8006956:	e016      	b.n	8006986 <verify_date+0x292>
				break;
 8006958:	bf00      	nop
 800695a:	e014      	b.n	8006986 <verify_date+0x292>
				break;
 800695c:	bf00      	nop
 800695e:	e012      	b.n	8006986 <verify_date+0x292>
				break;
 8006960:	bf00      	nop
 8006962:	e010      	b.n	8006986 <verify_date+0x292>
				break;
 8006964:	bf00      	nop
 8006966:	e00e      	b.n	8006986 <verify_date+0x292>
				break;
 8006968:	bf00      	nop
 800696a:	e00c      	b.n	8006986 <verify_date+0x292>
				break;
 800696c:	bf00      	nop
 800696e:	e00a      	b.n	8006986 <verify_date+0x292>
				break;
 8006970:	bf00      	nop
 8006972:	e008      	b.n	8006986 <verify_date+0x292>
				break;
 8006974:	bf00      	nop
 8006976:	e006      	b.n	8006986 <verify_date+0x292>
				break;
 8006978:	bf00      	nop
 800697a:	e004      	b.n	8006986 <verify_date+0x292>
				break;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <verify_date+0x292>
				break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <verify_date+0x292>
				break;
 8006984:	bf00      	nop
		}
	}
}
 8006986:	bf00      	nop
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	200006a0 	.word	0x200006a0

08006994 <fetch_date_time>:

void fetch_date_time(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8006998:	2200      	movs	r2, #0
 800699a:	4910      	ldr	r1, [pc, #64]	; (80069dc <fetch_date_time+0x48>)
 800699c:	4810      	ldr	r0, [pc, #64]	; (80069e0 <fetch_date_time+0x4c>)
 800699e:	f7fc f9eb 	bl	8002d78 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80069a2:	2200      	movs	r2, #0
 80069a4:	490f      	ldr	r1, [pc, #60]	; (80069e4 <fetch_date_time+0x50>)
 80069a6:	480e      	ldr	r0, [pc, #56]	; (80069e0 <fetch_date_time+0x4c>)
 80069a8:	f7fc faeb 	bl	8002f82 <HAL_RTC_GetDate>
	 if (gDate.Year == 0) gDate.Year = 20;
 80069ac:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <fetch_date_time+0x50>)
 80069ae:	78db      	ldrb	r3, [r3, #3]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <fetch_date_time+0x26>
 80069b4:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <fetch_date_time+0x50>)
 80069b6:	2214      	movs	r2, #20
 80069b8:	70da      	strb	r2, [r3, #3]
	 if (gDate.Month == 0) gDate.Year = 1;
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <fetch_date_time+0x50>)
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <fetch_date_time+0x34>
 80069c2:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <fetch_date_time+0x50>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	70da      	strb	r2, [r3, #3]
	 if (gDate.Date == 0) gDate.Date = 1;
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <fetch_date_time+0x50>)
 80069ca:	789b      	ldrb	r3, [r3, #2]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <fetch_date_time+0x42>
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <fetch_date_time+0x50>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	709a      	strb	r2, [r3, #2]
}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	2000068c 	.word	0x2000068c
 80069e0:	200010e8 	.word	0x200010e8
 80069e4:	200006a0 	.word	0x200006a0

080069e8 <verify_settings>:

//weryfikacja ustawien i debug
void verify_settings(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af02      	add	r7, sp, #8
	if (DEVICE_BRAND_NEW)	// if eeprom never programmed before -> load default settings
 80069ee:	4b62      	ldr	r3, [pc, #392]	; (8006b78 <verify_settings+0x190>)
 80069f0:	791b      	ldrb	r3, [r3, #4]
 80069f2:	2bff      	cmp	r3, #255	; 0xff
 80069f4:	d162      	bne.n	8006abc <verify_settings+0xd4>
 80069f6:	4b60      	ldr	r3, [pc, #384]	; (8006b78 <verify_settings+0x190>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2bff      	cmp	r3, #255	; 0xff
 80069fc:	d15e      	bne.n	8006abc <verify_settings+0xd4>
 80069fe:	4b5e      	ldr	r3, [pc, #376]	; (8006b78 <verify_settings+0x190>)
 8006a00:	785b      	ldrb	r3, [r3, #1]
 8006a02:	2bff      	cmp	r3, #255	; 0xff
 8006a04:	d15a      	bne.n	8006abc <verify_settings+0xd4>
 8006a06:	4b5c      	ldr	r3, [pc, #368]	; (8006b78 <verify_settings+0x190>)
 8006a08:	78db      	ldrb	r3, [r3, #3]
 8006a0a:	2bff      	cmp	r3, #255	; 0xff
 8006a0c:	d156      	bne.n	8006abc <verify_settings+0xd4>
 8006a0e:	4b5a      	ldr	r3, [pc, #360]	; (8006b78 <verify_settings+0x190>)
 8006a10:	78db      	ldrb	r3, [r3, #3]
 8006a12:	2bff      	cmp	r3, #255	; 0xff
 8006a14:	d152      	bne.n	8006abc <verify_settings+0xd4>
 8006a16:	4b58      	ldr	r3, [pc, #352]	; (8006b78 <verify_settings+0x190>)
 8006a18:	799b      	ldrb	r3, [r3, #6]
 8006a1a:	2bff      	cmp	r3, #255	; 0xff
 8006a1c:	d14e      	bne.n	8006abc <verify_settings+0xd4>
 8006a1e:	4b56      	ldr	r3, [pc, #344]	; (8006b78 <verify_settings+0x190>)
 8006a20:	7a1b      	ldrb	r3, [r3, #8]
 8006a22:	2bff      	cmp	r3, #255	; 0xff
 8006a24:	d14a      	bne.n	8006abc <verify_settings+0xd4>
 8006a26:	4b54      	ldr	r3, [pc, #336]	; (8006b78 <verify_settings+0x190>)
 8006a28:	79db      	ldrb	r3, [r3, #7]
 8006a2a:	2bff      	cmp	r3, #255	; 0xff
 8006a2c:	d146      	bne.n	8006abc <verify_settings+0xd4>
	{

		settings.language = POLISH;
 8006a2e:	4b52      	ldr	r3, [pc, #328]	; (8006b78 <verify_settings+0x190>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	711a      	strb	r2, [r3, #4]
		settings.measurementType = MEASUREMENT_SINGLE;
 8006a34:	4b50      	ldr	r3, [pc, #320]	; (8006b78 <verify_settings+0x190>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]
		settings.measurementUnit = UNIT_BRIX;
 8006a3a:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <verify_settings+0x190>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	705a      	strb	r2, [r3, #1]
		settings.thermalCompensation = ON;
 8006a40:	4b4d      	ldr	r3, [pc, #308]	; (8006b78 <verify_settings+0x190>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	709a      	strb	r2, [r3, #2]
		settings.singleMeasurementTime = 15;
 8006a46:	4b4c      	ldr	r3, [pc, #304]	; (8006b78 <verify_settings+0x190>)
 8006a48:	220f      	movs	r2, #15
 8006a4a:	70da      	strb	r2, [r3, #3]
		settings.contrast = DEFAULT_CONTRAST;
 8006a4c:	4b4a      	ldr	r3, [pc, #296]	; (8006b78 <verify_settings+0x190>)
 8006a4e:	2209      	movs	r2, #9
 8006a50:	715a      	strb	r2, [r3, #5]
		settings.storageMode = STORAGE_BY_KEYBOARD;
 8006a52:	4b49      	ldr	r3, [pc, #292]	; (8006b78 <verify_settings+0x190>)
 8006a54:	2201      	movs	r2, #1
 8006a56:	719a      	strb	r2, [r3, #6]
		settings.archiveEntriesTotal = 0;
 8006a58:	4b47      	ldr	r3, [pc, #284]	; (8006b78 <verify_settings+0x190>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	721a      	strb	r2, [r3, #8]
		settings.archiveFirstEntryOffset = 0;
 8006a5e:	4b46      	ldr	r3, [pc, #280]	; (8006b78 <verify_settings+0x190>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	71da      	strb	r2, [r3, #7]
		settings.serialNumber = 0;
 8006a64:	4b44      	ldr	r3, [pc, #272]	; (8006b78 <verify_settings+0x190>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	815a      	strh	r2, [r3, #10]

		OLED_CLEAR();
 8006a6a:	f7ff f930 	bl	8005cce <OLED_CLEAR>
		OLED_PutStr(2, 24, "EEPROM uninitialized", 0, 0x09);
 8006a6e:	2309      	movs	r3, #9
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	4a41      	ldr	r2, [pc, #260]	; (8006b7c <verify_settings+0x194>)
 8006a76:	2118      	movs	r1, #24
 8006a78:	2002      	movs	r0, #2
 8006a7a:	f7ff fc0b 	bl	8006294 <OLED_PutStr>
		OLED_PutStr(2, 33, "initializing EEPROM", 0, 0x09);
 8006a7e:	2309      	movs	r3, #9
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	2300      	movs	r3, #0
 8006a84:	4a3e      	ldr	r2, [pc, #248]	; (8006b80 <verify_settings+0x198>)
 8006a86:	2121      	movs	r1, #33	; 0x21
 8006a88:	2002      	movs	r0, #2
 8006a8a:	f7ff fc03 	bl	8006294 <OLED_PutStr>
		EEPROM_write_multiple(EEPROM_SETTINGS_ADDRESS, (uint8_t*)&settings, sizeof(settings));		//zapisz domyslne ustawienia
 8006a8e:	220c      	movs	r2, #12
 8006a90:	4939      	ldr	r1, [pc, #228]	; (8006b78 <verify_settings+0x190>)
 8006a92:	2000      	movs	r0, #0
 8006a94:	f7fe fe16 	bl	80056c4 <EEPROM_write_multiple>
		HAL_Delay(4000);
 8006a98:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006a9c:	f7fa fa9a 	bl	8000fd4 <HAL_Delay>
		OLED_PutStr(2, 42, "DONE!", 0, 0x09);
 8006aa0:	2309      	movs	r3, #9
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4a37      	ldr	r2, [pc, #220]	; (8006b84 <verify_settings+0x19c>)
 8006aa8:	212a      	movs	r1, #42	; 0x2a
 8006aaa:	2002      	movs	r0, #2
 8006aac:	f7ff fbf2 	bl	8006294 <OLED_PutStr>
		HAL_Delay(1000);
 8006ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ab4:	f7fa fa8e 	bl	8000fd4 <HAL_Delay>
		OLED_CLEAR();
 8006ab8:	f7ff f909 	bl	8005cce <OLED_CLEAR>

	}

	if (SETTINGS_INCORRECT)
 8006abc:	4b2e      	ldr	r3, [pc, #184]	; (8006b78 <verify_settings+0x190>)
 8006abe:	791b      	ldrb	r3, [r3, #4]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d81f      	bhi.n	8006b04 <verify_settings+0x11c>
 8006ac4:	4b2c      	ldr	r3, [pc, #176]	; (8006b78 <verify_settings+0x190>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d81b      	bhi.n	8006b04 <verify_settings+0x11c>
 8006acc:	4b2a      	ldr	r3, [pc, #168]	; (8006b78 <verify_settings+0x190>)
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d817      	bhi.n	8006b04 <verify_settings+0x11c>
 8006ad4:	4b28      	ldr	r3, [pc, #160]	; (8006b78 <verify_settings+0x190>)
 8006ad6:	789b      	ldrb	r3, [r3, #2]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d813      	bhi.n	8006b04 <verify_settings+0x11c>
 8006adc:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <verify_settings+0x190>)
 8006ade:	78db      	ldrb	r3, [r3, #3]
 8006ae0:	2b0e      	cmp	r3, #14
 8006ae2:	d90f      	bls.n	8006b04 <verify_settings+0x11c>
 8006ae4:	4b24      	ldr	r3, [pc, #144]	; (8006b78 <verify_settings+0x190>)
 8006ae6:	78db      	ldrb	r3, [r3, #3]
 8006ae8:	2b28      	cmp	r3, #40	; 0x28
 8006aea:	d80b      	bhi.n	8006b04 <verify_settings+0x11c>
 8006aec:	4b22      	ldr	r3, [pc, #136]	; (8006b78 <verify_settings+0x190>)
 8006aee:	799b      	ldrb	r3, [r3, #6]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d807      	bhi.n	8006b04 <verify_settings+0x11c>
 8006af4:	4b20      	ldr	r3, [pc, #128]	; (8006b78 <verify_settings+0x190>)
 8006af6:	7a1b      	ldrb	r3, [r3, #8]
 8006af8:	2bfa      	cmp	r3, #250	; 0xfa
 8006afa:	d803      	bhi.n	8006b04 <verify_settings+0x11c>
 8006afc:	4b1e      	ldr	r3, [pc, #120]	; (8006b78 <verify_settings+0x190>)
 8006afe:	79db      	ldrb	r3, [r3, #7]
 8006b00:	2bf8      	cmp	r3, #248	; 0xf8
 8006b02:	d936      	bls.n	8006b72 <verify_settings+0x18a>
	{
		settings.language = POLISH;
 8006b04:	4b1c      	ldr	r3, [pc, #112]	; (8006b78 <verify_settings+0x190>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	711a      	strb	r2, [r3, #4]
		settings.measurementType = MEASUREMENT_SINGLE;
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <verify_settings+0x190>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
		settings.measurementUnit = UNIT_BRIX;
 8006b10:	4b19      	ldr	r3, [pc, #100]	; (8006b78 <verify_settings+0x190>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	705a      	strb	r2, [r3, #1]
		settings.thermalCompensation = ON;
 8006b16:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <verify_settings+0x190>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	709a      	strb	r2, [r3, #2]
		settings.singleMeasurementTime = 15;
 8006b1c:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <verify_settings+0x190>)
 8006b1e:	220f      	movs	r2, #15
 8006b20:	70da      	strb	r2, [r3, #3]
		settings.contrast = DEFAULT_CONTRAST;
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <verify_settings+0x190>)
 8006b24:	2209      	movs	r2, #9
 8006b26:	715a      	strb	r2, [r3, #5]
		settings.storageMode = ARCHIVE_STORAGE_MODE_BY_KEYBOARD;
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <verify_settings+0x190>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	719a      	strb	r2, [r3, #6]
		erase_archive();
 8006b2e:	f7fe ff43 	bl	80059b8 <erase_archive>
		OLED_CLEAR();
 8006b32:	f7ff f8cc 	bl	8005cce <OLED_CLEAR>


		OLED_PutStr(0, 24, "MEMORY ERROR", 0, 0x09);
 8006b36:	2309      	movs	r3, #9
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4a12      	ldr	r2, [pc, #72]	; (8006b88 <verify_settings+0x1a0>)
 8006b3e:	2118      	movs	r1, #24
 8006b40:	2000      	movs	r0, #0
 8006b42:	f7ff fba7 	bl	8006294 <OLED_PutStr>
		OLED_PutStr(0, 33, "LOADING DEFAULT", 0, 0x09);
 8006b46:	2309      	movs	r3, #9
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4a0f      	ldr	r2, [pc, #60]	; (8006b8c <verify_settings+0x1a4>)
 8006b4e:	2121      	movs	r1, #33	; 0x21
 8006b50:	2000      	movs	r0, #0
 8006b52:	f7ff fb9f 	bl	8006294 <OLED_PutStr>
		OLED_PutStr(0, 42, "SETTINGS", 0, 0x09);
 8006b56:	2309      	movs	r3, #9
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4a0c      	ldr	r2, [pc, #48]	; (8006b90 <verify_settings+0x1a8>)
 8006b5e:	212a      	movs	r1, #42	; 0x2a
 8006b60:	2000      	movs	r0, #0
 8006b62:	f7ff fb97 	bl	8006294 <OLED_PutStr>
		HAL_Delay(5000);
 8006b66:	f241 3088 	movw	r0, #5000	; 0x1388
 8006b6a:	f7fa fa33 	bl	8000fd4 <HAL_Delay>
		OLED_CLEAR();
 8006b6e:	f7ff f8ae 	bl	8005cce <OLED_CLEAR>
	}
}
 8006b72:	bf00      	nop
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200006c4 	.word	0x200006c4
 8006b7c:	0801342c 	.word	0x0801342c
 8006b80:	08013444 	.word	0x08013444
 8006b84:	08013458 	.word	0x08013458
 8006b88:	08013460 	.word	0x08013460
 8006b8c:	08013470 	.word	0x08013470
 8006b90:	08013480 	.word	0x08013480

08006b94 <reset_screen_saver>:
	OLED_CLEAR();
}
//Funkcje od wygaszacza

void reset_screen_saver(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
	ssTimer = 0;
 8006b98:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <reset_screen_saver+0x24>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	801a      	strh	r2, [r3, #0]
	ssStateChanged = 1;
 8006b9e:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <reset_screen_saver+0x28>)
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
	//settings.contrast = DEFAULT_CONTRAST;
	settings.contrast = EEPROM_read(EEPROM_CONTRAST_ADDR);
 8006ba4:	2005      	movs	r0, #5
 8006ba6:	f7fe fcef 	bl	8005588 <EEPROM_read>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <reset_screen_saver+0x2c>)
 8006bb0:	715a      	strb	r2, [r3, #5]
	//EEPROM_readSettings(EEPROM_CONTRAST_ADDR, &settings.contrast, 1);
}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000c0e 	.word	0x20000c0e
 8006bbc:	2000135c 	.word	0x2000135c
 8006bc0:	200006c4 	.word	0x200006c4

08006bc4 <exit_main_menu>:

// Menu i wyswietlanie
void exit_main_menu()
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
	if(settings.measurementType != MEASUREMENT_SINGLE) nacisnijStart = 0;		// dodane aby usunac buga wyswietlania przy zmianie trybu pomiaru. nie kasowal sie napis NACISNIJ
 8006bc8:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <exit_main_menu+0x40>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <exit_main_menu+0x12>
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <exit_main_menu+0x44>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]

	OLED_CLEAR();
 8006bd6:	f7ff f87a 	bl	8005cce <OLED_CLEAR>
	frame.position[0] = 0;
 8006bda:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <exit_main_menu+0x48>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	frame.position[1] = 0;
 8006be2:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <exit_main_menu+0x48>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	frame.position[2] = 0;
 8006bea:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <exit_main_menu+0x48>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	frame.level = 0;
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <exit_main_menu+0x48>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	frame.type = FRAME_EXIT;
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <exit_main_menu+0x48>)
 8006bfc:	22ff      	movs	r2, #255	; 0xff
 8006bfe:	701a      	strb	r2, [r3, #0]
}
 8006c00:	bf00      	nop
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	200006c4 	.word	0x200006c4
 8006c08:	200006a8 	.word	0x200006a8
 8006c0c:	20001244 	.word	0x20001244

08006c10 <MM_up_one_level>:

void MM_up_one_level(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
	 frame.type = FRAME_MAIN_MENU;
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <MM_up_one_level+0x38>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
	 frame.position[frame.level] = 0;
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <MM_up_one_level+0x38>)
 8006c1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <MM_up_one_level+0x38>)
 8006c24:	4413      	add	r3, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	 frame.level--;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <MM_up_one_level+0x38>)
 8006c2e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <MM_up_one_level+0x38>)
 8006c38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8006c3c:	bf00      	nop
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	20001244 	.word	0x20001244

08006c4c <drawFrame>:

void drawFrame(void)
{
 8006c4c:	b5b0      	push	{r4, r5, r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af04      	add	r7, sp, #16
	//get current time
	 fetch_date_time();
 8006c52:	f7ff fe9f 	bl	8006994 <fetch_date_time>
	 verify_date();
 8006c56:	f7ff fd4d 	bl	80066f4 <verify_date>
	// wyswietlanie

	switch (frame.type)
 8006c5a:	4b9f      	ldr	r3, [pc, #636]	; (8006ed8 <drawFrame+0x28c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b07      	cmp	r3, #7
 8006c60:	f201 8738 	bhi.w	8008ad4 <drawFrame+0x1e88>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <drawFrame+0x20>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	080078b9 	.word	0x080078b9
 8006c70:	08007c9b 	.word	0x08007c9b
 8006c74:	08008ad5 	.word	0x08008ad5
 8006c78:	08007bf5 	.word	0x08007bf5
 8006c7c:	080077c5 	.word	0x080077c5
 8006c80:	08006f29 	.word	0x08006f29
 8006c84:	08006d3f 	.word	0x08006d3f
 8006c88:	08006c8d 	.word	0x08006c8d
	{
		case FRAME_1_BIG_LINE:
			if (settings.thermalCompensation == OFF) sprintf(frame.firstLine, Main_Screen[3][settings.language]);
 8006c8c:	4b93      	ldr	r3, [pc, #588]	; (8006edc <drawFrame+0x290>)
 8006c8e:	789b      	ldrb	r3, [r3, #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10e      	bne.n	8006cb2 <drawFrame+0x66>
 8006c94:	4b91      	ldr	r3, [pc, #580]	; (8006edc <drawFrame+0x290>)
 8006c96:	791b      	ldrb	r3, [r3, #4]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	336c      	adds	r3, #108	; 0x6c
 8006ca4:	4a8e      	ldr	r2, [pc, #568]	; (8006ee0 <drawFrame+0x294>)
 8006ca6:	4413      	add	r3, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	488e      	ldr	r0, [pc, #568]	; (8006ee4 <drawFrame+0x298>)
 8006cac:	f005 f876 	bl	800bd9c <siprintf>
 8006cb0:	e00c      	b.n	8006ccc <drawFrame+0x80>
			else sprintf(frame.firstLine, Main_Screen[0][settings.language]);
 8006cb2:	4b8a      	ldr	r3, [pc, #552]	; (8006edc <drawFrame+0x290>)
 8006cb4:	791b      	ldrb	r3, [r3, #4]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	4a87      	ldr	r2, [pc, #540]	; (8006ee0 <drawFrame+0x294>)
 8006cc2:	4413      	add	r3, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4887      	ldr	r0, [pc, #540]	; (8006ee4 <drawFrame+0x298>)
 8006cc8:	f005 f868 	bl	800bd9c <siprintf>
			OLED_PutStr(40, 1, frame.firstLine, 0, settings.contrast);
 8006ccc:	4b83      	ldr	r3, [pc, #524]	; (8006edc <drawFrame+0x290>)
 8006cce:	795b      	ldrb	r3, [r3, #5]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4a83      	ldr	r2, [pc, #524]	; (8006ee4 <drawFrame+0x298>)
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	2028      	movs	r0, #40	; 0x28
 8006cda:	f7ff fadb 	bl	8006294 <OLED_PutStr>
			OLED_PutStr(3, 24, frame.secondLine, 1, settings.contrast);
 8006cde:	4b7f      	ldr	r3, [pc, #508]	; (8006edc <drawFrame+0x290>)
 8006ce0:	795b      	ldrb	r3, [r3, #5]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4a80      	ldr	r2, [pc, #512]	; (8006ee8 <drawFrame+0x29c>)
 8006ce8:	2118      	movs	r1, #24
 8006cea:	2003      	movs	r0, #3
 8006cec:	f7ff fad2 	bl	8006294 <OLED_PutStr>
			sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", gDate.Date, gDate.Month, gDate.Year+2000, gTime.Hours,gTime.Minutes,gTime.Seconds);
 8006cf0:	4b7e      	ldr	r3, [pc, #504]	; (8006eec <drawFrame+0x2a0>)
 8006cf2:	789b      	ldrb	r3, [r3, #2]
 8006cf4:	461c      	mov	r4, r3
 8006cf6:	4b7d      	ldr	r3, [pc, #500]	; (8006eec <drawFrame+0x2a0>)
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	461d      	mov	r5, r3
 8006cfc:	4b7b      	ldr	r3, [pc, #492]	; (8006eec <drawFrame+0x2a0>)
 8006cfe:	78db      	ldrb	r3, [r3, #3]
 8006d00:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006d04:	4a7a      	ldr	r2, [pc, #488]	; (8006ef0 <drawFrame+0x2a4>)
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4a79      	ldr	r2, [pc, #484]	; (8006ef0 <drawFrame+0x2a4>)
 8006d0c:	7852      	ldrb	r2, [r2, #1]
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4a77      	ldr	r2, [pc, #476]	; (8006ef0 <drawFrame+0x2a4>)
 8006d12:	7892      	ldrb	r2, [r2, #2]
 8006d14:	9203      	str	r2, [sp, #12]
 8006d16:	9002      	str	r0, [sp, #8]
 8006d18:	9101      	str	r1, [sp, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4974      	ldr	r1, [pc, #464]	; (8006ef4 <drawFrame+0x2a8>)
 8006d22:	4875      	ldr	r0, [pc, #468]	; (8006ef8 <drawFrame+0x2ac>)
 8006d24:	f005 f83a 	bl	800bd9c <siprintf>
			OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8006d28:	4b6c      	ldr	r3, [pc, #432]	; (8006edc <drawFrame+0x290>)
 8006d2a:	795b      	ldrb	r3, [r3, #5]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4a71      	ldr	r2, [pc, #452]	; (8006ef8 <drawFrame+0x2ac>)
 8006d32:	2138      	movs	r1, #56	; 0x38
 8006d34:	2000      	movs	r0, #0
 8006d36:	f7ff faad 	bl	8006294 <OLED_PutStr>
			break;
 8006d3a:	f001 becb 	b.w	8008ad4 <drawFrame+0x1e88>



		case FRAME_2_BIG_LINES:
			if (settings.thermalCompensation == OFF) sprintf(frame.firstLine, Main_Screen[3][settings.language]);
 8006d3e:	4b67      	ldr	r3, [pc, #412]	; (8006edc <drawFrame+0x290>)
 8006d40:	789b      	ldrb	r3, [r3, #2]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10e      	bne.n	8006d64 <drawFrame+0x118>
 8006d46:	4b65      	ldr	r3, [pc, #404]	; (8006edc <drawFrame+0x290>)
 8006d48:	791b      	ldrb	r3, [r3, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4413      	add	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	336c      	adds	r3, #108	; 0x6c
 8006d56:	4a62      	ldr	r2, [pc, #392]	; (8006ee0 <drawFrame+0x294>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4861      	ldr	r0, [pc, #388]	; (8006ee4 <drawFrame+0x298>)
 8006d5e:	f005 f81d 	bl	800bd9c <siprintf>
 8006d62:	e00c      	b.n	8006d7e <drawFrame+0x132>
			else sprintf(frame.firstLine, Main_Screen[0][settings.language]);
 8006d64:	4b5d      	ldr	r3, [pc, #372]	; (8006edc <drawFrame+0x290>)
 8006d66:	791b      	ldrb	r3, [r3, #4]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4a5b      	ldr	r2, [pc, #364]	; (8006ee0 <drawFrame+0x294>)
 8006d74:	4413      	add	r3, r2
 8006d76:	4619      	mov	r1, r3
 8006d78:	485a      	ldr	r0, [pc, #360]	; (8006ee4 <drawFrame+0x298>)
 8006d7a:	f005 f80f 	bl	800bd9c <siprintf>
			OLED_PutStr(40, 1, frame.firstLine, 0, settings.contrast);
 8006d7e:	4b57      	ldr	r3, [pc, #348]	; (8006edc <drawFrame+0x290>)
 8006d80:	795b      	ldrb	r3, [r3, #5]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	4a57      	ldr	r2, [pc, #348]	; (8006ee4 <drawFrame+0x298>)
 8006d88:	2101      	movs	r1, #1
 8006d8a:	2028      	movs	r0, #40	; 0x28
 8006d8c:	f7ff fa82 	bl	8006294 <OLED_PutStr>

			if (newArchiveEntryAdded && settings.archiveEntriesTotal != 0)
 8006d90:	4b5a      	ldr	r3, [pc, #360]	; (8006efc <drawFrame+0x2b0>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d014      	beq.n	8006dc4 <drawFrame+0x178>
 8006d9a:	4b50      	ldr	r3, [pc, #320]	; (8006edc <drawFrame+0x290>)
 8006d9c:	7a1b      	ldrb	r3, [r3, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d010      	beq.n	8006dc4 <drawFrame+0x178>
			{
				sprintf(frame.buffer,"A%03u", settings.archiveEntriesTotal);
 8006da2:	4b4e      	ldr	r3, [pc, #312]	; (8006edc <drawFrame+0x290>)
 8006da4:	7a1b      	ldrb	r3, [r3, #8]
 8006da6:	461a      	mov	r2, r3
 8006da8:	4955      	ldr	r1, [pc, #340]	; (8006f00 <drawFrame+0x2b4>)
 8006daa:	4856      	ldr	r0, [pc, #344]	; (8006f04 <drawFrame+0x2b8>)
 8006dac:	f004 fff6 	bl	800bd9c <siprintf>
				OLED_PutStr(10, 1, frame.buffer, 0, settings.contrast);
 8006db0:	4b4a      	ldr	r3, [pc, #296]	; (8006edc <drawFrame+0x290>)
 8006db2:	795b      	ldrb	r3, [r3, #5]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	4a52      	ldr	r2, [pc, #328]	; (8006f04 <drawFrame+0x2b8>)
 8006dba:	2101      	movs	r1, #1
 8006dbc:	200a      	movs	r0, #10
 8006dbe:	f7ff fa69 	bl	8006294 <OLED_PutStr>
 8006dc2:	e008      	b.n	8006dd6 <drawFrame+0x18a>

			}
			else
			{
				OLED_PutStr(10, 1, "    ", 0, settings.contrast);
 8006dc4:	4b45      	ldr	r3, [pc, #276]	; (8006edc <drawFrame+0x290>)
 8006dc6:	795b      	ldrb	r3, [r3, #5]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4a4e      	ldr	r2, [pc, #312]	; (8006f08 <drawFrame+0x2bc>)
 8006dce:	2101      	movs	r1, #1
 8006dd0:	200a      	movs	r0, #10
 8006dd2:	f7ff fa5f 	bl	8006294 <OLED_PutStr>
			}
//	Specjalny warunek zeby ladnie wyswietlic NACISNIJ w napisie "NACISNIJ_START"
			if (nacisnijStart == 1)	//dla polskiej wersji ten bajzel
 8006dd6:	4b4d      	ldr	r3, [pc, #308]	; (8006f0c <drawFrame+0x2c0>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d142      	bne.n	8006e66 <drawFrame+0x21a>
			{
				uint8_t tmpVar = 12;	//Pozycja x napisu NACISNIJ
 8006de0:	230c      	movs	r3, #12
 8006de2:	71fb      	strb	r3, [r7, #7]
				//OLED_PutStr(nacPos + 18, 15, "I", 1, settings.contrast);
				OLED_PutStr(tmpVar, 15, "NAC", 1, settings.contrast);
 8006de4:	4b3d      	ldr	r3, [pc, #244]	; (8006edc <drawFrame+0x290>)
 8006de6:	795b      	ldrb	r3, [r3, #5]
 8006de8:	79f8      	ldrb	r0, [r7, #7]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	2301      	movs	r3, #1
 8006dee:	4a48      	ldr	r2, [pc, #288]	; (8006f10 <drawFrame+0x2c4>)
 8006df0:	210f      	movs	r1, #15
 8006df2:	f7ff fa4f 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(tmpVar + 21, 15, "SN", 1, settings.contrast);
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	3315      	adds	r3, #21
 8006dfa:	b2d8      	uxtb	r0, r3
 8006dfc:	4b37      	ldr	r3, [pc, #220]	; (8006edc <drawFrame+0x290>)
 8006dfe:	795b      	ldrb	r3, [r3, #5]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2301      	movs	r3, #1
 8006e04:	4a43      	ldr	r2, [pc, #268]	; (8006f14 <drawFrame+0x2c8>)
 8006e06:	210f      	movs	r1, #15
 8006e08:	f7ff fa44 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(tmpVar + 36, 15, "J", 1, settings.contrast);
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	3324      	adds	r3, #36	; 0x24
 8006e10:	b2d8      	uxtb	r0, r3
 8006e12:	4b32      	ldr	r3, [pc, #200]	; (8006edc <drawFrame+0x290>)
 8006e14:	795b      	ldrb	r3, [r3, #5]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4a3f      	ldr	r2, [pc, #252]	; (8006f18 <drawFrame+0x2cc>)
 8006e1c:	210f      	movs	r1, #15
 8006e1e:	f7ff fa39 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(18, 34, frame.thirdLine, 1, settings.contrast);
 8006e22:	4b2e      	ldr	r3, [pc, #184]	; (8006edc <drawFrame+0x290>)
 8006e24:	795b      	ldrb	r3, [r3, #5]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	2301      	movs	r3, #1
 8006e2a:	4a3c      	ldr	r2, [pc, #240]	; (8006f1c <drawFrame+0x2d0>)
 8006e2c:	2122      	movs	r1, #34	; 0x22
 8006e2e:	2012      	movs	r0, #18
 8006e30:	f7ff fa30 	bl	8006294 <OLED_PutStr>
				OLED_bitmap(tmpVar + 18, 15, b8);		//pierwsza litera I
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	3312      	adds	r3, #18
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	4a39      	ldr	r2, [pc, #228]	; (8006f20 <drawFrame+0x2d4>)
 8006e3c:	210f      	movs	r1, #15
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff fac4 	bl	80063cc <OLED_bitmap>
				OLED_bitmap(tmpVar + 33, 15, b8);		//druga
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	3321      	adds	r3, #33	; 0x21
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	4a35      	ldr	r2, [pc, #212]	; (8006f20 <drawFrame+0x2d4>)
 8006e4c:	210f      	movs	r1, #15
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff fabc 	bl	80063cc <OLED_bitmap>
				OLED_bitmap(tmpVar + 22, 11, b1);		// kreska nad litera s
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	3316      	adds	r3, #22
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	4a32      	ldr	r2, [pc, #200]	; (8006f24 <drawFrame+0x2d8>)
 8006e5c:	210b      	movs	r1, #11
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fab4 	bl	80063cc <OLED_bitmap>
 8006e64:	e011      	b.n	8006e8a <drawFrame+0x23e>
			}
			else	//dla całej reszty normalnie
			{
				OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <drawFrame+0x290>)
 8006e68:	795b      	ldrb	r3, [r3, #5]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <drawFrame+0x29c>)
 8006e70:	210f      	movs	r1, #15
 8006e72:	2003      	movs	r0, #3
 8006e74:	f7ff fa0e 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 8006e78:	4b18      	ldr	r3, [pc, #96]	; (8006edc <drawFrame+0x290>)
 8006e7a:	795b      	ldrb	r3, [r3, #5]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <drawFrame+0x2d0>)
 8006e82:	2122      	movs	r1, #34	; 0x22
 8006e84:	2003      	movs	r0, #3
 8006e86:	f7ff fa05 	bl	8006294 <OLED_PutStr>
			}
// Koniec specjalnego warunku
			sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", gDate.Date, gDate.Month, gDate.Year+2000, gTime.Hours,gTime.Minutes,gTime.Seconds);
 8006e8a:	4b18      	ldr	r3, [pc, #96]	; (8006eec <drawFrame+0x2a0>)
 8006e8c:	789b      	ldrb	r3, [r3, #2]
 8006e8e:	461c      	mov	r4, r3
 8006e90:	4b16      	ldr	r3, [pc, #88]	; (8006eec <drawFrame+0x2a0>)
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	461d      	mov	r5, r3
 8006e96:	4b15      	ldr	r3, [pc, #84]	; (8006eec <drawFrame+0x2a0>)
 8006e98:	78db      	ldrb	r3, [r3, #3]
 8006e9a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006e9e:	4a14      	ldr	r2, [pc, #80]	; (8006ef0 <drawFrame+0x2a4>)
 8006ea0:	7812      	ldrb	r2, [r2, #0]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <drawFrame+0x2a4>)
 8006ea6:	7852      	ldrb	r2, [r2, #1]
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4a11      	ldr	r2, [pc, #68]	; (8006ef0 <drawFrame+0x2a4>)
 8006eac:	7892      	ldrb	r2, [r2, #2]
 8006eae:	9203      	str	r2, [sp, #12]
 8006eb0:	9002      	str	r0, [sp, #8]
 8006eb2:	9101      	str	r1, [sp, #4]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	4622      	mov	r2, r4
 8006eba:	490e      	ldr	r1, [pc, #56]	; (8006ef4 <drawFrame+0x2a8>)
 8006ebc:	480e      	ldr	r0, [pc, #56]	; (8006ef8 <drawFrame+0x2ac>)
 8006ebe:	f004 ff6d 	bl	800bd9c <siprintf>
			OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <drawFrame+0x290>)
 8006ec4:	795b      	ldrb	r3, [r3, #5]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4a0b      	ldr	r2, [pc, #44]	; (8006ef8 <drawFrame+0x2ac>)
 8006ecc:	2138      	movs	r1, #56	; 0x38
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7ff f9e0 	bl	8006294 <OLED_PutStr>
			break;
 8006ed4:	f001 bdfe 	b.w	8008ad4 <drawFrame+0x1e88>
 8006ed8:	20001244 	.word	0x20001244
 8006edc:	200006c4 	.word	0x200006c4
 8006ee0:	08012de4 	.word	0x08012de4
 8006ee4:	20001245 	.word	0x20001245
 8006ee8:	2000125d 	.word	0x2000125d
 8006eec:	200006a0 	.word	0x200006a0
 8006ef0:	2000068c 	.word	0x2000068c
 8006ef4:	08013510 	.word	0x08013510
 8006ef8:	2000128d 	.word	0x2000128d
 8006efc:	20000bf4 	.word	0x20000bf4
 8006f00:	08013530 	.word	0x08013530
 8006f04:	200012b2 	.word	0x200012b2
 8006f08:	08013538 	.word	0x08013538
 8006f0c:	200006a8 	.word	0x200006a8
 8006f10:	08013540 	.word	0x08013540
 8006f14:	08013544 	.word	0x08013544
 8006f18:	08013548 	.word	0x08013548
 8006f1c:	20001275 	.word	0x20001275
 8006f20:	08010134 	.word	0x08010134
 8006f24:	080100f8 	.word	0x080100f8



		case FRAME_ARCHIVE_BROWSE:
			if (frame.value > frame.valueMax) frame.value = frame.valueMin;
 8006f28:	4b97      	ldr	r3, [pc, #604]	; (8007188 <drawFrame+0x53c>)
 8006f2a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8006f2e:	4b96      	ldr	r3, [pc, #600]	; (8007188 <drawFrame+0x53c>)
 8006f30:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d905      	bls.n	8006f44 <drawFrame+0x2f8>
 8006f38:	4b93      	ldr	r3, [pc, #588]	; (8007188 <drawFrame+0x53c>)
 8006f3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8006f3e:	4b92      	ldr	r3, [pc, #584]	; (8007188 <drawFrame+0x53c>)
 8006f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			if (frame.value < frame.valueMin) frame.value = frame.valueMax;
 8006f44:	4b90      	ldr	r3, [pc, #576]	; (8007188 <drawFrame+0x53c>)
 8006f46:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8006f4a:	4b8f      	ldr	r3, [pc, #572]	; (8007188 <drawFrame+0x53c>)
 8006f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d205      	bcs.n	8006f60 <drawFrame+0x314>
 8006f54:	4b8c      	ldr	r3, [pc, #560]	; (8007188 <drawFrame+0x53c>)
 8006f56:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8006f5a:	4b8b      	ldr	r3, [pc, #556]	; (8007188 <drawFrame+0x53c>)
 8006f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

			if (settings.archiveEntriesTotal == 0)		//jak archiwum puste
 8006f60:	4b8a      	ldr	r3, [pc, #552]	; (800718c <drawFrame+0x540>)
 8006f62:	7a1b      	ldrb	r3, [r3, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d15a      	bne.n	800701e <drawFrame+0x3d2>
			{
				if (settings.language == POLISH)
 8006f68:	4b88      	ldr	r3, [pc, #544]	; (800718c <drawFrame+0x540>)
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d123      	bne.n	8006fb8 <drawFrame+0x36c>
				{
					OLED_PutStr(20, 15, Archive[3][settings.language], 1, settings.contrast);
 8006f70:	4b86      	ldr	r3, [pc, #536]	; (800718c <drawFrame+0x540>)
 8006f72:	791b      	ldrb	r3, [r3, #4]
 8006f74:	461a      	mov	r2, r3
 8006f76:	4613      	mov	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	3354      	adds	r3, #84	; 0x54
 8006f80:	4a83      	ldr	r2, [pc, #524]	; (8007190 <drawFrame+0x544>)
 8006f82:	441a      	add	r2, r3
 8006f84:	4b81      	ldr	r3, [pc, #516]	; (800718c <drawFrame+0x540>)
 8006f86:	795b      	ldrb	r3, [r3, #5]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	210f      	movs	r1, #15
 8006f8e:	2014      	movs	r0, #20
 8006f90:	f7ff f980 	bl	8006294 <OLED_PutStr>
					OLED_PutStr(8, 34, Archive[7][settings.language], 1, settings.contrast);
 8006f94:	4b7d      	ldr	r3, [pc, #500]	; (800718c <drawFrame+0x540>)
 8006f96:	791b      	ldrb	r3, [r3, #4]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	33c4      	adds	r3, #196	; 0xc4
 8006fa4:	4a7a      	ldr	r2, [pc, #488]	; (8007190 <drawFrame+0x544>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	4b78      	ldr	r3, [pc, #480]	; (800718c <drawFrame+0x540>)
 8006faa:	795b      	ldrb	r3, [r3, #5]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2301      	movs	r3, #1
 8006fb0:	2122      	movs	r1, #34	; 0x22
 8006fb2:	2008      	movs	r0, #8
 8006fb4:	f7ff f96e 	bl	8006294 <OLED_PutStr>
				}
				if (settings.language == ENGLISH)
 8006fb8:	4b74      	ldr	r3, [pc, #464]	; (800718c <drawFrame+0x540>)
 8006fba:	791b      	ldrb	r3, [r3, #4]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d123      	bne.n	8007008 <drawFrame+0x3bc>
				{
					OLED_PutStr(25, 15, Archive[3][settings.language], 1, settings.contrast);
 8006fc0:	4b72      	ldr	r3, [pc, #456]	; (800718c <drawFrame+0x540>)
 8006fc2:	791b      	ldrb	r3, [r3, #4]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	3354      	adds	r3, #84	; 0x54
 8006fd0:	4a6f      	ldr	r2, [pc, #444]	; (8007190 <drawFrame+0x544>)
 8006fd2:	441a      	add	r2, r3
 8006fd4:	4b6d      	ldr	r3, [pc, #436]	; (800718c <drawFrame+0x540>)
 8006fd6:	795b      	ldrb	r3, [r3, #5]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	2301      	movs	r3, #1
 8006fdc:	210f      	movs	r1, #15
 8006fde:	2019      	movs	r0, #25
 8006fe0:	f7ff f958 	bl	8006294 <OLED_PutStr>
					OLED_PutStr(11, 34, Archive[7][settings.language], 1, settings.contrast);
 8006fe4:	4b69      	ldr	r3, [pc, #420]	; (800718c <drawFrame+0x540>)
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4613      	mov	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	33c4      	adds	r3, #196	; 0xc4
 8006ff4:	4a66      	ldr	r2, [pc, #408]	; (8007190 <drawFrame+0x544>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	4b64      	ldr	r3, [pc, #400]	; (800718c <drawFrame+0x540>)
 8006ffa:	795b      	ldrb	r3, [r3, #5]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	2301      	movs	r3, #1
 8007000:	2122      	movs	r1, #34	; 0x22
 8007002:	200b      	movs	r0, #11
 8007004:	f7ff f946 	bl	8006294 <OLED_PutStr>
				}
			 	HAL_Delay(ARCHIVE_INFO_SCREEN_DELAY);
 8007008:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800700c:	f7f9 ffe2 	bl	8000fd4 <HAL_Delay>
				OLED_CLEAR();
 8007010:	f7fe fe5d 	bl	8005cce <OLED_CLEAR>
				frame.type = FRAME_MAIN_MENU;
 8007014:	4b5c      	ldr	r3, [pc, #368]	; (8007188 <drawFrame+0x53c>)
 8007016:	2201      	movs	r2, #1
 8007018:	701a      	strb	r2, [r3, #0]
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
					}
				}

			}
			break;
 800701a:	f001 bd58 	b.w	8008ace <drawFrame+0x1e82>
				if (settings.measurementUnit == UNIT_BRIX)
 800701e:	4b5b      	ldr	r3, [pc, #364]	; (800718c <drawFrame+0x540>)
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 8237 	bne.w	8007496 <drawFrame+0x84a>
					if (settings.thermalCompensation == OFF)
 8007028:	4b58      	ldr	r3, [pc, #352]	; (800718c <drawFrame+0x540>)
 800702a:	789b      	ldrb	r3, [r3, #2]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 8117 	bne.w	8007260 <drawFrame+0x614>
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8007032:	4b55      	ldr	r3, [pc, #340]	; (8007188 <drawFrame+0x53c>)
 8007034:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007038:	2b09      	cmp	r3, #9
 800703a:	d82e      	bhi.n	800709a <drawFrame+0x44e>
 800703c:	4b53      	ldr	r3, [pc, #332]	; (800718c <drawFrame+0x540>)
 800703e:	791b      	ldrb	r3, [r3, #4]
 8007040:	461a      	mov	r2, r3
 8007042:	4613      	mov	r3, r2
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	33c4      	adds	r3, #196	; 0xc4
 800704c:	4a50      	ldr	r2, [pc, #320]	; (8007190 <drawFrame+0x544>)
 800704e:	1899      	adds	r1, r3, r2
 8007050:	4b4e      	ldr	r3, [pc, #312]	; (800718c <drawFrame+0x540>)
 8007052:	791b      	ldrb	r3, [r3, #4]
 8007054:	461a      	mov	r2, r3
 8007056:	4613      	mov	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	33fc      	adds	r3, #252	; 0xfc
 8007060:	4a4b      	ldr	r2, [pc, #300]	; (8007190 <drawFrame+0x544>)
 8007062:	1898      	adds	r0, r3, r2
 8007064:	4b48      	ldr	r3, [pc, #288]	; (8007188 <drawFrame+0x53c>)
 8007066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	4b47      	ldr	r3, [pc, #284]	; (800718c <drawFrame+0x540>)
 800706e:	791b      	ldrb	r3, [r3, #4]
 8007070:	461c      	mov	r4, r3
 8007072:	4623      	mov	r3, r4
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	1b1b      	subs	r3, r3, r4
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800707e:	4c44      	ldr	r4, [pc, #272]	; (8007190 <drawFrame+0x544>)
 8007080:	4423      	add	r3, r4
 8007082:	4c42      	ldr	r4, [pc, #264]	; (800718c <drawFrame+0x540>)
 8007084:	7a24      	ldrb	r4, [r4, #8]
 8007086:	9402      	str	r4, [sp, #8]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	9200      	str	r2, [sp, #0]
 800708c:	4603      	mov	r3, r0
 800708e:	460a      	mov	r2, r1
 8007090:	4940      	ldr	r1, [pc, #256]	; (8007194 <drawFrame+0x548>)
 8007092:	4841      	ldr	r0, [pc, #260]	; (8007198 <drawFrame+0x54c>)
 8007094:	f004 fe82 	bl	800bd9c <siprintf>
 8007098:	e02d      	b.n	80070f6 <drawFrame+0x4aa>
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 800709a:	4b3c      	ldr	r3, [pc, #240]	; (800718c <drawFrame+0x540>)
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	461a      	mov	r2, r3
 80070a0:	4613      	mov	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	33c4      	adds	r3, #196	; 0xc4
 80070aa:	4a39      	ldr	r2, [pc, #228]	; (8007190 <drawFrame+0x544>)
 80070ac:	1899      	adds	r1, r3, r2
 80070ae:	4b37      	ldr	r3, [pc, #220]	; (800718c <drawFrame+0x540>)
 80070b0:	791b      	ldrb	r3, [r3, #4]
 80070b2:	461a      	mov	r2, r3
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	33fc      	adds	r3, #252	; 0xfc
 80070be:	4a34      	ldr	r2, [pc, #208]	; (8007190 <drawFrame+0x544>)
 80070c0:	1898      	adds	r0, r3, r2
 80070c2:	4b31      	ldr	r3, [pc, #196]	; (8007188 <drawFrame+0x53c>)
 80070c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	4b30      	ldr	r3, [pc, #192]	; (800718c <drawFrame+0x540>)
 80070cc:	791b      	ldrb	r3, [r3, #4]
 80070ce:	461c      	mov	r4, r3
 80070d0:	4623      	mov	r3, r4
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	1b1b      	subs	r3, r3, r4
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80070dc:	4c2c      	ldr	r4, [pc, #176]	; (8007190 <drawFrame+0x544>)
 80070de:	4423      	add	r3, r4
 80070e0:	4c2a      	ldr	r4, [pc, #168]	; (800718c <drawFrame+0x540>)
 80070e2:	7a24      	ldrb	r4, [r4, #8]
 80070e4:	9402      	str	r4, [sp, #8]
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	9200      	str	r2, [sp, #0]
 80070ea:	4603      	mov	r3, r0
 80070ec:	460a      	mov	r2, r1
 80070ee:	492b      	ldr	r1, [pc, #172]	; (800719c <drawFrame+0x550>)
 80070f0:	4829      	ldr	r0, [pc, #164]	; (8007198 <drawFrame+0x54c>)
 80070f2:	f004 fe53 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 80070f6:	4b25      	ldr	r3, [pc, #148]	; (800718c <drawFrame+0x540>)
 80070f8:	795b      	ldrb	r3, [r3, #5]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	4a26      	ldr	r2, [pc, #152]	; (8007198 <drawFrame+0x54c>)
 8007100:	2101      	movs	r1, #1
 8007102:	2000      	movs	r0, #0
 8007104:	f7ff f8c6 	bl	8006294 <OLED_PutStr>
						if (ArchiveEntry.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brix);
 8007108:	4b25      	ldr	r3, [pc, #148]	; (80071a0 <drawFrame+0x554>)
 800710a:	edd3 7a05 	vldr	s15, [r3, #20]
 800710e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711a:	db0b      	blt.n	8007134 <drawFrame+0x4e8>
 800711c:	4b20      	ldr	r3, [pc, #128]	; (80071a0 <drawFrame+0x554>)
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	4618      	mov	r0, r3
 8007122:	f7f9 fa39 	bl	8000598 <__aeabi_f2d>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	491e      	ldr	r1, [pc, #120]	; (80071a4 <drawFrame+0x558>)
 800712c:	481e      	ldr	r0, [pc, #120]	; (80071a8 <drawFrame+0x55c>)
 800712e:	f004 fe35 	bl	800bd9c <siprintf>
 8007132:	e052      	b.n	80071da <drawFrame+0x58e>
						else if(ArchiveEntry.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", ArchiveEntry.brix);
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <drawFrame+0x554>)
 8007136:	edd3 7a05 	vldr	s15, [r3, #20]
 800713a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	db0b      	blt.n	800715c <drawFrame+0x510>
 8007144:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <drawFrame+0x554>)
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	4618      	mov	r0, r3
 800714a:	f7f9 fa25 	bl	8000598 <__aeabi_f2d>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4916      	ldr	r1, [pc, #88]	; (80071ac <drawFrame+0x560>)
 8007154:	4814      	ldr	r0, [pc, #80]	; (80071a8 <drawFrame+0x55c>)
 8007156:	f004 fe21 	bl	800bd9c <siprintf>
 800715a:	e03e      	b.n	80071da <drawFrame+0x58e>
						else if(ArchiveEntry.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brix);
 800715c:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <drawFrame+0x554>)
 800715e:	edd3 7a05 	vldr	s15, [r3, #20]
 8007162:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8007166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716e:	dd1f      	ble.n	80071b0 <drawFrame+0x564>
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <drawFrame+0x554>)
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	4618      	mov	r0, r3
 8007176:	f7f9 fa0f 	bl	8000598 <__aeabi_f2d>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4909      	ldr	r1, [pc, #36]	; (80071a4 <drawFrame+0x558>)
 8007180:	4809      	ldr	r0, [pc, #36]	; (80071a8 <drawFrame+0x55c>)
 8007182:	f004 fe0b 	bl	800bd9c <siprintf>
 8007186:	e028      	b.n	80071da <drawFrame+0x58e>
 8007188:	20001244 	.word	0x20001244
 800718c:	200006c4 	.word	0x200006c4
 8007190:	080132e8 	.word	0x080132e8
 8007194:	0801354c 	.word	0x0801354c
 8007198:	20001245 	.word	0x20001245
 800719c:	08013560 	.word	0x08013560
 80071a0:	200006d0 	.word	0x200006d0
 80071a4:	08013570 	.word	0x08013570
 80071a8:	2000125d 	.word	0x2000125d
 80071ac:	0801357c 	.word	0x0801357c
						else if(ArchiveEntry.brix <= -10) sprintf(frame.secondLine," %2.2f %% ", ArchiveEntry.brix);
 80071b0:	4b81      	ldr	r3, [pc, #516]	; (80073b8 <drawFrame+0x76c>)
 80071b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80071b6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80071ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c2:	d80a      	bhi.n	80071da <drawFrame+0x58e>
 80071c4:	4b7c      	ldr	r3, [pc, #496]	; (80073b8 <drawFrame+0x76c>)
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7f9 f9e5 	bl	8000598 <__aeabi_f2d>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	497a      	ldr	r1, [pc, #488]	; (80073bc <drawFrame+0x770>)
 80071d4:	487a      	ldr	r0, [pc, #488]	; (80073c0 <drawFrame+0x774>)
 80071d6:	f004 fde1 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 80071da:	4b7a      	ldr	r3, [pc, #488]	; (80073c4 <drawFrame+0x778>)
 80071dc:	795b      	ldrb	r3, [r3, #5]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2301      	movs	r3, #1
 80071e2:	4a77      	ldr	r2, [pc, #476]	; (80073c0 <drawFrame+0x774>)
 80071e4:	210f      	movs	r1, #15
 80071e6:	2003      	movs	r0, #3
 80071e8:	f7ff f854 	bl	8006294 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %2.2f \x7B\x43 ", ArchiveEntry.temperature);
 80071ec:	4b72      	ldr	r3, [pc, #456]	; (80073b8 <drawFrame+0x76c>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7f9 f9d1 	bl	8000598 <__aeabi_f2d>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4973      	ldr	r1, [pc, #460]	; (80073c8 <drawFrame+0x77c>)
 80071fc:	4873      	ldr	r0, [pc, #460]	; (80073cc <drawFrame+0x780>)
 80071fe:	f004 fdcd 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 8007202:	4b70      	ldr	r3, [pc, #448]	; (80073c4 <drawFrame+0x778>)
 8007204:	795b      	ldrb	r3, [r3, #5]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	2301      	movs	r3, #1
 800720a:	4a70      	ldr	r2, [pc, #448]	; (80073cc <drawFrame+0x780>)
 800720c:	2122      	movs	r1, #34	; 0x22
 800720e:	2003      	movs	r0, #3
 8007210:	f7ff f840 	bl	8006294 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 8007214:	4b68      	ldr	r3, [pc, #416]	; (80073b8 <drawFrame+0x76c>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	461c      	mov	r4, r3
 800721a:	4b67      	ldr	r3, [pc, #412]	; (80073b8 <drawFrame+0x76c>)
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	461d      	mov	r5, r3
 8007220:	4b65      	ldr	r3, [pc, #404]	; (80073b8 <drawFrame+0x76c>)
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007228:	4a63      	ldr	r2, [pc, #396]	; (80073b8 <drawFrame+0x76c>)
 800722a:	78d2      	ldrb	r2, [r2, #3]
 800722c:	4611      	mov	r1, r2
 800722e:	4a62      	ldr	r2, [pc, #392]	; (80073b8 <drawFrame+0x76c>)
 8007230:	7912      	ldrb	r2, [r2, #4]
 8007232:	4610      	mov	r0, r2
 8007234:	4a60      	ldr	r2, [pc, #384]	; (80073b8 <drawFrame+0x76c>)
 8007236:	7952      	ldrb	r2, [r2, #5]
 8007238:	9203      	str	r2, [sp, #12]
 800723a:	9002      	str	r0, [sp, #8]
 800723c:	9101      	str	r1, [sp, #4]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	462b      	mov	r3, r5
 8007242:	4622      	mov	r2, r4
 8007244:	4962      	ldr	r1, [pc, #392]	; (80073d0 <drawFrame+0x784>)
 8007246:	4863      	ldr	r0, [pc, #396]	; (80073d4 <drawFrame+0x788>)
 8007248:	f004 fda8 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 800724c:	4b5d      	ldr	r3, [pc, #372]	; (80073c4 <drawFrame+0x778>)
 800724e:	795b      	ldrb	r3, [r3, #5]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	2300      	movs	r3, #0
 8007254:	4a5f      	ldr	r2, [pc, #380]	; (80073d4 <drawFrame+0x788>)
 8007256:	2138      	movs	r1, #56	; 0x38
 8007258:	2000      	movs	r0, #0
 800725a:	f7ff f81b 	bl	8006294 <OLED_PutStr>
 800725e:	e11a      	b.n	8007496 <drawFrame+0x84a>
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8007260:	4b5d      	ldr	r3, [pc, #372]	; (80073d8 <drawFrame+0x78c>)
 8007262:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007266:	2b09      	cmp	r3, #9
 8007268:	d82e      	bhi.n	80072c8 <drawFrame+0x67c>
 800726a:	4b56      	ldr	r3, [pc, #344]	; (80073c4 <drawFrame+0x778>)
 800726c:	791b      	ldrb	r3, [r3, #4]
 800726e:	461a      	mov	r2, r3
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	33c4      	adds	r3, #196	; 0xc4
 800727a:	4a58      	ldr	r2, [pc, #352]	; (80073dc <drawFrame+0x790>)
 800727c:	1899      	adds	r1, r3, r2
 800727e:	4b51      	ldr	r3, [pc, #324]	; (80073c4 <drawFrame+0x778>)
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	33fc      	adds	r3, #252	; 0xfc
 800728e:	4a53      	ldr	r2, [pc, #332]	; (80073dc <drawFrame+0x790>)
 8007290:	1898      	adds	r0, r3, r2
 8007292:	4b51      	ldr	r3, [pc, #324]	; (80073d8 <drawFrame+0x78c>)
 8007294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	4b4a      	ldr	r3, [pc, #296]	; (80073c4 <drawFrame+0x778>)
 800729c:	791b      	ldrb	r3, [r3, #4]
 800729e:	461c      	mov	r4, r3
 80072a0:	4623      	mov	r3, r4
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	1b1b      	subs	r3, r3, r4
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80072ac:	4c4b      	ldr	r4, [pc, #300]	; (80073dc <drawFrame+0x790>)
 80072ae:	4423      	add	r3, r4
 80072b0:	4c44      	ldr	r4, [pc, #272]	; (80073c4 <drawFrame+0x778>)
 80072b2:	7a24      	ldrb	r4, [r4, #8]
 80072b4:	9402      	str	r4, [sp, #8]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	9200      	str	r2, [sp, #0]
 80072ba:	4603      	mov	r3, r0
 80072bc:	460a      	mov	r2, r1
 80072be:	4948      	ldr	r1, [pc, #288]	; (80073e0 <drawFrame+0x794>)
 80072c0:	4848      	ldr	r0, [pc, #288]	; (80073e4 <drawFrame+0x798>)
 80072c2:	f004 fd6b 	bl	800bd9c <siprintf>
 80072c6:	e02d      	b.n	8007324 <drawFrame+0x6d8>
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 80072c8:	4b3e      	ldr	r3, [pc, #248]	; (80073c4 <drawFrame+0x778>)
 80072ca:	791b      	ldrb	r3, [r3, #4]
 80072cc:	461a      	mov	r2, r3
 80072ce:	4613      	mov	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	33c4      	adds	r3, #196	; 0xc4
 80072d8:	4a40      	ldr	r2, [pc, #256]	; (80073dc <drawFrame+0x790>)
 80072da:	1899      	adds	r1, r3, r2
 80072dc:	4b39      	ldr	r3, [pc, #228]	; (80073c4 <drawFrame+0x778>)
 80072de:	791b      	ldrb	r3, [r3, #4]
 80072e0:	461a      	mov	r2, r3
 80072e2:	4613      	mov	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	33fc      	adds	r3, #252	; 0xfc
 80072ec:	4a3b      	ldr	r2, [pc, #236]	; (80073dc <drawFrame+0x790>)
 80072ee:	1898      	adds	r0, r3, r2
 80072f0:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <drawFrame+0x78c>)
 80072f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	4b32      	ldr	r3, [pc, #200]	; (80073c4 <drawFrame+0x778>)
 80072fa:	791b      	ldrb	r3, [r3, #4]
 80072fc:	461c      	mov	r4, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	1b1b      	subs	r3, r3, r4
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800730a:	4c34      	ldr	r4, [pc, #208]	; (80073dc <drawFrame+0x790>)
 800730c:	4423      	add	r3, r4
 800730e:	4c2d      	ldr	r4, [pc, #180]	; (80073c4 <drawFrame+0x778>)
 8007310:	7a24      	ldrb	r4, [r4, #8]
 8007312:	9402      	str	r4, [sp, #8]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	9200      	str	r2, [sp, #0]
 8007318:	4603      	mov	r3, r0
 800731a:	460a      	mov	r2, r1
 800731c:	4932      	ldr	r1, [pc, #200]	; (80073e8 <drawFrame+0x79c>)
 800731e:	4831      	ldr	r0, [pc, #196]	; (80073e4 <drawFrame+0x798>)
 8007320:	f004 fd3c 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 8007324:	4b27      	ldr	r3, [pc, #156]	; (80073c4 <drawFrame+0x778>)
 8007326:	795b      	ldrb	r3, [r3, #5]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	2300      	movs	r3, #0
 800732c:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <drawFrame+0x798>)
 800732e:	2101      	movs	r1, #1
 8007330:	2000      	movs	r0, #0
 8007332:	f7fe ffaf 	bl	8006294 <OLED_PutStr>
						if (ArchiveEntry.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brixk);
 8007336:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <drawFrame+0x76c>)
 8007338:	edd3 7a06 	vldr	s15, [r3, #24]
 800733c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007348:	db0b      	blt.n	8007362 <drawFrame+0x716>
 800734a:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <drawFrame+0x76c>)
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	4618      	mov	r0, r3
 8007350:	f7f9 f922 	bl	8000598 <__aeabi_f2d>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4924      	ldr	r1, [pc, #144]	; (80073ec <drawFrame+0x7a0>)
 800735a:	4819      	ldr	r0, [pc, #100]	; (80073c0 <drawFrame+0x774>)
 800735c:	f004 fd1e 	bl	800bd9c <siprintf>
 8007360:	e05d      	b.n	800741e <drawFrame+0x7d2>
						else if(ArchiveEntry.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", ArchiveEntry.brixk);
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <drawFrame+0x76c>)
 8007364:	edd3 7a06 	vldr	s15, [r3, #24]
 8007368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007370:	db0b      	blt.n	800738a <drawFrame+0x73e>
 8007372:	4b11      	ldr	r3, [pc, #68]	; (80073b8 <drawFrame+0x76c>)
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	4618      	mov	r0, r3
 8007378:	f7f9 f90e 	bl	8000598 <__aeabi_f2d>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	491b      	ldr	r1, [pc, #108]	; (80073f0 <drawFrame+0x7a4>)
 8007382:	480f      	ldr	r0, [pc, #60]	; (80073c0 <drawFrame+0x774>)
 8007384:	f004 fd0a 	bl	800bd9c <siprintf>
 8007388:	e049      	b.n	800741e <drawFrame+0x7d2>
						else if(ArchiveEntry.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", ArchiveEntry.brixk);
 800738a:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <drawFrame+0x76c>)
 800738c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007390:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8007394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	dd2a      	ble.n	80073f4 <drawFrame+0x7a8>
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <drawFrame+0x76c>)
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f9 f8f8 	bl	8000598 <__aeabi_f2d>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	490f      	ldr	r1, [pc, #60]	; (80073ec <drawFrame+0x7a0>)
 80073ae:	4804      	ldr	r0, [pc, #16]	; (80073c0 <drawFrame+0x774>)
 80073b0:	f004 fcf4 	bl	800bd9c <siprintf>
 80073b4:	e033      	b.n	800741e <drawFrame+0x7d2>
 80073b6:	bf00      	nop
 80073b8:	200006d0 	.word	0x200006d0
 80073bc:	0801358c 	.word	0x0801358c
 80073c0:	2000125d 	.word	0x2000125d
 80073c4:	200006c4 	.word	0x200006c4
 80073c8:	08013598 	.word	0x08013598
 80073cc:	20001275 	.word	0x20001275
 80073d0:	08013510 	.word	0x08013510
 80073d4:	2000128d 	.word	0x2000128d
 80073d8:	20001244 	.word	0x20001244
 80073dc:	080132e8 	.word	0x080132e8
 80073e0:	0801354c 	.word	0x0801354c
 80073e4:	20001245 	.word	0x20001245
 80073e8:	08013560 	.word	0x08013560
 80073ec:	08013570 	.word	0x08013570
 80073f0:	0801357c 	.word	0x0801357c
						else if(ArchiveEntry.brixk <= -10) sprintf(frame.secondLine," %2.2f %% ", ArchiveEntry.brixk);
 80073f4:	4ba4      	ldr	r3, [pc, #656]	; (8007688 <drawFrame+0xa3c>)
 80073f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80073fa:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80073fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007406:	d80a      	bhi.n	800741e <drawFrame+0x7d2>
 8007408:	4b9f      	ldr	r3, [pc, #636]	; (8007688 <drawFrame+0xa3c>)
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	4618      	mov	r0, r3
 800740e:	f7f9 f8c3 	bl	8000598 <__aeabi_f2d>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	499d      	ldr	r1, [pc, #628]	; (800768c <drawFrame+0xa40>)
 8007418:	489d      	ldr	r0, [pc, #628]	; (8007690 <drawFrame+0xa44>)
 800741a:	f004 fcbf 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 800741e:	4b9d      	ldr	r3, [pc, #628]	; (8007694 <drawFrame+0xa48>)
 8007420:	795b      	ldrb	r3, [r3, #5]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	2301      	movs	r3, #1
 8007426:	4a9a      	ldr	r2, [pc, #616]	; (8007690 <drawFrame+0xa44>)
 8007428:	210f      	movs	r1, #15
 800742a:	2003      	movs	r0, #3
 800742c:	f7fe ff32 	bl	8006294 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %d.00 \x7B\x43 ", 20);
 8007430:	2214      	movs	r2, #20
 8007432:	4999      	ldr	r1, [pc, #612]	; (8007698 <drawFrame+0xa4c>)
 8007434:	4899      	ldr	r0, [pc, #612]	; (800769c <drawFrame+0xa50>)
 8007436:	f004 fcb1 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 800743a:	4b96      	ldr	r3, [pc, #600]	; (8007694 <drawFrame+0xa48>)
 800743c:	795b      	ldrb	r3, [r3, #5]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	2301      	movs	r3, #1
 8007442:	4a96      	ldr	r2, [pc, #600]	; (800769c <drawFrame+0xa50>)
 8007444:	2122      	movs	r1, #34	; 0x22
 8007446:	2003      	movs	r0, #3
 8007448:	f7fe ff24 	bl	8006294 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 800744c:	4b8e      	ldr	r3, [pc, #568]	; (8007688 <drawFrame+0xa3c>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	461c      	mov	r4, r3
 8007452:	4b8d      	ldr	r3, [pc, #564]	; (8007688 <drawFrame+0xa3c>)
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	461d      	mov	r5, r3
 8007458:	4b8b      	ldr	r3, [pc, #556]	; (8007688 <drawFrame+0xa3c>)
 800745a:	789b      	ldrb	r3, [r3, #2]
 800745c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007460:	4a89      	ldr	r2, [pc, #548]	; (8007688 <drawFrame+0xa3c>)
 8007462:	78d2      	ldrb	r2, [r2, #3]
 8007464:	4611      	mov	r1, r2
 8007466:	4a88      	ldr	r2, [pc, #544]	; (8007688 <drawFrame+0xa3c>)
 8007468:	7912      	ldrb	r2, [r2, #4]
 800746a:	4610      	mov	r0, r2
 800746c:	4a86      	ldr	r2, [pc, #536]	; (8007688 <drawFrame+0xa3c>)
 800746e:	7952      	ldrb	r2, [r2, #5]
 8007470:	9203      	str	r2, [sp, #12]
 8007472:	9002      	str	r0, [sp, #8]
 8007474:	9101      	str	r1, [sp, #4]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	462b      	mov	r3, r5
 800747a:	4622      	mov	r2, r4
 800747c:	4988      	ldr	r1, [pc, #544]	; (80076a0 <drawFrame+0xa54>)
 800747e:	4889      	ldr	r0, [pc, #548]	; (80076a4 <drawFrame+0xa58>)
 8007480:	f004 fc8c 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8007484:	4b83      	ldr	r3, [pc, #524]	; (8007694 <drawFrame+0xa48>)
 8007486:	795b      	ldrb	r3, [r3, #5]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	2300      	movs	r3, #0
 800748c:	4a85      	ldr	r2, [pc, #532]	; (80076a4 <drawFrame+0xa58>)
 800748e:	2138      	movs	r1, #56	; 0x38
 8007490:	2000      	movs	r0, #0
 8007492:	f7fe feff 	bl	8006294 <OLED_PutStr>
				if(settings.measurementUnit == UNIT_RI)
 8007496:	4b7f      	ldr	r3, [pc, #508]	; (8007694 <drawFrame+0xa48>)
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	2b01      	cmp	r3, #1
 800749c:	f041 8317 	bne.w	8008ace <drawFrame+0x1e82>
					if (settings.thermalCompensation == OFF)
 80074a0:	4b7c      	ldr	r3, [pc, #496]	; (8007694 <drawFrame+0xa48>)
 80074a2:	789b      	ldrb	r3, [r3, #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f040 80ba 	bne.w	800761e <drawFrame+0x9d2>
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 80074aa:	4b7f      	ldr	r3, [pc, #508]	; (80076a8 <drawFrame+0xa5c>)
 80074ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074b0:	2b09      	cmp	r3, #9
 80074b2:	d82e      	bhi.n	8007512 <drawFrame+0x8c6>
 80074b4:	4b77      	ldr	r3, [pc, #476]	; (8007694 <drawFrame+0xa48>)
 80074b6:	791b      	ldrb	r3, [r3, #4]
 80074b8:	461a      	mov	r2, r3
 80074ba:	4613      	mov	r3, r2
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	33c4      	adds	r3, #196	; 0xc4
 80074c4:	4a79      	ldr	r2, [pc, #484]	; (80076ac <drawFrame+0xa60>)
 80074c6:	1899      	adds	r1, r3, r2
 80074c8:	4b72      	ldr	r3, [pc, #456]	; (8007694 <drawFrame+0xa48>)
 80074ca:	791b      	ldrb	r3, [r3, #4]
 80074cc:	461a      	mov	r2, r3
 80074ce:	4613      	mov	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	33fc      	adds	r3, #252	; 0xfc
 80074d8:	4a74      	ldr	r2, [pc, #464]	; (80076ac <drawFrame+0xa60>)
 80074da:	1898      	adds	r0, r3, r2
 80074dc:	4b72      	ldr	r3, [pc, #456]	; (80076a8 <drawFrame+0xa5c>)
 80074de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	4b6b      	ldr	r3, [pc, #428]	; (8007694 <drawFrame+0xa48>)
 80074e6:	791b      	ldrb	r3, [r3, #4]
 80074e8:	461c      	mov	r4, r3
 80074ea:	4623      	mov	r3, r4
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	1b1b      	subs	r3, r3, r4
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80074f6:	4c6d      	ldr	r4, [pc, #436]	; (80076ac <drawFrame+0xa60>)
 80074f8:	4423      	add	r3, r4
 80074fa:	4c66      	ldr	r4, [pc, #408]	; (8007694 <drawFrame+0xa48>)
 80074fc:	7a24      	ldrb	r4, [r4, #8]
 80074fe:	9402      	str	r4, [sp, #8]
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	9200      	str	r2, [sp, #0]
 8007504:	4603      	mov	r3, r0
 8007506:	460a      	mov	r2, r1
 8007508:	4969      	ldr	r1, [pc, #420]	; (80076b0 <drawFrame+0xa64>)
 800750a:	486a      	ldr	r0, [pc, #424]	; (80076b4 <drawFrame+0xa68>)
 800750c:	f004 fc46 	bl	800bd9c <siprintf>
 8007510:	e02d      	b.n	800756e <drawFrame+0x922>
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 8007512:	4b60      	ldr	r3, [pc, #384]	; (8007694 <drawFrame+0xa48>)
 8007514:	791b      	ldrb	r3, [r3, #4]
 8007516:	461a      	mov	r2, r3
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	33c4      	adds	r3, #196	; 0xc4
 8007522:	4a62      	ldr	r2, [pc, #392]	; (80076ac <drawFrame+0xa60>)
 8007524:	1899      	adds	r1, r3, r2
 8007526:	4b5b      	ldr	r3, [pc, #364]	; (8007694 <drawFrame+0xa48>)
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	461a      	mov	r2, r3
 800752c:	4613      	mov	r3, r2
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	33fc      	adds	r3, #252	; 0xfc
 8007536:	4a5d      	ldr	r2, [pc, #372]	; (80076ac <drawFrame+0xa60>)
 8007538:	1898      	adds	r0, r3, r2
 800753a:	4b5b      	ldr	r3, [pc, #364]	; (80076a8 <drawFrame+0xa5c>)
 800753c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	4b54      	ldr	r3, [pc, #336]	; (8007694 <drawFrame+0xa48>)
 8007544:	791b      	ldrb	r3, [r3, #4]
 8007546:	461c      	mov	r4, r3
 8007548:	4623      	mov	r3, r4
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	1b1b      	subs	r3, r3, r4
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007554:	4c55      	ldr	r4, [pc, #340]	; (80076ac <drawFrame+0xa60>)
 8007556:	4423      	add	r3, r4
 8007558:	4c4e      	ldr	r4, [pc, #312]	; (8007694 <drawFrame+0xa48>)
 800755a:	7a24      	ldrb	r4, [r4, #8]
 800755c:	9402      	str	r4, [sp, #8]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	9200      	str	r2, [sp, #0]
 8007562:	4603      	mov	r3, r0
 8007564:	460a      	mov	r2, r1
 8007566:	4954      	ldr	r1, [pc, #336]	; (80076b8 <drawFrame+0xa6c>)
 8007568:	4852      	ldr	r0, [pc, #328]	; (80076b4 <drawFrame+0xa68>)
 800756a:	f004 fc17 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 800756e:	4b49      	ldr	r3, [pc, #292]	; (8007694 <drawFrame+0xa48>)
 8007570:	795b      	ldrb	r3, [r3, #5]
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	4a4f      	ldr	r2, [pc, #316]	; (80076b4 <drawFrame+0xa68>)
 8007578:	2101      	movs	r1, #1
 800757a:	2000      	movs	r0, #0
 800757c:	f7fe fe8a 	bl	8006294 <OLED_PutStr>
						sprintf(frame.secondLine,"%1.5f nd", ArchiveEntry.nc);
 8007580:	4b41      	ldr	r3, [pc, #260]	; (8007688 <drawFrame+0xa3c>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	4618      	mov	r0, r3
 8007586:	f7f9 f807 	bl	8000598 <__aeabi_f2d>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	494b      	ldr	r1, [pc, #300]	; (80076bc <drawFrame+0xa70>)
 8007590:	483f      	ldr	r0, [pc, #252]	; (8007690 <drawFrame+0xa44>)
 8007592:	f004 fc03 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 8007596:	4b3f      	ldr	r3, [pc, #252]	; (8007694 <drawFrame+0xa48>)
 8007598:	795b      	ldrb	r3, [r3, #5]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2301      	movs	r3, #1
 800759e:	4a3c      	ldr	r2, [pc, #240]	; (8007690 <drawFrame+0xa44>)
 80075a0:	210f      	movs	r1, #15
 80075a2:	2003      	movs	r0, #3
 80075a4:	f7fe fe76 	bl	8006294 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %2.2f \x7B\x43", ArchiveEntry.temperature);
 80075a8:	4b37      	ldr	r3, [pc, #220]	; (8007688 <drawFrame+0xa3c>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7f8 fff3 	bl	8000598 <__aeabi_f2d>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4942      	ldr	r1, [pc, #264]	; (80076c0 <drawFrame+0xa74>)
 80075b8:	4838      	ldr	r0, [pc, #224]	; (800769c <drawFrame+0xa50>)
 80075ba:	f004 fbef 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 80075be:	4b35      	ldr	r3, [pc, #212]	; (8007694 <drawFrame+0xa48>)
 80075c0:	795b      	ldrb	r3, [r3, #5]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	2301      	movs	r3, #1
 80075c6:	4a35      	ldr	r2, [pc, #212]	; (800769c <drawFrame+0xa50>)
 80075c8:	2122      	movs	r1, #34	; 0x22
 80075ca:	2003      	movs	r0, #3
 80075cc:	f7fe fe62 	bl	8006294 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 80075d0:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <drawFrame+0xa3c>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	461c      	mov	r4, r3
 80075d6:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <drawFrame+0xa3c>)
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	461d      	mov	r5, r3
 80075dc:	4b2a      	ldr	r3, [pc, #168]	; (8007688 <drawFrame+0xa3c>)
 80075de:	789b      	ldrb	r3, [r3, #2]
 80075e0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80075e4:	4a28      	ldr	r2, [pc, #160]	; (8007688 <drawFrame+0xa3c>)
 80075e6:	78d2      	ldrb	r2, [r2, #3]
 80075e8:	4611      	mov	r1, r2
 80075ea:	4a27      	ldr	r2, [pc, #156]	; (8007688 <drawFrame+0xa3c>)
 80075ec:	7912      	ldrb	r2, [r2, #4]
 80075ee:	4610      	mov	r0, r2
 80075f0:	4a25      	ldr	r2, [pc, #148]	; (8007688 <drawFrame+0xa3c>)
 80075f2:	7952      	ldrb	r2, [r2, #5]
 80075f4:	9203      	str	r2, [sp, #12]
 80075f6:	9002      	str	r0, [sp, #8]
 80075f8:	9101      	str	r1, [sp, #4]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	462b      	mov	r3, r5
 80075fe:	4622      	mov	r2, r4
 8007600:	4927      	ldr	r1, [pc, #156]	; (80076a0 <drawFrame+0xa54>)
 8007602:	4828      	ldr	r0, [pc, #160]	; (80076a4 <drawFrame+0xa58>)
 8007604:	f004 fbca 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8007608:	4b22      	ldr	r3, [pc, #136]	; (8007694 <drawFrame+0xa48>)
 800760a:	795b      	ldrb	r3, [r3, #5]
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	2300      	movs	r3, #0
 8007610:	4a24      	ldr	r2, [pc, #144]	; (80076a4 <drawFrame+0xa58>)
 8007612:	2138      	movs	r1, #56	; 0x38
 8007614:	2000      	movs	r0, #0
 8007616:	f7fe fe3d 	bl	8006294 <OLED_PutStr>
			break;
 800761a:	f001 ba58 	b.w	8008ace <drawFrame+0x1e82>
						if (frame.value < 10) sprintf(frame.firstLine, "%s %s %d %s %d  " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 800761e:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <drawFrame+0xa5c>)
 8007620:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007624:	2b09      	cmp	r3, #9
 8007626:	d84d      	bhi.n	80076c4 <drawFrame+0xa78>
 8007628:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <drawFrame+0xa48>)
 800762a:	791b      	ldrb	r3, [r3, #4]
 800762c:	461a      	mov	r2, r3
 800762e:	4613      	mov	r3, r2
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	33c4      	adds	r3, #196	; 0xc4
 8007638:	4a1c      	ldr	r2, [pc, #112]	; (80076ac <drawFrame+0xa60>)
 800763a:	1899      	adds	r1, r3, r2
 800763c:	4b15      	ldr	r3, [pc, #84]	; (8007694 <drawFrame+0xa48>)
 800763e:	791b      	ldrb	r3, [r3, #4]
 8007640:	461a      	mov	r2, r3
 8007642:	4613      	mov	r3, r2
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	33fc      	adds	r3, #252	; 0xfc
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <drawFrame+0xa60>)
 800764e:	1898      	adds	r0, r3, r2
 8007650:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <drawFrame+0xa5c>)
 8007652:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <drawFrame+0xa48>)
 800765a:	791b      	ldrb	r3, [r3, #4]
 800765c:	461c      	mov	r4, r3
 800765e:	4623      	mov	r3, r4
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1b1b      	subs	r3, r3, r4
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800766a:	4c10      	ldr	r4, [pc, #64]	; (80076ac <drawFrame+0xa60>)
 800766c:	4423      	add	r3, r4
 800766e:	4c09      	ldr	r4, [pc, #36]	; (8007694 <drawFrame+0xa48>)
 8007670:	7a24      	ldrb	r4, [r4, #8]
 8007672:	9402      	str	r4, [sp, #8]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	9200      	str	r2, [sp, #0]
 8007678:	4603      	mov	r3, r0
 800767a:	460a      	mov	r2, r1
 800767c:	490c      	ldr	r1, [pc, #48]	; (80076b0 <drawFrame+0xa64>)
 800767e:	480d      	ldr	r0, [pc, #52]	; (80076b4 <drawFrame+0xa68>)
 8007680:	f004 fb8c 	bl	800bd9c <siprintf>
 8007684:	e04c      	b.n	8007720 <drawFrame+0xad4>
 8007686:	bf00      	nop
 8007688:	200006d0 	.word	0x200006d0
 800768c:	0801358c 	.word	0x0801358c
 8007690:	2000125d 	.word	0x2000125d
 8007694:	200006c4 	.word	0x200006c4
 8007698:	080135a4 	.word	0x080135a4
 800769c:	20001275 	.word	0x20001275
 80076a0:	08013510 	.word	0x08013510
 80076a4:	2000128d 	.word	0x2000128d
 80076a8:	20001244 	.word	0x20001244
 80076ac:	080132e8 	.word	0x080132e8
 80076b0:	0801354c 	.word	0x0801354c
 80076b4:	20001245 	.word	0x20001245
 80076b8:	08013560 	.word	0x08013560
 80076bc:	080135b0 	.word	0x080135b0
 80076c0:	080135bc 	.word	0x080135bc
						else sprintf(frame.firstLine, "%s %s %d %s %d " , Archive[7][settings.language], Archive[9][settings.language], frame.value + 1, Archive[10][settings.language], settings.archiveEntriesTotal);
 80076c4:	4b89      	ldr	r3, [pc, #548]	; (80078ec <drawFrame+0xca0>)
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	461a      	mov	r2, r3
 80076ca:	4613      	mov	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	33c4      	adds	r3, #196	; 0xc4
 80076d4:	4a86      	ldr	r2, [pc, #536]	; (80078f0 <drawFrame+0xca4>)
 80076d6:	1899      	adds	r1, r3, r2
 80076d8:	4b84      	ldr	r3, [pc, #528]	; (80078ec <drawFrame+0xca0>)
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	461a      	mov	r2, r3
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	33fc      	adds	r3, #252	; 0xfc
 80076e8:	4a81      	ldr	r2, [pc, #516]	; (80078f0 <drawFrame+0xca4>)
 80076ea:	1898      	adds	r0, r3, r2
 80076ec:	4b81      	ldr	r3, [pc, #516]	; (80078f4 <drawFrame+0xca8>)
 80076ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	4b7d      	ldr	r3, [pc, #500]	; (80078ec <drawFrame+0xca0>)
 80076f6:	791b      	ldrb	r3, [r3, #4]
 80076f8:	461c      	mov	r4, r3
 80076fa:	4623      	mov	r3, r4
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	1b1b      	subs	r3, r3, r4
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007706:	4c7a      	ldr	r4, [pc, #488]	; (80078f0 <drawFrame+0xca4>)
 8007708:	4423      	add	r3, r4
 800770a:	4c78      	ldr	r4, [pc, #480]	; (80078ec <drawFrame+0xca0>)
 800770c:	7a24      	ldrb	r4, [r4, #8]
 800770e:	9402      	str	r4, [sp, #8]
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	9200      	str	r2, [sp, #0]
 8007714:	4603      	mov	r3, r0
 8007716:	460a      	mov	r2, r1
 8007718:	4977      	ldr	r1, [pc, #476]	; (80078f8 <drawFrame+0xcac>)
 800771a:	4878      	ldr	r0, [pc, #480]	; (80078fc <drawFrame+0xcb0>)
 800771c:	f004 fb3e 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 1, frame.firstLine, 0, settings.contrast);
 8007720:	4b72      	ldr	r3, [pc, #456]	; (80078ec <drawFrame+0xca0>)
 8007722:	795b      	ldrb	r3, [r3, #5]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2300      	movs	r3, #0
 8007728:	4a74      	ldr	r2, [pc, #464]	; (80078fc <drawFrame+0xcb0>)
 800772a:	2101      	movs	r1, #1
 800772c:	2000      	movs	r0, #0
 800772e:	f7fe fdb1 	bl	8006294 <OLED_PutStr>
						sprintf(frame.secondLine,"%1.5f nd", ArchiveEntry.nck);
 8007732:	4b73      	ldr	r3, [pc, #460]	; (8007900 <drawFrame+0xcb4>)
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	4618      	mov	r0, r3
 8007738:	f7f8 ff2e 	bl	8000598 <__aeabi_f2d>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4970      	ldr	r1, [pc, #448]	; (8007904 <drawFrame+0xcb8>)
 8007742:	4871      	ldr	r0, [pc, #452]	; (8007908 <drawFrame+0xcbc>)
 8007744:	f004 fb2a 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 15, frame.secondLine, 1, settings.contrast);
 8007748:	4b68      	ldr	r3, [pc, #416]	; (80078ec <drawFrame+0xca0>)
 800774a:	795b      	ldrb	r3, [r3, #5]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	2301      	movs	r3, #1
 8007750:	4a6d      	ldr	r2, [pc, #436]	; (8007908 <drawFrame+0xcbc>)
 8007752:	210f      	movs	r1, #15
 8007754:	2003      	movs	r0, #3
 8007756:	f7fe fd9d 	bl	8006294 <OLED_PutStr>
						sprintf(frame.thirdLine,"  %d.00 \x7B\x43", 20);
 800775a:	2214      	movs	r2, #20
 800775c:	496b      	ldr	r1, [pc, #428]	; (800790c <drawFrame+0xcc0>)
 800775e:	486c      	ldr	r0, [pc, #432]	; (8007910 <drawFrame+0xcc4>)
 8007760:	f004 fb1c 	bl	800bd9c <siprintf>
						OLED_PutStr(3, 34, frame.thirdLine, 1, settings.contrast);
 8007764:	4b61      	ldr	r3, [pc, #388]	; (80078ec <drawFrame+0xca0>)
 8007766:	795b      	ldrb	r3, [r3, #5]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	2301      	movs	r3, #1
 800776c:	4a68      	ldr	r2, [pc, #416]	; (8007910 <drawFrame+0xcc4>)
 800776e:	2122      	movs	r1, #34	; 0x22
 8007770:	2003      	movs	r0, #3
 8007772:	f7fe fd8f 	bl	8006294 <OLED_PutStr>
						sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", ArchiveEntry.day, ArchiveEntry.month, ArchiveEntry.year+2000, ArchiveEntry.hour, ArchiveEntry.minute, ArchiveEntry.second);
 8007776:	4b62      	ldr	r3, [pc, #392]	; (8007900 <drawFrame+0xcb4>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461c      	mov	r4, r3
 800777c:	4b60      	ldr	r3, [pc, #384]	; (8007900 <drawFrame+0xcb4>)
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	461d      	mov	r5, r3
 8007782:	4b5f      	ldr	r3, [pc, #380]	; (8007900 <drawFrame+0xcb4>)
 8007784:	789b      	ldrb	r3, [r3, #2]
 8007786:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800778a:	4a5d      	ldr	r2, [pc, #372]	; (8007900 <drawFrame+0xcb4>)
 800778c:	78d2      	ldrb	r2, [r2, #3]
 800778e:	4611      	mov	r1, r2
 8007790:	4a5b      	ldr	r2, [pc, #364]	; (8007900 <drawFrame+0xcb4>)
 8007792:	7912      	ldrb	r2, [r2, #4]
 8007794:	4610      	mov	r0, r2
 8007796:	4a5a      	ldr	r2, [pc, #360]	; (8007900 <drawFrame+0xcb4>)
 8007798:	7952      	ldrb	r2, [r2, #5]
 800779a:	9203      	str	r2, [sp, #12]
 800779c:	9002      	str	r0, [sp, #8]
 800779e:	9101      	str	r1, [sp, #4]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	462b      	mov	r3, r5
 80077a4:	4622      	mov	r2, r4
 80077a6:	495b      	ldr	r1, [pc, #364]	; (8007914 <drawFrame+0xcc8>)
 80077a8:	485b      	ldr	r0, [pc, #364]	; (8007918 <drawFrame+0xccc>)
 80077aa:	f004 faf7 	bl	800bd9c <siprintf>
						OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 80077ae:	4b4f      	ldr	r3, [pc, #316]	; (80078ec <drawFrame+0xca0>)
 80077b0:	795b      	ldrb	r3, [r3, #5]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	4a58      	ldr	r2, [pc, #352]	; (8007918 <drawFrame+0xccc>)
 80077b8:	2138      	movs	r1, #56	; 0x38
 80077ba:	2000      	movs	r0, #0
 80077bc:	f7fe fd6a 	bl	8006294 <OLED_PutStr>
			break;
 80077c0:	f001 b985 	b.w	8008ace <drawFrame+0x1e82>

		case FRAME_ARCHIVE_BEING_ERASED:
			OLED_CLEAR();
 80077c4:	f7fe fa83 	bl	8005cce <OLED_CLEAR>
			OLED_PutStr(5 + settings.language * 7, 15, Archive[6][settings.language], 1, settings.contrast);	//kasowanie archiwum
 80077c8:	4b48      	ldr	r3, [pc, #288]	; (80078ec <drawFrame+0xca0>)
 80077ca:	791b      	ldrb	r3, [r3, #4]
 80077cc:	461a      	mov	r2, r3
 80077ce:	00d2      	lsls	r2, r2, #3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	3305      	adds	r3, #5
 80077d6:	b2d8      	uxtb	r0, r3
 80077d8:	4b44      	ldr	r3, [pc, #272]	; (80078ec <drawFrame+0xca0>)
 80077da:	791b      	ldrb	r3, [r3, #4]
 80077dc:	461a      	mov	r2, r3
 80077de:	4613      	mov	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	33a8      	adds	r3, #168	; 0xa8
 80077e8:	4a41      	ldr	r2, [pc, #260]	; (80078f0 <drawFrame+0xca4>)
 80077ea:	441a      	add	r2, r3
 80077ec:	4b3f      	ldr	r3, [pc, #252]	; (80078ec <drawFrame+0xca0>)
 80077ee:	795b      	ldrb	r3, [r3, #5]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	2301      	movs	r3, #1
 80077f4:	210f      	movs	r1, #15
 80077f6:	f7fe fd4d 	bl	8006294 <OLED_PutStr>
			OLED_PutStr(8 + settings.language * 4, 34, Archive[7][settings.language], 1, settings.contrast);
 80077fa:	4b3c      	ldr	r3, [pc, #240]	; (80078ec <drawFrame+0xca0>)
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	3302      	adds	r3, #2
 8007800:	b2db      	uxtb	r3, r3
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	b2d8      	uxtb	r0, r3
 8007806:	4b39      	ldr	r3, [pc, #228]	; (80078ec <drawFrame+0xca0>)
 8007808:	791b      	ldrb	r3, [r3, #4]
 800780a:	461a      	mov	r2, r3
 800780c:	4613      	mov	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	33c4      	adds	r3, #196	; 0xc4
 8007816:	4a36      	ldr	r2, [pc, #216]	; (80078f0 <drawFrame+0xca4>)
 8007818:	441a      	add	r2, r3
 800781a:	4b34      	ldr	r3, [pc, #208]	; (80078ec <drawFrame+0xca0>)
 800781c:	795b      	ldrb	r3, [r3, #5]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	2301      	movs	r3, #1
 8007822:	2122      	movs	r1, #34	; 0x22
 8007824:	f7fe fd36 	bl	8006294 <OLED_PutStr>
			erase_archive();
 8007828:	f7fe f8c6 	bl	80059b8 <erase_archive>
			newArchiveEntryAdded = 0;
 800782c:	4b3b      	ldr	r3, [pc, #236]	; (800791c <drawFrame+0xcd0>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
			HAL_Delay(ARCHIVE_INFO_SCREEN_DELAY);
 8007832:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007836:	f7f9 fbcd 	bl	8000fd4 <HAL_Delay>
			OLED_CLEAR();
 800783a:	f7fe fa48 	bl	8005cce <OLED_CLEAR>
			OLED_PutStr(9 + settings.language * 3, 15, Archive[7][settings.language], 1, settings.contrast);	//archiwum skasowane
 800783e:	4b2b      	ldr	r3, [pc, #172]	; (80078ec <drawFrame+0xca0>)
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	461a      	mov	r2, r3
 8007844:	0052      	lsls	r2, r2, #1
 8007846:	4413      	add	r3, r2
 8007848:	b2db      	uxtb	r3, r3
 800784a:	3309      	adds	r3, #9
 800784c:	b2d8      	uxtb	r0, r3
 800784e:	4b27      	ldr	r3, [pc, #156]	; (80078ec <drawFrame+0xca0>)
 8007850:	791b      	ldrb	r3, [r3, #4]
 8007852:	461a      	mov	r2, r3
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	33c4      	adds	r3, #196	; 0xc4
 800785e:	4a24      	ldr	r2, [pc, #144]	; (80078f0 <drawFrame+0xca4>)
 8007860:	441a      	add	r2, r3
 8007862:	4b22      	ldr	r3, [pc, #136]	; (80078ec <drawFrame+0xca0>)
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	2301      	movs	r3, #1
 800786a:	210f      	movs	r1, #15
 800786c:	f7fe fd12 	bl	8006294 <OLED_PutStr>
			OLED_PutStr(6 + settings.language * 9, 34, Archive[8][settings.language], 1, settings.contrast);
 8007870:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <drawFrame+0xca0>)
 8007872:	791b      	ldrb	r3, [r3, #4]
 8007874:	461a      	mov	r2, r3
 8007876:	00d2      	lsls	r2, r2, #3
 8007878:	4413      	add	r3, r2
 800787a:	b2db      	uxtb	r3, r3
 800787c:	3306      	adds	r3, #6
 800787e:	b2d8      	uxtb	r0, r3
 8007880:	4b1a      	ldr	r3, [pc, #104]	; (80078ec <drawFrame+0xca0>)
 8007882:	791b      	ldrb	r3, [r3, #4]
 8007884:	461a      	mov	r2, r3
 8007886:	4613      	mov	r3, r2
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	33e0      	adds	r3, #224	; 0xe0
 8007890:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <drawFrame+0xca4>)
 8007892:	441a      	add	r2, r3
 8007894:	4b15      	ldr	r3, [pc, #84]	; (80078ec <drawFrame+0xca0>)
 8007896:	795b      	ldrb	r3, [r3, #5]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	2301      	movs	r3, #1
 800789c:	2122      	movs	r1, #34	; 0x22
 800789e:	f7fe fcf9 	bl	8006294 <OLED_PutStr>
			HAL_Delay(ARCHIVE_INFO_SCREEN_DELAY);
 80078a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80078a6:	f7f9 fb95 	bl	8000fd4 <HAL_Delay>
			OLED_CLEAR();
 80078aa:	f7fe fa10 	bl	8005cce <OLED_CLEAR>
			frame.type = FRAME_MAIN_MENU;
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <drawFrame+0xca8>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
			break;
 80078b4:	f001 b90e 	b.w	8008ad4 <drawFrame+0x1e88>

		case FRAME_BP:						//BRAK PROBKI
			floatingTextDelay++;
 80078b8:	4b19      	ldr	r3, [pc, #100]	; (8007920 <drawFrame+0xcd4>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	3301      	adds	r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	4b17      	ldr	r3, [pc, #92]	; (8007920 <drawFrame+0xcd4>)
 80078c2:	701a      	strb	r2, [r3, #0]

			if (settings.thermalCompensation == OFF) sprintf(frame.firstLine, Main_Screen[3][settings.language]);
 80078c4:	4b09      	ldr	r3, [pc, #36]	; (80078ec <drawFrame+0xca0>)
 80078c6:	789b      	ldrb	r3, [r3, #2]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d12d      	bne.n	8007928 <drawFrame+0xcdc>
 80078cc:	4b07      	ldr	r3, [pc, #28]	; (80078ec <drawFrame+0xca0>)
 80078ce:	791b      	ldrb	r3, [r3, #4]
 80078d0:	461a      	mov	r2, r3
 80078d2:	4613      	mov	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4413      	add	r3, r2
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	336c      	adds	r3, #108	; 0x6c
 80078dc:	4a11      	ldr	r2, [pc, #68]	; (8007924 <drawFrame+0xcd8>)
 80078de:	4413      	add	r3, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	4806      	ldr	r0, [pc, #24]	; (80078fc <drawFrame+0xcb0>)
 80078e4:	f004 fa5a 	bl	800bd9c <siprintf>
 80078e8:	e02b      	b.n	8007942 <drawFrame+0xcf6>
 80078ea:	bf00      	nop
 80078ec:	200006c4 	.word	0x200006c4
 80078f0:	080132e8 	.word	0x080132e8
 80078f4:	20001244 	.word	0x20001244
 80078f8:	08013560 	.word	0x08013560
 80078fc:	20001245 	.word	0x20001245
 8007900:	200006d0 	.word	0x200006d0
 8007904:	080135b0 	.word	0x080135b0
 8007908:	2000125d 	.word	0x2000125d
 800790c:	080135c8 	.word	0x080135c8
 8007910:	20001275 	.word	0x20001275
 8007914:	08013510 	.word	0x08013510
 8007918:	2000128d 	.word	0x2000128d
 800791c:	20000bf4 	.word	0x20000bf4
 8007920:	20001108 	.word	0x20001108
 8007924:	08012de4 	.word	0x08012de4
			else sprintf(frame.firstLine, Main_Screen[0][settings.language]);
 8007928:	4b9f      	ldr	r3, [pc, #636]	; (8007ba8 <drawFrame+0xf5c>)
 800792a:	791b      	ldrb	r3, [r3, #4]
 800792c:	461a      	mov	r2, r3
 800792e:	4613      	mov	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	4413      	add	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4a9d      	ldr	r2, [pc, #628]	; (8007bac <drawFrame+0xf60>)
 8007938:	4413      	add	r3, r2
 800793a:	4619      	mov	r1, r3
 800793c:	489c      	ldr	r0, [pc, #624]	; (8007bb0 <drawFrame+0xf64>)
 800793e:	f004 fa2d 	bl	800bd9c <siprintf>
			sprintf(frame.secondLine, Main_Screen[1][settings.language]);
 8007942:	4b99      	ldr	r3, [pc, #612]	; (8007ba8 <drawFrame+0xf5c>)
 8007944:	791b      	ldrb	r3, [r3, #4]
 8007946:	461a      	mov	r2, r3
 8007948:	4613      	mov	r3, r2
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	4413      	add	r3, r2
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	3324      	adds	r3, #36	; 0x24
 8007952:	4a96      	ldr	r2, [pc, #600]	; (8007bac <drawFrame+0xf60>)
 8007954:	4413      	add	r3, r2
 8007956:	4619      	mov	r1, r3
 8007958:	4896      	ldr	r0, [pc, #600]	; (8007bb4 <drawFrame+0xf68>)
 800795a:	f004 fa1f 	bl	800bd9c <siprintf>
			sprintf(frame.thirdLine, Main_Screen[2][settings.language]);
 800795e:	4b92      	ldr	r3, [pc, #584]	; (8007ba8 <drawFrame+0xf5c>)
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	461a      	mov	r2, r3
 8007964:	4613      	mov	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	4413      	add	r3, r2
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	3348      	adds	r3, #72	; 0x48
 800796e:	4a8f      	ldr	r2, [pc, #572]	; (8007bac <drawFrame+0xf60>)
 8007970:	4413      	add	r3, r2
 8007972:	4619      	mov	r1, r3
 8007974:	4890      	ldr	r0, [pc, #576]	; (8007bb8 <drawFrame+0xf6c>)
 8007976:	f004 fa11 	bl	800bd9c <siprintf>

			if (floatingTextDelay == BP_FLOATING_DELAY || ssStateChanged)	//jezeli trzeba przesunac BRAK PROBKI lub nastapi moment wlaczenia/wylaczenia się wygaszacza ekranu
 800797a:	4b90      	ldr	r3, [pc, #576]	; (8007bbc <drawFrame+0xf70>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b3c      	cmp	r3, #60	; 0x3c
 8007980:	d005      	beq.n	800798e <drawFrame+0xd42>
 8007982:	4b8f      	ldr	r3, [pc, #572]	; (8007bc0 <drawFrame+0xf74>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 80dc 	beq.w	8007b46 <drawFrame+0xefa>
			{
				ssStateChanged = 0;
 800798e:	4b8c      	ldr	r3, [pc, #560]	; (8007bc0 <drawFrame+0xf74>)
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
				OLED_PutStr(21 + settings.language * 6 + xShift, 15 + yShift, "    ", 1, settings.contrast);
 8007994:	4b84      	ldr	r3, [pc, #528]	; (8007ba8 <drawFrame+0xf5c>)
 8007996:	791b      	ldrb	r3, [r3, #4]
 8007998:	461a      	mov	r2, r3
 800799a:	0052      	lsls	r2, r2, #1
 800799c:	4413      	add	r3, r2
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	4b88      	ldr	r3, [pc, #544]	; (8007bc4 <drawFrame+0xf78>)
 80079a4:	f993 3000 	ldrsb.w	r3, [r3]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	3315      	adds	r3, #21
 80079b0:	b2d8      	uxtb	r0, r3
 80079b2:	4b85      	ldr	r3, [pc, #532]	; (8007bc8 <drawFrame+0xf7c>)
 80079b4:	f993 3000 	ldrsb.w	r3, [r3]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	330f      	adds	r3, #15
 80079bc:	b2d9      	uxtb	r1, r3
 80079be:	4b7a      	ldr	r3, [pc, #488]	; (8007ba8 <drawFrame+0xf5c>)
 80079c0:	795b      	ldrb	r3, [r3, #5]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	2301      	movs	r3, #1
 80079c6:	4a81      	ldr	r2, [pc, #516]	; (8007bcc <drawFrame+0xf80>)
 80079c8:	f7fe fc64 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(15 + xShift, 34 + yShift, "      ", 1, settings.contrast);
 80079cc:	4b7d      	ldr	r3, [pc, #500]	; (8007bc4 <drawFrame+0xf78>)
 80079ce:	f993 3000 	ldrsb.w	r3, [r3]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	330f      	adds	r3, #15
 80079d6:	b2d8      	uxtb	r0, r3
 80079d8:	4b7b      	ldr	r3, [pc, #492]	; (8007bc8 <drawFrame+0xf7c>)
 80079da:	f993 3000 	ldrsb.w	r3, [r3]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	3322      	adds	r3, #34	; 0x22
 80079e2:	b2d9      	uxtb	r1, r3
 80079e4:	4b70      	ldr	r3, [pc, #448]	; (8007ba8 <drawFrame+0xf5c>)
 80079e6:	795b      	ldrb	r3, [r3, #5]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	2301      	movs	r3, #1
 80079ec:	4a78      	ldr	r2, [pc, #480]	; (8007bd0 <drawFrame+0xf84>)
 80079ee:	f7fe fc51 	bl	8006294 <OLED_PutStr>

				floatingTextDelay = 0;
 80079f2:	4b72      	ldr	r3, [pc, #456]	; (8007bbc <drawFrame+0xf70>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]

				if (yShift > 4) dirY = 1;
 80079f8:	4b73      	ldr	r3, [pc, #460]	; (8007bc8 <drawFrame+0xf7c>)
 80079fa:	f993 3000 	ldrsb.w	r3, [r3]
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	dd02      	ble.n	8007a08 <drawFrame+0xdbc>
 8007a02:	4b74      	ldr	r3, [pc, #464]	; (8007bd4 <drawFrame+0xf88>)
 8007a04:	2201      	movs	r2, #1
 8007a06:	701a      	strb	r2, [r3, #0]
				if (yShift < -4) dirY = 0;
 8007a08:	4b6f      	ldr	r3, [pc, #444]	; (8007bc8 <drawFrame+0xf7c>)
 8007a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8007a0e:	f113 0f04 	cmn.w	r3, #4
 8007a12:	da02      	bge.n	8007a1a <drawFrame+0xdce>
 8007a14:	4b6f      	ldr	r3, [pc, #444]	; (8007bd4 <drawFrame+0xf88>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
				if(dirY == 0)
 8007a1a:	4b6e      	ldr	r3, [pc, #440]	; (8007bd4 <drawFrame+0xf88>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <drawFrame+0xdea>
					yShift++;
 8007a22:	4b69      	ldr	r3, [pc, #420]	; (8007bc8 <drawFrame+0xf7c>)
 8007a24:	f993 3000 	ldrsb.w	r3, [r3]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	b25a      	sxtb	r2, r3
 8007a30:	4b65      	ldr	r3, [pc, #404]	; (8007bc8 <drawFrame+0xf7c>)
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	e008      	b.n	8007a48 <drawFrame+0xdfc>
				else yShift--;
 8007a36:	4b64      	ldr	r3, [pc, #400]	; (8007bc8 <drawFrame+0xf7c>)
 8007a38:	f993 3000 	ldrsb.w	r3, [r3]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	b25a      	sxtb	r2, r3
 8007a44:	4b60      	ldr	r3, [pc, #384]	; (8007bc8 <drawFrame+0xf7c>)
 8007a46:	701a      	strb	r2, [r3, #0]

				if (xShift > 12) dirX = 1;
 8007a48:	4b5e      	ldr	r3, [pc, #376]	; (8007bc4 <drawFrame+0xf78>)
 8007a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8007a4e:	2b0c      	cmp	r3, #12
 8007a50:	dd02      	ble.n	8007a58 <drawFrame+0xe0c>
 8007a52:	4b61      	ldr	r3, [pc, #388]	; (8007bd8 <drawFrame+0xf8c>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	701a      	strb	r2, [r3, #0]
				if (xShift < -12) dirX = 0;
 8007a58:	4b5a      	ldr	r3, [pc, #360]	; (8007bc4 <drawFrame+0xf78>)
 8007a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8007a5e:	f113 0f0c 	cmn.w	r3, #12
 8007a62:	da02      	bge.n	8007a6a <drawFrame+0xe1e>
 8007a64:	4b5c      	ldr	r3, [pc, #368]	; (8007bd8 <drawFrame+0xf8c>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
				if(dirX == 0)
 8007a6a:	4b5b      	ldr	r3, [pc, #364]	; (8007bd8 <drawFrame+0xf8c>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <drawFrame+0xe3a>
					xShift++;
 8007a72:	4b54      	ldr	r3, [pc, #336]	; (8007bc4 <drawFrame+0xf78>)
 8007a74:	f993 3000 	ldrsb.w	r3, [r3]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	b25a      	sxtb	r2, r3
 8007a80:	4b50      	ldr	r3, [pc, #320]	; (8007bc4 <drawFrame+0xf78>)
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e008      	b.n	8007a98 <drawFrame+0xe4c>
				else xShift--;
 8007a86:	4b4f      	ldr	r3, [pc, #316]	; (8007bc4 <drawFrame+0xf78>)
 8007a88:	f993 3000 	ldrsb.w	r3, [r3]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	b25a      	sxtb	r2, r3
 8007a94:	4b4b      	ldr	r3, [pc, #300]	; (8007bc4 <drawFrame+0xf78>)
 8007a96:	701a      	strb	r2, [r3, #0]

				OLED_PutStr(21 + settings.language * 6 + xShift, 15 + yShift, frame.secondLine, 1, settings.contrast);
 8007a98:	4b43      	ldr	r3, [pc, #268]	; (8007ba8 <drawFrame+0xf5c>)
 8007a9a:	791b      	ldrb	r3, [r3, #4]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	0052      	lsls	r2, r2, #1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	4b47      	ldr	r3, [pc, #284]	; (8007bc4 <drawFrame+0xf78>)
 8007aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	4413      	add	r3, r2
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	3315      	adds	r3, #21
 8007ab4:	b2d8      	uxtb	r0, r3
 8007ab6:	4b44      	ldr	r3, [pc, #272]	; (8007bc8 <drawFrame+0xf7c>)
 8007ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	330f      	adds	r3, #15
 8007ac0:	b2d9      	uxtb	r1, r3
 8007ac2:	4b39      	ldr	r3, [pc, #228]	; (8007ba8 <drawFrame+0xf5c>)
 8007ac4:	795b      	ldrb	r3, [r3, #5]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4a3a      	ldr	r2, [pc, #232]	; (8007bb4 <drawFrame+0xf68>)
 8007acc:	f7fe fbe2 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(15 + xShift, 34 + yShift, frame.thirdLine, 1, settings.contrast);
 8007ad0:	4b3c      	ldr	r3, [pc, #240]	; (8007bc4 <drawFrame+0xf78>)
 8007ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	330f      	adds	r3, #15
 8007ada:	b2d8      	uxtb	r0, r3
 8007adc:	4b3a      	ldr	r3, [pc, #232]	; (8007bc8 <drawFrame+0xf7c>)
 8007ade:	f993 3000 	ldrsb.w	r3, [r3]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	3322      	adds	r3, #34	; 0x22
 8007ae6:	b2d9      	uxtb	r1, r3
 8007ae8:	4b2f      	ldr	r3, [pc, #188]	; (8007ba8 <drawFrame+0xf5c>)
 8007aea:	795b      	ldrb	r3, [r3, #5]
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	2301      	movs	r3, #1
 8007af0:	4a31      	ldr	r2, [pc, #196]	; (8007bb8 <drawFrame+0xf6c>)
 8007af2:	f7fe fbcf 	bl	8006294 <OLED_PutStr>
				if(settings.language == POLISH) OLED_bitmap(14 + xShift + 14, 34 + yShift - 4, b1);		//kreska nad O w BRAK PROBKI, kontrast zmieniany wewnatrz funkcji OLED_BITMAP
 8007af6:	4b2c      	ldr	r3, [pc, #176]	; (8007ba8 <drawFrame+0xf5c>)
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10f      	bne.n	8007b1e <drawFrame+0xed2>
 8007afe:	4b31      	ldr	r3, [pc, #196]	; (8007bc4 <drawFrame+0xf78>)
 8007b00:	f993 3000 	ldrsb.w	r3, [r3]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	331c      	adds	r3, #28
 8007b08:	b2d8      	uxtb	r0, r3
 8007b0a:	4b2f      	ldr	r3, [pc, #188]	; (8007bc8 <drawFrame+0xf7c>)
 8007b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	331e      	adds	r3, #30
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4a31      	ldr	r2, [pc, #196]	; (8007bdc <drawFrame+0xf90>)
 8007b18:	4619      	mov	r1, r3
 8007b1a:	f7fe fc57 	bl	80063cc <OLED_bitmap>
				if(settings.language == POLISH) OLED_bitmap(31 + xShift + 14, 34 + yShift, b8);		//poprawiony wyglad litery I
 8007b1e:	4b22      	ldr	r3, [pc, #136]	; (8007ba8 <drawFrame+0xf5c>)
 8007b20:	791b      	ldrb	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10f      	bne.n	8007b46 <drawFrame+0xefa>
 8007b26:	4b27      	ldr	r3, [pc, #156]	; (8007bc4 <drawFrame+0xf78>)
 8007b28:	f993 3000 	ldrsb.w	r3, [r3]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	332d      	adds	r3, #45	; 0x2d
 8007b30:	b2d8      	uxtb	r0, r3
 8007b32:	4b25      	ldr	r3, [pc, #148]	; (8007bc8 <drawFrame+0xf7c>)
 8007b34:	f993 3000 	ldrsb.w	r3, [r3]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	3322      	adds	r3, #34	; 0x22
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	4a28      	ldr	r2, [pc, #160]	; (8007be0 <drawFrame+0xf94>)
 8007b40:	4619      	mov	r1, r3
 8007b42:	f7fe fc43 	bl	80063cc <OLED_bitmap>
			}

			OLED_PutStr(40, 1, frame.firstLine, 0, settings.contrast);
 8007b46:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <drawFrame+0xf5c>)
 8007b48:	795b      	ldrb	r3, [r3, #5]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <drawFrame+0xf64>)
 8007b50:	2101      	movs	r1, #1
 8007b52:	2028      	movs	r0, #40	; 0x28
 8007b54:	f7fe fb9e 	bl	8006294 <OLED_PutStr>
			sprintf(frame.bottomLine,"%02u-%02u-%u   %02u:%02u:%02u", gDate.Date, gDate.Month, gDate.Year+2000, gTime.Hours,gTime.Minutes,gTime.Seconds);
 8007b58:	4b22      	ldr	r3, [pc, #136]	; (8007be4 <drawFrame+0xf98>)
 8007b5a:	789b      	ldrb	r3, [r3, #2]
 8007b5c:	461c      	mov	r4, r3
 8007b5e:	4b21      	ldr	r3, [pc, #132]	; (8007be4 <drawFrame+0xf98>)
 8007b60:	785b      	ldrb	r3, [r3, #1]
 8007b62:	461d      	mov	r5, r3
 8007b64:	4b1f      	ldr	r3, [pc, #124]	; (8007be4 <drawFrame+0xf98>)
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <drawFrame+0xf9c>)
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	4611      	mov	r1, r2
 8007b72:	4a1d      	ldr	r2, [pc, #116]	; (8007be8 <drawFrame+0xf9c>)
 8007b74:	7852      	ldrb	r2, [r2, #1]
 8007b76:	4610      	mov	r0, r2
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <drawFrame+0xf9c>)
 8007b7a:	7892      	ldrb	r2, [r2, #2]
 8007b7c:	9203      	str	r2, [sp, #12]
 8007b7e:	9002      	str	r0, [sp, #8]
 8007b80:	9101      	str	r1, [sp, #4]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	462b      	mov	r3, r5
 8007b86:	4622      	mov	r2, r4
 8007b88:	4918      	ldr	r1, [pc, #96]	; (8007bec <drawFrame+0xfa0>)
 8007b8a:	4819      	ldr	r0, [pc, #100]	; (8007bf0 <drawFrame+0xfa4>)
 8007b8c:	f004 f906 	bl	800bd9c <siprintf>
			OLED_PutStr(0, 56, frame.bottomLine, 0, settings.contrast);
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <drawFrame+0xf5c>)
 8007b92:	795b      	ldrb	r3, [r3, #5]
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	2300      	movs	r3, #0
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <drawFrame+0xfa4>)
 8007b9a:	2138      	movs	r1, #56	; 0x38
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f7fe fb79 	bl	8006294 <OLED_PutStr>
			break;
 8007ba2:	f000 bf97 	b.w	8008ad4 <drawFrame+0x1e88>
 8007ba6:	bf00      	nop
 8007ba8:	200006c4 	.word	0x200006c4
 8007bac:	08012de4 	.word	0x08012de4
 8007bb0:	20001245 	.word	0x20001245
 8007bb4:	2000125d 	.word	0x2000125d
 8007bb8:	20001275 	.word	0x20001275
 8007bbc:	20001108 	.word	0x20001108
 8007bc0:	2000135c 	.word	0x2000135c
 8007bc4:	20001240 	.word	0x20001240
 8007bc8:	2000114c 	.word	0x2000114c
 8007bcc:	08013538 	.word	0x08013538
 8007bd0:	080135d4 	.word	0x080135d4
 8007bd4:	200010e4 	.word	0x200010e4
 8007bd8:	20000c0c 	.word	0x20000c0c
 8007bdc:	080100f8 	.word	0x080100f8
 8007be0:	08010134 	.word	0x08010134
 8007be4:	200006a0 	.word	0x200006a0
 8007be8:	2000068c 	.word	0x2000068c
 8007bec:	08013510 	.word	0x08013510
 8007bf0:	2000128d 	.word	0x2000128d

		case FRAME_SET_VALUE:
			if (frame.value > frame.valueMax) frame.value = frame.valueMin;
 8007bf4:	4bb7      	ldr	r3, [pc, #732]	; (8007ed4 <drawFrame+0x1288>)
 8007bf6:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8007bfa:	4bb6      	ldr	r3, [pc, #728]	; (8007ed4 <drawFrame+0x1288>)
 8007bfc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d905      	bls.n	8007c10 <drawFrame+0xfc4>
 8007c04:	4bb3      	ldr	r3, [pc, #716]	; (8007ed4 <drawFrame+0x1288>)
 8007c06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007c0a:	4bb2      	ldr	r3, [pc, #712]	; (8007ed4 <drawFrame+0x1288>)
 8007c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			if (frame.value < frame.valueMin) frame.value = frame.valueMax;
 8007c10:	4bb0      	ldr	r3, [pc, #704]	; (8007ed4 <drawFrame+0x1288>)
 8007c12:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8007c16:	4baf      	ldr	r3, [pc, #700]	; (8007ed4 <drawFrame+0x1288>)
 8007c18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d205      	bcs.n	8007c2c <drawFrame+0xfe0>
 8007c20:	4bac      	ldr	r3, [pc, #688]	; (8007ed4 <drawFrame+0x1288>)
 8007c22:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8007c26:	4bab      	ldr	r3, [pc, #684]	; (8007ed4 <drawFrame+0x1288>)
 8007c28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

			OLED_PutStr(10, 0, frame.firstLine, 0, settings.contrast);
 8007c2c:	4baa      	ldr	r3, [pc, #680]	; (8007ed8 <drawFrame+0x128c>)
 8007c2e:	795b      	ldrb	r3, [r3, #5]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	4aa9      	ldr	r2, [pc, #676]	; (8007edc <drawFrame+0x1290>)
 8007c36:	2100      	movs	r1, #0
 8007c38:	200a      	movs	r0, #10
 8007c3a:	f7fe fb2b 	bl	8006294 <OLED_PutStr>
			OLED_PutStr(5, 10, frame.secondLine, 0, settings.contrast);
 8007c3e:	4ba6      	ldr	r3, [pc, #664]	; (8007ed8 <drawFrame+0x128c>)
 8007c40:	795b      	ldrb	r3, [r3, #5]
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	2300      	movs	r3, #0
 8007c46:	4aa6      	ldr	r2, [pc, #664]	; (8007ee0 <drawFrame+0x1294>)
 8007c48:	210a      	movs	r1, #10
 8007c4a:	2005      	movs	r0, #5
 8007c4c:	f7fe fb22 	bl	8006294 <OLED_PutStr>
			OLED_PutStr(5, 19, frame.thirdLine, 0, settings.contrast);
 8007c50:	4ba1      	ldr	r3, [pc, #644]	; (8007ed8 <drawFrame+0x128c>)
 8007c52:	795b      	ldrb	r3, [r3, #5]
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	2300      	movs	r3, #0
 8007c58:	4aa2      	ldr	r2, [pc, #648]	; (8007ee4 <drawFrame+0x1298>)
 8007c5a:	2113      	movs	r1, #19
 8007c5c:	2005      	movs	r0, #5
 8007c5e:	f7fe fb19 	bl	8006294 <OLED_PutStr>
			sprintf(frame.buffer,"%d  ",frame.value);
 8007c62:	4b9c      	ldr	r3, [pc, #624]	; (8007ed4 <drawFrame+0x1288>)
 8007c64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c68:	461a      	mov	r2, r3
 8007c6a:	499f      	ldr	r1, [pc, #636]	; (8007ee8 <drawFrame+0x129c>)
 8007c6c:	489f      	ldr	r0, [pc, #636]	; (8007eec <drawFrame+0x12a0>)
 8007c6e:	f004 f895 	bl	800bd9c <siprintf>
			OLED_PutStr(10, 33, frame.buffer, 1, settings.contrast);
 8007c72:	4b99      	ldr	r3, [pc, #612]	; (8007ed8 <drawFrame+0x128c>)
 8007c74:	795b      	ldrb	r3, [r3, #5]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	2301      	movs	r3, #1
 8007c7a:	4a9c      	ldr	r2, [pc, #624]	; (8007eec <drawFrame+0x12a0>)
 8007c7c:	2121      	movs	r1, #33	; 0x21
 8007c7e:	200a      	movs	r0, #10
 8007c80:	f7fe fb08 	bl	8006294 <OLED_PutStr>
			OLED_PutStr(5, 55, frame.bottomLine, 0, settings.contrast);
 8007c84:	4b94      	ldr	r3, [pc, #592]	; (8007ed8 <drawFrame+0x128c>)
 8007c86:	795b      	ldrb	r3, [r3, #5]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4a98      	ldr	r2, [pc, #608]	; (8007ef0 <drawFrame+0x12a4>)
 8007c8e:	2137      	movs	r1, #55	; 0x37
 8007c90:	2005      	movs	r0, #5
 8007c92:	f7fe faff 	bl	8006294 <OLED_PutStr>
			break;
 8007c96:	f000 bf1d 	b.w	8008ad4 <drawFrame+0x1e88>

		case FRAME_MAIN_MENU:
			if (frame.level == 0)			//jezeli w glownym menu
 8007c9a:	4b8e      	ldr	r3, [pc, #568]	; (8007ed4 <drawFrame+0x1288>)
 8007c9c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f040 8097 	bne.w	8007dd4 <drawFrame+0x1188>
			{
				frame.totalPositions = 6;
 8007ca6:	4b8b      	ldr	r3, [pc, #556]	; (8007ed4 <drawFrame+0x1288>)
 8007ca8:	2206      	movs	r2, #6
 8007caa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				OLED_PutStr(10, 0, Main_Menu[0][settings.language], 0, settings.contrast);			//tytul okna (menu glowne)
 8007cae:	4b8a      	ldr	r3, [pc, #552]	; (8007ed8 <drawFrame+0x128c>)
 8007cb0:	791b      	ldrb	r3, [r3, #4]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4a8d      	ldr	r2, [pc, #564]	; (8007ef4 <drawFrame+0x12a8>)
 8007cbe:	441a      	add	r2, r3
 8007cc0:	4b85      	ldr	r3, [pc, #532]	; (8007ed8 <drawFrame+0x128c>)
 8007cc2:	795b      	ldrb	r3, [r3, #5]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	200a      	movs	r0, #10
 8007ccc:	f7fe fae2 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(5, 10, Main_Menu[1][settings.language], 0, settings.contrast);			//opcje do wyboru
 8007cd0:	4b81      	ldr	r3, [pc, #516]	; (8007ed8 <drawFrame+0x128c>)
 8007cd2:	791b      	ldrb	r3, [r3, #4]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	3328      	adds	r3, #40	; 0x28
 8007ce0:	4a84      	ldr	r2, [pc, #528]	; (8007ef4 <drawFrame+0x12a8>)
 8007ce2:	441a      	add	r2, r3
 8007ce4:	4b7c      	ldr	r3, [pc, #496]	; (8007ed8 <drawFrame+0x128c>)
 8007ce6:	795b      	ldrb	r3, [r3, #5]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	2300      	movs	r3, #0
 8007cec:	210a      	movs	r1, #10
 8007cee:	2005      	movs	r0, #5
 8007cf0:	f7fe fad0 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(5, 19, Main_Menu[2][settings.language], 0, settings.contrast);
 8007cf4:	4b78      	ldr	r3, [pc, #480]	; (8007ed8 <drawFrame+0x128c>)
 8007cf6:	791b      	ldrb	r3, [r3, #4]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	3350      	adds	r3, #80	; 0x50
 8007d04:	4a7b      	ldr	r2, [pc, #492]	; (8007ef4 <drawFrame+0x12a8>)
 8007d06:	441a      	add	r2, r3
 8007d08:	4b73      	ldr	r3, [pc, #460]	; (8007ed8 <drawFrame+0x128c>)
 8007d0a:	795b      	ldrb	r3, [r3, #5]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2113      	movs	r1, #19
 8007d12:	2005      	movs	r0, #5
 8007d14:	f7fe fabe 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(5, 28, Main_Menu[3][settings.language], 0, settings.contrast);
 8007d18:	4b6f      	ldr	r3, [pc, #444]	; (8007ed8 <drawFrame+0x128c>)
 8007d1a:	791b      	ldrb	r3, [r3, #4]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	3378      	adds	r3, #120	; 0x78
 8007d28:	4a72      	ldr	r2, [pc, #456]	; (8007ef4 <drawFrame+0x12a8>)
 8007d2a:	441a      	add	r2, r3
 8007d2c:	4b6a      	ldr	r3, [pc, #424]	; (8007ed8 <drawFrame+0x128c>)
 8007d2e:	795b      	ldrb	r3, [r3, #5]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	2300      	movs	r3, #0
 8007d34:	211c      	movs	r1, #28
 8007d36:	2005      	movs	r0, #5
 8007d38:	f7fe faac 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(5, 37, Main_Menu[4][settings.language], 0, settings.contrast);
 8007d3c:	4b66      	ldr	r3, [pc, #408]	; (8007ed8 <drawFrame+0x128c>)
 8007d3e:	791b      	ldrb	r3, [r3, #4]
 8007d40:	461a      	mov	r2, r3
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	33a0      	adds	r3, #160	; 0xa0
 8007d4c:	4a69      	ldr	r2, [pc, #420]	; (8007ef4 <drawFrame+0x12a8>)
 8007d4e:	441a      	add	r2, r3
 8007d50:	4b61      	ldr	r3, [pc, #388]	; (8007ed8 <drawFrame+0x128c>)
 8007d52:	795b      	ldrb	r3, [r3, #5]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2300      	movs	r3, #0
 8007d58:	2125      	movs	r1, #37	; 0x25
 8007d5a:	2005      	movs	r0, #5
 8007d5c:	f7fe fa9a 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(5, 46, Main_Menu[5][settings.language], 0, settings.contrast);
 8007d60:	4b5d      	ldr	r3, [pc, #372]	; (8007ed8 <drawFrame+0x128c>)
 8007d62:	791b      	ldrb	r3, [r3, #4]
 8007d64:	461a      	mov	r2, r3
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	33c8      	adds	r3, #200	; 0xc8
 8007d70:	4a60      	ldr	r2, [pc, #384]	; (8007ef4 <drawFrame+0x12a8>)
 8007d72:	441a      	add	r2, r3
 8007d74:	4b58      	ldr	r3, [pc, #352]	; (8007ed8 <drawFrame+0x128c>)
 8007d76:	795b      	ldrb	r3, [r3, #5]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	212e      	movs	r1, #46	; 0x2e
 8007d7e:	2005      	movs	r0, #5
 8007d80:	f7fe fa88 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(5, 55, Main_Menu[6][settings.language], 0, settings.contrast);
 8007d84:	4b54      	ldr	r3, [pc, #336]	; (8007ed8 <drawFrame+0x128c>)
 8007d86:	791b      	ldrb	r3, [r3, #4]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	33f0      	adds	r3, #240	; 0xf0
 8007d94:	4a57      	ldr	r2, [pc, #348]	; (8007ef4 <drawFrame+0x12a8>)
 8007d96:	441a      	add	r2, r3
 8007d98:	4b4f      	ldr	r3, [pc, #316]	; (8007ed8 <drawFrame+0x128c>)
 8007d9a:	795b      	ldrb	r3, [r3, #5]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2137      	movs	r1, #55	; 0x37
 8007da2:	2005      	movs	r0, #5
 8007da4:	f7fe fa76 	bl	8006294 <OLED_PutStr>
				OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8007da8:	4b4a      	ldr	r3, [pc, #296]	; (8007ed4 <drawFrame+0x1288>)
 8007daa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007dae:	461a      	mov	r2, r3
 8007db0:	4b48      	ldr	r3, [pc, #288]	; (8007ed4 <drawFrame+0x1288>)
 8007db2:	4413      	add	r3, r2
 8007db4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007db8:	461a      	mov	r2, r3
 8007dba:	00d2      	lsls	r2, r2, #3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	330a      	adds	r3, #10
 8007dc2:	b2d9      	uxtb	r1, r3
 8007dc4:	4b44      	ldr	r3, [pc, #272]	; (8007ed8 <drawFrame+0x128c>)
 8007dc6:	795b      	ldrb	r3, [r3, #5]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4a4a      	ldr	r2, [pc, #296]	; (8007ef8 <drawFrame+0x12ac>)
 8007dce:	2001      	movs	r0, #1
 8007dd0:	f7fe fa60 	bl	8006294 <OLED_PutStr>
			}

			if (frame.level == 1)			//jezeli w podmenu menu glownego
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	; (8007ed4 <drawFrame+0x1288>)
 8007dd6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	f040 825c 	bne.w	8008298 <drawFrame+0x164c>
			{
				switch (frame.position[0])	//sprawdz ktore podmenu menu glownego zostalo wybrane
 8007de0:	4b3c      	ldr	r3, [pc, #240]	; (8007ed4 <drawFrame+0x1288>)
 8007de2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	f200 8257 	bhi.w	800829a <drawFrame+0x164e>
 8007dec:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <drawFrame+0x11a8>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007f01 	.word	0x08007f01
 8007dfc:	08007fb3 	.word	0x08007fb3
 8007e00:	08008079 	.word	0x08008079
 8007e04:	080081a9 	.word	0x080081a9
 8007e08:	08008293 	.word	0x08008293
				{
					case 0: 				//Rodzaj pomiaru
						frame.totalPositions = 3;
 8007e0c:	4b31      	ldr	r3, [pc, #196]	; (8007ed4 <drawFrame+0x1288>)
 8007e0e:	2203      	movs	r2, #3
 8007e10:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
						OLED_PutStr(10, 0, Main_Menu[1][settings.language], 0, settings.contrast);			//tytul okna (rodzaj pomiaru)
 8007e14:	4b30      	ldr	r3, [pc, #192]	; (8007ed8 <drawFrame+0x128c>)
 8007e16:	791b      	ldrb	r3, [r3, #4]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	3328      	adds	r3, #40	; 0x28
 8007e24:	4a33      	ldr	r2, [pc, #204]	; (8007ef4 <drawFrame+0x12a8>)
 8007e26:	441a      	add	r2, r3
 8007e28:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <drawFrame+0x128c>)
 8007e2a:	795b      	ldrb	r3, [r3, #5]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	200a      	movs	r0, #10
 8007e34:	f7fe fa2e 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 10, Measurement_Type[0][settings.language], 0, settings.contrast);
 8007e38:	4b27      	ldr	r3, [pc, #156]	; (8007ed8 <drawFrame+0x128c>)
 8007e3a:	791b      	ldrb	r3, [r3, #4]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4613      	mov	r3, r2
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4a2d      	ldr	r2, [pc, #180]	; (8007efc <drawFrame+0x12b0>)
 8007e48:	441a      	add	r2, r3
 8007e4a:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <drawFrame+0x128c>)
 8007e4c:	795b      	ldrb	r3, [r3, #5]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2300      	movs	r3, #0
 8007e52:	210a      	movs	r1, #10
 8007e54:	2005      	movs	r0, #5
 8007e56:	f7fe fa1d 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 19, Measurement_Type[1][settings.language], 0, settings.contrast);
 8007e5a:	4b1f      	ldr	r3, [pc, #124]	; (8007ed8 <drawFrame+0x128c>)
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	4613      	mov	r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	3318      	adds	r3, #24
 8007e6a:	4a24      	ldr	r2, [pc, #144]	; (8007efc <drawFrame+0x12b0>)
 8007e6c:	441a      	add	r2, r3
 8007e6e:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <drawFrame+0x128c>)
 8007e70:	795b      	ldrb	r3, [r3, #5]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	2113      	movs	r1, #19
 8007e78:	2005      	movs	r0, #5
 8007e7a:	f7fe fa0b 	bl	8006294 <OLED_PutStr>
//						}
//						else OLED_PutStr(5, 19, Measurement_Type[1][settings.language], 0, settings.contrast);
//test end


						OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 8007e7e:	4b16      	ldr	r3, [pc, #88]	; (8007ed8 <drawFrame+0x128c>)
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	461a      	mov	r2, r3
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007e90:	4a18      	ldr	r2, [pc, #96]	; (8007ef4 <drawFrame+0x12a8>)
 8007e92:	441a      	add	r2, r3
 8007e94:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <drawFrame+0x128c>)
 8007e96:	795b      	ldrb	r3, [r3, #5]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	211c      	movs	r1, #28
 8007e9e:	2005      	movs	r0, #5
 8007ea0:	f7fe f9f8 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <drawFrame+0x1288>)
 8007ea6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <drawFrame+0x1288>)
 8007eae:	4413      	add	r3, r2
 8007eb0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	00d2      	lsls	r2, r2, #3
 8007eb8:	4413      	add	r3, r2
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	330a      	adds	r3, #10
 8007ebe:	b2d9      	uxtb	r1, r3
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <drawFrame+0x128c>)
 8007ec2:	795b      	ldrb	r3, [r3, #5]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4a0b      	ldr	r2, [pc, #44]	; (8007ef8 <drawFrame+0x12ac>)
 8007eca:	2001      	movs	r0, #1
 8007ecc:	f7fe f9e2 	bl	8006294 <OLED_PutStr>
					break;
 8007ed0:	e1e3      	b.n	800829a <drawFrame+0x164e>
 8007ed2:	bf00      	nop
 8007ed4:	20001244 	.word	0x20001244
 8007ed8:	200006c4 	.word	0x200006c4
 8007edc:	20001245 	.word	0x20001245
 8007ee0:	2000125d 	.word	0x2000125d
 8007ee4:	20001275 	.word	0x20001275
 8007ee8:	080135dc 	.word	0x080135dc
 8007eec:	200012b2 	.word	0x200012b2
 8007ef0:	2000128d 	.word	0x2000128d
 8007ef4:	08012ee0 	.word	0x08012ee0
 8007ef8:	080135e4 	.word	0x080135e4
 8007efc:	08013020 	.word	0x08013020

					case 1:					//sposob wyswietlania (jednostka)
						frame.totalPositions = 3;
 8007f00:	4ba1      	ldr	r3, [pc, #644]	; (8008188 <drawFrame+0x153c>)
 8007f02:	2203      	movs	r2, #3
 8007f04:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
						OLED_PutStr(10, 0, Main_Menu[2][settings.language], 0, settings.contrast);			//tytul okna (sposob wyswietlania)
 8007f08:	4ba0      	ldr	r3, [pc, #640]	; (800818c <drawFrame+0x1540>)
 8007f0a:	791b      	ldrb	r3, [r3, #4]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	3350      	adds	r3, #80	; 0x50
 8007f18:	4a9d      	ldr	r2, [pc, #628]	; (8008190 <drawFrame+0x1544>)
 8007f1a:	441a      	add	r2, r3
 8007f1c:	4b9b      	ldr	r3, [pc, #620]	; (800818c <drawFrame+0x1540>)
 8007f1e:	795b      	ldrb	r3, [r3, #5]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	200a      	movs	r0, #10
 8007f28:	f7fe f9b4 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 10, "BRIX", 0, settings.contrast);
 8007f2c:	4b97      	ldr	r3, [pc, #604]	; (800818c <drawFrame+0x1540>)
 8007f2e:	795b      	ldrb	r3, [r3, #5]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	4a97      	ldr	r2, [pc, #604]	; (8008194 <drawFrame+0x1548>)
 8007f36:	210a      	movs	r1, #10
 8007f38:	2005      	movs	r0, #5
 8007f3a:	f7fe f9ab 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 19, Measurement_Unit[0][settings.language], 0, settings.contrast);
 8007f3e:	4b93      	ldr	r3, [pc, #588]	; (800818c <drawFrame+0x1540>)
 8007f40:	791b      	ldrb	r3, [r3, #4]
 8007f42:	461a      	mov	r2, r3
 8007f44:	4613      	mov	r3, r2
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	4413      	add	r3, r2
 8007f4a:	4a93      	ldr	r2, [pc, #588]	; (8008198 <drawFrame+0x154c>)
 8007f4c:	441a      	add	r2, r3
 8007f4e:	4b8f      	ldr	r3, [pc, #572]	; (800818c <drawFrame+0x1540>)
 8007f50:	795b      	ldrb	r3, [r3, #5]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	2113      	movs	r1, #19
 8007f58:	2005      	movs	r0, #5
 8007f5a:	f7fe f99b 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 8007f5e:	4b8b      	ldr	r3, [pc, #556]	; (800818c <drawFrame+0x1540>)
 8007f60:	791b      	ldrb	r3, [r3, #4]
 8007f62:	461a      	mov	r2, r3
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007f70:	4a87      	ldr	r2, [pc, #540]	; (8008190 <drawFrame+0x1544>)
 8007f72:	441a      	add	r2, r3
 8007f74:	4b85      	ldr	r3, [pc, #532]	; (800818c <drawFrame+0x1540>)
 8007f76:	795b      	ldrb	r3, [r3, #5]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	211c      	movs	r1, #28
 8007f7e:	2005      	movs	r0, #5
 8007f80:	f7fe f988 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8007f84:	4b80      	ldr	r3, [pc, #512]	; (8008188 <drawFrame+0x153c>)
 8007f86:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4b7e      	ldr	r3, [pc, #504]	; (8008188 <drawFrame+0x153c>)
 8007f8e:	4413      	add	r3, r2
 8007f90:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007f94:	461a      	mov	r2, r3
 8007f96:	00d2      	lsls	r2, r2, #3
 8007f98:	4413      	add	r3, r2
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	330a      	adds	r3, #10
 8007f9e:	b2d9      	uxtb	r1, r3
 8007fa0:	4b7a      	ldr	r3, [pc, #488]	; (800818c <drawFrame+0x1540>)
 8007fa2:	795b      	ldrb	r3, [r3, #5]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4a7c      	ldr	r2, [pc, #496]	; (800819c <drawFrame+0x1550>)
 8007faa:	2001      	movs	r0, #1
 8007fac:	f7fe f972 	bl	8006294 <OLED_PutStr>
					break;
 8007fb0:	e173      	b.n	800829a <drawFrame+0x164e>

					case 2:					//kompensacja temperatury
						frame.totalPositions = 3;
 8007fb2:	4b75      	ldr	r3, [pc, #468]	; (8008188 <drawFrame+0x153c>)
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
						OLED_PutStr(10, 0, Thermal_Compensation[0][settings.language], 0, settings.contrast);			//tytul okna (komensacja temperatury)
 8007fba:	4b74      	ldr	r3, [pc, #464]	; (800818c <drawFrame+0x1540>)
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	4a75      	ldr	r2, [pc, #468]	; (80081a0 <drawFrame+0x1554>)
 8007fca:	441a      	add	r2, r3
 8007fcc:	4b6f      	ldr	r3, [pc, #444]	; (800818c <drawFrame+0x1540>)
 8007fce:	795b      	ldrb	r3, [r3, #5]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	200a      	movs	r0, #10
 8007fd8:	f7fe f95c 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 10, Thermal_Compensation[1][settings.language], 0, settings.contrast);
 8007fdc:	4b6b      	ldr	r3, [pc, #428]	; (800818c <drawFrame+0x1540>)
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	3324      	adds	r3, #36	; 0x24
 8007fec:	4a6c      	ldr	r2, [pc, #432]	; (80081a0 <drawFrame+0x1554>)
 8007fee:	441a      	add	r2, r3
 8007ff0:	4b66      	ldr	r3, [pc, #408]	; (800818c <drawFrame+0x1540>)
 8007ff2:	795b      	ldrb	r3, [r3, #5]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	210a      	movs	r1, #10
 8007ffa:	2005      	movs	r0, #5
 8007ffc:	f7fe f94a 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 19, Thermal_Compensation[2][settings.language], 0, settings.contrast);
 8008000:	4b62      	ldr	r3, [pc, #392]	; (800818c <drawFrame+0x1540>)
 8008002:	791b      	ldrb	r3, [r3, #4]
 8008004:	461a      	mov	r2, r3
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	4413      	add	r3, r2
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	3348      	adds	r3, #72	; 0x48
 8008010:	4a63      	ldr	r2, [pc, #396]	; (80081a0 <drawFrame+0x1554>)
 8008012:	441a      	add	r2, r3
 8008014:	4b5d      	ldr	r3, [pc, #372]	; (800818c <drawFrame+0x1540>)
 8008016:	795b      	ldrb	r3, [r3, #5]
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	2113      	movs	r1, #19
 800801e:	2005      	movs	r0, #5
 8008020:	f7fe f938 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 8008024:	4b59      	ldr	r3, [pc, #356]	; (800818c <drawFrame+0x1540>)
 8008026:	791b      	ldrb	r3, [r3, #4]
 8008028:	461a      	mov	r2, r3
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008036:	4a56      	ldr	r2, [pc, #344]	; (8008190 <drawFrame+0x1544>)
 8008038:	441a      	add	r2, r3
 800803a:	4b54      	ldr	r3, [pc, #336]	; (800818c <drawFrame+0x1540>)
 800803c:	795b      	ldrb	r3, [r3, #5]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	2300      	movs	r3, #0
 8008042:	211c      	movs	r1, #28
 8008044:	2005      	movs	r0, #5
 8008046:	f7fe f925 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 800804a:	4b4f      	ldr	r3, [pc, #316]	; (8008188 <drawFrame+0x153c>)
 800804c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008050:	461a      	mov	r2, r3
 8008052:	4b4d      	ldr	r3, [pc, #308]	; (8008188 <drawFrame+0x153c>)
 8008054:	4413      	add	r3, r2
 8008056:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800805a:	461a      	mov	r2, r3
 800805c:	00d2      	lsls	r2, r2, #3
 800805e:	4413      	add	r3, r2
 8008060:	b2db      	uxtb	r3, r3
 8008062:	330a      	adds	r3, #10
 8008064:	b2d9      	uxtb	r1, r3
 8008066:	4b49      	ldr	r3, [pc, #292]	; (800818c <drawFrame+0x1540>)
 8008068:	795b      	ldrb	r3, [r3, #5]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	4a4b      	ldr	r2, [pc, #300]	; (800819c <drawFrame+0x1550>)
 8008070:	2001      	movs	r0, #1
 8008072:	f7fe f90f 	bl	8006294 <OLED_PutStr>
					break;
 8008076:	e110      	b.n	800829a <drawFrame+0x164e>

					case 3:					//ustawienia
						frame.totalPositions = 5;
 8008078:	4b43      	ldr	r3, [pc, #268]	; (8008188 <drawFrame+0x153c>)
 800807a:	2205      	movs	r2, #5
 800807c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
						OLED_PutStr(10, 0, Settings[0][settings.language], 0, settings.contrast);			//tytul okna (ustawienia)
 8008080:	4b42      	ldr	r3, [pc, #264]	; (800818c <drawFrame+0x1540>)
 8008082:	791b      	ldrb	r3, [r3, #4]
 8008084:	461a      	mov	r2, r3
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4a45      	ldr	r2, [pc, #276]	; (80081a4 <drawFrame+0x1558>)
 8008090:	441a      	add	r2, r3
 8008092:	4b3e      	ldr	r3, [pc, #248]	; (800818c <drawFrame+0x1540>)
 8008094:	795b      	ldrb	r3, [r3, #5]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2300      	movs	r3, #0
 800809a:	2100      	movs	r1, #0
 800809c:	200a      	movs	r0, #10
 800809e:	f7fe f8f9 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 10, Settings[1][settings.language], 0, settings.contrast);
 80080a2:	4b3a      	ldr	r3, [pc, #232]	; (800818c <drawFrame+0x1540>)
 80080a4:	791b      	ldrb	r3, [r3, #4]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	3328      	adds	r3, #40	; 0x28
 80080b2:	4a3c      	ldr	r2, [pc, #240]	; (80081a4 <drawFrame+0x1558>)
 80080b4:	441a      	add	r2, r3
 80080b6:	4b35      	ldr	r3, [pc, #212]	; (800818c <drawFrame+0x1540>)
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	2300      	movs	r3, #0
 80080be:	210a      	movs	r1, #10
 80080c0:	2005      	movs	r0, #5
 80080c2:	f7fe f8e7 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 19, Settings[2][settings.language], 0, settings.contrast);
 80080c6:	4b31      	ldr	r3, [pc, #196]	; (800818c <drawFrame+0x1540>)
 80080c8:	791b      	ldrb	r3, [r3, #4]
 80080ca:	461a      	mov	r2, r3
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	3350      	adds	r3, #80	; 0x50
 80080d6:	4a33      	ldr	r2, [pc, #204]	; (80081a4 <drawFrame+0x1558>)
 80080d8:	441a      	add	r2, r3
 80080da:	4b2c      	ldr	r3, [pc, #176]	; (800818c <drawFrame+0x1540>)
 80080dc:	795b      	ldrb	r3, [r3, #5]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	2113      	movs	r1, #19
 80080e4:	2005      	movs	r0, #5
 80080e6:	f7fe f8d5 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 28, Settings[3][settings.language], 0, settings.contrast);
 80080ea:	4b28      	ldr	r3, [pc, #160]	; (800818c <drawFrame+0x1540>)
 80080ec:	791b      	ldrb	r3, [r3, #4]
 80080ee:	461a      	mov	r2, r3
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	3378      	adds	r3, #120	; 0x78
 80080fa:	4a2a      	ldr	r2, [pc, #168]	; (80081a4 <drawFrame+0x1558>)
 80080fc:	441a      	add	r2, r3
 80080fe:	4b23      	ldr	r3, [pc, #140]	; (800818c <drawFrame+0x1540>)
 8008100:	795b      	ldrb	r3, [r3, #5]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	211c      	movs	r1, #28
 8008108:	2005      	movs	r0, #5
 800810a:	f7fe f8c3 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 37, Settings[4][settings.language], 0, settings.contrast);
 800810e:	4b1f      	ldr	r3, [pc, #124]	; (800818c <drawFrame+0x1540>)
 8008110:	791b      	ldrb	r3, [r3, #4]
 8008112:	461a      	mov	r2, r3
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	33a0      	adds	r3, #160	; 0xa0
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <drawFrame+0x1558>)
 8008120:	441a      	add	r2, r3
 8008122:	4b1a      	ldr	r3, [pc, #104]	; (800818c <drawFrame+0x1540>)
 8008124:	795b      	ldrb	r3, [r3, #5]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	2125      	movs	r1, #37	; 0x25
 800812c:	2005      	movs	r0, #5
 800812e:	f7fe f8b1 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 46, Main_Menu[7][settings.language], 0, settings.contrast);
 8008132:	4b16      	ldr	r3, [pc, #88]	; (800818c <drawFrame+0x1540>)
 8008134:	791b      	ldrb	r3, [r3, #4]
 8008136:	461a      	mov	r2, r3
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008144:	4a12      	ldr	r2, [pc, #72]	; (8008190 <drawFrame+0x1544>)
 8008146:	441a      	add	r2, r3
 8008148:	4b10      	ldr	r3, [pc, #64]	; (800818c <drawFrame+0x1540>)
 800814a:	795b      	ldrb	r3, [r3, #5]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	212e      	movs	r1, #46	; 0x2e
 8008152:	2005      	movs	r0, #5
 8008154:	f7fe f89e 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8008158:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <drawFrame+0x153c>)
 800815a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800815e:	461a      	mov	r2, r3
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <drawFrame+0x153c>)
 8008162:	4413      	add	r3, r2
 8008164:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008168:	461a      	mov	r2, r3
 800816a:	00d2      	lsls	r2, r2, #3
 800816c:	4413      	add	r3, r2
 800816e:	b2db      	uxtb	r3, r3
 8008170:	330a      	adds	r3, #10
 8008172:	b2d9      	uxtb	r1, r3
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <drawFrame+0x1540>)
 8008176:	795b      	ldrb	r3, [r3, #5]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	2300      	movs	r3, #0
 800817c:	4a07      	ldr	r2, [pc, #28]	; (800819c <drawFrame+0x1550>)
 800817e:	2001      	movs	r0, #1
 8008180:	f7fe f888 	bl	8006294 <OLED_PutStr>
					break;
 8008184:	e089      	b.n	800829a <drawFrame+0x164e>
 8008186:	bf00      	nop
 8008188:	20001244 	.word	0x20001244
 800818c:	200006c4 	.word	0x200006c4
 8008190:	08012ee0 	.word	0x08012ee0
 8008194:	080135e8 	.word	0x080135e8
 8008198:	08013050 	.word	0x08013050
 800819c:	080135e4 	.word	0x080135e4
 80081a0:	08013074 	.word	0x08013074
 80081a4:	080130e0 	.word	0x080130e0

					case 4:
											// archiwum
						frame.totalPositions = 4;
 80081a8:	4ba6      	ldr	r3, [pc, #664]	; (8008444 <drawFrame+0x17f8>)
 80081aa:	2204      	movs	r2, #4
 80081ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
						OLED_PutStr(10, 0, Archive[7][settings.language], 0, settings.contrast);			//tytul okna (ustawienia)
 80081b0:	4ba5      	ldr	r3, [pc, #660]	; (8008448 <drawFrame+0x17fc>)
 80081b2:	791b      	ldrb	r3, [r3, #4]
 80081b4:	461a      	mov	r2, r3
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	33c4      	adds	r3, #196	; 0xc4
 80081c0:	4aa2      	ldr	r2, [pc, #648]	; (800844c <drawFrame+0x1800>)
 80081c2:	441a      	add	r2, r3
 80081c4:	4ba0      	ldr	r3, [pc, #640]	; (8008448 <drawFrame+0x17fc>)
 80081c6:	795b      	ldrb	r3, [r3, #5]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	2300      	movs	r3, #0
 80081cc:	2100      	movs	r1, #0
 80081ce:	200a      	movs	r0, #10
 80081d0:	f7fe f860 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 10, Archive[0][settings.language], 0, settings.contrast);
 80081d4:	4b9c      	ldr	r3, [pc, #624]	; (8008448 <drawFrame+0x17fc>)
 80081d6:	791b      	ldrb	r3, [r3, #4]
 80081d8:	461a      	mov	r2, r3
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4a9a      	ldr	r2, [pc, #616]	; (800844c <drawFrame+0x1800>)
 80081e4:	441a      	add	r2, r3
 80081e6:	4b98      	ldr	r3, [pc, #608]	; (8008448 <drawFrame+0x17fc>)
 80081e8:	795b      	ldrb	r3, [r3, #5]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	2300      	movs	r3, #0
 80081ee:	210a      	movs	r1, #10
 80081f0:	2005      	movs	r0, #5
 80081f2:	f7fe f84f 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 19, Archive[1][settings.language], 0, settings.contrast);
 80081f6:	4b94      	ldr	r3, [pc, #592]	; (8008448 <drawFrame+0x17fc>)
 80081f8:	791b      	ldrb	r3, [r3, #4]
 80081fa:	461a      	mov	r2, r3
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	331c      	adds	r3, #28
 8008206:	4a91      	ldr	r2, [pc, #580]	; (800844c <drawFrame+0x1800>)
 8008208:	441a      	add	r2, r3
 800820a:	4b8f      	ldr	r3, [pc, #572]	; (8008448 <drawFrame+0x17fc>)
 800820c:	795b      	ldrb	r3, [r3, #5]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	2300      	movs	r3, #0
 8008212:	2113      	movs	r1, #19
 8008214:	2005      	movs	r0, #5
 8008216:	f7fe f83d 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 28, Archive[2][settings.language], 0, settings.contrast);
 800821a:	4b8b      	ldr	r3, [pc, #556]	; (8008448 <drawFrame+0x17fc>)
 800821c:	791b      	ldrb	r3, [r3, #4]
 800821e:	461a      	mov	r2, r3
 8008220:	4613      	mov	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	3338      	adds	r3, #56	; 0x38
 800822a:	4a88      	ldr	r2, [pc, #544]	; (800844c <drawFrame+0x1800>)
 800822c:	441a      	add	r2, r3
 800822e:	4b86      	ldr	r3, [pc, #536]	; (8008448 <drawFrame+0x17fc>)
 8008230:	795b      	ldrb	r3, [r3, #5]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	211c      	movs	r1, #28
 8008238:	2005      	movs	r0, #5
 800823a:	f7fe f82b 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(5, 37, Main_Menu[7][settings.language], 0, settings.contrast);
 800823e:	4b82      	ldr	r3, [pc, #520]	; (8008448 <drawFrame+0x17fc>)
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	461a      	mov	r2, r3
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008250:	4a7f      	ldr	r2, [pc, #508]	; (8008450 <drawFrame+0x1804>)
 8008252:	441a      	add	r2, r3
 8008254:	4b7c      	ldr	r3, [pc, #496]	; (8008448 <drawFrame+0x17fc>)
 8008256:	795b      	ldrb	r3, [r3, #5]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	2125      	movs	r1, #37	; 0x25
 800825e:	2005      	movs	r0, #5
 8008260:	f7fe f818 	bl	8006294 <OLED_PutStr>
						OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8008264:	4b77      	ldr	r3, [pc, #476]	; (8008444 <drawFrame+0x17f8>)
 8008266:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800826a:	461a      	mov	r2, r3
 800826c:	4b75      	ldr	r3, [pc, #468]	; (8008444 <drawFrame+0x17f8>)
 800826e:	4413      	add	r3, r2
 8008270:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008274:	461a      	mov	r2, r3
 8008276:	00d2      	lsls	r2, r2, #3
 8008278:	4413      	add	r3, r2
 800827a:	b2db      	uxtb	r3, r3
 800827c:	330a      	adds	r3, #10
 800827e:	b2d9      	uxtb	r1, r3
 8008280:	4b71      	ldr	r3, [pc, #452]	; (8008448 <drawFrame+0x17fc>)
 8008282:	795b      	ldrb	r3, [r3, #5]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2300      	movs	r3, #0
 8008288:	4a72      	ldr	r2, [pc, #456]	; (8008454 <drawFrame+0x1808>)
 800828a:	2001      	movs	r0, #1
 800828c:	f7fe f802 	bl	8006294 <OLED_PutStr>
						break;
 8008290:	e003      	b.n	800829a <drawFrame+0x164e>

					case 5:					//wyjscie
						exit_main_menu();
 8008292:	f7fe fc97 	bl	8006bc4 <exit_main_menu>
					break;
 8008296:	e000      	b.n	800829a <drawFrame+0x164e>
				}
			}
 8008298:	bf00      	nop

			if (frame.level == 2)			//jezeli w podmenu ustawienia/Archiwum
 800829a:	4b6a      	ldr	r3, [pc, #424]	; (8008444 <drawFrame+0x17f8>)
 800829c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	f040 8227 	bne.w	80086f4 <drawFrame+0x1aa8>
			{
				if (frame.position[0] == MAIN_MENU_SETTINGS)	//jesli w podmenu ustawienia
 80082a6:	4b67      	ldr	r3, [pc, #412]	; (8008444 <drawFrame+0x17f8>)
 80082a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	f040 81ac 	bne.w	800860a <drawFrame+0x19be>
				{
					switch (frame.position[1])	//sprawdz ktore podmenu menu ustawienia zostalo wybrane
 80082b2:	4b64      	ldr	r3, [pc, #400]	; (8008444 <drawFrame+0x17f8>)
 80082b4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	f200 81a7 	bhi.w	800860c <drawFrame+0x19c0>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <drawFrame+0x1678>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	08008353 	.word	0x08008353
 80082cc:	08008475 	.word	0x08008475
 80082d0:	08008567 	.word	0x08008567
					{
						 case SETTINGS_SUBMENU_SINGLE_MEASUREMENT_TIME:
							 frame.valueMin = 15;
 80082d4:	4b5b      	ldr	r3, [pc, #364]	; (8008444 <drawFrame+0x17f8>)
 80082d6:	220f      	movs	r2, #15
 80082d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
							 frame.valueMax = 40;
 80082dc:	4b59      	ldr	r3, [pc, #356]	; (8008444 <drawFrame+0x17f8>)
 80082de:	2228      	movs	r2, #40	; 0x28
 80082e0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
							 sprintf(frame.firstLine,Settings[0][settings.language]);
 80082e4:	4b58      	ldr	r3, [pc, #352]	; (8008448 <drawFrame+0x17fc>)
 80082e6:	791b      	ldrb	r3, [r3, #4]
 80082e8:	461a      	mov	r2, r3
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a59      	ldr	r2, [pc, #356]	; (8008458 <drawFrame+0x180c>)
 80082f4:	4413      	add	r3, r2
 80082f6:	4619      	mov	r1, r3
 80082f8:	4858      	ldr	r0, [pc, #352]	; (800845c <drawFrame+0x1810>)
 80082fa:	f003 fd4f 	bl	800bd9c <siprintf>
							 sprintf(frame.secondLine, Settings[1][settings.language]);
 80082fe:	4b52      	ldr	r3, [pc, #328]	; (8008448 <drawFrame+0x17fc>)
 8008300:	791b      	ldrb	r3, [r3, #4]
 8008302:	461a      	mov	r2, r3
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	3328      	adds	r3, #40	; 0x28
 800830e:	4a52      	ldr	r2, [pc, #328]	; (8008458 <drawFrame+0x180c>)
 8008310:	4413      	add	r3, r2
 8008312:	4619      	mov	r1, r3
 8008314:	4852      	ldr	r0, [pc, #328]	; (8008460 <drawFrame+0x1814>)
 8008316:	f003 fd41 	bl	800bd9c <siprintf>
							 sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 800831a:	4b4a      	ldr	r3, [pc, #296]	; (8008444 <drawFrame+0x17f8>)
 800831c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008320:	461a      	mov	r2, r3
 8008322:	4950      	ldr	r1, [pc, #320]	; (8008464 <drawFrame+0x1818>)
 8008324:	4850      	ldr	r0, [pc, #320]	; (8008468 <drawFrame+0x181c>)
 8008326:	f003 fd39 	bl	800bd9c <siprintf>
							 frame.value = settings.singleMeasurementTime;
 800832a:	4b47      	ldr	r3, [pc, #284]	; (8008448 <drawFrame+0x17fc>)
 800832c:	78db      	ldrb	r3, [r3, #3]
 800832e:	b29a      	uxth	r2, r3
 8008330:	4b44      	ldr	r3, [pc, #272]	; (8008444 <drawFrame+0x17f8>)
 8008332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 8008336:	4b43      	ldr	r3, [pc, #268]	; (8008444 <drawFrame+0x17f8>)
 8008338:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800833c:	461a      	mov	r2, r3
 800833e:	494b      	ldr	r1, [pc, #300]	; (800846c <drawFrame+0x1820>)
 8008340:	484b      	ldr	r0, [pc, #300]	; (8008470 <drawFrame+0x1824>)
 8008342:	f003 fd2b 	bl	800bd9c <siprintf>
							 OLED_CLEAR();
 8008346:	f7fd fcc2 	bl	8005cce <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 800834a:	4b3e      	ldr	r3, [pc, #248]	; (8008444 <drawFrame+0x17f8>)
 800834c:	2203      	movs	r2, #3
 800834e:	701a      	strb	r2, [r3, #0]
							 break;
 8008350:	e15c      	b.n	800860c <drawFrame+0x19c0>

						case SETTINGS_SUBMENU_DATE:				//data
							frame.totalPositions = 4;
 8008352:	4b3c      	ldr	r3, [pc, #240]	; (8008444 <drawFrame+0x17f8>)
 8008354:	2204      	movs	r2, #4
 8008356:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
							OLED_PutStr(10, 0, Settings[5][settings.language], 0, settings.contrast);			//tytul okna (ustaw date)
 800835a:	4b3b      	ldr	r3, [pc, #236]	; (8008448 <drawFrame+0x17fc>)
 800835c:	791b      	ldrb	r3, [r3, #4]
 800835e:	461a      	mov	r2, r3
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	33c8      	adds	r3, #200	; 0xc8
 800836a:	4a3b      	ldr	r2, [pc, #236]	; (8008458 <drawFrame+0x180c>)
 800836c:	441a      	add	r2, r3
 800836e:	4b36      	ldr	r3, [pc, #216]	; (8008448 <drawFrame+0x17fc>)
 8008370:	795b      	ldrb	r3, [r3, #5]
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	2100      	movs	r1, #0
 8008378:	200a      	movs	r0, #10
 800837a:	f7fd ff8b 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 10, Settings[9][settings.language], 0, settings.contrast);
 800837e:	4b32      	ldr	r3, [pc, #200]	; (8008448 <drawFrame+0x17fc>)
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	461a      	mov	r2, r3
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008390:	4a31      	ldr	r2, [pc, #196]	; (8008458 <drawFrame+0x180c>)
 8008392:	441a      	add	r2, r3
 8008394:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <drawFrame+0x17fc>)
 8008396:	795b      	ldrb	r3, [r3, #5]
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	210a      	movs	r1, #10
 800839e:	2005      	movs	r0, #5
 80083a0:	f7fd ff78 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 19, Settings[8][settings.language], 0, settings.contrast);
 80083a4:	4b28      	ldr	r3, [pc, #160]	; (8008448 <drawFrame+0x17fc>)
 80083a6:	791b      	ldrb	r3, [r3, #4]
 80083a8:	461a      	mov	r2, r3
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80083b6:	4a28      	ldr	r2, [pc, #160]	; (8008458 <drawFrame+0x180c>)
 80083b8:	441a      	add	r2, r3
 80083ba:	4b23      	ldr	r3, [pc, #140]	; (8008448 <drawFrame+0x17fc>)
 80083bc:	795b      	ldrb	r3, [r3, #5]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	2113      	movs	r1, #19
 80083c4:	2005      	movs	r0, #5
 80083c6:	f7fd ff65 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 28, Settings[7][settings.language], 0, settings.contrast);
 80083ca:	4b1f      	ldr	r3, [pc, #124]	; (8008448 <drawFrame+0x17fc>)
 80083cc:	791b      	ldrb	r3, [r3, #4]
 80083ce:	461a      	mov	r2, r3
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80083dc:	4a1e      	ldr	r2, [pc, #120]	; (8008458 <drawFrame+0x180c>)
 80083de:	441a      	add	r2, r3
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <drawFrame+0x17fc>)
 80083e2:	795b      	ldrb	r3, [r3, #5]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	2300      	movs	r3, #0
 80083e8:	211c      	movs	r1, #28
 80083ea:	2005      	movs	r0, #5
 80083ec:	f7fd ff52 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 37, Main_Menu[7][settings.language], 0, settings.contrast);
 80083f0:	4b15      	ldr	r3, [pc, #84]	; (8008448 <drawFrame+0x17fc>)
 80083f2:	791b      	ldrb	r3, [r3, #4]
 80083f4:	461a      	mov	r2, r3
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008402:	4a13      	ldr	r2, [pc, #76]	; (8008450 <drawFrame+0x1804>)
 8008404:	441a      	add	r2, r3
 8008406:	4b10      	ldr	r3, [pc, #64]	; (8008448 <drawFrame+0x17fc>)
 8008408:	795b      	ldrb	r3, [r3, #5]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	2125      	movs	r1, #37	; 0x25
 8008410:	2005      	movs	r0, #5
 8008412:	f7fd ff3f 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <drawFrame+0x17f8>)
 8008418:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800841c:	461a      	mov	r2, r3
 800841e:	4b09      	ldr	r3, [pc, #36]	; (8008444 <drawFrame+0x17f8>)
 8008420:	4413      	add	r3, r2
 8008422:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008426:	461a      	mov	r2, r3
 8008428:	00d2      	lsls	r2, r2, #3
 800842a:	4413      	add	r3, r2
 800842c:	b2db      	uxtb	r3, r3
 800842e:	330a      	adds	r3, #10
 8008430:	b2d9      	uxtb	r1, r3
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <drawFrame+0x17fc>)
 8008434:	795b      	ldrb	r3, [r3, #5]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	2300      	movs	r3, #0
 800843a:	4a06      	ldr	r2, [pc, #24]	; (8008454 <drawFrame+0x1808>)
 800843c:	2001      	movs	r0, #1
 800843e:	f7fd ff29 	bl	8006294 <OLED_PutStr>
							break;
 8008442:	e0e3      	b.n	800860c <drawFrame+0x19c0>
 8008444:	20001244 	.word	0x20001244
 8008448:	200006c4 	.word	0x200006c4
 800844c:	080132e8 	.word	0x080132e8
 8008450:	08012ee0 	.word	0x08012ee0
 8008454:	080135e4 	.word	0x080135e4
 8008458:	080130e0 	.word	0x080130e0
 800845c:	20001245 	.word	0x20001245
 8008460:	2000125d 	.word	0x2000125d
 8008464:	080135f0 	.word	0x080135f0
 8008468:	20001275 	.word	0x20001275
 800846c:	080135fc 	.word	0x080135fc
 8008470:	2000128d 	.word	0x2000128d

						case SETTINGS_SUBMENU_TIME:				//czas
							frame.totalPositions = 4;
 8008474:	4baf      	ldr	r3, [pc, #700]	; (8008734 <drawFrame+0x1ae8>)
 8008476:	2204      	movs	r2, #4
 8008478:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
							OLED_PutStr(10, 0, Settings[6][settings.language], 0, settings.contrast);			//tytul okna (ustaw czas)
 800847c:	4bae      	ldr	r3, [pc, #696]	; (8008738 <drawFrame+0x1aec>)
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	461a      	mov	r2, r3
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	33f0      	adds	r3, #240	; 0xf0
 800848c:	4aab      	ldr	r2, [pc, #684]	; (800873c <drawFrame+0x1af0>)
 800848e:	441a      	add	r2, r3
 8008490:	4ba9      	ldr	r3, [pc, #676]	; (8008738 <drawFrame+0x1aec>)
 8008492:	795b      	ldrb	r3, [r3, #5]
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	2300      	movs	r3, #0
 8008498:	2100      	movs	r1, #0
 800849a:	200a      	movs	r0, #10
 800849c:	f7fd fefa 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 10, Settings[10][settings.language], 0, settings.contrast);
 80084a0:	4ba5      	ldr	r3, [pc, #660]	; (8008738 <drawFrame+0x1aec>)
 80084a2:	791b      	ldrb	r3, [r3, #4]
 80084a4:	461a      	mov	r2, r3
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80084b2:	4aa2      	ldr	r2, [pc, #648]	; (800873c <drawFrame+0x1af0>)
 80084b4:	441a      	add	r2, r3
 80084b6:	4ba0      	ldr	r3, [pc, #640]	; (8008738 <drawFrame+0x1aec>)
 80084b8:	795b      	ldrb	r3, [r3, #5]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2300      	movs	r3, #0
 80084be:	210a      	movs	r1, #10
 80084c0:	2005      	movs	r0, #5
 80084c2:	f7fd fee7 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 19, Settings[11][settings.language], 0, settings.contrast);
 80084c6:	4b9c      	ldr	r3, [pc, #624]	; (8008738 <drawFrame+0x1aec>)
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	461a      	mov	r2, r3
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80084d8:	4a98      	ldr	r2, [pc, #608]	; (800873c <drawFrame+0x1af0>)
 80084da:	441a      	add	r2, r3
 80084dc:	4b96      	ldr	r3, [pc, #600]	; (8008738 <drawFrame+0x1aec>)
 80084de:	795b      	ldrb	r3, [r3, #5]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	2113      	movs	r1, #19
 80084e6:	2005      	movs	r0, #5
 80084e8:	f7fd fed4 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 28, Settings[12][settings.language], 0, settings.contrast);
 80084ec:	4b92      	ldr	r3, [pc, #584]	; (8008738 <drawFrame+0x1aec>)
 80084ee:	791b      	ldrb	r3, [r3, #4]
 80084f0:	461a      	mov	r2, r3
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80084fe:	4a8f      	ldr	r2, [pc, #572]	; (800873c <drawFrame+0x1af0>)
 8008500:	441a      	add	r2, r3
 8008502:	4b8d      	ldr	r3, [pc, #564]	; (8008738 <drawFrame+0x1aec>)
 8008504:	795b      	ldrb	r3, [r3, #5]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	2300      	movs	r3, #0
 800850a:	211c      	movs	r1, #28
 800850c:	2005      	movs	r0, #5
 800850e:	f7fd fec1 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 37, Main_Menu[7][settings.language], 0, settings.contrast);
 8008512:	4b89      	ldr	r3, [pc, #548]	; (8008738 <drawFrame+0x1aec>)
 8008514:	791b      	ldrb	r3, [r3, #4]
 8008516:	461a      	mov	r2, r3
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008524:	4a86      	ldr	r2, [pc, #536]	; (8008740 <drawFrame+0x1af4>)
 8008526:	441a      	add	r2, r3
 8008528:	4b83      	ldr	r3, [pc, #524]	; (8008738 <drawFrame+0x1aec>)
 800852a:	795b      	ldrb	r3, [r3, #5]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	2300      	movs	r3, #0
 8008530:	2125      	movs	r1, #37	; 0x25
 8008532:	2005      	movs	r0, #5
 8008534:	f7fd feae 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 8008538:	4b7e      	ldr	r3, [pc, #504]	; (8008734 <drawFrame+0x1ae8>)
 800853a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800853e:	461a      	mov	r2, r3
 8008540:	4b7c      	ldr	r3, [pc, #496]	; (8008734 <drawFrame+0x1ae8>)
 8008542:	4413      	add	r3, r2
 8008544:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008548:	461a      	mov	r2, r3
 800854a:	00d2      	lsls	r2, r2, #3
 800854c:	4413      	add	r3, r2
 800854e:	b2db      	uxtb	r3, r3
 8008550:	330a      	adds	r3, #10
 8008552:	b2d9      	uxtb	r1, r3
 8008554:	4b78      	ldr	r3, [pc, #480]	; (8008738 <drawFrame+0x1aec>)
 8008556:	795b      	ldrb	r3, [r3, #5]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	2300      	movs	r3, #0
 800855c:	4a79      	ldr	r2, [pc, #484]	; (8008744 <drawFrame+0x1af8>)
 800855e:	2001      	movs	r0, #1
 8008560:	f7fd fe98 	bl	8006294 <OLED_PutStr>
							break;
 8008564:	e052      	b.n	800860c <drawFrame+0x19c0>

						case SETTINGS_SUBMENU_LANGUAGE:				//jezyk
							frame.totalPositions = 3;
 8008566:	4b73      	ldr	r3, [pc, #460]	; (8008734 <drawFrame+0x1ae8>)
 8008568:	2203      	movs	r2, #3
 800856a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
							OLED_PutStr(10, 0, Settings[4][settings.language], 0, settings.contrast);			//tytul okna (sposob wyswietlania)
 800856e:	4b72      	ldr	r3, [pc, #456]	; (8008738 <drawFrame+0x1aec>)
 8008570:	791b      	ldrb	r3, [r3, #4]
 8008572:	461a      	mov	r2, r3
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	33a0      	adds	r3, #160	; 0xa0
 800857e:	4a6f      	ldr	r2, [pc, #444]	; (800873c <drawFrame+0x1af0>)
 8008580:	441a      	add	r2, r3
 8008582:	4b6d      	ldr	r3, [pc, #436]	; (8008738 <drawFrame+0x1aec>)
 8008584:	795b      	ldrb	r3, [r3, #5]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	2300      	movs	r3, #0
 800858a:	2100      	movs	r1, #0
 800858c:	200a      	movs	r0, #10
 800858e:	f7fd fe81 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 10, Languages[0], 0, settings.contrast);
 8008592:	4b69      	ldr	r3, [pc, #420]	; (8008738 <drawFrame+0x1aec>)
 8008594:	795b      	ldrb	r3, [r3, #5]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	2300      	movs	r3, #0
 800859a:	4a6b      	ldr	r2, [pc, #428]	; (8008748 <drawFrame+0x1afc>)
 800859c:	210a      	movs	r1, #10
 800859e:	2005      	movs	r0, #5
 80085a0:	f7fd fe78 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 19, Languages[1], 0, settings.contrast);
 80085a4:	4b64      	ldr	r3, [pc, #400]	; (8008738 <drawFrame+0x1aec>)
 80085a6:	795b      	ldrb	r3, [r3, #5]
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	4a67      	ldr	r2, [pc, #412]	; (800874c <drawFrame+0x1b00>)
 80085ae:	2113      	movs	r1, #19
 80085b0:	2005      	movs	r0, #5
 80085b2:	f7fd fe6f 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 80085b6:	4b60      	ldr	r3, [pc, #384]	; (8008738 <drawFrame+0x1aec>)
 80085b8:	791b      	ldrb	r3, [r3, #4]
 80085ba:	461a      	mov	r2, r3
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80085c8:	4a5d      	ldr	r2, [pc, #372]	; (8008740 <drawFrame+0x1af4>)
 80085ca:	441a      	add	r2, r3
 80085cc:	4b5a      	ldr	r3, [pc, #360]	; (8008738 <drawFrame+0x1aec>)
 80085ce:	795b      	ldrb	r3, [r3, #5]
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	211c      	movs	r1, #28
 80085d6:	2005      	movs	r0, #5
 80085d8:	f7fd fe5c 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 80085dc:	4b55      	ldr	r3, [pc, #340]	; (8008734 <drawFrame+0x1ae8>)
 80085de:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b53      	ldr	r3, [pc, #332]	; (8008734 <drawFrame+0x1ae8>)
 80085e6:	4413      	add	r3, r2
 80085e8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80085ec:	461a      	mov	r2, r3
 80085ee:	00d2      	lsls	r2, r2, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	330a      	adds	r3, #10
 80085f6:	b2d9      	uxtb	r1, r3
 80085f8:	4b4f      	ldr	r3, [pc, #316]	; (8008738 <drawFrame+0x1aec>)
 80085fa:	795b      	ldrb	r3, [r3, #5]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	2300      	movs	r3, #0
 8008600:	4a50      	ldr	r2, [pc, #320]	; (8008744 <drawFrame+0x1af8>)
 8008602:	2001      	movs	r0, #1
 8008604:	f7fd fe46 	bl	8006294 <OLED_PutStr>
							break;
 8008608:	e000      	b.n	800860c <drawFrame+0x19c0>
					}
				}
 800860a:	bf00      	nop

				if (frame.position[0] == MAIN_MENU_ARCHIVE) //jesli w podmenu archiwum
 800860c:	4b49      	ldr	r3, [pc, #292]	; (8008734 <drawFrame+0x1ae8>)
 800860e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008612:	2b04      	cmp	r3, #4
 8008614:	d16e      	bne.n	80086f4 <drawFrame+0x1aa8>
				{
					switch (frame.position[1])	//sprawdz ktore podmenu menu archiwum zostalo wybrane
 8008616:	4b47      	ldr	r3, [pc, #284]	; (8008734 <drawFrame+0x1ae8>)
 8008618:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800861c:	2b02      	cmp	r3, #2
 800861e:	d06b      	beq.n	80086f8 <drawFrame+0x1aac>
 8008620:	2b02      	cmp	r3, #2
 8008622:	dc6c      	bgt.n	80086fe <drawFrame+0x1ab2>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d069      	beq.n	80086fc <drawFrame+0x1ab0>
 8008628:	2b01      	cmp	r3, #1
 800862a:	d168      	bne.n	80086fe <drawFrame+0x1ab2>
						case ARCHIVE_SUBMENU_BROWSE:
							//exit_main_menu();
							break;

						case ARCHIVE_SUBMENU_STORAGE_MODE:
							frame.totalPositions = 3;
 800862c:	4b41      	ldr	r3, [pc, #260]	; (8008734 <drawFrame+0x1ae8>)
 800862e:	2203      	movs	r2, #3
 8008630:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
							OLED_PutStr(10, 0, Archive[1][settings.language], 0, settings.contrast);			//tytul okna (sposob wyswietlania)
 8008634:	4b40      	ldr	r3, [pc, #256]	; (8008738 <drawFrame+0x1aec>)
 8008636:	791b      	ldrb	r3, [r3, #4]
 8008638:	461a      	mov	r2, r3
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	331c      	adds	r3, #28
 8008644:	4a42      	ldr	r2, [pc, #264]	; (8008750 <drawFrame+0x1b04>)
 8008646:	441a      	add	r2, r3
 8008648:	4b3b      	ldr	r3, [pc, #236]	; (8008738 <drawFrame+0x1aec>)
 800864a:	795b      	ldrb	r3, [r3, #5]
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	2100      	movs	r1, #0
 8008652:	200a      	movs	r0, #10
 8008654:	f7fd fe1e 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 10, Archive[4][settings.language], 0, settings.contrast);
 8008658:	4b37      	ldr	r3, [pc, #220]	; (8008738 <drawFrame+0x1aec>)
 800865a:	791b      	ldrb	r3, [r3, #4]
 800865c:	461a      	mov	r2, r3
 800865e:	4613      	mov	r3, r2
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	3370      	adds	r3, #112	; 0x70
 8008668:	4a39      	ldr	r2, [pc, #228]	; (8008750 <drawFrame+0x1b04>)
 800866a:	441a      	add	r2, r3
 800866c:	4b32      	ldr	r3, [pc, #200]	; (8008738 <drawFrame+0x1aec>)
 800866e:	795b      	ldrb	r3, [r3, #5]
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	2300      	movs	r3, #0
 8008674:	210a      	movs	r1, #10
 8008676:	2005      	movs	r0, #5
 8008678:	f7fd fe0c 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 19, Archive[5][settings.language], 0, settings.contrast);
 800867c:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <drawFrame+0x1aec>)
 800867e:	791b      	ldrb	r3, [r3, #4]
 8008680:	461a      	mov	r2, r3
 8008682:	4613      	mov	r3, r2
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	1a9b      	subs	r3, r3, r2
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	338c      	adds	r3, #140	; 0x8c
 800868c:	4a30      	ldr	r2, [pc, #192]	; (8008750 <drawFrame+0x1b04>)
 800868e:	441a      	add	r2, r3
 8008690:	4b29      	ldr	r3, [pc, #164]	; (8008738 <drawFrame+0x1aec>)
 8008692:	795b      	ldrb	r3, [r3, #5]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	2300      	movs	r3, #0
 8008698:	2113      	movs	r1, #19
 800869a:	2005      	movs	r0, #5
 800869c:	f7fd fdfa 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(5, 28, Main_Menu[7][settings.language], 0, settings.contrast);
 80086a0:	4b25      	ldr	r3, [pc, #148]	; (8008738 <drawFrame+0x1aec>)
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	461a      	mov	r2, r3
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80086b2:	4a23      	ldr	r2, [pc, #140]	; (8008740 <drawFrame+0x1af4>)
 80086b4:	441a      	add	r2, r3
 80086b6:	4b20      	ldr	r3, [pc, #128]	; (8008738 <drawFrame+0x1aec>)
 80086b8:	795b      	ldrb	r3, [r3, #5]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	2300      	movs	r3, #0
 80086be:	211c      	movs	r1, #28
 80086c0:	2005      	movs	r0, #5
 80086c2:	f7fd fde7 	bl	8006294 <OLED_PutStr>
							OLED_PutStr(1, frame.position[frame.level]*9 + 10, ">", 0, settings.contrast);
 80086c6:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <drawFrame+0x1ae8>)
 80086c8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80086cc:	461a      	mov	r2, r3
 80086ce:	4b19      	ldr	r3, [pc, #100]	; (8008734 <drawFrame+0x1ae8>)
 80086d0:	4413      	add	r3, r2
 80086d2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80086d6:	461a      	mov	r2, r3
 80086d8:	00d2      	lsls	r2, r2, #3
 80086da:	4413      	add	r3, r2
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	330a      	adds	r3, #10
 80086e0:	b2d9      	uxtb	r1, r3
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <drawFrame+0x1aec>)
 80086e4:	795b      	ldrb	r3, [r3, #5]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	2300      	movs	r3, #0
 80086ea:	4a16      	ldr	r2, [pc, #88]	; (8008744 <drawFrame+0x1af8>)
 80086ec:	2001      	movs	r0, #1
 80086ee:	f7fd fdd1 	bl	8006294 <OLED_PutStr>
							break;
 80086f2:	e004      	b.n	80086fe <drawFrame+0x1ab2>

						case ARCHIVE_SUBMENU_ERASE:
							//exit_main_menu();
							break;
					}
				}
 80086f4:	bf00      	nop
 80086f6:	e002      	b.n	80086fe <drawFrame+0x1ab2>
							break;
 80086f8:	bf00      	nop
 80086fa:	e000      	b.n	80086fe <drawFrame+0x1ab2>
							break;
 80086fc:	bf00      	nop

			}
			if (frame.level == 3)			//jezeli w podmenu daty/czasu
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <drawFrame+0x1ae8>)
 8008700:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008704:	2b03      	cmp	r3, #3
 8008706:	f040 81e4 	bne.w	8008ad2 <drawFrame+0x1e86>
			{
				if (frame.position[1] == SETTINGS_SUBMENU_DATE)	//jezeli w podmenu zmiany daty
 800870a:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <drawFrame+0x1ae8>)
 800870c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8008710:	2b01      	cmp	r3, #1
 8008712:	f040 80ed 	bne.w	80088f0 <drawFrame+0x1ca4>
				{
					switch (frame.position[2])	//sprawdz zmiana ktorego parametru zostala wybrana (dnia/miesiaca/roku)
 8008716:	4b07      	ldr	r3, [pc, #28]	; (8008734 <drawFrame+0x1ae8>)
 8008718:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800871c:	2b02      	cmp	r3, #2
 800871e:	f000 80a0 	beq.w	8008862 <drawFrame+0x1c16>
 8008722:	2b02      	cmp	r3, #2
 8008724:	f300 80e5 	bgt.w	80088f2 <drawFrame+0x1ca6>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d013      	beq.n	8008754 <drawFrame+0x1b08>
 800872c:	2b01      	cmp	r3, #1
 800872e:	d057      	beq.n	80087e0 <drawFrame+0x1b94>
 8008730:	e0df      	b.n	80088f2 <drawFrame+0x1ca6>
 8008732:	bf00      	nop
 8008734:	20001244 	.word	0x20001244
 8008738:	200006c4 	.word	0x200006c4
 800873c:	080130e0 	.word	0x080130e0
 8008740:	08012ee0 	.word	0x08012ee0
 8008744:	080135e4 	.word	0x080135e4
 8008748:	0801341c 	.word	0x0801341c
 800874c:	08013424 	.word	0x08013424
 8008750:	080132e8 	.word	0x080132e8
					{
						case DATE_YEAR_INPUT_SCREEN:				//rok
							 frame.valueMin = 2020;
 8008754:	4bb2      	ldr	r3, [pc, #712]	; (8008a20 <drawFrame+0x1dd4>)
 8008756:	f240 72e4 	movw	r2, #2020	; 0x7e4
 800875a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
							 frame.valueMax = 2099;
 800875e:	4bb0      	ldr	r3, [pc, #704]	; (8008a20 <drawFrame+0x1dd4>)
 8008760:	f640 0233 	movw	r2, #2099	; 0x833
 8008764:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[5][settings.language]);
 8008768:	4bae      	ldr	r3, [pc, #696]	; (8008a24 <drawFrame+0x1dd8>)
 800876a:	791b      	ldrb	r3, [r3, #4]
 800876c:	461a      	mov	r2, r3
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	33c8      	adds	r3, #200	; 0xc8
 8008778:	4aab      	ldr	r2, [pc, #684]	; (8008a28 <drawFrame+0x1ddc>)
 800877a:	4413      	add	r3, r2
 800877c:	4619      	mov	r1, r3
 800877e:	48ab      	ldr	r0, [pc, #684]	; (8008a2c <drawFrame+0x1de0>)
 8008780:	f003 fb0c 	bl	800bd9c <siprintf>
							 sprintf(frame.secondLine, Settings[9][settings.language]);
 8008784:	4ba7      	ldr	r3, [pc, #668]	; (8008a24 <drawFrame+0x1dd8>)
 8008786:	791b      	ldrb	r3, [r3, #4]
 8008788:	461a      	mov	r2, r3
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008796:	4aa4      	ldr	r2, [pc, #656]	; (8008a28 <drawFrame+0x1ddc>)
 8008798:	4413      	add	r3, r2
 800879a:	4619      	mov	r1, r3
 800879c:	48a4      	ldr	r0, [pc, #656]	; (8008a30 <drawFrame+0x1de4>)
 800879e:	f003 fafd 	bl	800bd9c <siprintf>
							 sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 80087a2:	4b9f      	ldr	r3, [pc, #636]	; (8008a20 <drawFrame+0x1dd4>)
 80087a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087a8:	461a      	mov	r2, r3
 80087aa:	49a2      	ldr	r1, [pc, #648]	; (8008a34 <drawFrame+0x1de8>)
 80087ac:	48a2      	ldr	r0, [pc, #648]	; (8008a38 <drawFrame+0x1dec>)
 80087ae:	f003 faf5 	bl	800bd9c <siprintf>
							 frame.value = gDate.Year + 2000;
 80087b2:	4ba2      	ldr	r3, [pc, #648]	; (8008a3c <drawFrame+0x1df0>)
 80087b4:	78db      	ldrb	r3, [r3, #3]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80087bc:	b29a      	uxth	r2, r3
 80087be:	4b98      	ldr	r3, [pc, #608]	; (8008a20 <drawFrame+0x1dd4>)
 80087c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 80087c4:	4b96      	ldr	r3, [pc, #600]	; (8008a20 <drawFrame+0x1dd4>)
 80087c6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80087ca:	461a      	mov	r2, r3
 80087cc:	499c      	ldr	r1, [pc, #624]	; (8008a40 <drawFrame+0x1df4>)
 80087ce:	489d      	ldr	r0, [pc, #628]	; (8008a44 <drawFrame+0x1df8>)
 80087d0:	f003 fae4 	bl	800bd9c <siprintf>
							 OLED_CLEAR();
 80087d4:	f7fd fa7b 	bl	8005cce <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 80087d8:	4b91      	ldr	r3, [pc, #580]	; (8008a20 <drawFrame+0x1dd4>)
 80087da:	2203      	movs	r2, #3
 80087dc:	701a      	strb	r2, [r3, #0]
							break;
 80087de:	e088      	b.n	80088f2 <drawFrame+0x1ca6>

						case DATE_MONTH_INPUT_SCREEN:				//miesiac
							 frame.valueMin = 1;
 80087e0:	4b8f      	ldr	r3, [pc, #572]	; (8008a20 <drawFrame+0x1dd4>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
							 frame.valueMax = 12;
 80087e8:	4b8d      	ldr	r3, [pc, #564]	; (8008a20 <drawFrame+0x1dd4>)
 80087ea:	220c      	movs	r2, #12
 80087ec:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[5][settings.language]);
 80087f0:	4b8c      	ldr	r3, [pc, #560]	; (8008a24 <drawFrame+0x1dd8>)
 80087f2:	791b      	ldrb	r3, [r3, #4]
 80087f4:	461a      	mov	r2, r3
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	33c8      	adds	r3, #200	; 0xc8
 8008800:	4a89      	ldr	r2, [pc, #548]	; (8008a28 <drawFrame+0x1ddc>)
 8008802:	4413      	add	r3, r2
 8008804:	4619      	mov	r1, r3
 8008806:	4889      	ldr	r0, [pc, #548]	; (8008a2c <drawFrame+0x1de0>)
 8008808:	f003 fac8 	bl	800bd9c <siprintf>
							 sprintf(frame.secondLine, Settings[8][settings.language]);
 800880c:	4b85      	ldr	r3, [pc, #532]	; (8008a24 <drawFrame+0x1dd8>)
 800880e:	791b      	ldrb	r3, [r3, #4]
 8008810:	461a      	mov	r2, r3
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800881e:	4a82      	ldr	r2, [pc, #520]	; (8008a28 <drawFrame+0x1ddc>)
 8008820:	4413      	add	r3, r2
 8008822:	4619      	mov	r1, r3
 8008824:	4882      	ldr	r0, [pc, #520]	; (8008a30 <drawFrame+0x1de4>)
 8008826:	f003 fab9 	bl	800bd9c <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 800882a:	4b7d      	ldr	r3, [pc, #500]	; (8008a20 <drawFrame+0x1dd4>)
 800882c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008830:	461a      	mov	r2, r3
 8008832:	4980      	ldr	r1, [pc, #512]	; (8008a34 <drawFrame+0x1de8>)
 8008834:	4880      	ldr	r0, [pc, #512]	; (8008a38 <drawFrame+0x1dec>)
 8008836:	f003 fab1 	bl	800bd9c <siprintf>
							 frame.value = gDate.Month;
 800883a:	4b80      	ldr	r3, [pc, #512]	; (8008a3c <drawFrame+0x1df0>)
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	b29a      	uxth	r2, r3
 8008840:	4b77      	ldr	r3, [pc, #476]	; (8008a20 <drawFrame+0x1dd4>)
 8008842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 8008846:	4b76      	ldr	r3, [pc, #472]	; (8008a20 <drawFrame+0x1dd4>)
 8008848:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800884c:	461a      	mov	r2, r3
 800884e:	497c      	ldr	r1, [pc, #496]	; (8008a40 <drawFrame+0x1df4>)
 8008850:	487c      	ldr	r0, [pc, #496]	; (8008a44 <drawFrame+0x1df8>)
 8008852:	f003 faa3 	bl	800bd9c <siprintf>
							 OLED_CLEAR();
 8008856:	f7fd fa3a 	bl	8005cce <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 800885a:	4b71      	ldr	r3, [pc, #452]	; (8008a20 <drawFrame+0x1dd4>)
 800885c:	2203      	movs	r2, #3
 800885e:	701a      	strb	r2, [r3, #0]

							break;
 8008860:	e047      	b.n	80088f2 <drawFrame+0x1ca6>

						case DATE_DAY_INPUT_SCREEN:				//dzien
							 frame.valueMin = 1;
 8008862:	4b6f      	ldr	r3, [pc, #444]	; (8008a20 <drawFrame+0x1dd4>)
 8008864:	2201      	movs	r2, #1
 8008866:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
							 frame.valueMax = No_of_days_a_month(gDate.Month);
 800886a:	4b74      	ldr	r3, [pc, #464]	; (8008a3c <drawFrame+0x1df0>)
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	4618      	mov	r0, r3
 8008870:	f7fd feea 	bl	8006648 <No_of_days_a_month>
 8008874:	4603      	mov	r3, r0
 8008876:	b29a      	uxth	r2, r3
 8008878:	4b69      	ldr	r3, [pc, #420]	; (8008a20 <drawFrame+0x1dd4>)
 800887a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[5][settings.language]);
 800887e:	4b69      	ldr	r3, [pc, #420]	; (8008a24 <drawFrame+0x1dd8>)
 8008880:	791b      	ldrb	r3, [r3, #4]
 8008882:	461a      	mov	r2, r3
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	33c8      	adds	r3, #200	; 0xc8
 800888e:	4a66      	ldr	r2, [pc, #408]	; (8008a28 <drawFrame+0x1ddc>)
 8008890:	4413      	add	r3, r2
 8008892:	4619      	mov	r1, r3
 8008894:	4865      	ldr	r0, [pc, #404]	; (8008a2c <drawFrame+0x1de0>)
 8008896:	f003 fa81 	bl	800bd9c <siprintf>
							 sprintf(frame.secondLine, Settings[7][settings.language]);
 800889a:	4b62      	ldr	r3, [pc, #392]	; (8008a24 <drawFrame+0x1dd8>)
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	461a      	mov	r2, r3
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80088ac:	4a5e      	ldr	r2, [pc, #376]	; (8008a28 <drawFrame+0x1ddc>)
 80088ae:	4413      	add	r3, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	485f      	ldr	r0, [pc, #380]	; (8008a30 <drawFrame+0x1de4>)
 80088b4:	f003 fa72 	bl	800bd9c <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 80088b8:	4b59      	ldr	r3, [pc, #356]	; (8008a20 <drawFrame+0x1dd4>)
 80088ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088be:	461a      	mov	r2, r3
 80088c0:	495c      	ldr	r1, [pc, #368]	; (8008a34 <drawFrame+0x1de8>)
 80088c2:	485d      	ldr	r0, [pc, #372]	; (8008a38 <drawFrame+0x1dec>)
 80088c4:	f003 fa6a 	bl	800bd9c <siprintf>
							 frame.value = gDate.Date;
 80088c8:	4b5c      	ldr	r3, [pc, #368]	; (8008a3c <drawFrame+0x1df0>)
 80088ca:	789b      	ldrb	r3, [r3, #2]
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	4b54      	ldr	r3, [pc, #336]	; (8008a20 <drawFrame+0x1dd4>)
 80088d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 80088d4:	4b52      	ldr	r3, [pc, #328]	; (8008a20 <drawFrame+0x1dd4>)
 80088d6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80088da:	461a      	mov	r2, r3
 80088dc:	4958      	ldr	r1, [pc, #352]	; (8008a40 <drawFrame+0x1df4>)
 80088de:	4859      	ldr	r0, [pc, #356]	; (8008a44 <drawFrame+0x1df8>)
 80088e0:	f003 fa5c 	bl	800bd9c <siprintf>
							 OLED_CLEAR();
 80088e4:	f7fd f9f3 	bl	8005cce <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 80088e8:	4b4d      	ldr	r3, [pc, #308]	; (8008a20 <drawFrame+0x1dd4>)
 80088ea:	2203      	movs	r2, #3
 80088ec:	701a      	strb	r2, [r3, #0]
							break;
 80088ee:	e000      	b.n	80088f2 <drawFrame+0x1ca6>

					}
				}
 80088f0:	bf00      	nop

				if (frame.position[1] == SETTINGS_SUBMENU_TIME)	//jezeli w podmenu zmiany czasu
 80088f2:	4b4b      	ldr	r3, [pc, #300]	; (8008a20 <drawFrame+0x1dd4>)
 80088f4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f040 80ea 	bne.w	8008ad2 <drawFrame+0x1e86>
				{
					switch (frame.position[2])	//sprawdz zmiana ktorego parametru zostala wybrana (godziny/minuty/sekundy)
 80088fe:	4b48      	ldr	r3, [pc, #288]	; (8008a20 <drawFrame+0x1dd4>)
 8008900:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008904:	2b02      	cmp	r3, #2
 8008906:	f000 80a1 	beq.w	8008a4c <drawFrame+0x1e00>
 800890a:	2b02      	cmp	r3, #2
 800890c:	f300 80e2 	bgt.w	8008ad4 <drawFrame+0x1e88>
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <drawFrame+0x1cce>
 8008914:	2b01      	cmp	r3, #1
 8008916:	d041      	beq.n	800899c <drawFrame+0x1d50>
				}


			}
	}
}
 8008918:	e0dc      	b.n	8008ad4 <drawFrame+0x1e88>
							 frame.valueMin = 0;
 800891a:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <drawFrame+0x1dd4>)
 800891c:	2200      	movs	r2, #0
 800891e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
							 frame.valueMax = 23;
 8008922:	4b3f      	ldr	r3, [pc, #252]	; (8008a20 <drawFrame+0x1dd4>)
 8008924:	2217      	movs	r2, #23
 8008926:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
							 sprintf(frame.firstLine, Settings[6][settings.language]);
 800892a:	4b3e      	ldr	r3, [pc, #248]	; (8008a24 <drawFrame+0x1dd8>)
 800892c:	791b      	ldrb	r3, [r3, #4]
 800892e:	461a      	mov	r2, r3
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	33f0      	adds	r3, #240	; 0xf0
 800893a:	4a3b      	ldr	r2, [pc, #236]	; (8008a28 <drawFrame+0x1ddc>)
 800893c:	4413      	add	r3, r2
 800893e:	4619      	mov	r1, r3
 8008940:	483a      	ldr	r0, [pc, #232]	; (8008a2c <drawFrame+0x1de0>)
 8008942:	f003 fa2b 	bl	800bd9c <siprintf>
							 sprintf(frame.secondLine, Settings[10][settings.language]);
 8008946:	4b37      	ldr	r3, [pc, #220]	; (8008a24 <drawFrame+0x1dd8>)
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	461a      	mov	r2, r3
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008958:	4a33      	ldr	r2, [pc, #204]	; (8008a28 <drawFrame+0x1ddc>)
 800895a:	4413      	add	r3, r2
 800895c:	4619      	mov	r1, r3
 800895e:	4834      	ldr	r0, [pc, #208]	; (8008a30 <drawFrame+0x1de4>)
 8008960:	f003 fa1c 	bl	800bd9c <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 8008964:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <drawFrame+0x1dd4>)
 8008966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800896a:	461a      	mov	r2, r3
 800896c:	4931      	ldr	r1, [pc, #196]	; (8008a34 <drawFrame+0x1de8>)
 800896e:	4832      	ldr	r0, [pc, #200]	; (8008a38 <drawFrame+0x1dec>)
 8008970:	f003 fa14 	bl	800bd9c <siprintf>
							 frame.value = gTime.Hours;
 8008974:	4b34      	ldr	r3, [pc, #208]	; (8008a48 <drawFrame+0x1dfc>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	b29a      	uxth	r2, r3
 800897a:	4b29      	ldr	r3, [pc, #164]	; (8008a20 <drawFrame+0x1dd4>)
 800897c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 8008980:	4b27      	ldr	r3, [pc, #156]	; (8008a20 <drawFrame+0x1dd4>)
 8008982:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8008986:	461a      	mov	r2, r3
 8008988:	492d      	ldr	r1, [pc, #180]	; (8008a40 <drawFrame+0x1df4>)
 800898a:	482e      	ldr	r0, [pc, #184]	; (8008a44 <drawFrame+0x1df8>)
 800898c:	f003 fa06 	bl	800bd9c <siprintf>
							 OLED_CLEAR();
 8008990:	f7fd f99d 	bl	8005cce <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 8008994:	4b22      	ldr	r3, [pc, #136]	; (8008a20 <drawFrame+0x1dd4>)
 8008996:	2203      	movs	r2, #3
 8008998:	701a      	strb	r2, [r3, #0]
							break;
 800899a:	e09b      	b.n	8008ad4 <drawFrame+0x1e88>
							 frame.valueMin = 0;
 800899c:	4b20      	ldr	r3, [pc, #128]	; (8008a20 <drawFrame+0x1dd4>)
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
							 frame.valueMax = 59;
 80089a4:	4b1e      	ldr	r3, [pc, #120]	; (8008a20 <drawFrame+0x1dd4>)
 80089a6:	223b      	movs	r2, #59	; 0x3b
 80089a8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
							 sprintf(frame.firstLine,Settings[6][settings.language]);
 80089ac:	4b1d      	ldr	r3, [pc, #116]	; (8008a24 <drawFrame+0x1dd8>)
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	461a      	mov	r2, r3
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	33f0      	adds	r3, #240	; 0xf0
 80089bc:	4a1a      	ldr	r2, [pc, #104]	; (8008a28 <drawFrame+0x1ddc>)
 80089be:	4413      	add	r3, r2
 80089c0:	4619      	mov	r1, r3
 80089c2:	481a      	ldr	r0, [pc, #104]	; (8008a2c <drawFrame+0x1de0>)
 80089c4:	f003 f9ea 	bl	800bd9c <siprintf>
							 sprintf(frame.secondLine, Settings[11][settings.language]);
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <drawFrame+0x1dd8>)
 80089ca:	791b      	ldrb	r3, [r3, #4]
 80089cc:	461a      	mov	r2, r3
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80089da:	4a13      	ldr	r2, [pc, #76]	; (8008a28 <drawFrame+0x1ddc>)
 80089dc:	4413      	add	r3, r2
 80089de:	4619      	mov	r1, r3
 80089e0:	4813      	ldr	r0, [pc, #76]	; (8008a30 <drawFrame+0x1de4>)
 80089e2:	f003 f9db 	bl	800bd9c <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 80089e6:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <drawFrame+0x1dd4>)
 80089e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089ec:	461a      	mov	r2, r3
 80089ee:	4911      	ldr	r1, [pc, #68]	; (8008a34 <drawFrame+0x1de8>)
 80089f0:	4811      	ldr	r0, [pc, #68]	; (8008a38 <drawFrame+0x1dec>)
 80089f2:	f003 f9d3 	bl	800bd9c <siprintf>
							 frame.value = gTime.Minutes;
 80089f6:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <drawFrame+0x1dfc>)
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <drawFrame+0x1dd4>)
 80089fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <drawFrame+0x1dd4>)
 8008a04:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8008a08:	461a      	mov	r2, r3
 8008a0a:	490d      	ldr	r1, [pc, #52]	; (8008a40 <drawFrame+0x1df4>)
 8008a0c:	480d      	ldr	r0, [pc, #52]	; (8008a44 <drawFrame+0x1df8>)
 8008a0e:	f003 f9c5 	bl	800bd9c <siprintf>
							 OLED_CLEAR();
 8008a12:	f7fd f95c 	bl	8005cce <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 8008a16:	4b02      	ldr	r3, [pc, #8]	; (8008a20 <drawFrame+0x1dd4>)
 8008a18:	2203      	movs	r2, #3
 8008a1a:	701a      	strb	r2, [r3, #0]
							break;
 8008a1c:	e05a      	b.n	8008ad4 <drawFrame+0x1e88>
 8008a1e:	bf00      	nop
 8008a20:	20001244 	.word	0x20001244
 8008a24:	200006c4 	.word	0x200006c4
 8008a28:	080130e0 	.word	0x080130e0
 8008a2c:	20001245 	.word	0x20001245
 8008a30:	2000125d 	.word	0x2000125d
 8008a34:	080135f0 	.word	0x080135f0
 8008a38:	20001275 	.word	0x20001275
 8008a3c:	200006a0 	.word	0x200006a0
 8008a40:	080135fc 	.word	0x080135fc
 8008a44:	2000128d 	.word	0x2000128d
 8008a48:	2000068c 	.word	0x2000068c
							 frame.valueMin = 0;
 8008a4c:	4b23      	ldr	r3, [pc, #140]	; (8008adc <drawFrame+0x1e90>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
							 frame.valueMax = 59;
 8008a54:	4b21      	ldr	r3, [pc, #132]	; (8008adc <drawFrame+0x1e90>)
 8008a56:	223b      	movs	r2, #59	; 0x3b
 8008a58:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
							 sprintf(frame.firstLine,Settings[6][settings.language]);
 8008a5c:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <drawFrame+0x1e94>)
 8008a5e:	791b      	ldrb	r3, [r3, #4]
 8008a60:	461a      	mov	r2, r3
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	33f0      	adds	r3, #240	; 0xf0
 8008a6c:	4a1d      	ldr	r2, [pc, #116]	; (8008ae4 <drawFrame+0x1e98>)
 8008a6e:	4413      	add	r3, r2
 8008a70:	4619      	mov	r1, r3
 8008a72:	481d      	ldr	r0, [pc, #116]	; (8008ae8 <drawFrame+0x1e9c>)
 8008a74:	f003 f992 	bl	800bd9c <siprintf>
							 sprintf(frame.secondLine, Settings[12][settings.language]);
 8008a78:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <drawFrame+0x1e94>)
 8008a7a:	791b      	ldrb	r3, [r3, #4]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8008a8a:	4a16      	ldr	r2, [pc, #88]	; (8008ae4 <drawFrame+0x1e98>)
 8008a8c:	4413      	add	r3, r2
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4816      	ldr	r0, [pc, #88]	; (8008aec <drawFrame+0x1ea0>)
 8008a92:	f003 f983 	bl	800bd9c <siprintf>
						     sprintf(frame.thirdLine, "MIN   %d", frame.valueMin);
 8008a96:	4b11      	ldr	r3, [pc, #68]	; (8008adc <drawFrame+0x1e90>)
 8008a98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4914      	ldr	r1, [pc, #80]	; (8008af0 <drawFrame+0x1ea4>)
 8008aa0:	4814      	ldr	r0, [pc, #80]	; (8008af4 <drawFrame+0x1ea8>)
 8008aa2:	f003 f97b 	bl	800bd9c <siprintf>
							 frame.value = gTime.Seconds;
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <drawFrame+0x1eac>)
 8008aa8:	789b      	ldrb	r3, [r3, #2]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <drawFrame+0x1e90>)
 8008aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
							 sprintf(frame.bottomLine, "MAX   %d", frame.valueMax);
 8008ab2:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <drawFrame+0x1e90>)
 8008ab4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4910      	ldr	r1, [pc, #64]	; (8008afc <drawFrame+0x1eb0>)
 8008abc:	4810      	ldr	r0, [pc, #64]	; (8008b00 <drawFrame+0x1eb4>)
 8008abe:	f003 f96d 	bl	800bd9c <siprintf>
							 OLED_CLEAR();
 8008ac2:	f7fd f904 	bl	8005cce <OLED_CLEAR>
							 frame.type = FRAME_SET_VALUE;
 8008ac6:	4b05      	ldr	r3, [pc, #20]	; (8008adc <drawFrame+0x1e90>)
 8008ac8:	2203      	movs	r2, #3
 8008aca:	701a      	strb	r2, [r3, #0]
							break;
 8008acc:	e002      	b.n	8008ad4 <drawFrame+0x1e88>
			break;
 8008ace:	bf00      	nop
 8008ad0:	e000      	b.n	8008ad4 <drawFrame+0x1e88>
				}
 8008ad2:	bf00      	nop
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bdb0      	pop	{r4, r5, r7, pc}
 8008adc:	20001244 	.word	0x20001244
 8008ae0:	200006c4 	.word	0x200006c4
 8008ae4:	080130e0 	.word	0x080130e0
 8008ae8:	20001245 	.word	0x20001245
 8008aec:	2000125d 	.word	0x2000125d
 8008af0:	080135f0 	.word	0x080135f0
 8008af4:	20001275 	.word	0x20001275
 8008af8:	2000068c 	.word	0x2000068c
 8008afc:	080135fc 	.word	0x080135fc
 8008b00:	2000128d 	.word	0x2000128d

08008b04 <main_menu>:

void main_menu()
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0
	frame.level = 0;
 8008b08:	4b08      	ldr	r3, [pc, #32]	; (8008b2c <main_menu+0x28>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	while(1)
	{
		kbd_event_handler(CONTEXT_MAIN_MENU);
 8008b10:	2001      	movs	r0, #1
 8008b12:	f7fd fd37 	bl	8006584 <kbd_event_handler>
		drawFrame();
 8008b16:	f7fe f899 	bl	8006c4c <drawFrame>
		if (frame.type == FRAME_EXIT) break;
 8008b1a:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <main_menu+0x28>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2bff      	cmp	r3, #255	; 0xff
 8008b20:	d000      	beq.n	8008b24 <main_menu+0x20>
		kbd_event_handler(CONTEXT_MAIN_MENU);
 8008b22:	e7f5      	b.n	8008b10 <main_menu+0xc>
		if (frame.type == FRAME_EXIT) break;
 8008b24:	bf00      	nop
	}
}
 8008b26:	bf00      	nop
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20001244 	.word	0x20001244

08008b30 <key_down_callback>:

void key_down_callback(uint8_t key, uint8_t context)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	4603      	mov	r3, r0
 8008b38:	460a      	mov	r2, r1
 8008b3a:	71fb      	strb	r3, [r7, #7]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	71bb      	strb	r3, [r7, #6]
	//if (DEVICE_IDLE) reset_screen_saver();
	reset_screen_saver();
 8008b40:	f7fe f828 	bl	8006b94 <reset_screen_saver>

	if (key == KEY_OFF)
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b0b      	cmp	r3, #11
 8008b48:	d106      	bne.n	8008b58 <key_down_callback+0x28>
	{
		key = KEY_NONE;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	71fb      	strb	r3, [r7, #7]
		//UART_print("aa\r\n");
		HAL_GPIO_WritePin(GPIOB, POWER_OFF_Pin, GPIO_PIN_SET);
 8008b4e:	2201      	movs	r2, #1
 8008b50:	2104      	movs	r1, #4
 8008b52:	4896      	ldr	r0, [pc, #600]	; (8008dac <key_down_callback+0x27c>)
 8008b54:	f7f9 f90a 	bl	8001d6c <HAL_GPIO_WritePin>

	}

	switch (context)
 8008b58:	79bb      	ldrb	r3, [r7, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <key_down_callback+0x38>
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	f000 810e 	beq.w	8008d80 <key_down_callback+0x250>
				 }
				 OLED_CLEAR();
			 }
			break;
	}
}
 8008b64:	f000 bcc7 	b.w	80094f6 <key_down_callback+0x9c6>
			 if (key == KEY_PROGRAM)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d114      	bne.n	8008b98 <key_down_callback+0x68>
				 key = KEY_NONE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	71fb      	strb	r3, [r7, #7]
				 if (pomiarStatus == POMIAR_DISP || pomiarStatus == POMIAR_STOP)
 8008b72:	4b8f      	ldr	r3, [pc, #572]	; (8008db0 <key_down_callback+0x280>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d004      	beq.n	8008b86 <key_down_callback+0x56>
 8008b7c:	4b8c      	ldr	r3, [pc, #560]	; (8008db0 <key_down_callback+0x280>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d108      	bne.n	8008b98 <key_down_callback+0x68>
					 OLED_CLEAR();
 8008b86:	f7fd f8a2 	bl	8005cce <OLED_CLEAR>
					 frame.type = FRAME_MAIN_MENU;
 8008b8a:	4b8a      	ldr	r3, [pc, #552]	; (8008db4 <key_down_callback+0x284>)
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	701a      	strb	r2, [r3, #0]
					 reset_screen_saver();
 8008b90:	f7fe f800 	bl	8006b94 <reset_screen_saver>
					 main_menu();
 8008b94:	f7ff ffb6 	bl	8008b04 <main_menu>
			 if (key == KEY_LEFT)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d10f      	bne.n	8008bbe <key_down_callback+0x8e>
				 key = KEY_NONE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	71fb      	strb	r3, [r7, #7]
				 if (settings.contrast > SS_CONTRAST)
 8008ba2:	4b85      	ldr	r3, [pc, #532]	; (8008db8 <key_down_callback+0x288>)
 8008ba4:	795b      	ldrb	r3, [r3, #5]
 8008ba6:	2b07      	cmp	r3, #7
 8008ba8:	d909      	bls.n	8008bbe <key_down_callback+0x8e>
					 settings.contrast--;
 8008baa:	4b83      	ldr	r3, [pc, #524]	; (8008db8 <key_down_callback+0x288>)
 8008bac:	795b      	ldrb	r3, [r3, #5]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	4b81      	ldr	r3, [pc, #516]	; (8008db8 <key_down_callback+0x288>)
 8008bb4:	715a      	strb	r2, [r3, #5]
					 EEPROM_write(EEPROM_CONTRAST_ADDR, &settings.contrast);
 8008bb6:	4981      	ldr	r1, [pc, #516]	; (8008dbc <key_down_callback+0x28c>)
 8008bb8:	2005      	movs	r0, #5
 8008bba:	f7fc fd45 	bl	8005648 <EEPROM_write>
			 if (key == KEY_RIGHT)
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	2b0e      	cmp	r3, #14
 8008bc2:	d10f      	bne.n	8008be4 <key_down_callback+0xb4>
				 key = KEY_NONE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	71fb      	strb	r3, [r7, #7]
				 if (settings.contrast < MAX_CONTRAST)
 8008bc8:	4b7b      	ldr	r3, [pc, #492]	; (8008db8 <key_down_callback+0x288>)
 8008bca:	795b      	ldrb	r3, [r3, #5]
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d809      	bhi.n	8008be4 <key_down_callback+0xb4>
					 settings.contrast++;
 8008bd0:	4b79      	ldr	r3, [pc, #484]	; (8008db8 <key_down_callback+0x288>)
 8008bd2:	795b      	ldrb	r3, [r3, #5]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	4b77      	ldr	r3, [pc, #476]	; (8008db8 <key_down_callback+0x288>)
 8008bda:	715a      	strb	r2, [r3, #5]
					 EEPROM_write(EEPROM_CONTRAST_ADDR, &settings.contrast);
 8008bdc:	4977      	ldr	r1, [pc, #476]	; (8008dbc <key_down_callback+0x28c>)
 8008bde:	2005      	movs	r0, #5
 8008be0:	f7fc fd32 	bl	8005648 <EEPROM_write>
			 if (key == KEY_UP)
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	2b06      	cmp	r3, #6
 8008be8:	d127      	bne.n	8008c3a <key_down_callback+0x10a>
				 key = KEY_NONE;
 8008bea:	2300      	movs	r3, #0
 8008bec:	71fb      	strb	r3, [r7, #7]
				 if (settings.measurementType == MEASUREMENT_SINGLE && !NO_SAMPLE)
 8008bee:	4b72      	ldr	r3, [pc, #456]	; (8008db8 <key_down_callback+0x288>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d121      	bne.n	8008c3a <key_down_callback+0x10a>
 8008bf6:	4b72      	ldr	r3, [pc, #456]	; (8008dc0 <key_down_callback+0x290>)
 8008bf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8008bfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c04:	d019      	beq.n	8008c3a <key_down_callback+0x10a>
 8008c06:	4b6e      	ldr	r3, [pc, #440]	; (8008dc0 <key_down_callback+0x290>)
 8008c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c10:	eef4 7a47 	vcmp.f32	s15, s14
 8008c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c18:	d00f      	beq.n	8008c3a <key_down_callback+0x10a>
					 if (pomiarStatus == POMIAR_DISP || pomiarStatus == POMIAR_STOP)
 8008c1a:	4b65      	ldr	r3, [pc, #404]	; (8008db0 <key_down_callback+0x280>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d004      	beq.n	8008c2e <key_down_callback+0xfe>
 8008c24:	4b62      	ldr	r3, [pc, #392]	; (8008db0 <key_down_callback+0x280>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d105      	bne.n	8008c3a <key_down_callback+0x10a>
						 newArchiveEntryAdded = 0;
 8008c2e:	4b65      	ldr	r3, [pc, #404]	; (8008dc4 <key_down_callback+0x294>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
						 pomiarStatus = POMIAR_START;
 8008c34:	4b5e      	ldr	r3, [pc, #376]	; (8008db0 <key_down_callback+0x280>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	701a      	strb	r2, [r3, #0]
			 if (key == KEY_DOWN)
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	2b0d      	cmp	r3, #13
 8008c3e:	f040 8457 	bne.w	80094f0 <key_down_callback+0x9c0>
				 key = KEY_NONE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	71fb      	strb	r3, [r7, #7]
				 if (!NO_SAMPLE)		//dodaj wpis do archiwum
 8008c46:	4b5e      	ldr	r3, [pc, #376]	; (8008dc0 <key_down_callback+0x290>)
 8008c48:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c54:	f000 844c 	beq.w	80094f0 <key_down_callback+0x9c0>
 8008c58:	4b59      	ldr	r3, [pc, #356]	; (8008dc0 <key_down_callback+0x290>)
 8008c5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c62:	eef4 7a47 	vcmp.f32	s15, s14
 8008c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6a:	f000 8441 	beq.w	80094f0 <key_down_callback+0x9c0>
					 if (settings.measurementType == MEASUREMENT_SINGLE)
 8008c6e:	4b52      	ldr	r3, [pc, #328]	; (8008db8 <key_down_callback+0x288>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d140      	bne.n	8008cf8 <key_down_callback+0x1c8>
						 if (pomiarStatus == POMIAR_DISP && newArchiveEntryAdded == 0 && settings.storageMode == STORAGE_BY_KEYBOARD)
 8008c76:	4b4e      	ldr	r3, [pc, #312]	; (8008db0 <key_down_callback+0x280>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d13b      	bne.n	8008cf8 <key_down_callback+0x1c8>
 8008c80:	4b50      	ldr	r3, [pc, #320]	; (8008dc4 <key_down_callback+0x294>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d136      	bne.n	8008cf8 <key_down_callback+0x1c8>
 8008c8a:	4b4b      	ldr	r3, [pc, #300]	; (8008db8 <key_down_callback+0x288>)
 8008c8c:	799b      	ldrb	r3, [r3, #6]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d132      	bne.n	8008cf8 <key_down_callback+0x1c8>
							 newArchiveEntryAdded = 1;
 8008c92:	4b4c      	ldr	r3, [pc, #304]	; (8008dc4 <key_down_callback+0x294>)
 8008c94:	2201      	movs	r2, #1
 8008c96:	701a      	strb	r2, [r3, #0]
							 ArchiveEntry.second = gTime.Seconds;
 8008c98:	4b4b      	ldr	r3, [pc, #300]	; (8008dc8 <key_down_callback+0x298>)
 8008c9a:	789a      	ldrb	r2, [r3, #2]
 8008c9c:	4b4b      	ldr	r3, [pc, #300]	; (8008dcc <key_down_callback+0x29c>)
 8008c9e:	715a      	strb	r2, [r3, #5]
							 ArchiveEntry.minute = gTime.Minutes;
 8008ca0:	4b49      	ldr	r3, [pc, #292]	; (8008dc8 <key_down_callback+0x298>)
 8008ca2:	785a      	ldrb	r2, [r3, #1]
 8008ca4:	4b49      	ldr	r3, [pc, #292]	; (8008dcc <key_down_callback+0x29c>)
 8008ca6:	711a      	strb	r2, [r3, #4]
							 ArchiveEntry.hour = gTime.Hours;
 8008ca8:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <key_down_callback+0x298>)
 8008caa:	781a      	ldrb	r2, [r3, #0]
 8008cac:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <key_down_callback+0x29c>)
 8008cae:	70da      	strb	r2, [r3, #3]
							 ArchiveEntry.day = gDate.Date;
 8008cb0:	4b47      	ldr	r3, [pc, #284]	; (8008dd0 <key_down_callback+0x2a0>)
 8008cb2:	789a      	ldrb	r2, [r3, #2]
 8008cb4:	4b45      	ldr	r3, [pc, #276]	; (8008dcc <key_down_callback+0x29c>)
 8008cb6:	701a      	strb	r2, [r3, #0]
							 ArchiveEntry.month = gDate.Month;
 8008cb8:	4b45      	ldr	r3, [pc, #276]	; (8008dd0 <key_down_callback+0x2a0>)
 8008cba:	785a      	ldrb	r2, [r3, #1]
 8008cbc:	4b43      	ldr	r3, [pc, #268]	; (8008dcc <key_down_callback+0x29c>)
 8008cbe:	705a      	strb	r2, [r3, #1]
							 ArchiveEntry.year = gDate.Year;
 8008cc0:	4b43      	ldr	r3, [pc, #268]	; (8008dd0 <key_down_callback+0x2a0>)
 8008cc2:	78da      	ldrb	r2, [r3, #3]
 8008cc4:	4b41      	ldr	r3, [pc, #260]	; (8008dcc <key_down_callback+0x29c>)
 8008cc6:	709a      	strb	r2, [r3, #2]
							 ArchiveEntry.nc = PomiarBuffer.nc;
 8008cc8:	4b42      	ldr	r3, [pc, #264]	; (8008dd4 <key_down_callback+0x2a4>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4a3f      	ldr	r2, [pc, #252]	; (8008dcc <key_down_callback+0x29c>)
 8008cce:	60d3      	str	r3, [r2, #12]
							 ArchiveEntry.nck = PomiarBuffer.nck;
 8008cd0:	4b40      	ldr	r3, [pc, #256]	; (8008dd4 <key_down_callback+0x2a4>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	4a3d      	ldr	r2, [pc, #244]	; (8008dcc <key_down_callback+0x29c>)
 8008cd6:	6113      	str	r3, [r2, #16]
							 ArchiveEntry.brix = PomiarBuffer.brix;
 8008cd8:	4b3e      	ldr	r3, [pc, #248]	; (8008dd4 <key_down_callback+0x2a4>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	4a3b      	ldr	r2, [pc, #236]	; (8008dcc <key_down_callback+0x29c>)
 8008cde:	6153      	str	r3, [r2, #20]
							 ArchiveEntry.brixk = PomiarBuffer.brixk;
 8008ce0:	4b3c      	ldr	r3, [pc, #240]	; (8008dd4 <key_down_callback+0x2a4>)
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	4a39      	ldr	r2, [pc, #228]	; (8008dcc <key_down_callback+0x29c>)
 8008ce6:	6193      	str	r3, [r2, #24]
							 ArchiveEntry.temperature = PomiarBuffer.temperatura;
 8008ce8:	4b3a      	ldr	r3, [pc, #232]	; (8008dd4 <key_down_callback+0x2a4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a37      	ldr	r2, [pc, #220]	; (8008dcc <key_down_callback+0x29c>)
 8008cee:	6093      	str	r3, [r2, #8]
							 EEPROM_add_archive_entry(&ArchiveEntry, sizeof(ArchiveEntry));
 8008cf0:	211c      	movs	r1, #28
 8008cf2:	4836      	ldr	r0, [pc, #216]	; (8008dcc <key_down_callback+0x29c>)
 8008cf4:	f7fc fd2c 	bl	8005750 <EEPROM_add_archive_entry>
					 if (settings.measurementType == MEASUREMENT_CONTINUOUS && newArchiveEntryAdded == 0 && settings.storageMode == STORAGE_BY_KEYBOARD)
 8008cf8:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <key_down_callback+0x288>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	f040 83f7 	bne.w	80094f0 <key_down_callback+0x9c0>
 8008d02:	4b30      	ldr	r3, [pc, #192]	; (8008dc4 <key_down_callback+0x294>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f040 83f1 	bne.w	80094f0 <key_down_callback+0x9c0>
 8008d0e:	4b2a      	ldr	r3, [pc, #168]	; (8008db8 <key_down_callback+0x288>)
 8008d10:	799b      	ldrb	r3, [r3, #6]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	f040 83ec 	bne.w	80094f0 <key_down_callback+0x9c0>
						 newArchiveEntryAdded = 1;
 8008d18:	4b2a      	ldr	r3, [pc, #168]	; (8008dc4 <key_down_callback+0x294>)
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	701a      	strb	r2, [r3, #0]
						 ArchiveEntry.second = gTime.Seconds;
 8008d1e:	4b2a      	ldr	r3, [pc, #168]	; (8008dc8 <key_down_callback+0x298>)
 8008d20:	789a      	ldrb	r2, [r3, #2]
 8008d22:	4b2a      	ldr	r3, [pc, #168]	; (8008dcc <key_down_callback+0x29c>)
 8008d24:	715a      	strb	r2, [r3, #5]
						 ArchiveEntry.minute = gTime.Minutes;
 8008d26:	4b28      	ldr	r3, [pc, #160]	; (8008dc8 <key_down_callback+0x298>)
 8008d28:	785a      	ldrb	r2, [r3, #1]
 8008d2a:	4b28      	ldr	r3, [pc, #160]	; (8008dcc <key_down_callback+0x29c>)
 8008d2c:	711a      	strb	r2, [r3, #4]
						 ArchiveEntry.hour = gTime.Hours;
 8008d2e:	4b26      	ldr	r3, [pc, #152]	; (8008dc8 <key_down_callback+0x298>)
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	4b26      	ldr	r3, [pc, #152]	; (8008dcc <key_down_callback+0x29c>)
 8008d34:	70da      	strb	r2, [r3, #3]
						 ArchiveEntry.day = gDate.Date;
 8008d36:	4b26      	ldr	r3, [pc, #152]	; (8008dd0 <key_down_callback+0x2a0>)
 8008d38:	789a      	ldrb	r2, [r3, #2]
 8008d3a:	4b24      	ldr	r3, [pc, #144]	; (8008dcc <key_down_callback+0x29c>)
 8008d3c:	701a      	strb	r2, [r3, #0]
						 ArchiveEntry.month = gDate.Month;
 8008d3e:	4b24      	ldr	r3, [pc, #144]	; (8008dd0 <key_down_callback+0x2a0>)
 8008d40:	785a      	ldrb	r2, [r3, #1]
 8008d42:	4b22      	ldr	r3, [pc, #136]	; (8008dcc <key_down_callback+0x29c>)
 8008d44:	705a      	strb	r2, [r3, #1]
						 ArchiveEntry.year = gDate.Year;
 8008d46:	4b22      	ldr	r3, [pc, #136]	; (8008dd0 <key_down_callback+0x2a0>)
 8008d48:	78da      	ldrb	r2, [r3, #3]
 8008d4a:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <key_down_callback+0x29c>)
 8008d4c:	709a      	strb	r2, [r3, #2]
						 ArchiveEntry.nc = pomiar.nc;
 8008d4e:	4b1c      	ldr	r3, [pc, #112]	; (8008dc0 <key_down_callback+0x290>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	4a1e      	ldr	r2, [pc, #120]	; (8008dcc <key_down_callback+0x29c>)
 8008d54:	60d3      	str	r3, [r2, #12]
						 ArchiveEntry.nck = pomiar.nck;
 8008d56:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <key_down_callback+0x290>)
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	4a1c      	ldr	r2, [pc, #112]	; (8008dcc <key_down_callback+0x29c>)
 8008d5c:	6113      	str	r3, [r2, #16]
						 ArchiveEntry.brix = pomiar.brix;
 8008d5e:	4b18      	ldr	r3, [pc, #96]	; (8008dc0 <key_down_callback+0x290>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	4a1a      	ldr	r2, [pc, #104]	; (8008dcc <key_down_callback+0x29c>)
 8008d64:	6153      	str	r3, [r2, #20]
						 ArchiveEntry.brixk = pomiar.brixk;
 8008d66:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <key_down_callback+0x290>)
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <key_down_callback+0x29c>)
 8008d6c:	6193      	str	r3, [r2, #24]
						 ArchiveEntry.temperature = pomiar.temperatura;
 8008d6e:	4b14      	ldr	r3, [pc, #80]	; (8008dc0 <key_down_callback+0x290>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a16      	ldr	r2, [pc, #88]	; (8008dcc <key_down_callback+0x29c>)
 8008d74:	6093      	str	r3, [r2, #8]
						 EEPROM_add_archive_entry(&ArchiveEntry, sizeof(ArchiveEntry));
 8008d76:	211c      	movs	r1, #28
 8008d78:	4814      	ldr	r0, [pc, #80]	; (8008dcc <key_down_callback+0x29c>)
 8008d7a:	f7fc fce9 	bl	8005750 <EEPROM_add_archive_entry>
			break;
 8008d7e:	e3b7      	b.n	80094f0 <key_down_callback+0x9c0>
			 if(frame.type == FRAME_ARCHIVE_BROWSE)
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <key_down_callback+0x284>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b05      	cmp	r3, #5
 8008d86:	d169      	bne.n	8008e5c <key_down_callback+0x32c>
				 if (key == KEY_LEFT)
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d135      	bne.n	8008dfa <key_down_callback+0x2ca>
					 key = KEY_NONE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	71fb      	strb	r3, [r7, #7]
					 if (frame.value == 0) frame.value = frame.valueMax;
 8008d92:	4b08      	ldr	r3, [pc, #32]	; (8008db4 <key_down_callback+0x284>)
 8008d94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d11d      	bne.n	8008dd8 <key_down_callback+0x2a8>
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <key_down_callback+0x284>)
 8008d9e:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8008da2:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <key_down_callback+0x284>)
 8008da4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008da8:	e01e      	b.n	8008de8 <key_down_callback+0x2b8>
 8008daa:	bf00      	nop
 8008dac:	40020400 	.word	0x40020400
 8008db0:	20000bf5 	.word	0x20000bf5
 8008db4:	20001244 	.word	0x20001244
 8008db8:	200006c4 	.word	0x200006c4
 8008dbc:	200006c9 	.word	0x200006c9
 8008dc0:	20000ce0 	.word	0x20000ce0
 8008dc4:	20000bf4 	.word	0x20000bf4
 8008dc8:	2000068c 	.word	0x2000068c
 8008dcc:	200006d0 	.word	0x200006d0
 8008dd0:	200006a0 	.word	0x200006a0
 8008dd4:	20000bf8 	.word	0x20000bf8
					 else frame.value--;
 8008dd8:	4bbb      	ldr	r3, [pc, #748]	; (80090c8 <key_down_callback+0x598>)
 8008dda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dde:	3b01      	subs	r3, #1
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	4bb9      	ldr	r3, [pc, #740]	; (80090c8 <key_down_callback+0x598>)
 8008de4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					 EEPROM_read_archive_entry(frame.value, &ArchiveEntry, sizeof(ArchiveEntry));
 8008de8:	4bb7      	ldr	r3, [pc, #732]	; (80090c8 <key_down_callback+0x598>)
 8008dea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	221c      	movs	r2, #28
 8008df2:	49b6      	ldr	r1, [pc, #728]	; (80090cc <key_down_callback+0x59c>)
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fc fd6b 	bl	80058d0 <EEPROM_read_archive_entry>
				 if (key == KEY_RIGHT)
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	2b0e      	cmp	r3, #14
 8008dfe:	d121      	bne.n	8008e44 <key_down_callback+0x314>
					 key = KEY_NONE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	71fb      	strb	r3, [r7, #7]
					 if (frame.value == frame.valueMax) frame.value = frame.valueMin;
 8008e04:	4bb0      	ldr	r3, [pc, #704]	; (80090c8 <key_down_callback+0x598>)
 8008e06:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8008e0a:	4baf      	ldr	r3, [pc, #700]	; (80090c8 <key_down_callback+0x598>)
 8008e0c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d106      	bne.n	8008e22 <key_down_callback+0x2f2>
 8008e14:	4bac      	ldr	r3, [pc, #688]	; (80090c8 <key_down_callback+0x598>)
 8008e16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008e1a:	4bab      	ldr	r3, [pc, #684]	; (80090c8 <key_down_callback+0x598>)
 8008e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008e20:	e007      	b.n	8008e32 <key_down_callback+0x302>
					 else frame.value++;
 8008e22:	4ba9      	ldr	r3, [pc, #676]	; (80090c8 <key_down_callback+0x598>)
 8008e24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e28:	3301      	adds	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	4ba6      	ldr	r3, [pc, #664]	; (80090c8 <key_down_callback+0x598>)
 8008e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					 EEPROM_read_archive_entry(frame.value, &ArchiveEntry, sizeof(ArchiveEntry));
 8008e32:	4ba5      	ldr	r3, [pc, #660]	; (80090c8 <key_down_callback+0x598>)
 8008e34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	221c      	movs	r2, #28
 8008e3c:	49a3      	ldr	r1, [pc, #652]	; (80090cc <key_down_callback+0x59c>)
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fc fd46 	bl	80058d0 <EEPROM_read_archive_entry>
				 if (key == KEY_PROGRAM)
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d108      	bne.n	8008e5c <key_down_callback+0x32c>
					 key = KEY_NONE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	71fb      	strb	r3, [r7, #7]
					 reset_screen_saver();
 8008e4e:	f7fd fea1 	bl	8006b94 <reset_screen_saver>
					 frame.type = FRAME_MAIN_MENU;
 8008e52:	4b9d      	ldr	r3, [pc, #628]	; (80090c8 <key_down_callback+0x598>)
 8008e54:	2201      	movs	r2, #1
 8008e56:	701a      	strb	r2, [r3, #0]
					 OLED_CLEAR();
 8008e58:	f7fc ff39 	bl	8005cce <OLED_CLEAR>
			 if(frame.type == FRAME_SET_VALUE)
 8008e5c:	4b9a      	ldr	r3, [pc, #616]	; (80090c8 <key_down_callback+0x598>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d131      	bne.n	8008ec8 <key_down_callback+0x398>
				 if (key == KEY_LEFT)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b05      	cmp	r3, #5
 8008e68:	d115      	bne.n	8008e96 <key_down_callback+0x366>
					 key = KEY_NONE;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	71fb      	strb	r3, [r7, #7]
					 if (frame.value == 0) frame.value = frame.valueMax;
 8008e6e:	4b96      	ldr	r3, [pc, #600]	; (80090c8 <key_down_callback+0x598>)
 8008e70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <key_down_callback+0x356>
 8008e78:	4b93      	ldr	r3, [pc, #588]	; (80090c8 <key_down_callback+0x598>)
 8008e7a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8008e7e:	4b92      	ldr	r3, [pc, #584]	; (80090c8 <key_down_callback+0x598>)
 8008e80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008e84:	e007      	b.n	8008e96 <key_down_callback+0x366>
					 else frame.value--;
 8008e86:	4b90      	ldr	r3, [pc, #576]	; (80090c8 <key_down_callback+0x598>)
 8008e88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	4b8d      	ldr	r3, [pc, #564]	; (80090c8 <key_down_callback+0x598>)
 8008e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				 if (key == KEY_RIGHT)
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	2b0e      	cmp	r3, #14
 8008e9a:	d115      	bne.n	8008ec8 <key_down_callback+0x398>
					 key = KEY_NONE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	71fb      	strb	r3, [r7, #7]
					 if (frame.value == 0xFF) frame.value = frame.valueMin;
 8008ea0:	4b89      	ldr	r3, [pc, #548]	; (80090c8 <key_down_callback+0x598>)
 8008ea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ea6:	2bff      	cmp	r3, #255	; 0xff
 8008ea8:	d106      	bne.n	8008eb8 <key_down_callback+0x388>
 8008eaa:	4b87      	ldr	r3, [pc, #540]	; (80090c8 <key_down_callback+0x598>)
 8008eac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008eb0:	4b85      	ldr	r3, [pc, #532]	; (80090c8 <key_down_callback+0x598>)
 8008eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008eb6:	e007      	b.n	8008ec8 <key_down_callback+0x398>
					 else frame.value++;
 8008eb8:	4b83      	ldr	r3, [pc, #524]	; (80090c8 <key_down_callback+0x598>)
 8008eba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	4b81      	ldr	r3, [pc, #516]	; (80090c8 <key_down_callback+0x598>)
 8008ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			 if (key == KEY_UP)
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d13c      	bne.n	8008f48 <key_down_callback+0x418>
				 key = KEY_NONE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	71fb      	strb	r3, [r7, #7]
				 OLED_PutStr(1, frame.position[frame.level]*9 + 10, " ", 0, settings.contrast);
 8008ed2:	4b7d      	ldr	r3, [pc, #500]	; (80090c8 <key_down_callback+0x598>)
 8008ed4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4b7b      	ldr	r3, [pc, #492]	; (80090c8 <key_down_callback+0x598>)
 8008edc:	4413      	add	r3, r2
 8008ede:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	00d2      	lsls	r2, r2, #3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	330a      	adds	r3, #10
 8008eec:	b2d9      	uxtb	r1, r3
 8008eee:	4b78      	ldr	r3, [pc, #480]	; (80090d0 <key_down_callback+0x5a0>)
 8008ef0:	795b      	ldrb	r3, [r3, #5]
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	4a77      	ldr	r2, [pc, #476]	; (80090d4 <key_down_callback+0x5a4>)
 8008ef8:	2001      	movs	r0, #1
 8008efa:	f7fd f9cb 	bl	8006294 <OLED_PutStr>
				 frame.position[frame.level]--;
 8008efe:	4b72      	ldr	r3, [pc, #456]	; (80090c8 <key_down_callback+0x598>)
 8008f00:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008f04:	4a70      	ldr	r2, [pc, #448]	; (80090c8 <key_down_callback+0x598>)
 8008f06:	441a      	add	r2, r3
 8008f08:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8008f0c:	3a01      	subs	r2, #1
 8008f0e:	b2d1      	uxtb	r1, r2
 8008f10:	4a6d      	ldr	r2, [pc, #436]	; (80090c8 <key_down_callback+0x598>)
 8008f12:	4413      	add	r3, r2
 8008f14:	460a      	mov	r2, r1
 8008f16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
				 if (frame.position[frame.level] == 255) frame.position[frame.level] = frame.totalPositions - 1;
 8008f1a:	4b6b      	ldr	r3, [pc, #428]	; (80090c8 <key_down_callback+0x598>)
 8008f1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008f20:	461a      	mov	r2, r3
 8008f22:	4b69      	ldr	r3, [pc, #420]	; (80090c8 <key_down_callback+0x598>)
 8008f24:	4413      	add	r3, r2
 8008f26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008f2a:	2bff      	cmp	r3, #255	; 0xff
 8008f2c:	d10c      	bne.n	8008f48 <key_down_callback+0x418>
 8008f2e:	4b66      	ldr	r3, [pc, #408]	; (80090c8 <key_down_callback+0x598>)
 8008f30:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8008f34:	4a64      	ldr	r2, [pc, #400]	; (80090c8 <key_down_callback+0x598>)
 8008f36:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	4b61      	ldr	r3, [pc, #388]	; (80090c8 <key_down_callback+0x598>)
 8008f42:	440b      	add	r3, r1
 8008f44:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			 if (key == KEY_DOWN)
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b0d      	cmp	r3, #13
 8008f4c:	d13b      	bne.n	8008fc6 <key_down_callback+0x496>
				 key = KEY_NONE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	71fb      	strb	r3, [r7, #7]
				 OLED_PutStr(1, frame.position[frame.level]*9 + 10, " ", 0, settings.contrast);
 8008f52:	4b5d      	ldr	r3, [pc, #372]	; (80090c8 <key_down_callback+0x598>)
 8008f54:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b5b      	ldr	r3, [pc, #364]	; (80090c8 <key_down_callback+0x598>)
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008f62:	461a      	mov	r2, r3
 8008f64:	00d2      	lsls	r2, r2, #3
 8008f66:	4413      	add	r3, r2
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	330a      	adds	r3, #10
 8008f6c:	b2d9      	uxtb	r1, r3
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <key_down_callback+0x5a0>)
 8008f70:	795b      	ldrb	r3, [r3, #5]
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	4a57      	ldr	r2, [pc, #348]	; (80090d4 <key_down_callback+0x5a4>)
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7fd f98b 	bl	8006294 <OLED_PutStr>
				 frame.position[frame.level]++;
 8008f7e:	4b52      	ldr	r3, [pc, #328]	; (80090c8 <key_down_callback+0x598>)
 8008f80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008f84:	4a50      	ldr	r2, [pc, #320]	; (80090c8 <key_down_callback+0x598>)
 8008f86:	441a      	add	r2, r3
 8008f88:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8008f8c:	3201      	adds	r2, #1
 8008f8e:	b2d1      	uxtb	r1, r2
 8008f90:	4a4d      	ldr	r2, [pc, #308]	; (80090c8 <key_down_callback+0x598>)
 8008f92:	4413      	add	r3, r2
 8008f94:	460a      	mov	r2, r1
 8008f96:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
				 if (frame.position[frame.level] > frame.totalPositions - 1) frame.position[frame.level] = 0;
 8008f9a:	4b4b      	ldr	r3, [pc, #300]	; (80090c8 <key_down_callback+0x598>)
 8008f9c:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8008fa0:	4b49      	ldr	r3, [pc, #292]	; (80090c8 <key_down_callback+0x598>)
 8008fa2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4b47      	ldr	r3, [pc, #284]	; (80090c8 <key_down_callback+0x598>)
 8008faa:	440b      	add	r3, r1
 8008fac:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d808      	bhi.n	8008fc6 <key_down_callback+0x496>
 8008fb4:	4b44      	ldr	r3, [pc, #272]	; (80090c8 <key_down_callback+0x598>)
 8008fb6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008fba:	461a      	mov	r2, r3
 8008fbc:	4b42      	ldr	r3, [pc, #264]	; (80090c8 <key_down_callback+0x598>)
 8008fbe:	4413      	add	r3, r2
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			 if (key == KEY_PROGRAM)
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	f040 8293 	bne.w	80094f4 <key_down_callback+0x9c4>
				 key = KEY_NONE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	71fb      	strb	r3, [r7, #7]
				 OLED_PutStr(1, frame.position[frame.level]*9 + 10, " ", 0, settings.contrast);
 8008fd2:	4b3d      	ldr	r3, [pc, #244]	; (80090c8 <key_down_callback+0x598>)
 8008fd4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4b3b      	ldr	r3, [pc, #236]	; (80090c8 <key_down_callback+0x598>)
 8008fdc:	4413      	add	r3, r2
 8008fde:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	00d2      	lsls	r2, r2, #3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	330a      	adds	r3, #10
 8008fec:	b2d9      	uxtb	r1, r3
 8008fee:	4b38      	ldr	r3, [pc, #224]	; (80090d0 <key_down_callback+0x5a0>)
 8008ff0:	795b      	ldrb	r3, [r3, #5]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4a37      	ldr	r2, [pc, #220]	; (80090d4 <key_down_callback+0x5a4>)
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	f7fd f94b 	bl	8006294 <OLED_PutStr>
				 if (frame.level == 0) frame.level = 1;	//jezeli otwarte menu glowne i zaznaczony element to go wybierz
 8008ffe:	4b32      	ldr	r3, [pc, #200]	; (80090c8 <key_down_callback+0x598>)
 8009000:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <key_down_callback+0x4e2>
 8009008:	4b2f      	ldr	r3, [pc, #188]	; (80090c8 <key_down_callback+0x598>)
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009010:	e26b      	b.n	80094ea <key_down_callback+0x9ba>
				 else if (frame.level == 1)			//sprawdz czy otwarte podmenu menu glownego
 8009012:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <key_down_callback+0x598>)
 8009014:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009018:	2b01      	cmp	r3, #1
 800901a:	f040 80fc 	bne.w	8009216 <key_down_callback+0x6e6>
					 switch (MAIN_MENU_POSITION)		//sprawdz ktore
 800901e:	4b2a      	ldr	r3, [pc, #168]	; (80090c8 <key_down_callback+0x598>)
 8009020:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009024:	2b05      	cmp	r3, #5
 8009026:	f200 8260 	bhi.w	80094ea <key_down_callback+0x9ba>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <key_down_callback+0x500>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009049 	.word	0x08009049
 8009034:	08009099 	.word	0x08009099
 8009038:	080090fd 	.word	0x080090fd
 800903c:	08009147 	.word	0x08009147
 8009040:	0800919d 	.word	0x0800919d
 8009044:	08009211 	.word	0x08009211
							 switch (frame.position[1])							//obsluz wybor
 8009048:	4b1f      	ldr	r3, [pc, #124]	; (80090c8 <key_down_callback+0x598>)
 800904a:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800904e:	2b02      	cmp	r3, #2
 8009050:	d01e      	beq.n	8009090 <key_down_callback+0x560>
 8009052:	2b02      	cmp	r3, #2
 8009054:	f300 823c 	bgt.w	80094d0 <key_down_callback+0x9a0>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <key_down_callback+0x532>
 800905c:	2b01      	cmp	r3, #1
 800905e:	d00a      	beq.n	8009076 <key_down_callback+0x546>
							 break;
 8009060:	e236      	b.n	80094d0 <key_down_callback+0x9a0>
									 settings.measurementType = MEASUREMENT_SINGLE;
 8009062:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <key_down_callback+0x5a0>)
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
									 EEPROM_write(EEPROM_MEASUREMENT_TYPE_ADDR, &settings.measurementType);
 8009068:	4919      	ldr	r1, [pc, #100]	; (80090d0 <key_down_callback+0x5a0>)
 800906a:	2000      	movs	r0, #0
 800906c:	f7fc faec 	bl	8005648 <EEPROM_write>
									 exit_main_menu();
 8009070:	f7fd fda8 	bl	8006bc4 <exit_main_menu>
									 break;
 8009074:	e00f      	b.n	8009096 <key_down_callback+0x566>
									 settings.measurementType = MEASUREMENT_CONTINUOUS;
 8009076:	4b16      	ldr	r3, [pc, #88]	; (80090d0 <key_down_callback+0x5a0>)
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
									 EEPROM_write(EEPROM_MEASUREMENT_TYPE_ADDR, &settings.measurementType);
 800907c:	4914      	ldr	r1, [pc, #80]	; (80090d0 <key_down_callback+0x5a0>)
 800907e:	2000      	movs	r0, #0
 8009080:	f7fc fae2 	bl	8005648 <EEPROM_write>
									 pomiarStatus = POMIAR_STOP;
 8009084:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <key_down_callback+0x5a8>)
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
									 exit_main_menu();
 800908a:	f7fd fd9b 	bl	8006bc4 <exit_main_menu>
									 break;
 800908e:	e002      	b.n	8009096 <key_down_callback+0x566>
									 MM_up_one_level();
 8009090:	f7fd fdbe 	bl	8006c10 <MM_up_one_level>
									 break;
 8009094:	bf00      	nop
							 break;
 8009096:	e21b      	b.n	80094d0 <key_down_callback+0x9a0>
								 switch (frame.position[1])							//obsluz wybor
 8009098:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <key_down_callback+0x598>)
 800909a:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d028      	beq.n	80090f4 <key_down_callback+0x5c4>
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	f300 8216 	bgt.w	80094d4 <key_down_callback+0x9a4>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <key_down_callback+0x582>
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d017      	beq.n	80090e0 <key_down_callback+0x5b0>
								 break;
 80090b0:	e210      	b.n	80094d4 <key_down_callback+0x9a4>
										 settings.measurementUnit = UNIT_BRIX;
 80090b2:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <key_down_callback+0x5a0>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	705a      	strb	r2, [r3, #1]
										 EEPROM_write(EEPROM_MEASUREMENT_UNIT_ADDR, &settings.measurementUnit);
 80090b8:	4908      	ldr	r1, [pc, #32]	; (80090dc <key_down_callback+0x5ac>)
 80090ba:	2001      	movs	r0, #1
 80090bc:	f7fc fac4 	bl	8005648 <EEPROM_write>
										 exit_main_menu();
 80090c0:	f7fd fd80 	bl	8006bc4 <exit_main_menu>
										 break;
 80090c4:	e019      	b.n	80090fa <key_down_callback+0x5ca>
 80090c6:	bf00      	nop
 80090c8:	20001244 	.word	0x20001244
 80090cc:	200006d0 	.word	0x200006d0
 80090d0:	200006c4 	.word	0x200006c4
 80090d4:	08013608 	.word	0x08013608
 80090d8:	20000bf5 	.word	0x20000bf5
 80090dc:	200006c5 	.word	0x200006c5
										 settings.measurementUnit = UNIT_RI;
 80090e0:	4bbf      	ldr	r3, [pc, #764]	; (80093e0 <key_down_callback+0x8b0>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	705a      	strb	r2, [r3, #1]
										 EEPROM_write(EEPROM_MEASUREMENT_UNIT_ADDR, &settings.measurementUnit);
 80090e6:	49bf      	ldr	r1, [pc, #764]	; (80093e4 <key_down_callback+0x8b4>)
 80090e8:	2001      	movs	r0, #1
 80090ea:	f7fc faad 	bl	8005648 <EEPROM_write>
										 exit_main_menu();
 80090ee:	f7fd fd69 	bl	8006bc4 <exit_main_menu>
										 break;
 80090f2:	e002      	b.n	80090fa <key_down_callback+0x5ca>
										 MM_up_one_level();
 80090f4:	f7fd fd8c 	bl	8006c10 <MM_up_one_level>
										 break;
 80090f8:	bf00      	nop
								 break;
 80090fa:	e1eb      	b.n	80094d4 <key_down_callback+0x9a4>
								 switch (frame.position[1])							//obsluz wybor
 80090fc:	4bba      	ldr	r3, [pc, #744]	; (80093e8 <key_down_callback+0x8b8>)
 80090fe:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8009102:	2b02      	cmp	r3, #2
 8009104:	d01b      	beq.n	800913e <key_down_callback+0x60e>
 8009106:	2b02      	cmp	r3, #2
 8009108:	f300 81e6 	bgt.w	80094d8 <key_down_callback+0x9a8>
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <key_down_callback+0x5e6>
 8009110:	2b01      	cmp	r3, #1
 8009112:	d00a      	beq.n	800912a <key_down_callback+0x5fa>
								 break;
 8009114:	e1e0      	b.n	80094d8 <key_down_callback+0x9a8>
										 settings.thermalCompensation = OFF;
 8009116:	4bb2      	ldr	r3, [pc, #712]	; (80093e0 <key_down_callback+0x8b0>)
 8009118:	2200      	movs	r2, #0
 800911a:	709a      	strb	r2, [r3, #2]
										 EEPROM_write(EEPROM_THERMAL_COMP_ADDR, &settings.thermalCompensation);
 800911c:	49b3      	ldr	r1, [pc, #716]	; (80093ec <key_down_callback+0x8bc>)
 800911e:	2002      	movs	r0, #2
 8009120:	f7fc fa92 	bl	8005648 <EEPROM_write>
										 exit_main_menu();
 8009124:	f7fd fd4e 	bl	8006bc4 <exit_main_menu>
										 break;
 8009128:	e00c      	b.n	8009144 <key_down_callback+0x614>
										 settings.thermalCompensation = ON;
 800912a:	4bad      	ldr	r3, [pc, #692]	; (80093e0 <key_down_callback+0x8b0>)
 800912c:	2201      	movs	r2, #1
 800912e:	709a      	strb	r2, [r3, #2]
										 EEPROM_write(EEPROM_THERMAL_COMP_ADDR, &settings.thermalCompensation);
 8009130:	49ae      	ldr	r1, [pc, #696]	; (80093ec <key_down_callback+0x8bc>)
 8009132:	2002      	movs	r0, #2
 8009134:	f7fc fa88 	bl	8005648 <EEPROM_write>
										 exit_main_menu();
 8009138:	f7fd fd44 	bl	8006bc4 <exit_main_menu>
										 break;
 800913c:	e002      	b.n	8009144 <key_down_callback+0x614>
										 MM_up_one_level();
 800913e:	f7fd fd67 	bl	8006c10 <MM_up_one_level>
										 break;
 8009142:	bf00      	nop
								 break;
 8009144:	e1c8      	b.n	80094d8 <key_down_callback+0x9a8>
									 switch (frame.position[1])							//obsluz wybor
 8009146:	4ba8      	ldr	r3, [pc, #672]	; (80093e8 <key_down_callback+0x8b8>)
 8009148:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800914c:	2b04      	cmp	r3, #4
 800914e:	f200 81c5 	bhi.w	80094dc <key_down_callback+0x9ac>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <key_down_callback+0x628>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	0800916d 	.word	0x0800916d
 800915c:	08009177 	.word	0x08009177
 8009160:	08009181 	.word	0x08009181
 8009164:	0800918b 	.word	0x0800918b
 8009168:	08009195 	.word	0x08009195
											 frame.level = 2;
 800916c:	4b9e      	ldr	r3, [pc, #632]	; (80093e8 <key_down_callback+0x8b8>)
 800916e:	2202      	movs	r2, #2
 8009170:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 8009174:	e011      	b.n	800919a <key_down_callback+0x66a>
											 frame.level = 2;
 8009176:	4b9c      	ldr	r3, [pc, #624]	; (80093e8 <key_down_callback+0x8b8>)
 8009178:	2202      	movs	r2, #2
 800917a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 800917e:	e00c      	b.n	800919a <key_down_callback+0x66a>
											 frame.level = 2;
 8009180:	4b99      	ldr	r3, [pc, #612]	; (80093e8 <key_down_callback+0x8b8>)
 8009182:	2202      	movs	r2, #2
 8009184:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 8009188:	e007      	b.n	800919a <key_down_callback+0x66a>
											 frame.level = 2;
 800918a:	4b97      	ldr	r3, [pc, #604]	; (80093e8 <key_down_callback+0x8b8>)
 800918c:	2202      	movs	r2, #2
 800918e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 8009192:	e002      	b.n	800919a <key_down_callback+0x66a>
											 MM_up_one_level();
 8009194:	f7fd fd3c 	bl	8006c10 <MM_up_one_level>
											 break;
 8009198:	bf00      	nop
									 break;
 800919a:	e19f      	b.n	80094dc <key_down_callback+0x9ac>
									switch (frame.position[1])							//obsluz wybor
 800919c:	4b92      	ldr	r3, [pc, #584]	; (80093e8 <key_down_callback+0x8b8>)
 800919e:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	f200 819c 	bhi.w	80094e0 <key_down_callback+0x9b0>
 80091a8:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <key_down_callback+0x680>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	080091c1 	.word	0x080091c1
 80091b4:	080091f7 	.word	0x080091f7
 80091b8:	08009201 	.word	0x08009201
 80091bc:	08009209 	.word	0x08009209
											 EEPROM_read_archive_entry(0,&ArchiveEntry,sizeof(ArchiveEntry));
 80091c0:	221c      	movs	r2, #28
 80091c2:	498b      	ldr	r1, [pc, #556]	; (80093f0 <key_down_callback+0x8c0>)
 80091c4:	2000      	movs	r0, #0
 80091c6:	f7fc fb83 	bl	80058d0 <EEPROM_read_archive_entry>
											 frame.valueMin = 0;
 80091ca:	4b87      	ldr	r3, [pc, #540]	; (80093e8 <key_down_callback+0x8b8>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
											 frame.valueMax = settings.archiveEntriesTotal - 1;
 80091d2:	4b83      	ldr	r3, [pc, #524]	; (80093e0 <key_down_callback+0x8b0>)
 80091d4:	7a1b      	ldrb	r3, [r3, #8]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	4b82      	ldr	r3, [pc, #520]	; (80093e8 <key_down_callback+0x8b8>)
 80091de:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
											 frame.value = 0;
 80091e2:	4b81      	ldr	r3, [pc, #516]	; (80093e8 <key_down_callback+0x8b8>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
											 frame.type = FRAME_ARCHIVE_BROWSE;
 80091ea:	4b7f      	ldr	r3, [pc, #508]	; (80093e8 <key_down_callback+0x8b8>)
 80091ec:	2205      	movs	r2, #5
 80091ee:	701a      	strb	r2, [r3, #0]
											 OLED_CLEAR();
 80091f0:	f7fc fd6d 	bl	8005cce <OLED_CLEAR>
											 break;
 80091f4:	e00b      	b.n	800920e <key_down_callback+0x6de>
											 frame.level = 2;
 80091f6:	4b7c      	ldr	r3, [pc, #496]	; (80093e8 <key_down_callback+0x8b8>)
 80091f8:	2202      	movs	r2, #2
 80091fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
											 break;
 80091fe:	e006      	b.n	800920e <key_down_callback+0x6de>
											 frame.type = FRAME_ARCHIVE_BEING_ERASED;
 8009200:	4b79      	ldr	r3, [pc, #484]	; (80093e8 <key_down_callback+0x8b8>)
 8009202:	2204      	movs	r2, #4
 8009204:	701a      	strb	r2, [r3, #0]
											 break;
 8009206:	e002      	b.n	800920e <key_down_callback+0x6de>
											 MM_up_one_level();
 8009208:	f7fd fd02 	bl	8006c10 <MM_up_one_level>
											 break;
 800920c:	bf00      	nop
									break;
 800920e:	e167      	b.n	80094e0 <key_down_callback+0x9b0>
									exit_main_menu();
 8009210:	f7fd fcd8 	bl	8006bc4 <exit_main_menu>
									break;
 8009214:	e169      	b.n	80094ea <key_down_callback+0x9ba>
				 else if (frame.level == 2)			//sprawdz czy otwarte podmenu ustawienia/archiwum
 8009216:	4b74      	ldr	r3, [pc, #464]	; (80093e8 <key_down_callback+0x8b8>)
 8009218:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800921c:	2b02      	cmp	r3, #2
 800921e:	f040 80c1 	bne.w	80093a4 <key_down_callback+0x874>
					 if (frame.position[0] == MAIN_MENU_SETTINGS)	//jesli otwarte ustawienia
 8009222:	4b71      	ldr	r3, [pc, #452]	; (80093e8 <key_down_callback+0x8b8>)
 8009224:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009228:	2b03      	cmp	r3, #3
 800922a:	f040 808a 	bne.w	8009342 <key_down_callback+0x812>
						 switch (frame.position[1])		//sprawdz ktore podmenu ustawien otwarte
 800922e:	4b6e      	ldr	r3, [pc, #440]	; (80093e8 <key_down_callback+0x8b8>)
 8009230:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8009234:	2b03      	cmp	r3, #3
 8009236:	f200 808b 	bhi.w	8009350 <key_down_callback+0x820>
 800923a:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <key_down_callback+0x710>)
 800923c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009240:	08009251 	.word	0x08009251
 8009244:	0800926b 	.word	0x0800926b
 8009248:	080092b3 	.word	0x080092b3
 800924c:	080092fb 	.word	0x080092fb
								 settings.singleMeasurementTime = frame.value;
 8009250:	4b65      	ldr	r3, [pc, #404]	; (80093e8 <key_down_callback+0x8b8>)
 8009252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009256:	b2da      	uxtb	r2, r3
 8009258:	4b61      	ldr	r3, [pc, #388]	; (80093e0 <key_down_callback+0x8b0>)
 800925a:	70da      	strb	r2, [r3, #3]
								 EEPROM_write(EEPROM_SINGLE_MEASUREMENT_TIME_ADDR, &settings.singleMeasurementTime);
 800925c:	4965      	ldr	r1, [pc, #404]	; (80093f4 <key_down_callback+0x8c4>)
 800925e:	2003      	movs	r0, #3
 8009260:	f7fc f9f2 	bl	8005648 <EEPROM_write>
								 exit_main_menu();
 8009264:	f7fd fcae 	bl	8006bc4 <exit_main_menu>
								 break;
 8009268:	e072      	b.n	8009350 <key_down_callback+0x820>
								 switch (frame.position[2])
 800926a:	4b5f      	ldr	r3, [pc, #380]	; (80093e8 <key_down_callback+0x8b8>)
 800926c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8009270:	2b03      	cmp	r3, #3
 8009272:	d868      	bhi.n	8009346 <key_down_callback+0x816>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <key_down_callback+0x74c>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	0800928d 	.word	0x0800928d
 8009280:	08009297 	.word	0x08009297
 8009284:	080092a1 	.word	0x080092a1
 8009288:	080092ab 	.word	0x080092ab
										 frame.level = 3;
 800928c:	4b56      	ldr	r3, [pc, #344]	; (80093e8 <key_down_callback+0x8b8>)
 800928e:	2203      	movs	r2, #3
 8009290:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 8009294:	e00c      	b.n	80092b0 <key_down_callback+0x780>
										 frame.level = 3;
 8009296:	4b54      	ldr	r3, [pc, #336]	; (80093e8 <key_down_callback+0x8b8>)
 8009298:	2203      	movs	r2, #3
 800929a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 800929e:	e007      	b.n	80092b0 <key_down_callback+0x780>
										 frame.level = 3;
 80092a0:	4b51      	ldr	r3, [pc, #324]	; (80093e8 <key_down_callback+0x8b8>)
 80092a2:	2203      	movs	r2, #3
 80092a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80092a8:	e002      	b.n	80092b0 <key_down_callback+0x780>
										 MM_up_one_level();
 80092aa:	f7fd fcb1 	bl	8006c10 <MM_up_one_level>
										 break;
 80092ae:	bf00      	nop
								 break;
 80092b0:	e049      	b.n	8009346 <key_down_callback+0x816>
								 switch (frame.position[2])
 80092b2:	4b4d      	ldr	r3, [pc, #308]	; (80093e8 <key_down_callback+0x8b8>)
 80092b4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d846      	bhi.n	800934a <key_down_callback+0x81a>
 80092bc:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <key_down_callback+0x794>)
 80092be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c2:	bf00      	nop
 80092c4:	080092d5 	.word	0x080092d5
 80092c8:	080092df 	.word	0x080092df
 80092cc:	080092e9 	.word	0x080092e9
 80092d0:	080092f3 	.word	0x080092f3
										 frame.level = 3;
 80092d4:	4b44      	ldr	r3, [pc, #272]	; (80093e8 <key_down_callback+0x8b8>)
 80092d6:	2203      	movs	r2, #3
 80092d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80092dc:	e00c      	b.n	80092f8 <key_down_callback+0x7c8>
										 frame.level = 3;
 80092de:	4b42      	ldr	r3, [pc, #264]	; (80093e8 <key_down_callback+0x8b8>)
 80092e0:	2203      	movs	r2, #3
 80092e2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80092e6:	e007      	b.n	80092f8 <key_down_callback+0x7c8>
										 frame.level = 3;
 80092e8:	4b3f      	ldr	r3, [pc, #252]	; (80093e8 <key_down_callback+0x8b8>)
 80092ea:	2203      	movs	r2, #3
 80092ec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
										 break;
 80092f0:	e002      	b.n	80092f8 <key_down_callback+0x7c8>
										 MM_up_one_level();
 80092f2:	f7fd fc8d 	bl	8006c10 <MM_up_one_level>
										 break;
 80092f6:	bf00      	nop
								 break;
 80092f8:	e027      	b.n	800934a <key_down_callback+0x81a>
								 switch (frame.position[2])
 80092fa:	4b3b      	ldr	r3, [pc, #236]	; (80093e8 <key_down_callback+0x8b8>)
 80092fc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8009300:	2b02      	cmp	r3, #2
 8009302:	d01a      	beq.n	800933a <key_down_callback+0x80a>
 8009304:	2b02      	cmp	r3, #2
 8009306:	dc22      	bgt.n	800934e <key_down_callback+0x81e>
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <key_down_callback+0x7e2>
 800930c:	2b01      	cmp	r3, #1
 800930e:	d00a      	beq.n	8009326 <key_down_callback+0x7f6>
								 break;
 8009310:	e01d      	b.n	800934e <key_down_callback+0x81e>
										 settings.language = POLISH;
 8009312:	4b33      	ldr	r3, [pc, #204]	; (80093e0 <key_down_callback+0x8b0>)
 8009314:	2200      	movs	r2, #0
 8009316:	711a      	strb	r2, [r3, #4]
										 EEPROM_write(EEPROM_LANGUAGE_ADDR, &settings.language);
 8009318:	4937      	ldr	r1, [pc, #220]	; (80093f8 <key_down_callback+0x8c8>)
 800931a:	2004      	movs	r0, #4
 800931c:	f7fc f994 	bl	8005648 <EEPROM_write>
										 exit_main_menu();
 8009320:	f7fd fc50 	bl	8006bc4 <exit_main_menu>
										 break;
 8009324:	e00c      	b.n	8009340 <key_down_callback+0x810>
										 settings.language = ENGLISH;
 8009326:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <key_down_callback+0x8b0>)
 8009328:	2201      	movs	r2, #1
 800932a:	711a      	strb	r2, [r3, #4]
										 EEPROM_write(EEPROM_LANGUAGE_ADDR, &settings.language);
 800932c:	4932      	ldr	r1, [pc, #200]	; (80093f8 <key_down_callback+0x8c8>)
 800932e:	2004      	movs	r0, #4
 8009330:	f7fc f98a 	bl	8005648 <EEPROM_write>
										 exit_main_menu();
 8009334:	f7fd fc46 	bl	8006bc4 <exit_main_menu>
										 break;
 8009338:	e002      	b.n	8009340 <key_down_callback+0x810>
										 MM_up_one_level();
 800933a:	f7fd fc69 	bl	8006c10 <MM_up_one_level>
										 break;
 800933e:	bf00      	nop
								 break;
 8009340:	e005      	b.n	800934e <key_down_callback+0x81e>
					 }
 8009342:	bf00      	nop
 8009344:	e004      	b.n	8009350 <key_down_callback+0x820>
								 break;
 8009346:	bf00      	nop
 8009348:	e002      	b.n	8009350 <key_down_callback+0x820>
								 break;
 800934a:	bf00      	nop
 800934c:	e000      	b.n	8009350 <key_down_callback+0x820>
								 break;
 800934e:	bf00      	nop
					 if (frame.position[0] == MAIN_MENU_ARCHIVE)	//jesli otwarte archiwum
 8009350:	4b25      	ldr	r3, [pc, #148]	; (80093e8 <key_down_callback+0x8b8>)
 8009352:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009356:	2b04      	cmp	r3, #4
 8009358:	f040 80c4 	bne.w	80094e4 <key_down_callback+0x9b4>
						 switch (frame.position[2])		//sprawdz ktory tryb zapisu do archiwum wybrany
 800935c:	4b22      	ldr	r3, [pc, #136]	; (80093e8 <key_down_callback+0x8b8>)
 800935e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8009362:	2b02      	cmp	r3, #2
 8009364:	d01b      	beq.n	800939e <key_down_callback+0x86e>
 8009366:	2b02      	cmp	r3, #2
 8009368:	f300 80bf 	bgt.w	80094ea <key_down_callback+0x9ba>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <key_down_callback+0x846>
 8009370:	2b01      	cmp	r3, #1
 8009372:	d00a      	beq.n	800938a <key_down_callback+0x85a>
 8009374:	e0b9      	b.n	80094ea <key_down_callback+0x9ba>
								 settings.storageMode = ARCHIVE_STORAGE_MODE_PROHIBITED;
 8009376:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <key_down_callback+0x8b0>)
 8009378:	2200      	movs	r2, #0
 800937a:	719a      	strb	r2, [r3, #6]
								 EEPROM_write(EEPROM_ARCHIVE_STORAGE_MODE_ADDR, &settings.storageMode);
 800937c:	491f      	ldr	r1, [pc, #124]	; (80093fc <key_down_callback+0x8cc>)
 800937e:	2006      	movs	r0, #6
 8009380:	f7fc f962 	bl	8005648 <EEPROM_write>
								 exit_main_menu();
 8009384:	f7fd fc1e 	bl	8006bc4 <exit_main_menu>
								 break;
 8009388:	e0af      	b.n	80094ea <key_down_callback+0x9ba>
								 settings.storageMode = ARCHIVE_STORAGE_MODE_BY_KEYBOARD;
 800938a:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <key_down_callback+0x8b0>)
 800938c:	2201      	movs	r2, #1
 800938e:	719a      	strb	r2, [r3, #6]
								 EEPROM_write(EEPROM_ARCHIVE_STORAGE_MODE_ADDR, &settings.storageMode);
 8009390:	491a      	ldr	r1, [pc, #104]	; (80093fc <key_down_callback+0x8cc>)
 8009392:	2006      	movs	r0, #6
 8009394:	f7fc f958 	bl	8005648 <EEPROM_write>
								 exit_main_menu();
 8009398:	f7fd fc14 	bl	8006bc4 <exit_main_menu>
								 break;
 800939c:	e0a5      	b.n	80094ea <key_down_callback+0x9ba>
								 MM_up_one_level();
 800939e:	f7fd fc37 	bl	8006c10 <MM_up_one_level>
								 break;
 80093a2:	e0a2      	b.n	80094ea <key_down_callback+0x9ba>
				 else if (frame.level == 3)			//sprawdz czy otwarte podmenu ustawiania daty / godziny
 80093a4:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <key_down_callback+0x8b8>)
 80093a6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	f040 809c 	bne.w	80094e8 <key_down_callback+0x9b8>
					 if(frame.position[0] == MAIN_MENU_SETTINGS)
 80093b0:	4b0d      	ldr	r3, [pc, #52]	; (80093e8 <key_down_callback+0x8b8>)
 80093b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	f040 8096 	bne.w	80094e8 <key_down_callback+0x9b8>
							if (frame.position[1] == SETTINGS_SUBMENU_DATE)	//jezeli w podmenu zmiany daty
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <key_down_callback+0x8b8>)
 80093be:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d148      	bne.n	8009458 <key_down_callback+0x928>
								 switch (frame.position[2])		//sprawdz zmiana ktorego parametru zostala wybrana (dnia/miesiaca/roku)
 80093c6:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <key_down_callback+0x8b8>)
 80093c8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d017      	beq.n	8009400 <key_down_callback+0x8d0>
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	dc42      	bgt.n	800945a <key_down_callback+0x92a>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d02f      	beq.n	8009438 <key_down_callback+0x908>
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d01f      	beq.n	800941c <key_down_callback+0x8ec>
 80093dc:	e03d      	b.n	800945a <key_down_callback+0x92a>
 80093de:	bf00      	nop
 80093e0:	200006c4 	.word	0x200006c4
 80093e4:	200006c5 	.word	0x200006c5
 80093e8:	20001244 	.word	0x20001244
 80093ec:	200006c6 	.word	0x200006c6
 80093f0:	200006d0 	.word	0x200006d0
 80093f4:	200006c7 	.word	0x200006c7
 80093f8:	200006c8 	.word	0x200006c8
 80093fc:	200006ca 	.word	0x200006ca
										 gDate.Date = frame.value;
 8009400:	4b3f      	ldr	r3, [pc, #252]	; (8009500 <key_down_callback+0x9d0>)
 8009402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009406:	b2da      	uxtb	r2, r3
 8009408:	4b3e      	ldr	r3, [pc, #248]	; (8009504 <key_down_callback+0x9d4>)
 800940a:	709a      	strb	r2, [r3, #2]
										 HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800940c:	2200      	movs	r2, #0
 800940e:	493d      	ldr	r1, [pc, #244]	; (8009504 <key_down_callback+0x9d4>)
 8009410:	483d      	ldr	r0, [pc, #244]	; (8009508 <key_down_callback+0x9d8>)
 8009412:	f7f9 fd0f 	bl	8002e34 <HAL_RTC_SetDate>
										 MM_up_one_level();
 8009416:	f7fd fbfb 	bl	8006c10 <MM_up_one_level>
										 break;
 800941a:	e01e      	b.n	800945a <key_down_callback+0x92a>
										 gDate.Month = frame.value;
 800941c:	4b38      	ldr	r3, [pc, #224]	; (8009500 <key_down_callback+0x9d0>)
 800941e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009422:	b2da      	uxtb	r2, r3
 8009424:	4b37      	ldr	r3, [pc, #220]	; (8009504 <key_down_callback+0x9d4>)
 8009426:	705a      	strb	r2, [r3, #1]
										 HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8009428:	2200      	movs	r2, #0
 800942a:	4936      	ldr	r1, [pc, #216]	; (8009504 <key_down_callback+0x9d4>)
 800942c:	4836      	ldr	r0, [pc, #216]	; (8009508 <key_down_callback+0x9d8>)
 800942e:	f7f9 fd01 	bl	8002e34 <HAL_RTC_SetDate>
										 MM_up_one_level();
 8009432:	f7fd fbed 	bl	8006c10 <MM_up_one_level>
										 break;
 8009436:	e010      	b.n	800945a <key_down_callback+0x92a>
										 gDate.Year = frame.value - 2000;
 8009438:	4b31      	ldr	r3, [pc, #196]	; (8009500 <key_down_callback+0x9d0>)
 800943a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800943e:	b2db      	uxtb	r3, r3
 8009440:	3330      	adds	r3, #48	; 0x30
 8009442:	b2da      	uxtb	r2, r3
 8009444:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <key_down_callback+0x9d4>)
 8009446:	70da      	strb	r2, [r3, #3]
										 HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8009448:	2200      	movs	r2, #0
 800944a:	492e      	ldr	r1, [pc, #184]	; (8009504 <key_down_callback+0x9d4>)
 800944c:	482e      	ldr	r0, [pc, #184]	; (8009508 <key_down_callback+0x9d8>)
 800944e:	f7f9 fcf1 	bl	8002e34 <HAL_RTC_SetDate>
										 MM_up_one_level();
 8009452:	f7fd fbdd 	bl	8006c10 <MM_up_one_level>
										 break;
 8009456:	e000      	b.n	800945a <key_down_callback+0x92a>
							}
 8009458:	bf00      	nop
							if (frame.position[1] == SETTINGS_SUBMENU_TIME)	//jezeli w podmenu zmiany czasu
 800945a:	4b29      	ldr	r3, [pc, #164]	; (8009500 <key_down_callback+0x9d0>)
 800945c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8009460:	2b02      	cmp	r3, #2
 8009462:	d141      	bne.n	80094e8 <key_down_callback+0x9b8>
								 switch (frame.position[2])		//sprawdz zmiana ktorego parametru zostala wybrana (godziny/minuty/sekundy)
 8009464:	4b26      	ldr	r3, [pc, #152]	; (8009500 <key_down_callback+0x9d0>)
 8009466:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800946a:	2b02      	cmp	r3, #2
 800946c:	d022      	beq.n	80094b4 <key_down_callback+0x984>
 800946e:	2b02      	cmp	r3, #2
 8009470:	dc3b      	bgt.n	80094ea <key_down_callback+0x9ba>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <key_down_callback+0x94c>
 8009476:	2b01      	cmp	r3, #1
 8009478:	d00e      	beq.n	8009498 <key_down_callback+0x968>
 800947a:	e036      	b.n	80094ea <key_down_callback+0x9ba>
										 gTime.Hours = frame.value;
 800947c:	4b20      	ldr	r3, [pc, #128]	; (8009500 <key_down_callback+0x9d0>)
 800947e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009482:	b2da      	uxtb	r2, r3
 8009484:	4b21      	ldr	r3, [pc, #132]	; (800950c <key_down_callback+0x9dc>)
 8009486:	701a      	strb	r2, [r3, #0]
										 HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8009488:	2200      	movs	r2, #0
 800948a:	4920      	ldr	r1, [pc, #128]	; (800950c <key_down_callback+0x9dc>)
 800948c:	481e      	ldr	r0, [pc, #120]	; (8009508 <key_down_callback+0x9d8>)
 800948e:	f7f9 fbb6 	bl	8002bfe <HAL_RTC_SetTime>
										 MM_up_one_level();
 8009492:	f7fd fbbd 	bl	8006c10 <MM_up_one_level>
										 break;
 8009496:	e028      	b.n	80094ea <key_down_callback+0x9ba>
										 gTime.Minutes = frame.value;
 8009498:	4b19      	ldr	r3, [pc, #100]	; (8009500 <key_down_callback+0x9d0>)
 800949a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	4b1a      	ldr	r3, [pc, #104]	; (800950c <key_down_callback+0x9dc>)
 80094a2:	705a      	strb	r2, [r3, #1]
										 HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80094a4:	2200      	movs	r2, #0
 80094a6:	4919      	ldr	r1, [pc, #100]	; (800950c <key_down_callback+0x9dc>)
 80094a8:	4817      	ldr	r0, [pc, #92]	; (8009508 <key_down_callback+0x9d8>)
 80094aa:	f7f9 fba8 	bl	8002bfe <HAL_RTC_SetTime>
										 MM_up_one_level();
 80094ae:	f7fd fbaf 	bl	8006c10 <MM_up_one_level>
										 break;
 80094b2:	e01a      	b.n	80094ea <key_down_callback+0x9ba>
										 gTime.Seconds = frame.value;
 80094b4:	4b12      	ldr	r3, [pc, #72]	; (8009500 <key_down_callback+0x9d0>)
 80094b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	4b13      	ldr	r3, [pc, #76]	; (800950c <key_down_callback+0x9dc>)
 80094be:	709a      	strb	r2, [r3, #2]
										 HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80094c0:	2200      	movs	r2, #0
 80094c2:	4912      	ldr	r1, [pc, #72]	; (800950c <key_down_callback+0x9dc>)
 80094c4:	4810      	ldr	r0, [pc, #64]	; (8009508 <key_down_callback+0x9d8>)
 80094c6:	f7f9 fb9a 	bl	8002bfe <HAL_RTC_SetTime>
										 MM_up_one_level();
 80094ca:	f7fd fba1 	bl	8006c10 <MM_up_one_level>
										 break;
 80094ce:	e00c      	b.n	80094ea <key_down_callback+0x9ba>
							 break;
 80094d0:	bf00      	nop
 80094d2:	e00a      	b.n	80094ea <key_down_callback+0x9ba>
								 break;
 80094d4:	bf00      	nop
 80094d6:	e008      	b.n	80094ea <key_down_callback+0x9ba>
								 break;
 80094d8:	bf00      	nop
 80094da:	e006      	b.n	80094ea <key_down_callback+0x9ba>
									 break;
 80094dc:	bf00      	nop
 80094de:	e004      	b.n	80094ea <key_down_callback+0x9ba>
									break;
 80094e0:	bf00      	nop
 80094e2:	e002      	b.n	80094ea <key_down_callback+0x9ba>
					 }
 80094e4:	bf00      	nop
 80094e6:	e000      	b.n	80094ea <key_down_callback+0x9ba>
							}
 80094e8:	bf00      	nop
				 OLED_CLEAR();
 80094ea:	f7fc fbf0 	bl	8005cce <OLED_CLEAR>
			break;
 80094ee:	e001      	b.n	80094f4 <key_down_callback+0x9c4>
			break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <key_down_callback+0x9c6>
			break;
 80094f4:	bf00      	nop
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20001244 	.word	0x20001244
 8009504:	200006a0 	.word	0x200006a0
 8009508:	200010e8 	.word	0x200010e8
 800950c:	2000068c 	.word	0x2000068c

08009510 <USER_UART2_IDLE_Callback>:


void USER_UART2_IDLE_Callback(UART_HandleTypeDef *huart)			// PC -> MBD
{
 8009510:	b590      	push	{r4, r7, lr}
 8009512:	b08d      	sub	sp, #52	; 0x34
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(&huart2);
 8009518:	4855      	ldr	r0, [pc, #340]	; (8009670 <USER_UART2_IDLE_Callback+0x160>)
 800951a:	f7fb f8d7 	bl	80046cc <HAL_UART_DMAStop>
	huart6.RxXferCount = 0;
 800951e:	4b55      	ldr	r3, [pc, #340]	; (8009674 <USER_UART2_IDLE_Callback+0x164>)
 8009520:	2200      	movs	r2, #0
 8009522:	85da      	strh	r2, [r3, #46]	; 0x2e
	uint8_t buffer[27] = {0};
 8009524:	2300      	movs	r3, #0
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	f107 0314 	add.w	r3, r7, #20
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	605a      	str	r2, [r3, #4]
 8009532:	609a      	str	r2, [r3, #8]
 8009534:	60da      	str	r2, [r3, #12]
 8009536:	611a      	str	r2, [r3, #16]
 8009538:	f8c3 2013 	str.w	r2, [r3, #19]

	uint16_t data_length  = CCD_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800953c:	4b4e      	ldr	r3, [pc, #312]	; (8009678 <USER_UART2_IDLE_Callback+0x168>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	b29b      	uxth	r3, r3
 8009544:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009548:	85fb      	strh	r3, [r7, #46]	; 0x2e

	if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE))
 800954a:	4b49      	ldr	r3, [pc, #292]	; (8009670 <USER_UART2_IDLE_Callback+0x160>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0308 	and.w	r3, r3, #8
 8009554:	2b08      	cmp	r3, #8
 8009556:	d113      	bne.n	8009580 <USER_UART2_IDLE_Callback+0x70>
	{
		  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	4b44      	ldr	r3, [pc, #272]	; (8009670 <USER_UART2_IDLE_Callback+0x160>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	4b42      	ldr	r3, [pc, #264]	; (8009670 <USER_UART2_IDLE_Callback+0x160>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
		  data_length = USB_RX_BUFFER_SIZE;
 800956e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009572:	85fb      	strh	r3, [r7, #46]	; 0x2e
		  memset((uint8_t*)USB_rxBuffer, 0, data_length);  //passing argument 1 of 'memset' discards 'volatile' qualifier from pointer target type
 8009574:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009576:	461a      	mov	r2, r3
 8009578:	2100      	movs	r1, #0
 800957a:	4840      	ldr	r0, [pc, #256]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 800957c:	f001 ff9c 	bl	800b4b8 <memset>
	}													   //dma wyłączone więc nie powinno byc problemu dlatego wygaszony warning

	if (USB_rxBuffer[0] == '!')		//jesli przyjdzie zapytanie o pomiar wyslij ostatni pomiar
 8009580:	4b3e      	ldr	r3, [pc, #248]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b21      	cmp	r3, #33	; 0x21
 8009588:	d165      	bne.n	8009656 <USER_UART2_IDLE_Callback+0x146>
	{
		if (USB_rxBuffer[1] == 'P')
 800958a:	4b3c      	ldr	r3, [pc, #240]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 800958c:	785b      	ldrb	r3, [r3, #1]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b50      	cmp	r3, #80	; 0x50
 8009592:	d139      	bne.n	8009608 <USER_UART2_IDLE_Callback+0xf8>
		{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8009594:	2200      	movs	r2, #0
 8009596:	2102      	movs	r1, #2
 8009598:	4839      	ldr	r0, [pc, #228]	; (8009680 <USER_UART2_IDLE_Callback+0x170>)
 800959a:	f7f8 fbe7 	bl	8001d6c <HAL_GPIO_WritePin>
			if (packetIsNew)
 800959e:	4b39      	ldr	r3, [pc, #228]	; (8009684 <USER_UART2_IDLE_Callback+0x174>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d056      	beq.n	8009656 <USER_UART2_IDLE_Callback+0x146>
			{
				buffer[0] = '!';
 80095a8:	2321      	movs	r3, #33	; 0x21
 80095aa:	743b      	strb	r3, [r7, #16]
				buffer[1] = 'P';
 80095ac:	2350      	movs	r3, #80	; 0x50
 80095ae:	747b      	strb	r3, [r7, #17]
 80095b0:	4b35      	ldr	r3, [pc, #212]	; (8009688 <USER_UART2_IDLE_Callback+0x178>)
 80095b2:	68db      	ldr	r3, [r3, #12]
				memcpy(&buffer[2], (uint8_t*)&pomiar.brix, 4);
 80095b4:	f8c7 3012 	str.w	r3, [r7, #18]
 80095b8:	4b33      	ldr	r3, [pc, #204]	; (8009688 <USER_UART2_IDLE_Callback+0x178>)
 80095ba:	691b      	ldr	r3, [r3, #16]
				memcpy(&buffer[6], (uint8_t*)&pomiar.brixk, 4);
 80095bc:	f8c7 3016 	str.w	r3, [r7, #22]
 80095c0:	4b31      	ldr	r3, [pc, #196]	; (8009688 <USER_UART2_IDLE_Callback+0x178>)
 80095c2:	695b      	ldr	r3, [r3, #20]
				memcpy(&buffer[10], (uint8_t*)&pomiar.I_LED, 4);
 80095c4:	f8c7 301a 	str.w	r3, [r7, #26]
 80095c8:	4b2f      	ldr	r3, [pc, #188]	; (8009688 <USER_UART2_IDLE_Callback+0x178>)
 80095ca:	685b      	ldr	r3, [r3, #4]
				memcpy(&buffer[14], (uint8_t*)&pomiar.nc, 4);
 80095cc:	f8c7 301e 	str.w	r3, [r7, #30]
 80095d0:	4b2d      	ldr	r3, [pc, #180]	; (8009688 <USER_UART2_IDLE_Callback+0x178>)
 80095d2:	689b      	ldr	r3, [r3, #8]
				memcpy(&buffer[18], (uint8_t*)&pomiar.nck, 4);
 80095d4:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
 80095d8:	4b2b      	ldr	r3, [pc, #172]	; (8009688 <USER_UART2_IDLE_Callback+0x178>)
 80095da:	681b      	ldr	r3, [r3, #0]
				memcpy(&buffer[22], (uint8_t*)&pomiar.temperatura, 4);
 80095dc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				buffer[26] = CalcChecksum(buffer, 26);
 80095e0:	f107 0310 	add.w	r3, r7, #16
 80095e4:	211a      	movs	r1, #26
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd f80c 	bl	8006604 <CalcChecksum>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				HAL_UART_Transmit_DMA(&huart2, buffer, sizeof(buffer));
 80095f2:	f107 0310 	add.w	r3, r7, #16
 80095f6:	221b      	movs	r2, #27
 80095f8:	4619      	mov	r1, r3
 80095fa:	481d      	ldr	r0, [pc, #116]	; (8009670 <USER_UART2_IDLE_Callback+0x160>)
 80095fc:	f7fa ff7a 	bl	80044f4 <HAL_UART_Transmit_DMA>
				packetIsNew = 0;										//zapobiega wysylaniu tego samego pomiaru ponownie
 8009600:	4b20      	ldr	r3, [pc, #128]	; (8009684 <USER_UART2_IDLE_Callback+0x174>)
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	e026      	b.n	8009656 <USER_UART2_IDLE_Callback+0x146>
			}
		}
		else if (USB_rxBuffer[1] == 'C')
 8009608:	4b1c      	ldr	r3, [pc, #112]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b43      	cmp	r3, #67	; 0x43
 8009610:	d121      	bne.n	8009656 <USER_UART2_IDLE_Callback+0x146>
		{
			if (USB_rxBuffer[20] == CalcChecksum(USB_rxBuffer, 20))
 8009612:	4b1a      	ldr	r3, [pc, #104]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 8009614:	7d1b      	ldrb	r3, [r3, #20]
 8009616:	b2dc      	uxtb	r4, r3
 8009618:	2114      	movs	r1, #20
 800961a:	4818      	ldr	r0, [pc, #96]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 800961c:	f7fc fff2 	bl	8006604 <CalcChecksum>
 8009620:	4603      	mov	r3, r0
 8009622:	429c      	cmp	r4, r3
 8009624:	d117      	bne.n	8009656 <USER_UART2_IDLE_Callback+0x146>
			{
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8009626:	2200      	movs	r2, #0
 8009628:	2102      	movs	r1, #2
 800962a:	4815      	ldr	r0, [pc, #84]	; (8009680 <USER_UART2_IDLE_Callback+0x170>)
 800962c:	f7f8 fb9e 	bl	8001d6c <HAL_GPIO_WritePin>
 8009630:	4b12      	ldr	r3, [pc, #72]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 8009632:	885b      	ldrh	r3, [r3, #2]
 8009634:	b29a      	uxth	r2, r3
				memcpy(&settings.serialNumber, (uint8_t*)&USB_rxBuffer[2], 2);
 8009636:	4b15      	ldr	r3, [pc, #84]	; (800968c <USER_UART2_IDLE_Callback+0x17c>)
 8009638:	815a      	strh	r2, [r3, #10]
				serialNumberModified = 1;
 800963a:	4b15      	ldr	r3, [pc, #84]	; (8009690 <USER_UART2_IDLE_Callback+0x180>)
 800963c:	2201      	movs	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
				memcpy(&korekcja, (uint8_t*)&USB_rxBuffer[4], sizeof(korekcja));
 8009640:	2210      	movs	r2, #16
 8009642:	4914      	ldr	r1, [pc, #80]	; (8009694 <USER_UART2_IDLE_Callback+0x184>)
 8009644:	4814      	ldr	r0, [pc, #80]	; (8009698 <USER_UART2_IDLE_Callback+0x188>)
 8009646:	f001 ff29 	bl	800b49c <memcpy>

				HAL_UART_Transmit_DMA(&huart6, (uint8_t*)USB_rxBuffer, data_length);	// przeslij do ccd
 800964a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800964c:	461a      	mov	r2, r3
 800964e:	490b      	ldr	r1, [pc, #44]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 8009650:	4808      	ldr	r0, [pc, #32]	; (8009674 <USER_UART2_IDLE_Callback+0x164>)
 8009652:	f7fa ff4f 	bl	80044f4 <HAL_UART_Transmit_DMA>
		}
	}

	//Zero Receiving Buffer
	//memset(USB_rxBuffer, 0, data_length);
	data_length = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	85fb      	strh	r3, [r7, #46]	; 0x2e

	//Restart to start DMA transmission of 255 bytes of data at a time
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) USB_rxBuffer, USB_RX_BUFFER_SIZE);
 800965a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800965e:	4907      	ldr	r1, [pc, #28]	; (800967c <USER_UART2_IDLE_Callback+0x16c>)
 8009660:	4803      	ldr	r0, [pc, #12]	; (8009670 <USER_UART2_IDLE_Callback+0x160>)
 8009662:	f7fa ffb3 	bl	80045cc <HAL_UART_Receive_DMA>
}
 8009666:	bf00      	nop
 8009668:	3734      	adds	r7, #52	; 0x34
 800966a:	46bd      	mov	sp, r7
 800966c:	bd90      	pop	{r4, r7, pc}
 800966e:	bf00      	nop
 8009670:	20001360 	.word	0x20001360
 8009674:	200012c4 	.word	0x200012c4
 8009678:	200006ec 	.word	0x200006ec
 800967c:	2000080c 	.word	0x2000080c
 8009680:	40020400 	.word	0x40020400
 8009684:	20000489 	.word	0x20000489
 8009688:	20000ce0 	.word	0x20000ce0
 800968c:	200006c4 	.word	0x200006c4
 8009690:	200006ae 	.word	0x200006ae
 8009694:	20000810 	.word	0x20000810
 8009698:	20000c10 	.word	0x20000c10

0800969c <USER_UART6_IDLE_Callback>:

void USER_UART6_IDLE_Callback(UART_HandleTypeDef *huart)		//CCD -> MBD
{
 800969c:	b590      	push	{r4, r7, lr}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	//Stop this DMA transmission
	HAL_UART_DMAStop(&huart6);
 80096a4:	4869      	ldr	r0, [pc, #420]	; (800984c <USER_UART6_IDLE_Callback+0x1b0>)
 80096a6:	f7fb f811 	bl	80046cc <HAL_UART_DMAStop>
	huart6.RxXferCount = 0;
 80096aa:	4b68      	ldr	r3, [pc, #416]	; (800984c <USER_UART6_IDLE_Callback+0x1b0>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	85da      	strh	r2, [r3, #46]	; 0x2e

	//Calculate the length of the received data
	uint16_t data_length  = CCD_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);
 80096b0:	4b67      	ldr	r3, [pc, #412]	; (8009850 <USER_UART6_IDLE_Callback+0x1b4>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80096bc:	81fb      	strh	r3, [r7, #14]

	if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_ORE))
 80096be:	4b63      	ldr	r3, [pc, #396]	; (800984c <USER_UART6_IDLE_Callback+0x1b0>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d113      	bne.n	80096f4 <USER_UART6_IDLE_Callback+0x58>
	{
		  __HAL_UART_CLEAR_OREFLAG(&huart6);
 80096cc:	2300      	movs	r3, #0
 80096ce:	60bb      	str	r3, [r7, #8]
 80096d0:	4b5e      	ldr	r3, [pc, #376]	; (800984c <USER_UART6_IDLE_Callback+0x1b0>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60bb      	str	r3, [r7, #8]
 80096d8:	4b5c      	ldr	r3, [pc, #368]	; (800984c <USER_UART6_IDLE_Callback+0x1b0>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	60bb      	str	r3, [r7, #8]
 80096e0:	68bb      	ldr	r3, [r7, #8]
		  data_length = CCD_RX_BUFFER_SIZE;
 80096e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096e6:	81fb      	strh	r3, [r7, #14]
		  memset((uint8_t*)CCD_rxBuffer, 0, data_length);   //passing argument 1 of 'memset' discards 'volatile' qualifier from pointer target type
 80096e8:	89fb      	ldrh	r3, [r7, #14]
 80096ea:	461a      	mov	r2, r3
 80096ec:	2100      	movs	r1, #0
 80096ee:	4859      	ldr	r0, [pc, #356]	; (8009854 <USER_UART6_IDLE_Callback+0x1b8>)
 80096f0:	f001 fee2 	bl	800b4b8 <memset>
	}														//dma wyłączone więc nie powinno byc problemu dlatego wygaszony warning
															//dma wyłączone więc nie powinno byc problemu dlatego wygaszony warning

	if (CCD_rxBuffer[0] == '!' && CCD_rxBuffer[1] == 'M' && data_length == 45)	//only consider packets that start with proper header and are correct length
 80096f4:	4b57      	ldr	r3, [pc, #348]	; (8009854 <USER_UART6_IDLE_Callback+0x1b8>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b21      	cmp	r3, #33	; 0x21
 80096fc:	f040 8183 	bne.w	8009a06 <USER_UART6_IDLE_Callback+0x36a>
 8009700:	4b54      	ldr	r3, [pc, #336]	; (8009854 <USER_UART6_IDLE_Callback+0x1b8>)
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b4d      	cmp	r3, #77	; 0x4d
 8009708:	f040 817d 	bne.w	8009a06 <USER_UART6_IDLE_Callback+0x36a>
 800970c:	89fb      	ldrh	r3, [r7, #14]
 800970e:	2b2d      	cmp	r3, #45	; 0x2d
 8009710:	f040 8179 	bne.w	8009a06 <USER_UART6_IDLE_Callback+0x36a>
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8009714:	2200      	movs	r2, #0
 8009716:	2101      	movs	r1, #1
 8009718:	484f      	ldr	r0, [pc, #316]	; (8009858 <USER_UART6_IDLE_Callback+0x1bc>)
 800971a:	f7f8 fb27 	bl	8001d6c <HAL_GPIO_WritePin>

		if (CCD_rxBuffer[44] == CalcChecksum(CCD_rxBuffer, 44))	//if CRC correct
 800971e:	4b4d      	ldr	r3, [pc, #308]	; (8009854 <USER_UART6_IDLE_Callback+0x1b8>)
 8009720:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009724:	b2dc      	uxtb	r4, r3
 8009726:	212c      	movs	r1, #44	; 0x2c
 8009728:	484a      	ldr	r0, [pc, #296]	; (8009854 <USER_UART6_IDLE_Callback+0x1b8>)
 800972a:	f7fc ff6b 	bl	8006604 <CalcChecksum>
 800972e:	4603      	mov	r3, r0
 8009730:	429c      	cmp	r4, r3
 8009732:	f040 816f 	bne.w	8009a14 <USER_UART6_IDLE_Callback+0x378>
		{
			if (TicksSinceLastRecordArrived < 15)	//if sample present
 8009736:	4b49      	ldr	r3, [pc, #292]	; (800985c <USER_UART6_IDLE_Callback+0x1c0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b0e      	cmp	r3, #14
 800973c:	f200 816a 	bhi.w	8009a14 <USER_UART6_IDLE_Callback+0x378>
			{

																										//sample detection:
				memcpy((uint8_t*)&pomiarArray[packetCounter].brix, (uint8_t*)&CCD_rxBuffer[2], 24);		//copy received packet to array for later averaging
 8009740:	4b47      	ldr	r3, [pc, #284]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	b2db      	uxtb	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	4613      	mov	r3, r2
 800974a:	005b      	lsls	r3, r3, #1
 800974c:	4413      	add	r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	4a44      	ldr	r2, [pc, #272]	; (8009864 <USER_UART6_IDLE_Callback+0x1c8>)
 8009752:	4413      	add	r3, r2
 8009754:	2218      	movs	r2, #24
 8009756:	4944      	ldr	r1, [pc, #272]	; (8009868 <USER_UART6_IDLE_Callback+0x1cc>)
 8009758:	4618      	mov	r0, r3
 800975a:	f001 fe9f 	bl	800b49c <memcpy>
				packetCounter++;
 800975e:	4b40      	ldr	r3, [pc, #256]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	3301      	adds	r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	4b3d      	ldr	r3, [pc, #244]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 800976a:	701a      	strb	r2, [r3, #0]
				if (packetCounter == 2 && !pomiarArrayFull)												//assume that 2 packets in a row means that everything is going fine
 800976c:	4b3c      	ldr	r3, [pc, #240]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b02      	cmp	r3, #2
 8009774:	d152      	bne.n	800981c <USER_UART6_IDLE_Callback+0x180>
 8009776:	4b3d      	ldr	r3, [pc, #244]	; (800986c <USER_UART6_IDLE_Callback+0x1d0>)
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d14d      	bne.n	800981c <USER_UART6_IDLE_Callback+0x180>
				{																						//all measurements are copied to final pomiar struct before averaging
					pomiar.temperatura = pomiarArray[packetCounter].temperatura;						//it is done so in order to trigger stripes animation without changing old code.
 8009780:	4b37      	ldr	r3, [pc, #220]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	4619      	mov	r1, r3
 8009788:	4a36      	ldr	r2, [pc, #216]	; (8009864 <USER_UART6_IDLE_Callback+0x1c8>)
 800978a:	460b      	mov	r3, r1
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	440b      	add	r3, r1
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	4413      	add	r3, r2
 8009794:	3314      	adds	r3, #20
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a35      	ldr	r2, [pc, #212]	; (8009870 <USER_UART6_IDLE_Callback+0x1d4>)
 800979a:	6013      	str	r3, [r2, #0]
					pomiar.nc = pomiarArray[packetCounter].nc;											//stripes animation takes 4+ seconds so by the time it is finished
 800979c:	4b30      	ldr	r3, [pc, #192]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	4619      	mov	r1, r3
 80097a4:	4a2f      	ldr	r2, [pc, #188]	; (8009864 <USER_UART6_IDLE_Callback+0x1c8>)
 80097a6:	460b      	mov	r3, r1
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	440b      	add	r3, r1
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	4413      	add	r3, r2
 80097b0:	330c      	adds	r3, #12
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a2e      	ldr	r2, [pc, #184]	; (8009870 <USER_UART6_IDLE_Callback+0x1d4>)
 80097b6:	6053      	str	r3, [r2, #4]
					pomiar.nck = pomiarArray[packetCounter].nck;										//the proper averaged value will have been displayed anyway
 80097b8:	4b29      	ldr	r3, [pc, #164]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	4619      	mov	r1, r3
 80097c0:	4a28      	ldr	r2, [pc, #160]	; (8009864 <USER_UART6_IDLE_Callback+0x1c8>)
 80097c2:	460b      	mov	r3, r1
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	440b      	add	r3, r1
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	4413      	add	r3, r2
 80097cc:	3310      	adds	r3, #16
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a27      	ldr	r2, [pc, #156]	; (8009870 <USER_UART6_IDLE_Callback+0x1d4>)
 80097d2:	6093      	str	r3, [r2, #8]
					pomiar.brix = pomiarArray[packetCounter].brix;
 80097d4:	4b22      	ldr	r3, [pc, #136]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	4619      	mov	r1, r3
 80097dc:	4a21      	ldr	r2, [pc, #132]	; (8009864 <USER_UART6_IDLE_Callback+0x1c8>)
 80097de:	460b      	mov	r3, r1
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	440b      	add	r3, r1
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	4413      	add	r3, r2
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a21      	ldr	r2, [pc, #132]	; (8009870 <USER_UART6_IDLE_Callback+0x1d4>)
 80097ec:	60d3      	str	r3, [r2, #12]
					pomiar.brixk = pomiarArray[packetCounter].brixk;
 80097ee:	4b1c      	ldr	r3, [pc, #112]	; (8009860 <USER_UART6_IDLE_Callback+0x1c4>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	4619      	mov	r1, r3
 80097f6:	4a1b      	ldr	r2, [pc, #108]	; (8009864 <USER_UART6_IDLE_Callback+0x1c8>)
 80097f8:	460b      	mov	r3, r1
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	440b      	add	r3, r1
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	4413      	add	r3, r2
 8009802:	3304      	adds	r3, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a1a      	ldr	r2, [pc, #104]	; (8009870 <USER_UART6_IDLE_Callback+0x1d4>)
 8009808:	6113      	str	r3, [r2, #16]
					reset_screen_saver();
 800980a:	f7fd f9c3 	bl	8006b94 <reset_screen_saver>
					if (settings.measurementType == MEASUREMENT_SINGLE) pomiarStatus = POMIAR_START;	//po wykryciu probki od razu uruchom pomiar pojedynczy
 800980e:	4b19      	ldr	r3, [pc, #100]	; (8009874 <USER_UART6_IDLE_Callback+0x1d8>)
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <USER_UART6_IDLE_Callback+0x180>
 8009816:	4b18      	ldr	r3, [pc, #96]	; (8009878 <USER_UART6_IDLE_Callback+0x1dc>)
 8009818:	2201      	movs	r2, #1
 800981a:	701a      	strb	r2, [r3, #0]
				}
				if (pomiarArrayFull && newPacketCount >= 4)	// jesli zebrane pomiary z ostatnich 3 sekund, co 8 pakiet (1 sekunde) licz srednia
 800981c:	4b13      	ldr	r3, [pc, #76]	; (800986c <USER_UART6_IDLE_Callback+0x1d0>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 80dc 	beq.w	80099e0 <USER_UART6_IDLE_Callback+0x344>
 8009828:	4b14      	ldr	r3, [pc, #80]	; (800987c <USER_UART6_IDLE_Callback+0x1e0>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b03      	cmp	r3, #3
 8009830:	f240 80d6 	bls.w	80099e0 <USER_UART6_IDLE_Callback+0x344>
				{
					//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);	//zielony led pokaze jak czesto obliczana jest srednia
					newPacketCount = 0;
 8009834:	4b11      	ldr	r3, [pc, #68]	; (800987c <USER_UART6_IDLE_Callback+0x1e0>)
 8009836:	2200      	movs	r2, #0
 8009838:	701a      	strb	r2, [r3, #0]
					memset(&pomiar, 0, sizeof(pomiar));
 800983a:	221c      	movs	r2, #28
 800983c:	2100      	movs	r1, #0
 800983e:	480c      	ldr	r0, [pc, #48]	; (8009870 <USER_UART6_IDLE_Callback+0x1d4>)
 8009840:	f001 fe3a 	bl	800b4b8 <memset>
					for(uint8_t i = 0; i < POMIAR_ARRAY_SIZE; i++)						//final averaged values calculation
 8009844:	2300      	movs	r3, #0
 8009846:	737b      	strb	r3, [r7, #13]
 8009848:	e088      	b.n	800995c <USER_UART6_IDLE_Callback+0x2c0>
 800984a:	bf00      	nop
 800984c:	200012c4 	.word	0x200012c4
 8009850:	20000750 	.word	0x20000750
 8009854:	20000cfc 	.word	0x20000cfc
 8009858:	40020400 	.word	0x40020400
 800985c:	200006a4 	.word	0x200006a4
 8009860:	200006af 	.word	0x200006af
 8009864:	20001150 	.word	0x20001150
 8009868:	20000cfe 	.word	0x20000cfe
 800986c:	200006ac 	.word	0x200006ac
 8009870:	20000ce0 	.word	0x20000ce0
 8009874:	200006c4 	.word	0x200006c4
 8009878:	20000bf5 	.word	0x20000bf5
 800987c:	200006ad 	.word	0x200006ad
					{
						pomiar.nc += pomiarArray[i].nc;
 8009880:	7b7a      	ldrb	r2, [r7, #13]
 8009882:	496c      	ldr	r1, [pc, #432]	; (8009a34 <USER_UART6_IDLE_Callback+0x398>)
 8009884:	4613      	mov	r3, r2
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	4413      	add	r3, r2
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	440b      	add	r3, r1
 800988e:	330c      	adds	r3, #12
 8009890:	ed93 7a00 	vldr	s14, [r3]
 8009894:	4b68      	ldr	r3, [pc, #416]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009896:	edd3 7a01 	vldr	s15, [r3, #4]
 800989a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800989e:	4b66      	ldr	r3, [pc, #408]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80098a0:	edc3 7a01 	vstr	s15, [r3, #4]
						pomiar.nck += pomiarArray[i].nck;
 80098a4:	7b7a      	ldrb	r2, [r7, #13]
 80098a6:	4963      	ldr	r1, [pc, #396]	; (8009a34 <USER_UART6_IDLE_Callback+0x398>)
 80098a8:	4613      	mov	r3, r2
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	4413      	add	r3, r2
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	440b      	add	r3, r1
 80098b2:	3310      	adds	r3, #16
 80098b4:	ed93 7a00 	vldr	s14, [r3]
 80098b8:	4b5f      	ldr	r3, [pc, #380]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80098ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80098be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098c2:	4b5d      	ldr	r3, [pc, #372]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80098c4:	edc3 7a02 	vstr	s15, [r3, #8]
						pomiar.brix += pomiarArray[i].brix;
 80098c8:	7b7a      	ldrb	r2, [r7, #13]
 80098ca:	495a      	ldr	r1, [pc, #360]	; (8009a34 <USER_UART6_IDLE_Callback+0x398>)
 80098cc:	4613      	mov	r3, r2
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	4413      	add	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	440b      	add	r3, r1
 80098d6:	ed93 7a00 	vldr	s14, [r3]
 80098da:	4b57      	ldr	r3, [pc, #348]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80098dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80098e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098e4:	4b54      	ldr	r3, [pc, #336]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80098e6:	edc3 7a03 	vstr	s15, [r3, #12]
						pomiar.brixk += pomiarArray[i].brixk;
 80098ea:	7b7a      	ldrb	r2, [r7, #13]
 80098ec:	4951      	ldr	r1, [pc, #324]	; (8009a34 <USER_UART6_IDLE_Callback+0x398>)
 80098ee:	4613      	mov	r3, r2
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4413      	add	r3, r2
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	440b      	add	r3, r1
 80098f8:	3304      	adds	r3, #4
 80098fa:	ed93 7a00 	vldr	s14, [r3]
 80098fe:	4b4e      	ldr	r3, [pc, #312]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009900:	edd3 7a04 	vldr	s15, [r3, #16]
 8009904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009908:	4b4b      	ldr	r3, [pc, #300]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 800990a:	edc3 7a04 	vstr	s15, [r3, #16]
						pomiar.temperatura += pomiarArray[i].temperatura;
 800990e:	7b7a      	ldrb	r2, [r7, #13]
 8009910:	4948      	ldr	r1, [pc, #288]	; (8009a34 <USER_UART6_IDLE_Callback+0x398>)
 8009912:	4613      	mov	r3, r2
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	4413      	add	r3, r2
 8009918:	00db      	lsls	r3, r3, #3
 800991a:	440b      	add	r3, r1
 800991c:	3314      	adds	r3, #20
 800991e:	ed93 7a00 	vldr	s14, [r3]
 8009922:	4b45      	ldr	r3, [pc, #276]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009924:	edd3 7a00 	vldr	s15, [r3]
 8009928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800992c:	4b42      	ldr	r3, [pc, #264]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 800992e:	edc3 7a00 	vstr	s15, [r3]
						pomiar.I_LED += pomiarArray[i].I_LED;
 8009932:	7b7a      	ldrb	r2, [r7, #13]
 8009934:	493f      	ldr	r1, [pc, #252]	; (8009a34 <USER_UART6_IDLE_Callback+0x398>)
 8009936:	4613      	mov	r3, r2
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	4413      	add	r3, r2
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	440b      	add	r3, r1
 8009940:	3308      	adds	r3, #8
 8009942:	ed93 7a00 	vldr	s14, [r3]
 8009946:	4b3c      	ldr	r3, [pc, #240]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009948:	edd3 7a05 	vldr	s15, [r3, #20]
 800994c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009950:	4b39      	ldr	r3, [pc, #228]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009952:	edc3 7a05 	vstr	s15, [r3, #20]
					for(uint8_t i = 0; i < POMIAR_ARRAY_SIZE; i++)						//final averaged values calculation
 8009956:	7b7b      	ldrb	r3, [r7, #13]
 8009958:	3301      	adds	r3, #1
 800995a:	737b      	strb	r3, [r7, #13]
 800995c:	7b7b      	ldrb	r3, [r7, #13]
 800995e:	2b09      	cmp	r3, #9
 8009960:	d98e      	bls.n	8009880 <USER_UART6_IDLE_Callback+0x1e4>
					}
					//pomiar.I_LED = pomiarArray[packetCounter].I_LED;
					pomiar.I_LED /= POMIAR_ARRAY_SIZE;
 8009962:	4b35      	ldr	r3, [pc, #212]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009964:	ed93 7a05 	vldr	s14, [r3, #20]
 8009968:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800996c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009970:	4b31      	ldr	r3, [pc, #196]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009972:	edc3 7a05 	vstr	s15, [r3, #20]
					pomiar.temperatura /= POMIAR_ARRAY_SIZE;
 8009976:	4b30      	ldr	r3, [pc, #192]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009978:	ed93 7a00 	vldr	s14, [r3]
 800997c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8009980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009984:	4b2c      	ldr	r3, [pc, #176]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 8009986:	edc3 7a00 	vstr	s15, [r3]
					pomiar.nc /= POMIAR_ARRAY_SIZE;
 800998a:	4b2b      	ldr	r3, [pc, #172]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 800998c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009990:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8009994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009998:	4b27      	ldr	r3, [pc, #156]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 800999a:	edc3 7a01 	vstr	s15, [r3, #4]
					pomiar.nck /= POMIAR_ARRAY_SIZE;
 800999e:	4b26      	ldr	r3, [pc, #152]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80099a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80099a4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80099a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099ac:	4b22      	ldr	r3, [pc, #136]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80099ae:	edc3 7a02 	vstr	s15, [r3, #8]
					pomiar.brix /= POMIAR_ARRAY_SIZE;
 80099b2:	4b21      	ldr	r3, [pc, #132]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80099b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80099b8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80099bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099c0:	4b1d      	ldr	r3, [pc, #116]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80099c2:	edc3 7a03 	vstr	s15, [r3, #12]
					pomiar.brixk /= POMIAR_ARRAY_SIZE;
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80099c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80099cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80099d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099d4:	4b18      	ldr	r3, [pc, #96]	; (8009a38 <USER_UART6_IDLE_Callback+0x39c>)
 80099d6:	edc3 7a04 	vstr	s15, [r3, #16]
					packetIsNew = 1;
 80099da:	4b18      	ldr	r3, [pc, #96]	; (8009a3c <USER_UART6_IDLE_Callback+0x3a0>)
 80099dc:	2201      	movs	r2, #1
 80099de:	701a      	strb	r2, [r3, #0]
				}
				if (packetCounter >= POMIAR_ARRAY_SIZE)
 80099e0:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <USER_UART6_IDLE_Callback+0x3a4>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b09      	cmp	r3, #9
 80099e8:	d905      	bls.n	80099f6 <USER_UART6_IDLE_Callback+0x35a>
				{
					packetCounter = 0;
 80099ea:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <USER_UART6_IDLE_Callback+0x3a4>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
					pomiarArrayFull = 1;
 80099f0:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <USER_UART6_IDLE_Callback+0x3a8>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	701a      	strb	r2, [r3, #0]
				}
				newPacketCount++;	//counts new packets received
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <USER_UART6_IDLE_Callback+0x3ac>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	3301      	adds	r3, #1
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <USER_UART6_IDLE_Callback+0x3ac>)
 8009a02:	701a      	strb	r2, [r3, #0]
		if (CCD_rxBuffer[44] == CalcChecksum(CCD_rxBuffer, 44))	//if CRC correct
 8009a04:	e006      	b.n	8009a14 <USER_UART6_IDLE_Callback+0x378>
		}

	}
	else	// USB <-> CCD bridge
	{
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)CCD_rxBuffer, data_length);	//passing argument 1 of 'memset' discards 'volatile' qualifier from pointer target type
 8009a06:	89fb      	ldrh	r3, [r7, #14]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4910      	ldr	r1, [pc, #64]	; (8009a4c <USER_UART6_IDLE_Callback+0x3b0>)
 8009a0c:	4810      	ldr	r0, [pc, #64]	; (8009a50 <USER_UART6_IDLE_Callback+0x3b4>)
 8009a0e:	f7fa fd71 	bl	80044f4 <HAL_UART_Transmit_DMA>
 8009a12:	e000      	b.n	8009a16 <USER_UART6_IDLE_Callback+0x37a>
		if (CCD_rxBuffer[44] == CalcChecksum(CCD_rxBuffer, 44))	//if CRC correct
 8009a14:	bf00      	nop
	}																			//dma wyłączone więc nie powinno byc problemu dlatego wygaszony warning

	//Zero Receiving Buffer
	//memset(rxBuffer, 0, data_length);
	data_length = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	81fb      	strh	r3, [r7, #14]

	//Restart to start DMA transmission of 255 bytes of data at a time
	HAL_UART_Receive_DMA(&huart6, (uint8_t*) CCD_rxBuffer, CCD_RX_BUFFER_SIZE);
 8009a1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a1e:	490b      	ldr	r1, [pc, #44]	; (8009a4c <USER_UART6_IDLE_Callback+0x3b0>)
 8009a20:	480c      	ldr	r0, [pc, #48]	; (8009a54 <USER_UART6_IDLE_Callback+0x3b8>)
 8009a22:	f7fa fdd3 	bl	80045cc <HAL_UART_Receive_DMA>
	TicksSinceLastRecordArrived = 0;
 8009a26:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <USER_UART6_IDLE_Callback+0x3bc>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd90      	pop	{r4, r7, pc}
 8009a34:	20001150 	.word	0x20001150
 8009a38:	20000ce0 	.word	0x20000ce0
 8009a3c:	20000489 	.word	0x20000489
 8009a40:	200006af 	.word	0x200006af
 8009a44:	200006ac 	.word	0x200006ac
 8009a48:	200006ad 	.word	0x200006ad
 8009a4c:	20000cfc 	.word	0x20000cfc
 8009a50:	20001360 	.word	0x20001360
 8009a54:	200012c4 	.word	0x200012c4
 8009a58:	200006a4 	.word	0x200006a4

08009a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009a62:	f7f7 fa45 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009a66:	f000 fceb 	bl	800a440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009a6a:	f000 ff0f 	bl	800a88c <MX_GPIO_Init>
  MX_DMA_Init();
 8009a6e:	f000 fec7 	bl	800a800 <MX_DMA_Init>
  MX_SPI1_Init();
 8009a72:	f000 fdcf 	bl	800a614 <MX_SPI1_Init>
  MX_SPI2_Init();
 8009a76:	f000 fe03 	bl	800a680 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8009a7a:	f000 fe6d 	bl	800a758 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8009a7e:	f000 fe95 	bl	800a7ac <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8009a82:	f000 fe33 	bl	800a6ec <MX_TIM6_Init>
  MX_RTC_Init();
 8009a86:	f000 fd65 	bl	800a554 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(OLED_OFF_GPIO_Port, OLED_OFF_Pin, 0);
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2102      	movs	r1, #2
 8009a8e:	48b6      	ldr	r0, [pc, #728]	; (8009d68 <main+0x30c>)
 8009a90:	f7f8 f96c 	bl	8001d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OFF_GPIO_Port, POWER_OFF_Pin, 0);
 8009a94:	2200      	movs	r2, #0
 8009a96:	2104      	movs	r1, #4
 8009a98:	48b4      	ldr	r0, [pc, #720]	; (8009d6c <main+0x310>)
 8009a9a:	f7f8 f967 	bl	8001d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	48b2      	ldr	r0, [pc, #712]	; (8009d6c <main+0x310>)
 8009aa4:	f7f8 f962 	bl	8001d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(K1_OUT_GPIO_Port, K1_OUT_Pin, 1);	// wlacza obsluge klawiszy
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	2104      	movs	r1, #4
 8009aac:	48b0      	ldr	r0, [pc, #704]	; (8009d70 <main+0x314>)
 8009aae:	f7f8 f95d 	bl	8001d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(K2_OUT_GPIO_Port, K2_OUT_Pin, 0);	// wlacza obsluge klawiszy
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2108      	movs	r1, #8
 8009ab6:	48ae      	ldr	r0, [pc, #696]	; (8009d70 <main+0x314>)
 8009ab8:	f7f8 f958 	bl	8001d6c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);						//aktywuje przerwanie od timera. wylaczone bo wykorzystane przerwanie z alarmu RTC
 8009abc:	48ad      	ldr	r0, [pc, #692]	; (8009d74 <main+0x318>)
 8009abe:	f7fa fa46 	bl	8003f4e <HAL_TIM_Base_Start_IT>
														 //w ustawieniach alarmu trzeba zmienic -> sAlarm.AlarmMask = RTC_ALARMMASK_ALL;

  //erase_settings();

  OLED_CLEAR();
 8009ac2:	f7fc f904 	bl	8005cce <OLED_CLEAR>
  OLED_Init();
 8009ac6:	f7fc f859 	bl	8005b7c <OLED_Init>
  OLED_CLEAR();
 8009aca:	f7fc f900 	bl	8005cce <OLED_CLEAR>

//Logo firmy
  settings.contrast = 0x01;		//zmodyfikowałem wyswietlanie bitmap zeby zeby mozna bylo regulowac kontrast przy wyswietlaniu kreski nad O w BRAK PROBKI
 8009ace:	4baa      	ldr	r3, [pc, #680]	; (8009d78 <main+0x31c>)
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	715a      	strb	r2, [r3, #5]
  OLED_bitmap(0, 5, gr_00);
 8009ad4:	4aa9      	ldr	r2, [pc, #676]	; (8009d7c <main+0x320>)
 8009ad6:	2105      	movs	r1, #5
 8009ad8:	2000      	movs	r0, #0
 8009ada:	f7fc fc77 	bl	80063cc <OLED_bitmap>
  settings.contrast = DEFAULT_CONTRAST;
 8009ade:	4ba6      	ldr	r3, [pc, #664]	; (8009d78 <main+0x31c>)
 8009ae0:	2209      	movs	r2, #9
 8009ae2:	715a      	strb	r2, [r3, #5]
  HAL_Delay(1000);
 8009ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ae8:	f7f7 fa74 	bl	8000fd4 <HAL_Delay>

//zczytanie ustawien
  EEPROM_readSettings(EEPROM_SETTINGS_ADDRESS, &settings, sizeof(settings));
 8009aec:	220c      	movs	r2, #12
 8009aee:	49a2      	ldr	r1, [pc, #648]	; (8009d78 <main+0x31c>)
 8009af0:	2000      	movs	r0, #0
 8009af2:	f7fb fd75 	bl	80055e0 <EEPROM_readSettings>
  register_on_key_press_callback(key_down_callback);
 8009af6:	48a2      	ldr	r0, [pc, #648]	; (8009d80 <main+0x324>)
 8009af8:	f7fc fcbe 	bl	8006478 <register_on_key_press_callback>
  //settings_debug();

  verify_settings();
 8009afc:	f7fc ff74 	bl	80069e8 <verify_settings>
  fetch_date_time();
 8009b00:	f7fc ff48 	bl	8006994 <fetch_date_time>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8009b04:	4b9f      	ldr	r3, [pc, #636]	; (8009d84 <main+0x328>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	4b9e      	ldr	r3, [pc, #632]	; (8009d84 <main+0x328>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0210 	orr.w	r2, r2, #16
 8009b12:	60da      	str	r2, [r3, #12]

  ssStateChanged = 1;
 8009b14:	4b9c      	ldr	r3, [pc, #624]	; (8009d88 <main+0x32c>)
 8009b16:	2201      	movs	r2, #1
 8009b18:	701a      	strb	r2, [r3, #0]

  //HAL_Delay(2000);

  OLED_CLEAR();
 8009b1a:	f7fc f8d8 	bl	8005cce <OLED_CLEAR>

// Nr seryjny i wersja softu
  OLED_PutStr(3, 14, "MS REF090L", 1, 0x09);
 8009b1e:	2309      	movs	r3, #9
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	2301      	movs	r3, #1
 8009b24:	4a99      	ldr	r2, [pc, #612]	; (8009d8c <main+0x330>)
 8009b26:	210e      	movs	r1, #14
 8009b28:	2003      	movs	r0, #3
 8009b2a:	f7fc fbb3 	bl	8006294 <OLED_PutStr>
  sprintf(frame.buffer,"SN: %d", settings.serialNumber);
 8009b2e:	4b92      	ldr	r3, [pc, #584]	; (8009d78 <main+0x31c>)
 8009b30:	895b      	ldrh	r3, [r3, #10]
 8009b32:	461a      	mov	r2, r3
 8009b34:	4996      	ldr	r1, [pc, #600]	; (8009d90 <main+0x334>)
 8009b36:	4897      	ldr	r0, [pc, #604]	; (8009d94 <main+0x338>)
 8009b38:	f002 f930 	bl	800bd9c <siprintf>
  OLED_PutStr(3, 32, frame.buffer, 0, 0x09);
 8009b3c:	2309      	movs	r3, #9
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	2300      	movs	r3, #0
 8009b42:	4a94      	ldr	r2, [pc, #592]	; (8009d94 <main+0x338>)
 8009b44:	2120      	movs	r1, #32
 8009b46:	2003      	movs	r0, #3
 8009b48:	f7fc fba4 	bl	8006294 <OLED_PutStr>
  sprintf(frame.buffer,"SW: %s", SOFTWARE_VERSION);
 8009b4c:	4a92      	ldr	r2, [pc, #584]	; (8009d98 <main+0x33c>)
 8009b4e:	4993      	ldr	r1, [pc, #588]	; (8009d9c <main+0x340>)
 8009b50:	4890      	ldr	r0, [pc, #576]	; (8009d94 <main+0x338>)
 8009b52:	f002 f923 	bl	800bd9c <siprintf>
  OLED_PutStr(3, 42, frame.buffer, 0, 0x09);
 8009b56:	2309      	movs	r3, #9
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4a8d      	ldr	r2, [pc, #564]	; (8009d94 <main+0x338>)
 8009b5e:	212a      	movs	r1, #42	; 0x2a
 8009b60:	2003      	movs	r0, #3
 8009b62:	f7fc fb97 	bl	8006294 <OLED_PutStr>
  HAL_Delay(1000);
 8009b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009b6a:	f7f7 fa33 	bl	8000fd4 <HAL_Delay>

  OLED_CLEAR();
 8009b6e:	f7fc f8ae 	bl	8005cce <OLED_CLEAR>
  OLED_PutStr(5, 24, "AUTO TEST", 1, 0x09);
 8009b72:	2309      	movs	r3, #9
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	2301      	movs	r3, #1
 8009b78:	4a89      	ldr	r2, [pc, #548]	; (8009da0 <main+0x344>)
 8009b7a:	2118      	movs	r1, #24
 8009b7c:	2005      	movs	r0, #5
 8009b7e:	f7fc fb89 	bl	8006294 <OLED_PutStr>

  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8009b82:	4b88      	ldr	r3, [pc, #544]	; (8009da4 <main+0x348>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	4b86      	ldr	r3, [pc, #536]	; (8009da4 <main+0x348>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0208 	bic.w	r2, r2, #8
 8009b90:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8009b92:	4b85      	ldr	r3, [pc, #532]	; (8009da8 <main+0x34c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	4b83      	ldr	r3, [pc, #524]	; (8009da8 <main+0x34c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0208 	bic.w	r2, r2, #8
 8009ba0:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart6, (uint8_t*)CCD_rxBuffer, CCD_RX_BUFFER_SIZE);
 8009ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ba6:	4981      	ldr	r1, [pc, #516]	; (8009dac <main+0x350>)
 8009ba8:	4876      	ldr	r0, [pc, #472]	; (8009d84 <main+0x328>)
 8009baa:	f7fa fd0f 	bl	80045cc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)USB_rxBuffer, USB_RX_BUFFER_SIZE);
 8009bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009bb2:	497f      	ldr	r1, [pc, #508]	; (8009db0 <main+0x354>)
 8009bb4:	487f      	ldr	r0, [pc, #508]	; (8009db4 <main+0x358>)
 8009bb6:	f7fa fd09 	bl	80045cc <HAL_UART_Receive_DMA>
  TicksSinceLastRecordArrived = 0;
 8009bba:	4b7f      	ldr	r3, [pc, #508]	; (8009db8 <main+0x35c>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
  //HAL_Delay(5000);
  OLED_CLEAR();
 8009bc0:	f7fc f885 	bl	8005cce <OLED_CLEAR>
  char kreski[10] = {0};	//kreski po wykryciu próbki
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	607b      	str	r3, [r7, #4]
 8009bc8:	f107 0308 	add.w	r3, r7, #8
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	809a      	strh	r2, [r3, #4]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8009bd2:	4b78      	ldr	r3, [pc, #480]	; (8009db4 <main+0x358>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	4b76      	ldr	r3, [pc, #472]	; (8009db4 <main+0x358>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f042 0210 	orr.w	r2, r2, #16
 8009be0:	60da      	str	r2, [r3, #12]
  initDone = 1;
 8009be2:	4b76      	ldr	r3, [pc, #472]	; (8009dbc <main+0x360>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (serialNumberModified)
 8009be8:	4b75      	ldr	r3, [pc, #468]	; (8009dc0 <main+0x364>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d007      	beq.n	8009c02 <main+0x1a6>
	  {
		  EEPROM_write_multiple(EEPROM_SERIAL_NUMBER_ADDR, (uint8_t*)&settings.serialNumber, sizeof(settings.serialNumber));
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	4973      	ldr	r1, [pc, #460]	; (8009dc4 <main+0x368>)
 8009bf6:	200a      	movs	r0, #10
 8009bf8:	f7fb fd64 	bl	80056c4 <EEPROM_write_multiple>
		  serialNumberModified = 0;
 8009bfc:	4b70      	ldr	r3, [pc, #448]	; (8009dc0 <main+0x364>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]

		  ///////////////
	  }


	 if (NO_SAMPLE)
 8009c02:	4b71      	ldr	r3, [pc, #452]	; (8009dc8 <main+0x36c>)
 8009c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8009c08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c10:	d009      	beq.n	8009c26 <main+0x1ca>
 8009c12:	4b6d      	ldr	r3, [pc, #436]	; (8009dc8 <main+0x36c>)
 8009c14:	edd3 7a01 	vldr	s15, [r3, #4]
 8009c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c1c:	eef4 7a47 	vcmp.f32	s15, s14
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	d122      	bne.n	8009c6c <main+0x210>
	 {
		 //if (settings.measurementType == MEASUREMENT_SINGLE) pomiarStatus = POMIAR_STOP;
		 if (settings.measurementType == MEASUREMENT_SINGLE) pomiarStatus = POMIAR_START;
 8009c26:	4b54      	ldr	r3, [pc, #336]	; (8009d78 <main+0x31c>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <main+0x1d8>
 8009c2e:	4b67      	ldr	r3, [pc, #412]	; (8009dcc <main+0x370>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	701a      	strb	r2, [r3, #0]

		 sampleDetected = 0;						//wykyrwanie probki w celu odpalenia naswietlania i odczekania az pomiar bedzie gotowy
 8009c34:	4b66      	ldr	r3, [pc, #408]	; (8009dd0 <main+0x374>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	701a      	strb	r2, [r3, #0]
		 if (frame.type != FRAME_BP)
 8009c3a:	4b66      	ldr	r3, [pc, #408]	; (8009dd4 <main+0x378>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 83e7 	beq.w	800a412 <main+0x9b6>
		 {
			 reset_screen_saver();
 8009c44:	f7fc ffa6 	bl	8006b94 <reset_screen_saver>
			 //UART_print("BP\r\n");
			 memset(&kreski, 0, sizeof(kreski));
 8009c48:	1d3b      	adds	r3, r7, #4
 8009c4a:	220a      	movs	r2, #10
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 fc32 	bl	800b4b8 <memset>

			 OLED_CLEAR();
 8009c54:	f7fc f83b 	bl	8005cce <OLED_CLEAR>
			 xShift = 0;
 8009c58:	4b5f      	ldr	r3, [pc, #380]	; (8009dd8 <main+0x37c>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	701a      	strb	r2, [r3, #0]
			 yShift = 0;
 8009c5e:	4b5f      	ldr	r3, [pc, #380]	; (8009ddc <main+0x380>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
			 frame.type = FRAME_BP;
 8009c64:	4b5b      	ldr	r3, [pc, #364]	; (8009dd4 <main+0x378>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
		 if (frame.type != FRAME_BP)
 8009c6a:	e3d2      	b.n	800a412 <main+0x9b6>
		 }
	 }
	 else
	 {
		 if (settings.measurementType == MEASUREMENT_CONTINUOUS)		//wyswietlaj kreski tylko dla pomiaru ciaglego
 8009c6c:	4b42      	ldr	r3, [pc, #264]	; (8009d78 <main+0x31c>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d137      	bne.n	8009ce4 <main+0x288>
		 {
			 if (sampleDetected == 0) sampleDetected = 1;
 8009c74:	4b56      	ldr	r3, [pc, #344]	; (8009dd0 <main+0x374>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <main+0x228>
 8009c7e:	4b54      	ldr	r3, [pc, #336]	; (8009dd0 <main+0x374>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	701a      	strb	r2, [r3, #0]
			 if (sampleDetected == 1)
 8009c84:	4b52      	ldr	r3, [pc, #328]	; (8009dd0 <main+0x374>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d109      	bne.n	8009ca2 <main+0x246>
			 {
				 //SendRecord(R_AUTOLED, A_HEAD, A_MAINBOARD, NULL, 0);       // naświetlanie
				 //UART_print("naswietlanie\r\n");
				 reset_screen_saver();
 8009c8e:	f7fc ff81 	bl	8006b94 <reset_screen_saver>
				 ledTimer = SAMPLE_DETECT_TIMEOUT;
 8009c92:	4b53      	ldr	r3, [pc, #332]	; (8009de0 <main+0x384>)
 8009c94:	2202      	movs	r2, #2
 8009c96:	701a      	strb	r2, [r3, #0]
				 sampleDetected = 2;
 8009c98:	4b4d      	ldr	r3, [pc, #308]	; (8009dd0 <main+0x374>)
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	701a      	strb	r2, [r3, #0]
				 OLED_CLEAR();
 8009c9e:	f7fc f816 	bl	8005cce <OLED_CLEAR>
			 }
			 if (sampleDetected == 2 && onesecondTick == 1)			//wyswietlanie kreseczek jak oczekiwanie na pomiar
 8009ca2:	4b4b      	ldr	r3, [pc, #300]	; (8009dd0 <main+0x374>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d11e      	bne.n	8009cea <main+0x28e>
 8009cac:	4b4d      	ldr	r3, [pc, #308]	; (8009de4 <main+0x388>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d119      	bne.n	8009cea <main+0x28e>
			 {
				 //UART_print("tick\r\n");
				 onesecondTick = 0;
 8009cb6:	4b4b      	ldr	r3, [pc, #300]	; (8009de4 <main+0x388>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
				 if (frame.type != FRAME_2_BIG_LINES)
 8009cbc:	4b45      	ldr	r3, [pc, #276]	; (8009dd4 <main+0x378>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b06      	cmp	r3, #6
 8009cc2:	d012      	beq.n	8009cea <main+0x28e>
				 {
					 //char a[10];
					 sprintf(kreski,"%sIII",kreski);
 8009cc4:	1d3a      	adds	r2, r7, #4
 8009cc6:	1d3b      	adds	r3, r7, #4
 8009cc8:	4947      	ldr	r1, [pc, #284]	; (8009de8 <main+0x38c>)
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f002 f866 	bl	800bd9c <siprintf>
					 sprintf(frame.secondLine, " %s", kreski);
 8009cd0:	1d3b      	adds	r3, r7, #4
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	4945      	ldr	r1, [pc, #276]	; (8009dec <main+0x390>)
 8009cd6:	4846      	ldr	r0, [pc, #280]	; (8009df0 <main+0x394>)
 8009cd8:	f002 f860 	bl	800bd9c <siprintf>
					 frame.type = FRAME_1_BIG_LINE;
 8009cdc:	4b3d      	ldr	r3, [pc, #244]	; (8009dd4 <main+0x378>)
 8009cde:	2207      	movs	r2, #7
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	e002      	b.n	8009cea <main+0x28e>
				 }
			 }
		 }
		 else
		 {
			 sampleDetected = 3;
 8009ce4:	4b3a      	ldr	r3, [pc, #232]	; (8009dd0 <main+0x374>)
 8009ce6:	2203      	movs	r2, #3
 8009ce8:	701a      	strb	r2, [r3, #0]
			 //pomiarStatus = POMIAR_STOP;
		 }

		 if (sampleDetected == 3)								//wyswietlenie pomiaru po kreskach
 8009cea:	4b39      	ldr	r3, [pc, #228]	; (8009dd0 <main+0x374>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	f040 838e 	bne.w	800a412 <main+0x9b6>
		 {
			 if (settings.measurementType == MEASUREMENT_CONTINUOUS)
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <main+0x31c>)
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	f040 815c 	bne.w	8009fb8 <main+0x55c>
			 {

					 if (settings.measurementUnit == UNIT_BRIX)
 8009d00:	4b1d      	ldr	r3, [pc, #116]	; (8009d78 <main+0x31c>)
 8009d02:	785b      	ldrb	r3, [r3, #1]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f040 8119 	bne.w	8009f3c <main+0x4e0>
					 {
						 if (settings.thermalCompensation == OFF)
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <main+0x31c>)
 8009d0c:	789b      	ldrb	r3, [r3, #2]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 80ab 	bne.w	8009e6a <main+0x40e>
						 {
							if (pomiar.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brix);
 8009d14:	4b2c      	ldr	r3, [pc, #176]	; (8009dc8 <main+0x36c>)
 8009d16:	edd3 7a03 	vldr	s15, [r3, #12]
 8009d1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d26:	db0b      	blt.n	8009d40 <main+0x2e4>
 8009d28:	4b27      	ldr	r3, [pc, #156]	; (8009dc8 <main+0x36c>)
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7f6 fc33 	bl	8000598 <__aeabi_f2d>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	492f      	ldr	r1, [pc, #188]	; (8009df4 <main+0x398>)
 8009d38:	482d      	ldr	r0, [pc, #180]	; (8009df0 <main+0x394>)
 8009d3a:	f002 f82f 	bl	800bd9c <siprintf>
 8009d3e:	e088      	b.n	8009e52 <main+0x3f6>
							else if(pomiar.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", pomiar.brix);
 8009d40:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <main+0x36c>)
 8009d42:	edd3 7a03 	vldr	s15, [r3, #12]
 8009d46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4e:	db55      	blt.n	8009dfc <main+0x3a0>
 8009d50:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <main+0x36c>)
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f6 fc1f 	bl	8000598 <__aeabi_f2d>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4926      	ldr	r1, [pc, #152]	; (8009df8 <main+0x39c>)
 8009d60:	4823      	ldr	r0, [pc, #140]	; (8009df0 <main+0x394>)
 8009d62:	f002 f81b 	bl	800bd9c <siprintf>
 8009d66:	e074      	b.n	8009e52 <main+0x3f6>
 8009d68:	40020000 	.word	0x40020000
 8009d6c:	40020400 	.word	0x40020400
 8009d70:	40021000 	.word	0x40021000
 8009d74:	2000110c 	.word	0x2000110c
 8009d78:	200006c4 	.word	0x200006c4
 8009d7c:	0801125c 	.word	0x0801125c
 8009d80:	08008b31 	.word	0x08008b31
 8009d84:	200012c4 	.word	0x200012c4
 8009d88:	2000135c 	.word	0x2000135c
 8009d8c:	0801360c 	.word	0x0801360c
 8009d90:	08013618 	.word	0x08013618
 8009d94:	200012b2 	.word	0x200012b2
 8009d98:	08013620 	.word	0x08013620
 8009d9c:	08013628 	.word	0x08013628
 8009da0:	08013630 	.word	0x08013630
 8009da4:	20000750 	.word	0x20000750
 8009da8:	200006ec 	.word	0x200006ec
 8009dac:	20000cfc 	.word	0x20000cfc
 8009db0:	2000080c 	.word	0x2000080c
 8009db4:	20001360 	.word	0x20001360
 8009db8:	200006a4 	.word	0x200006a4
 8009dbc:	20000808 	.word	0x20000808
 8009dc0:	200006ae 	.word	0x200006ae
 8009dc4:	200006ce 	.word	0x200006ce
 8009dc8:	20000ce0 	.word	0x20000ce0
 8009dcc:	20000bf5 	.word	0x20000bf5
 8009dd0:	200006a9 	.word	0x200006a9
 8009dd4:	20001244 	.word	0x20001244
 8009dd8:	20001240 	.word	0x20001240
 8009ddc:	2000114c 	.word	0x2000114c
 8009de0:	200006aa 	.word	0x200006aa
 8009de4:	200006ab 	.word	0x200006ab
 8009de8:	0801363c 	.word	0x0801363c
 8009dec:	08013644 	.word	0x08013644
 8009df0:	2000125d 	.word	0x2000125d
 8009df4:	08013570 	.word	0x08013570
 8009df8:	0801357c 	.word	0x0801357c
							else if(pomiar.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brix);
 8009dfc:	4b96      	ldr	r3, [pc, #600]	; (800a058 <main+0x5fc>)
 8009dfe:	edd3 7a03 	vldr	s15, [r3, #12]
 8009e02:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8009e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0e:	dd0b      	ble.n	8009e28 <main+0x3cc>
 8009e10:	4b91      	ldr	r3, [pc, #580]	; (800a058 <main+0x5fc>)
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7f6 fbbf 	bl	8000598 <__aeabi_f2d>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	498f      	ldr	r1, [pc, #572]	; (800a05c <main+0x600>)
 8009e20:	488f      	ldr	r0, [pc, #572]	; (800a060 <main+0x604>)
 8009e22:	f001 ffbb 	bl	800bd9c <siprintf>
 8009e26:	e014      	b.n	8009e52 <main+0x3f6>
							else if(pomiar.brix <= -10) sprintf(frame.secondLine," %2.2f %% ", pomiar.brix);
 8009e28:	4b8b      	ldr	r3, [pc, #556]	; (800a058 <main+0x5fc>)
 8009e2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8009e2e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8009e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e3a:	d80a      	bhi.n	8009e52 <main+0x3f6>
 8009e3c:	4b86      	ldr	r3, [pc, #536]	; (800a058 <main+0x5fc>)
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7f6 fba9 	bl	8000598 <__aeabi_f2d>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4986      	ldr	r1, [pc, #536]	; (800a064 <main+0x608>)
 8009e4c:	4884      	ldr	r0, [pc, #528]	; (800a060 <main+0x604>)
 8009e4e:	f001 ffa5 	bl	800bd9c <siprintf>
							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 8009e52:	4b81      	ldr	r3, [pc, #516]	; (800a058 <main+0x5fc>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7f6 fb9e 	bl	8000598 <__aeabi_f2d>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4981      	ldr	r1, [pc, #516]	; (800a068 <main+0x60c>)
 8009e62:	4882      	ldr	r0, [pc, #520]	; (800a06c <main+0x610>)
 8009e64:	f001 ff9a 	bl	800bd9c <siprintf>
 8009e68:	e05f      	b.n	8009f2a <main+0x4ce>
						 }
						 else
						 {
							if (pomiar.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brixk);
 8009e6a:	4b7b      	ldr	r3, [pc, #492]	; (800a058 <main+0x5fc>)
 8009e6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009e70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7c:	db0b      	blt.n	8009e96 <main+0x43a>
 8009e7e:	4b76      	ldr	r3, [pc, #472]	; (800a058 <main+0x5fc>)
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7f6 fb88 	bl	8000598 <__aeabi_f2d>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4973      	ldr	r1, [pc, #460]	; (800a05c <main+0x600>)
 8009e8e:	4874      	ldr	r0, [pc, #464]	; (800a060 <main+0x604>)
 8009e90:	f001 ff84 	bl	800bd9c <siprintf>
 8009e94:	e03e      	b.n	8009f14 <main+0x4b8>
							else if(pomiar.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", pomiar.brixk);
 8009e96:	4b70      	ldr	r3, [pc, #448]	; (800a058 <main+0x5fc>)
 8009e98:	edd3 7a04 	vldr	s15, [r3, #16]
 8009e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea4:	db0b      	blt.n	8009ebe <main+0x462>
 8009ea6:	4b6c      	ldr	r3, [pc, #432]	; (800a058 <main+0x5fc>)
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f6 fb74 	bl	8000598 <__aeabi_f2d>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	496e      	ldr	r1, [pc, #440]	; (800a070 <main+0x614>)
 8009eb6:	486a      	ldr	r0, [pc, #424]	; (800a060 <main+0x604>)
 8009eb8:	f001 ff70 	bl	800bd9c <siprintf>
 8009ebc:	e02a      	b.n	8009f14 <main+0x4b8>
							else if(pomiar.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", pomiar.brixk);
 8009ebe:	4b66      	ldr	r3, [pc, #408]	; (800a058 <main+0x5fc>)
 8009ec0:	edd3 7a04 	vldr	s15, [r3, #16]
 8009ec4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8009ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed0:	dd0b      	ble.n	8009eea <main+0x48e>
 8009ed2:	4b61      	ldr	r3, [pc, #388]	; (800a058 <main+0x5fc>)
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7f6 fb5e 	bl	8000598 <__aeabi_f2d>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	495e      	ldr	r1, [pc, #376]	; (800a05c <main+0x600>)
 8009ee2:	485f      	ldr	r0, [pc, #380]	; (800a060 <main+0x604>)
 8009ee4:	f001 ff5a 	bl	800bd9c <siprintf>
 8009ee8:	e014      	b.n	8009f14 <main+0x4b8>
							else if(pomiar.brixk <= -10) sprintf(frame.secondLine," %2.2f %% ", pomiar.brixk);
 8009eea:	4b5b      	ldr	r3, [pc, #364]	; (800a058 <main+0x5fc>)
 8009eec:	edd3 7a04 	vldr	s15, [r3, #16]
 8009ef0:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8009ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efc:	d80a      	bhi.n	8009f14 <main+0x4b8>
 8009efe:	4b56      	ldr	r3, [pc, #344]	; (800a058 <main+0x5fc>)
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f6 fb48 	bl	8000598 <__aeabi_f2d>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4955      	ldr	r1, [pc, #340]	; (800a064 <main+0x608>)
 8009f0e:	4854      	ldr	r0, [pc, #336]	; (800a060 <main+0x604>)
 8009f10:	f001 ff44 	bl	800bd9c <siprintf>
							//sprintf(frame.thirdLine,"  %d.00 \x7B\x43", 20);
							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 8009f14:	4b50      	ldr	r3, [pc, #320]	; (800a058 <main+0x5fc>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7f6 fb3d 	bl	8000598 <__aeabi_f2d>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4951      	ldr	r1, [pc, #324]	; (800a068 <main+0x60c>)
 8009f24:	4851      	ldr	r0, [pc, #324]	; (800a06c <main+0x610>)
 8009f26:	f001 ff39 	bl	800bd9c <siprintf>
						 }

						 if (frame.type != FRAME_2_BIG_LINES)
 8009f2a:	4b52      	ldr	r3, [pc, #328]	; (800a074 <main+0x618>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b06      	cmp	r3, #6
 8009f30:	d004      	beq.n	8009f3c <main+0x4e0>
						 {
							OLED_CLEAR();
 8009f32:	f7fb fecc 	bl	8005cce <OLED_CLEAR>
							frame.type = FRAME_2_BIG_LINES;
 8009f36:	4b4f      	ldr	r3, [pc, #316]	; (800a074 <main+0x618>)
 8009f38:	2206      	movs	r2, #6
 8009f3a:	701a      	strb	r2, [r3, #0]
						 }
					 }

					 if (settings.measurementUnit == UNIT_RI)
 8009f3c:	4b4e      	ldr	r3, [pc, #312]	; (800a078 <main+0x61c>)
 8009f3e:	785b      	ldrb	r3, [r3, #1]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d139      	bne.n	8009fb8 <main+0x55c>
					 {
						 if (settings.thermalCompensation == OFF)
 8009f44:	4b4c      	ldr	r3, [pc, #304]	; (800a078 <main+0x61c>)
 8009f46:	789b      	ldrb	r3, [r3, #2]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d116      	bne.n	8009f7a <main+0x51e>
						 {
							 sprintf(frame.secondLine,"%1.5f nd", pomiar.nc);
 8009f4c:	4b42      	ldr	r3, [pc, #264]	; (800a058 <main+0x5fc>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7f6 fb21 	bl	8000598 <__aeabi_f2d>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4948      	ldr	r1, [pc, #288]	; (800a07c <main+0x620>)
 8009f5c:	4840      	ldr	r0, [pc, #256]	; (800a060 <main+0x604>)
 8009f5e:	f001 ff1d 	bl	800bd9c <siprintf>
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 8009f62:	4b3d      	ldr	r3, [pc, #244]	; (800a058 <main+0x5fc>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7f6 fb16 	bl	8000598 <__aeabi_f2d>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	493d      	ldr	r1, [pc, #244]	; (800a068 <main+0x60c>)
 8009f72:	483e      	ldr	r0, [pc, #248]	; (800a06c <main+0x610>)
 8009f74:	f001 ff12 	bl	800bd9c <siprintf>
 8009f78:	e015      	b.n	8009fa6 <main+0x54a>
						 }
						 else
						 {
							 sprintf(frame.secondLine,"%1.5f nd", pomiar.nck);
 8009f7a:	4b37      	ldr	r3, [pc, #220]	; (800a058 <main+0x5fc>)
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7f6 fb0a 	bl	8000598 <__aeabi_f2d>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	493c      	ldr	r1, [pc, #240]	; (800a07c <main+0x620>)
 8009f8a:	4835      	ldr	r0, [pc, #212]	; (800a060 <main+0x604>)
 8009f8c:	f001 ff06 	bl	800bd9c <siprintf>
							 //sprintf(frame.thirdLine,"  %d.00 \x7B\x43", 20);
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", pomiar.temperatura);
 8009f90:	4b31      	ldr	r3, [pc, #196]	; (800a058 <main+0x5fc>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f6 faff 	bl	8000598 <__aeabi_f2d>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4932      	ldr	r1, [pc, #200]	; (800a068 <main+0x60c>)
 8009fa0:	4832      	ldr	r0, [pc, #200]	; (800a06c <main+0x610>)
 8009fa2:	f001 fefb 	bl	800bd9c <siprintf>
						 }
						 if (frame.type != FRAME_2_BIG_LINES)
 8009fa6:	4b33      	ldr	r3, [pc, #204]	; (800a074 <main+0x618>)
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b06      	cmp	r3, #6
 8009fac:	d004      	beq.n	8009fb8 <main+0x55c>
						 {
						  OLED_CLEAR();
 8009fae:	f7fb fe8e 	bl	8005cce <OLED_CLEAR>
						  frame.type = FRAME_2_BIG_LINES;
 8009fb2:	4b30      	ldr	r3, [pc, #192]	; (800a074 <main+0x618>)
 8009fb4:	2206      	movs	r2, #6
 8009fb6:	701a      	strb	r2, [r3, #0]
						 }
					 }

			 }
			 if (settings.measurementType == MEASUREMENT_SINGLE)
 8009fb8:	4b2f      	ldr	r3, [pc, #188]	; (800a078 <main+0x61c>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f040 8228 	bne.w	800a412 <main+0x9b6>
			 {

				 if (NO_SAMPLE)
 8009fc2:	4b25      	ldr	r3, [pc, #148]	; (800a058 <main+0x5fc>)
 8009fc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd0:	d009      	beq.n	8009fe6 <main+0x58a>
 8009fd2:	4b21      	ldr	r3, [pc, #132]	; (800a058 <main+0x5fc>)
 8009fd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fdc:	eef4 7a47 	vcmp.f32	s15, s14
 8009fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe4:	d114      	bne.n	800a010 <main+0x5b4>
				 {
					 if (frame.type != FRAME_BP)
 8009fe6:	4b23      	ldr	r3, [pc, #140]	; (800a074 <main+0x618>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d05e      	beq.n	800a0ac <main+0x650>
					 {
						 reset_screen_saver();
 8009fee:	f7fc fdd1 	bl	8006b94 <reset_screen_saver>
						 OLED_CLEAR();
 8009ff2:	f7fb fe6c 	bl	8005cce <OLED_CLEAR>
						 xShift = 0;
 8009ff6:	4b22      	ldr	r3, [pc, #136]	; (800a080 <main+0x624>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	701a      	strb	r2, [r3, #0]
						 yShift = 0;
 8009ffc:	4b21      	ldr	r3, [pc, #132]	; (800a084 <main+0x628>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	701a      	strb	r2, [r3, #0]
						 pomiarStatus = POMIAR_STOP;
 800a002:	4b21      	ldr	r3, [pc, #132]	; (800a088 <main+0x62c>)
 800a004:	2200      	movs	r2, #0
 800a006:	701a      	strb	r2, [r3, #0]
						 frame.type = FRAME_BP;
 800a008:	4b1a      	ldr	r3, [pc, #104]	; (800a074 <main+0x618>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]
					 if (frame.type != FRAME_BP)
 800a00e:	e04d      	b.n	800a0ac <main+0x650>
					 }
				 }
				 else if (frame.type != FRAME_2_BIG_LINES && pomiarStatus == POMIAR_STOP)
 800a010:	4b18      	ldr	r3, [pc, #96]	; (800a074 <main+0x618>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	2b06      	cmp	r3, #6
 800a016:	d049      	beq.n	800a0ac <main+0x650>
 800a018:	4b1b      	ldr	r3, [pc, #108]	; (800a088 <main+0x62c>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d144      	bne.n	800a0ac <main+0x650>
				 {
					OLED_CLEAR();
 800a022:	f7fb fe54 	bl	8005cce <OLED_CLEAR>
					if (settings.language == ENGLISH)		//warunek zeby ladnie wyswietlac napis "NACISNIJ START"
 800a026:	4b14      	ldr	r3, [pc, #80]	; (800a078 <main+0x61c>)
 800a028:	791b      	ldrb	r3, [r3, #4]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d134      	bne.n	800a098 <main+0x63c>
					{
						sprintf(frame.secondLine, "   %s",  Main_Screen[6][settings.language]);
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <main+0x61c>)
 800a030:	791b      	ldrb	r3, [r3, #4]
 800a032:	461a      	mov	r2, r3
 800a034:	4613      	mov	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	33d8      	adds	r3, #216	; 0xd8
 800a03e:	4a13      	ldr	r2, [pc, #76]	; (800a08c <main+0x630>)
 800a040:	4413      	add	r3, r2
 800a042:	461a      	mov	r2, r3
 800a044:	4912      	ldr	r1, [pc, #72]	; (800a090 <main+0x634>)
 800a046:	4806      	ldr	r0, [pc, #24]	; (800a060 <main+0x604>)
 800a048:	f001 fea8 	bl	800bd9c <siprintf>
						sprintf(frame.thirdLine,"   START");
 800a04c:	4911      	ldr	r1, [pc, #68]	; (800a094 <main+0x638>)
 800a04e:	4807      	ldr	r0, [pc, #28]	; (800a06c <main+0x610>)
 800a050:	f001 fea4 	bl	800bd9c <siprintf>
 800a054:	e027      	b.n	800a0a6 <main+0x64a>
 800a056:	bf00      	nop
 800a058:	20000ce0 	.word	0x20000ce0
 800a05c:	08013570 	.word	0x08013570
 800a060:	2000125d 	.word	0x2000125d
 800a064:	0801358c 	.word	0x0801358c
 800a068:	080135bc 	.word	0x080135bc
 800a06c:	20001275 	.word	0x20001275
 800a070:	0801357c 	.word	0x0801357c
 800a074:	20001244 	.word	0x20001244
 800a078:	200006c4 	.word	0x200006c4
 800a07c:	080135b0 	.word	0x080135b0
 800a080:	20001240 	.word	0x20001240
 800a084:	2000114c 	.word	0x2000114c
 800a088:	20000bf5 	.word	0x20000bf5
 800a08c:	08012de4 	.word	0x08012de4
 800a090:	08013648 	.word	0x08013648
 800a094:	08013650 	.word	0x08013650
						//nacisnijStart = 0;
					}
					else
					{
						//sprintf(frame.secondLine, " %s",  Main_Screen[6][settings.language]);
						nacisnijStart = 1;
 800a098:	4b97      	ldr	r3, [pc, #604]	; (800a2f8 <main+0x89c>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	701a      	strb	r2, [r3, #0]
						sprintf(frame.thirdLine,"START");
 800a09e:	4997      	ldr	r1, [pc, #604]	; (800a2fc <main+0x8a0>)
 800a0a0:	4897      	ldr	r0, [pc, #604]	; (800a300 <main+0x8a4>)
 800a0a2:	f001 fe7b 	bl	800bd9c <siprintf>
					}

					frame.type = FRAME_2_BIG_LINES;
 800a0a6:	4b97      	ldr	r3, [pc, #604]	; (800a304 <main+0x8a8>)
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	701a      	strb	r2, [r3, #0]
				 }


				 if (pomiarStatus == POMIAR_START && pomiarTimer == 0)
 800a0ac:	4b96      	ldr	r3, [pc, #600]	; (800a308 <main+0x8ac>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d119      	bne.n	800a0ea <main+0x68e>
 800a0b6:	4b95      	ldr	r3, [pc, #596]	; (800a30c <main+0x8b0>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d114      	bne.n	800a0ea <main+0x68e>
				 {
					OLED_CLEAR();
 800a0c0:	f7fb fe05 	bl	8005cce <OLED_CLEAR>
					nacisnijStart = 0;
 800a0c4:	4b8c      	ldr	r3, [pc, #560]	; (800a2f8 <main+0x89c>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
					OLED_PutStr(10, 1, "    ", 0, settings.contrast);	//usun napis AXXX jesli poprzedni pomiar byl zapisywany
 800a0ca:	4b91      	ldr	r3, [pc, #580]	; (800a310 <main+0x8b4>)
 800a0cc:	795b      	ldrb	r3, [r3, #5]
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4a90      	ldr	r2, [pc, #576]	; (800a314 <main+0x8b8>)
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	200a      	movs	r0, #10
 800a0d8:	f7fc f8dc 	bl	8006294 <OLED_PutStr>
					pomiarTimer = settings.singleMeasurementTime;
 800a0dc:	4b8c      	ldr	r3, [pc, #560]	; (800a310 <main+0x8b4>)
 800a0de:	78da      	ldrb	r2, [r3, #3]
 800a0e0:	4b8a      	ldr	r3, [pc, #552]	; (800a30c <main+0x8b0>)
 800a0e2:	701a      	strb	r2, [r3, #0]
					pomiarStatus = POMIAR_PENDING;
 800a0e4:	4b88      	ldr	r3, [pc, #544]	; (800a308 <main+0x8ac>)
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	701a      	strb	r2, [r3, #0]
				 }

				 if (pomiarStatus == POMIAR_PENDING)
 800a0ea:	4b87      	ldr	r3, [pc, #540]	; (800a308 <main+0x8ac>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d12c      	bne.n	800a14e <main+0x6f2>
				 {
					reset_screen_saver();
 800a0f4:	f7fc fd4e 	bl	8006b94 <reset_screen_saver>
					sprintf(frame.secondLine,"  %s", Main_Screen[4][settings.language]);
 800a0f8:	4b85      	ldr	r3, [pc, #532]	; (800a310 <main+0x8b4>)
 800a0fa:	791b      	ldrb	r3, [r3, #4]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4613      	mov	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	4413      	add	r3, r2
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	3390      	adds	r3, #144	; 0x90
 800a108:	4a83      	ldr	r2, [pc, #524]	; (800a318 <main+0x8bc>)
 800a10a:	4413      	add	r3, r2
 800a10c:	461a      	mov	r2, r3
 800a10e:	4983      	ldr	r1, [pc, #524]	; (800a31c <main+0x8c0>)
 800a110:	4883      	ldr	r0, [pc, #524]	; (800a320 <main+0x8c4>)
 800a112:	f001 fe43 	bl	800bd9c <siprintf>
					sprintf(frame.thirdLine,"  %d %s ",pomiarTimer, Main_Screen[5][settings.language]);
 800a116:	4b7d      	ldr	r3, [pc, #500]	; (800a30c <main+0x8b0>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	4619      	mov	r1, r3
 800a11e:	4b7c      	ldr	r3, [pc, #496]	; (800a310 <main+0x8b4>)
 800a120:	791b      	ldrb	r3, [r3, #4]
 800a122:	461a      	mov	r2, r3
 800a124:	4613      	mov	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	4413      	add	r3, r2
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	33b4      	adds	r3, #180	; 0xb4
 800a12e:	4a7a      	ldr	r2, [pc, #488]	; (800a318 <main+0x8bc>)
 800a130:	4413      	add	r3, r2
 800a132:	460a      	mov	r2, r1
 800a134:	497b      	ldr	r1, [pc, #492]	; (800a324 <main+0x8c8>)
 800a136:	4872      	ldr	r0, [pc, #456]	; (800a300 <main+0x8a4>)
 800a138:	f001 fe30 	bl	800bd9c <siprintf>
					if (frame.type != FRAME_2_BIG_LINES)
 800a13c:	4b71      	ldr	r3, [pc, #452]	; (800a304 <main+0x8a8>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b06      	cmp	r3, #6
 800a142:	d004      	beq.n	800a14e <main+0x6f2>
					{
					OLED_CLEAR();
 800a144:	f7fb fdc3 	bl	8005cce <OLED_CLEAR>
					frame.type = FRAME_2_BIG_LINES;
 800a148:	4b6e      	ldr	r3, [pc, #440]	; (800a304 <main+0x8a8>)
 800a14a:	2206      	movs	r2, #6
 800a14c:	701a      	strb	r2, [r3, #0]
					}

				 }

				 if (pomiarStatus == POMIAR_DONE)
 800a14e:	4b6e      	ldr	r3, [pc, #440]	; (800a308 <main+0x8ac>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b04      	cmp	r3, #4
 800a156:	d11e      	bne.n	800a196 <main+0x73a>
				 {
					 newArchiveEntryAdded = 0;
 800a158:	4b73      	ldr	r3, [pc, #460]	; (800a328 <main+0x8cc>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	701a      	strb	r2, [r3, #0]
					 PomiarBuffer.nc = pomiar.nc;					// bufor dodany w razie jakby ktos chcial zmieniac ustawienia/lazic po archiwum gdy wyswietlany jest wynik.
 800a15e:	4b73      	ldr	r3, [pc, #460]	; (800a32c <main+0x8d0>)
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	4a73      	ldr	r2, [pc, #460]	; (800a330 <main+0x8d4>)
 800a164:	6053      	str	r3, [r2, #4]
					 PomiarBuffer.nck = pomiar.nck;
 800a166:	4b71      	ldr	r3, [pc, #452]	; (800a32c <main+0x8d0>)
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	4a71      	ldr	r2, [pc, #452]	; (800a330 <main+0x8d4>)
 800a16c:	6093      	str	r3, [r2, #8]
					 PomiarBuffer.brix = pomiar.brix;
 800a16e:	4b6f      	ldr	r3, [pc, #444]	; (800a32c <main+0x8d0>)
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	4a6f      	ldr	r2, [pc, #444]	; (800a330 <main+0x8d4>)
 800a174:	60d3      	str	r3, [r2, #12]
					 PomiarBuffer.brixk = pomiar.brixk;
 800a176:	4b6d      	ldr	r3, [pc, #436]	; (800a32c <main+0x8d0>)
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	4a6d      	ldr	r2, [pc, #436]	; (800a330 <main+0x8d4>)
 800a17c:	6113      	str	r3, [r2, #16]
					 PomiarBuffer.temperatura = pomiar.temperatura;
 800a17e:	4b6b      	ldr	r3, [pc, #428]	; (800a32c <main+0x8d0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a6b      	ldr	r2, [pc, #428]	; (800a330 <main+0x8d4>)
 800a184:	6013      	str	r3, [r2, #0]
					 pomiarTimer = 0;
 800a186:	4b61      	ldr	r3, [pc, #388]	; (800a30c <main+0x8b0>)
 800a188:	2200      	movs	r2, #0
 800a18a:	701a      	strb	r2, [r3, #0]
					 pomiarStatus = POMIAR_DISP;
 800a18c:	4b5e      	ldr	r3, [pc, #376]	; (800a308 <main+0x8ac>)
 800a18e:	2203      	movs	r2, #3
 800a190:	701a      	strb	r2, [r3, #0]
					 OLED_CLEAR();
 800a192:	f7fb fd9c 	bl	8005cce <OLED_CLEAR>
				 }

				 if (pomiarStatus == POMIAR_DISP)
 800a196:	4b5c      	ldr	r3, [pc, #368]	; (800a308 <main+0x8ac>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	f040 8138 	bne.w	800a412 <main+0x9b6>
				 {
					 if (settings.measurementUnit == UNIT_BRIX)
 800a1a2:	4b5b      	ldr	r3, [pc, #364]	; (800a310 <main+0x8b4>)
 800a1a4:	785b      	ldrb	r3, [r3, #1]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f040 80f5 	bne.w	800a396 <main+0x93a>
					 {
						 if (settings.thermalCompensation == OFF)
 800a1ac:	4b58      	ldr	r3, [pc, #352]	; (800a310 <main+0x8b4>)
 800a1ae:	789b      	ldrb	r3, [r3, #2]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d160      	bne.n	800a276 <main+0x81a>
						 {
							if (PomiarBuffer.brix >= 10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brix);
 800a1b4:	4b5e      	ldr	r3, [pc, #376]	; (800a330 <main+0x8d4>)
 800a1b6:	edd3 7a03 	vldr	s15, [r3, #12]
 800a1ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a1be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c6:	db0b      	blt.n	800a1e0 <main+0x784>
 800a1c8:	4b59      	ldr	r3, [pc, #356]	; (800a330 <main+0x8d4>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f6 f9e3 	bl	8000598 <__aeabi_f2d>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4957      	ldr	r1, [pc, #348]	; (800a334 <main+0x8d8>)
 800a1d8:	4851      	ldr	r0, [pc, #324]	; (800a320 <main+0x8c4>)
 800a1da:	f001 fddf 	bl	800bd9c <siprintf>
 800a1de:	e03e      	b.n	800a25e <main+0x802>
							else if(PomiarBuffer.brix >= 0) sprintf(frame.secondLine,"   %2.2f %% ", PomiarBuffer.brix);
 800a1e0:	4b53      	ldr	r3, [pc, #332]	; (800a330 <main+0x8d4>)
 800a1e2:	edd3 7a03 	vldr	s15, [r3, #12]
 800a1e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ee:	db0b      	blt.n	800a208 <main+0x7ac>
 800a1f0:	4b4f      	ldr	r3, [pc, #316]	; (800a330 <main+0x8d4>)
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f6 f9cf 	bl	8000598 <__aeabi_f2d>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	494e      	ldr	r1, [pc, #312]	; (800a338 <main+0x8dc>)
 800a200:	4847      	ldr	r0, [pc, #284]	; (800a320 <main+0x8c4>)
 800a202:	f001 fdcb 	bl	800bd9c <siprintf>
 800a206:	e02a      	b.n	800a25e <main+0x802>
							else if(PomiarBuffer.brix > -10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brix);
 800a208:	4b49      	ldr	r3, [pc, #292]	; (800a330 <main+0x8d4>)
 800a20a:	edd3 7a03 	vldr	s15, [r3, #12]
 800a20e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a212:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21a:	dd0b      	ble.n	800a234 <main+0x7d8>
 800a21c:	4b44      	ldr	r3, [pc, #272]	; (800a330 <main+0x8d4>)
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	4618      	mov	r0, r3
 800a222:	f7f6 f9b9 	bl	8000598 <__aeabi_f2d>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4942      	ldr	r1, [pc, #264]	; (800a334 <main+0x8d8>)
 800a22c:	483c      	ldr	r0, [pc, #240]	; (800a320 <main+0x8c4>)
 800a22e:	f001 fdb5 	bl	800bd9c <siprintf>
 800a232:	e014      	b.n	800a25e <main+0x802>
							else if(PomiarBuffer.brix <= -10) sprintf(frame.secondLine," %2.2f %% ", PomiarBuffer.brix);
 800a234:	4b3e      	ldr	r3, [pc, #248]	; (800a330 <main+0x8d4>)
 800a236:	edd3 7a03 	vldr	s15, [r3, #12]
 800a23a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a23e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a246:	d80a      	bhi.n	800a25e <main+0x802>
 800a248:	4b39      	ldr	r3, [pc, #228]	; (800a330 <main+0x8d4>)
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f6 f9a3 	bl	8000598 <__aeabi_f2d>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4939      	ldr	r1, [pc, #228]	; (800a33c <main+0x8e0>)
 800a258:	4831      	ldr	r0, [pc, #196]	; (800a320 <main+0x8c4>)
 800a25a:	f001 fd9f 	bl	800bd9c <siprintf>

							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 800a25e:	4b34      	ldr	r3, [pc, #208]	; (800a330 <main+0x8d4>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f7f6 f998 	bl	8000598 <__aeabi_f2d>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4934      	ldr	r1, [pc, #208]	; (800a340 <main+0x8e4>)
 800a26e:	4824      	ldr	r0, [pc, #144]	; (800a300 <main+0x8a4>)
 800a270:	f001 fd94 	bl	800bd9c <siprintf>
 800a274:	e086      	b.n	800a384 <main+0x928>
						 }
						 else
						 {
							if (PomiarBuffer.brixk >= 10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brixk);
 800a276:	4b2e      	ldr	r3, [pc, #184]	; (800a330 <main+0x8d4>)
 800a278:	edd3 7a04 	vldr	s15, [r3, #16]
 800a27c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a280:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a288:	db0b      	blt.n	800a2a2 <main+0x846>
 800a28a:	4b29      	ldr	r3, [pc, #164]	; (800a330 <main+0x8d4>)
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7f6 f982 	bl	8000598 <__aeabi_f2d>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4926      	ldr	r1, [pc, #152]	; (800a334 <main+0x8d8>)
 800a29a:	4821      	ldr	r0, [pc, #132]	; (800a320 <main+0x8c4>)
 800a29c:	f001 fd7e 	bl	800bd9c <siprintf>
 800a2a0:	e065      	b.n	800a36e <main+0x912>
							else if(PomiarBuffer.brixk >= 0) sprintf(frame.secondLine,"   %2.2f %% ", PomiarBuffer.brixk);
 800a2a2:	4b23      	ldr	r3, [pc, #140]	; (800a330 <main+0x8d4>)
 800a2a4:	edd3 7a04 	vldr	s15, [r3, #16]
 800a2a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b0:	db0b      	blt.n	800a2ca <main+0x86e>
 800a2b2:	4b1f      	ldr	r3, [pc, #124]	; (800a330 <main+0x8d4>)
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 f96e 	bl	8000598 <__aeabi_f2d>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	491d      	ldr	r1, [pc, #116]	; (800a338 <main+0x8dc>)
 800a2c2:	4817      	ldr	r0, [pc, #92]	; (800a320 <main+0x8c4>)
 800a2c4:	f001 fd6a 	bl	800bd9c <siprintf>
 800a2c8:	e051      	b.n	800a36e <main+0x912>
							else if(PomiarBuffer.brixk > -10) sprintf(frame.secondLine,"  %2.2f %% ", PomiarBuffer.brixk);
 800a2ca:	4b19      	ldr	r3, [pc, #100]	; (800a330 <main+0x8d4>)
 800a2cc:	edd3 7a04 	vldr	s15, [r3, #16]
 800a2d0:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a2d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2dc:	dd32      	ble.n	800a344 <main+0x8e8>
 800a2de:	4b14      	ldr	r3, [pc, #80]	; (800a330 <main+0x8d4>)
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f6 f958 	bl	8000598 <__aeabi_f2d>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4911      	ldr	r1, [pc, #68]	; (800a334 <main+0x8d8>)
 800a2ee:	480c      	ldr	r0, [pc, #48]	; (800a320 <main+0x8c4>)
 800a2f0:	f001 fd54 	bl	800bd9c <siprintf>
 800a2f4:	e03b      	b.n	800a36e <main+0x912>
 800a2f6:	bf00      	nop
 800a2f8:	200006a8 	.word	0x200006a8
 800a2fc:	0801365c 	.word	0x0801365c
 800a300:	20001275 	.word	0x20001275
 800a304:	20001244 	.word	0x20001244
 800a308:	20000bf5 	.word	0x20000bf5
 800a30c:	2000074c 	.word	0x2000074c
 800a310:	200006c4 	.word	0x200006c4
 800a314:	08013538 	.word	0x08013538
 800a318:	08012de4 	.word	0x08012de4
 800a31c:	08013664 	.word	0x08013664
 800a320:	2000125d 	.word	0x2000125d
 800a324:	0801366c 	.word	0x0801366c
 800a328:	20000bf4 	.word	0x20000bf4
 800a32c:	20000ce0 	.word	0x20000ce0
 800a330:	20000bf8 	.word	0x20000bf8
 800a334:	08013570 	.word	0x08013570
 800a338:	0801357c 	.word	0x0801357c
 800a33c:	0801358c 	.word	0x0801358c
 800a340:	080135bc 	.word	0x080135bc
							else if(PomiarBuffer.brixk <= -10) sprintf(frame.secondLine," %2.2f %% ", PomiarBuffer.brixk);
 800a344:	4b36      	ldr	r3, [pc, #216]	; (800a420 <main+0x9c4>)
 800a346:	edd3 7a04 	vldr	s15, [r3, #16]
 800a34a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a34e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a356:	d80a      	bhi.n	800a36e <main+0x912>
 800a358:	4b31      	ldr	r3, [pc, #196]	; (800a420 <main+0x9c4>)
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f6 f91b 	bl	8000598 <__aeabi_f2d>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	492f      	ldr	r1, [pc, #188]	; (800a424 <main+0x9c8>)
 800a368:	482f      	ldr	r0, [pc, #188]	; (800a428 <main+0x9cc>)
 800a36a:	f001 fd17 	bl	800bd9c <siprintf>

							//sprintf(frame.thirdLine,"  %d.00 \x7B\x43", 20);
							sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 800a36e:	4b2c      	ldr	r3, [pc, #176]	; (800a420 <main+0x9c4>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f7f6 f910 	bl	8000598 <__aeabi_f2d>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	492b      	ldr	r1, [pc, #172]	; (800a42c <main+0x9d0>)
 800a37e:	482c      	ldr	r0, [pc, #176]	; (800a430 <main+0x9d4>)
 800a380:	f001 fd0c 	bl	800bd9c <siprintf>
						 }

						 if (frame.type != FRAME_2_BIG_LINES)
 800a384:	4b2b      	ldr	r3, [pc, #172]	; (800a434 <main+0x9d8>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b06      	cmp	r3, #6
 800a38a:	d004      	beq.n	800a396 <main+0x93a>
						 {
							OLED_CLEAR();
 800a38c:	f7fb fc9f 	bl	8005cce <OLED_CLEAR>
							frame.type = FRAME_2_BIG_LINES;
 800a390:	4b28      	ldr	r3, [pc, #160]	; (800a434 <main+0x9d8>)
 800a392:	2206      	movs	r2, #6
 800a394:	701a      	strb	r2, [r3, #0]
						 }
					 }

					 if (settings.measurementUnit == UNIT_RI)
 800a396:	4b28      	ldr	r3, [pc, #160]	; (800a438 <main+0x9dc>)
 800a398:	785b      	ldrb	r3, [r3, #1]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d139      	bne.n	800a412 <main+0x9b6>
					 {
						 if (settings.thermalCompensation == OFF)
 800a39e:	4b26      	ldr	r3, [pc, #152]	; (800a438 <main+0x9dc>)
 800a3a0:	789b      	ldrb	r3, [r3, #2]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d116      	bne.n	800a3d4 <main+0x978>
						 {
							 sprintf(frame.secondLine,"%1.5f nd", PomiarBuffer.nc);
 800a3a6:	4b1e      	ldr	r3, [pc, #120]	; (800a420 <main+0x9c4>)
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7f6 f8f4 	bl	8000598 <__aeabi_f2d>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4921      	ldr	r1, [pc, #132]	; (800a43c <main+0x9e0>)
 800a3b6:	481c      	ldr	r0, [pc, #112]	; (800a428 <main+0x9cc>)
 800a3b8:	f001 fcf0 	bl	800bd9c <siprintf>
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 800a3bc:	4b18      	ldr	r3, [pc, #96]	; (800a420 <main+0x9c4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7f6 f8e9 	bl	8000598 <__aeabi_f2d>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4918      	ldr	r1, [pc, #96]	; (800a42c <main+0x9d0>)
 800a3cc:	4818      	ldr	r0, [pc, #96]	; (800a430 <main+0x9d4>)
 800a3ce:	f001 fce5 	bl	800bd9c <siprintf>
 800a3d2:	e015      	b.n	800a400 <main+0x9a4>
						 }
						 else
						 {
							 sprintf(frame.secondLine,"%1.5f nd", PomiarBuffer.nck);
 800a3d4:	4b12      	ldr	r3, [pc, #72]	; (800a420 <main+0x9c4>)
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7f6 f8dd 	bl	8000598 <__aeabi_f2d>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4916      	ldr	r1, [pc, #88]	; (800a43c <main+0x9e0>)
 800a3e4:	4810      	ldr	r0, [pc, #64]	; (800a428 <main+0x9cc>)
 800a3e6:	f001 fcd9 	bl	800bd9c <siprintf>
							 //sprintf(frame.thirdLine,"  %d.00 \x7B\x43", 20);
							 sprintf(frame.thirdLine,"  %2.2f \x7B\x43", PomiarBuffer.temperatura);
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <main+0x9c4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7f6 f8d2 	bl	8000598 <__aeabi_f2d>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	490c      	ldr	r1, [pc, #48]	; (800a42c <main+0x9d0>)
 800a3fa:	480d      	ldr	r0, [pc, #52]	; (800a430 <main+0x9d4>)
 800a3fc:	f001 fcce 	bl	800bd9c <siprintf>
						 }
						 if (frame.type != FRAME_2_BIG_LINES)
 800a400:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <main+0x9d8>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b06      	cmp	r3, #6
 800a406:	d004      	beq.n	800a412 <main+0x9b6>
						 {
						  OLED_CLEAR();
 800a408:	f7fb fc61 	bl	8005cce <OLED_CLEAR>
						  frame.type = FRAME_2_BIG_LINES;
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <main+0x9d8>)
 800a40e:	2206      	movs	r2, #6
 800a410:	701a      	strb	r2, [r3, #0]
				 }
			 }

		 }
	 }
	 kbd_event_handler(CONTEXT_MAIN_SCREEN);
 800a412:	2000      	movs	r0, #0
 800a414:	f7fc f8b6 	bl	8006584 <kbd_event_handler>
	 drawFrame();
 800a418:	f7fc fc18 	bl	8006c4c <drawFrame>
	  if (serialNumberModified)
 800a41c:	f7ff bbe4 	b.w	8009be8 <main+0x18c>
 800a420:	20000bf8 	.word	0x20000bf8
 800a424:	0801358c 	.word	0x0801358c
 800a428:	2000125d 	.word	0x2000125d
 800a42c:	080135bc 	.word	0x080135bc
 800a430:	20001275 	.word	0x20001275
 800a434:	20001244 	.word	0x20001244
 800a438:	200006c4 	.word	0x200006c4
 800a43c:	080135b0 	.word	0x080135b0

0800a440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b0aa      	sub	sp, #168	; 0xa8
 800a444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a446:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a44a:	2234      	movs	r2, #52	; 0x34
 800a44c:	2100      	movs	r1, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	f001 f832 	bl	800b4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a454:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	605a      	str	r2, [r3, #4]
 800a45e:	609a      	str	r2, [r3, #8]
 800a460:	60da      	str	r2, [r3, #12]
 800a462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a464:	f107 0308 	add.w	r3, r7, #8
 800a468:	2258      	movs	r2, #88	; 0x58
 800a46a:	2100      	movs	r1, #0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 f823 	bl	800b4b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a472:	2300      	movs	r3, #0
 800a474:	607b      	str	r3, [r7, #4]
 800a476:	4b35      	ldr	r3, [pc, #212]	; (800a54c <SystemClock_Config+0x10c>)
 800a478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47a:	4a34      	ldr	r2, [pc, #208]	; (800a54c <SystemClock_Config+0x10c>)
 800a47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a480:	6413      	str	r3, [r2, #64]	; 0x40
 800a482:	4b32      	ldr	r3, [pc, #200]	; (800a54c <SystemClock_Config+0x10c>)
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a48a:	607b      	str	r3, [r7, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a48e:	2300      	movs	r3, #0
 800a490:	603b      	str	r3, [r7, #0]
 800a492:	4b2f      	ldr	r3, [pc, #188]	; (800a550 <SystemClock_Config+0x110>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a2e      	ldr	r2, [pc, #184]	; (800a550 <SystemClock_Config+0x110>)
 800a498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	4b2c      	ldr	r3, [pc, #176]	; (800a550 <SystemClock_Config+0x110>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a4aa:	2305      	movs	r3, #5
 800a4ac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a4ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a4b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a4be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 6;
 800a4c6:	2306      	movs	r3, #6
 800a4c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 800a4cc:	2360      	movs	r3, #96	; 0x60
 800a4ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a4d8:	2302      	movs	r3, #2
 800a4da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a4de:	2302      	movs	r3, #2
 800a4e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a4e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f8 f8b5 	bl	8002658 <HAL_RCC_OscConfig>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800a4f4:	f000 fb9a 	bl	800ac2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a4f8:	230f      	movs	r3, #15
 800a4fa:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800a500:	2380      	movs	r3, #128	; 0x80
 800a502:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a508:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a50a:	2300      	movs	r3, #0
 800a50c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800a50e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a512:	2101      	movs	r1, #1
 800a514:	4618      	mov	r0, r3
 800a516:	f7f7 fc43 	bl	8001da0 <HAL_RCC_ClockConfig>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800a520:	f000 fb84 	bl	800ac2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a524:	2308      	movs	r3, #8
 800a526:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a52c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4618      	mov	r0, r3
 800a534:	f7f7 fe04 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <SystemClock_Config+0x102>
  {
    Error_Handler();
 800a53e:	f000 fb75 	bl	800ac2c <Error_Handler>
  }
}
 800a542:	bf00      	nop
 800a544:	37a8      	adds	r7, #168	; 0xa8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	40023800 	.word	0x40023800
 800a550:	40007000 	.word	0x40007000

0800a554 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08a      	sub	sp, #40	; 0x28
 800a558:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 800a55a:	463b      	mov	r3, r7
 800a55c:	2228      	movs	r2, #40	; 0x28
 800a55e:	2100      	movs	r1, #0
 800a560:	4618      	mov	r0, r3
 800a562:	f000 ffa9 	bl	800b4b8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a566:	4b29      	ldr	r3, [pc, #164]	; (800a60c <MX_RTC_Init+0xb8>)
 800a568:	4a29      	ldr	r2, [pc, #164]	; (800a610 <MX_RTC_Init+0xbc>)
 800a56a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a56c:	4b27      	ldr	r3, [pc, #156]	; (800a60c <MX_RTC_Init+0xb8>)
 800a56e:	2200      	movs	r2, #0
 800a570:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a572:	4b26      	ldr	r3, [pc, #152]	; (800a60c <MX_RTC_Init+0xb8>)
 800a574:	227f      	movs	r2, #127	; 0x7f
 800a576:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a578:	4b24      	ldr	r3, [pc, #144]	; (800a60c <MX_RTC_Init+0xb8>)
 800a57a:	22ff      	movs	r2, #255	; 0xff
 800a57c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a57e:	4b23      	ldr	r3, [pc, #140]	; (800a60c <MX_RTC_Init+0xb8>)
 800a580:	2200      	movs	r2, #0
 800a582:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a584:	4b21      	ldr	r3, [pc, #132]	; (800a60c <MX_RTC_Init+0xb8>)
 800a586:	2200      	movs	r2, #0
 800a588:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a58a:	4b20      	ldr	r3, [pc, #128]	; (800a60c <MX_RTC_Init+0xb8>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a590:	481e      	ldr	r0, [pc, #120]	; (800a60c <MX_RTC_Init+0xb8>)
 800a592:	f7f8 faa3 	bl	8002adc <HAL_RTC_Init>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800a59c:	f000 fb46 	bl	800ac2c <Error_Handler>
//  {
//    Error_Handler();
//  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800a5ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a5d0:	463b      	mov	r3, r7
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	480d      	ldr	r0, [pc, #52]	; (800a60c <MX_RTC_Init+0xb8>)
 800a5d8:	f7f8 fd22 	bl	8003020 <HAL_RTC_SetAlarm_IT>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800a5e2:	f000 fb23 	bl	800ac2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800a5e6:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800a5ea:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4806      	ldr	r0, [pc, #24]	; (800a60c <MX_RTC_Init+0xb8>)
 800a5f4:	f7f8 fd14 	bl	8003020 <HAL_RTC_SetAlarm_IT>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800a5fe:	f000 fb15 	bl	800ac2c <Error_Handler>
  }
  /* USER CODE END RTC_Init 2 */

}
 800a602:	bf00      	nop
 800a604:	3728      	adds	r7, #40	; 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	200010e8 	.word	0x200010e8
 800a610:	40002800 	.word	0x40002800

0800a614 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a618:	4b17      	ldr	r3, [pc, #92]	; (800a678 <MX_SPI1_Init+0x64>)
 800a61a:	4a18      	ldr	r2, [pc, #96]	; (800a67c <MX_SPI1_Init+0x68>)
 800a61c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a61e:	4b16      	ldr	r3, [pc, #88]	; (800a678 <MX_SPI1_Init+0x64>)
 800a620:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a626:	4b14      	ldr	r3, [pc, #80]	; (800a678 <MX_SPI1_Init+0x64>)
 800a628:	2200      	movs	r2, #0
 800a62a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a62c:	4b12      	ldr	r3, [pc, #72]	; (800a678 <MX_SPI1_Init+0x64>)
 800a62e:	2200      	movs	r2, #0
 800a630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a632:	4b11      	ldr	r3, [pc, #68]	; (800a678 <MX_SPI1_Init+0x64>)
 800a634:	2200      	movs	r2, #0
 800a636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a638:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <MX_SPI1_Init+0x64>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a63e:	4b0e      	ldr	r3, [pc, #56]	; (800a678 <MX_SPI1_Init+0x64>)
 800a640:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800a646:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <MX_SPI1_Init+0x64>)
 800a648:	2208      	movs	r2, #8
 800a64a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a64c:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <MX_SPI1_Init+0x64>)
 800a64e:	2200      	movs	r2, #0
 800a650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a652:	4b09      	ldr	r3, [pc, #36]	; (800a678 <MX_SPI1_Init+0x64>)
 800a654:	2200      	movs	r2, #0
 800a656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a658:	4b07      	ldr	r3, [pc, #28]	; (800a678 <MX_SPI1_Init+0x64>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a65e:	4b06      	ldr	r3, [pc, #24]	; (800a678 <MX_SPI1_Init+0x64>)
 800a660:	220a      	movs	r2, #10
 800a662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a664:	4804      	ldr	r0, [pc, #16]	; (800a678 <MX_SPI1_Init+0x64>)
 800a666:	f7f8 fef3 	bl	8003450 <HAL_SPI_Init>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a670:	f000 fadc 	bl	800ac2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a674:	bf00      	nop
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20001304 	.word	0x20001304
 800a67c:	40013000 	.word	0x40013000

0800a680 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a684:	4b17      	ldr	r3, [pc, #92]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a686:	4a18      	ldr	r2, [pc, #96]	; (800a6e8 <MX_SPI2_Init+0x68>)
 800a688:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a68a:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a68c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a690:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a692:	4b14      	ldr	r3, [pc, #80]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a694:	2200      	movs	r2, #0
 800a696:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a698:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a6a4:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a6aa:	4b0e      	ldr	r3, [pc, #56]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6b4:	2230      	movs	r2, #48	; 0x30
 800a6b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a6be:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6c4:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a6ca:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6cc:	220a      	movs	r2, #10
 800a6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a6d0:	4804      	ldr	r0, [pc, #16]	; (800a6e4 <MX_SPI2_Init+0x64>)
 800a6d2:	f7f8 febd 	bl	8003450 <HAL_SPI_Init>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800a6dc:	f000 faa6 	bl	800ac2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a6e0:	bf00      	nop
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	200007b0 	.word	0x200007b0
 800a6e8:	40003800 	.word	0x40003800

0800a6ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6f2:	463b      	mov	r3, r7
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a6fa:	4b15      	ldr	r3, [pc, #84]	; (800a750 <MX_TIM6_Init+0x64>)
 800a6fc:	4a15      	ldr	r2, [pc, #84]	; (800a754 <MX_TIM6_Init+0x68>)
 800a6fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 800a700:	4b13      	ldr	r3, [pc, #76]	; (800a750 <MX_TIM6_Init+0x64>)
 800a702:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800a706:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a708:	4b11      	ldr	r3, [pc, #68]	; (800a750 <MX_TIM6_Init+0x64>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 800a70e:	4b10      	ldr	r3, [pc, #64]	; (800a750 <MX_TIM6_Init+0x64>)
 800a710:	2213      	movs	r2, #19
 800a712:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a714:	4b0e      	ldr	r3, [pc, #56]	; (800a750 <MX_TIM6_Init+0x64>)
 800a716:	2200      	movs	r2, #0
 800a718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a71a:	480d      	ldr	r0, [pc, #52]	; (800a750 <MX_TIM6_Init+0x64>)
 800a71c:	f7f9 fbec 	bl	8003ef8 <HAL_TIM_Base_Init>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800a726:	f000 fa81 	bl	800ac2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a72a:	2300      	movs	r3, #0
 800a72c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a72e:	2300      	movs	r3, #0
 800a730:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a732:	463b      	mov	r3, r7
 800a734:	4619      	mov	r1, r3
 800a736:	4806      	ldr	r0, [pc, #24]	; (800a750 <MX_TIM6_Init+0x64>)
 800a738:	f7f9 fdfe 	bl	8004338 <HAL_TIMEx_MasterConfigSynchronization>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800a742:	f000 fa73 	bl	800ac2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a746:	bf00      	nop
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	2000110c 	.word	0x2000110c
 800a754:	40001000 	.word	0x40001000

0800a758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a75c:	4b11      	ldr	r3, [pc, #68]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a75e:	4a12      	ldr	r2, [pc, #72]	; (800a7a8 <MX_USART2_UART_Init+0x50>)
 800a760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a762:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a76a:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a770:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a772:	2200      	movs	r2, #0
 800a774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a776:	4b0b      	ldr	r3, [pc, #44]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a778:	2200      	movs	r2, #0
 800a77a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a77c:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a77e:	220c      	movs	r2, #12
 800a780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a782:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a784:	2200      	movs	r2, #0
 800a786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a78e:	4805      	ldr	r0, [pc, #20]	; (800a7a4 <MX_USART2_UART_Init+0x4c>)
 800a790:	f7f9 fe62 	bl	8004458 <HAL_UART_Init>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a79a:	f000 fa47 	bl	800ac2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a79e:	bf00      	nop
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20001360 	.word	0x20001360
 800a7a8:	40004400 	.word	0x40004400

0800a7ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a7b0:	4b11      	ldr	r3, [pc, #68]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7b2:	4a12      	ldr	r2, [pc, #72]	; (800a7fc <MX_USART6_UART_Init+0x50>)
 800a7b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800a7b6:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a7bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a7be:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a7c4:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a7ca:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a7d0:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7d2:	220c      	movs	r2, #12
 800a7d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7d6:	4b08      	ldr	r3, [pc, #32]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a7dc:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a7e2:	4805      	ldr	r0, [pc, #20]	; (800a7f8 <MX_USART6_UART_Init+0x4c>)
 800a7e4:	f7f9 fe38 	bl	8004458 <HAL_UART_Init>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800a7ee:	f000 fa1d 	bl	800ac2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a7f2:	bf00      	nop
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200012c4 	.word	0x200012c4
 800a7fc:	40011400 	.word	0x40011400

0800a800 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a806:	2300      	movs	r3, #0
 800a808:	607b      	str	r3, [r7, #4]
 800a80a:	4b1f      	ldr	r3, [pc, #124]	; (800a888 <MX_DMA_Init+0x88>)
 800a80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80e:	4a1e      	ldr	r2, [pc, #120]	; (800a888 <MX_DMA_Init+0x88>)
 800a810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a814:	6313      	str	r3, [r2, #48]	; 0x30
 800a816:	4b1c      	ldr	r3, [pc, #112]	; (800a888 <MX_DMA_Init+0x88>)
 800a818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a81e:	607b      	str	r3, [r7, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a822:	2300      	movs	r3, #0
 800a824:	603b      	str	r3, [r7, #0]
 800a826:	4b18      	ldr	r3, [pc, #96]	; (800a888 <MX_DMA_Init+0x88>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	4a17      	ldr	r2, [pc, #92]	; (800a888 <MX_DMA_Init+0x88>)
 800a82c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a830:	6313      	str	r3, [r2, #48]	; 0x30
 800a832:	4b15      	ldr	r3, [pc, #84]	; (800a888 <MX_DMA_Init+0x88>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a83a:	603b      	str	r3, [r7, #0]
 800a83c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a83e:	2200      	movs	r2, #0
 800a840:	2100      	movs	r1, #0
 800a842:	2010      	movs	r0, #16
 800a844:	f7f6 fcc5 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a848:	2010      	movs	r0, #16
 800a84a:	f7f6 fcde 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800a84e:	2200      	movs	r2, #0
 800a850:	2100      	movs	r1, #0
 800a852:	2011      	movs	r0, #17
 800a854:	f7f6 fcbd 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800a858:	2011      	movs	r0, #17
 800a85a:	f7f6 fcd6 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	2039      	movs	r0, #57	; 0x39
 800a864:	f7f6 fcb5 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800a868:	2039      	movs	r0, #57	; 0x39
 800a86a:	f7f6 fcce 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800a86e:	2200      	movs	r2, #0
 800a870:	2100      	movs	r1, #0
 800a872:	2045      	movs	r0, #69	; 0x45
 800a874:	f7f6 fcad 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800a878:	2045      	movs	r0, #69	; 0x45
 800a87a:	f7f6 fcc6 	bl	800120a <HAL_NVIC_EnableIRQ>

}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	40023800 	.word	0x40023800

0800a88c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08c      	sub	sp, #48	; 0x30
 800a890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a892:	f107 031c 	add.w	r3, r7, #28
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	605a      	str	r2, [r3, #4]
 800a89c:	609a      	str	r2, [r3, #8]
 800a89e:	60da      	str	r2, [r3, #12]
 800a8a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	4b6c      	ldr	r3, [pc, #432]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	4a6b      	ldr	r2, [pc, #428]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8ac:	f043 0310 	orr.w	r3, r3, #16
 800a8b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8b2:	4b69      	ldr	r3, [pc, #420]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	f003 0310 	and.w	r3, r3, #16
 800a8ba:	61bb      	str	r3, [r7, #24]
 800a8bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	4b65      	ldr	r3, [pc, #404]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c6:	4a64      	ldr	r2, [pc, #400]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8c8:	f043 0304 	orr.w	r3, r3, #4
 800a8cc:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ce:	4b62      	ldr	r3, [pc, #392]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d2:	f003 0304 	and.w	r3, r3, #4
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a8da:	2300      	movs	r3, #0
 800a8dc:	613b      	str	r3, [r7, #16]
 800a8de:	4b5e      	ldr	r3, [pc, #376]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e2:	4a5d      	ldr	r2, [pc, #372]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ea:	4b5b      	ldr	r3, [pc, #364]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f2:	613b      	str	r3, [r7, #16]
 800a8f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
 800a8fa:	4b57      	ldr	r3, [pc, #348]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fe:	4a56      	ldr	r2, [pc, #344]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a900:	f043 0301 	orr.w	r3, r3, #1
 800a904:	6313      	str	r3, [r2, #48]	; 0x30
 800a906:	4b54      	ldr	r3, [pc, #336]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a912:	2300      	movs	r3, #0
 800a914:	60bb      	str	r3, [r7, #8]
 800a916:	4b50      	ldr	r3, [pc, #320]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91a:	4a4f      	ldr	r2, [pc, #316]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a91c:	f043 0302 	orr.w	r3, r3, #2
 800a920:	6313      	str	r3, [r2, #48]	; 0x30
 800a922:	4b4d      	ldr	r3, [pc, #308]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	60bb      	str	r3, [r7, #8]
 800a92c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a92e:	2300      	movs	r3, #0
 800a930:	607b      	str	r3, [r7, #4]
 800a932:	4b49      	ldr	r3, [pc, #292]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	4a48      	ldr	r2, [pc, #288]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a938:	f043 0308 	orr.w	r3, r3, #8
 800a93c:	6313      	str	r3, [r2, #48]	; 0x30
 800a93e:	4b46      	ldr	r3, [pc, #280]	; (800aa58 <MX_GPIO_Init+0x1cc>)
 800a940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a942:	f003 0308 	and.w	r3, r3, #8
 800a946:	607b      	str	r3, [r7, #4]
 800a948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, K1_OUT_Pin|K2_OUT_Pin, GPIO_PIN_RESET);
 800a94a:	2200      	movs	r2, #0
 800a94c:	210c      	movs	r1, #12
 800a94e:	4843      	ldr	r0, [pc, #268]	; (800aa5c <MX_GPIO_Init+0x1d0>)
 800a950:	f7f7 fa0c 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_OFF_Pin|OLED_D_C_Pin, GPIO_PIN_RESET);
 800a954:	2200      	movs	r2, #0
 800a956:	2112      	movs	r1, #18
 800a958:	4841      	ldr	r0, [pc, #260]	; (800aa60 <MX_GPIO_Init+0x1d4>)
 800a95a:	f7f7 fa07 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RESET_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 800a95e:	2201      	movs	r2, #1
 800a960:	2144      	movs	r1, #68	; 0x44
 800a962:	483f      	ldr	r0, [pc, #252]	; (800aa60 <MX_GPIO_Init+0x1d4>)
 800a964:	f7f7 fa02 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 800a968:	2201      	movs	r2, #1
 800a96a:	f241 0103 	movw	r1, #4099	; 0x1003
 800a96e:	483d      	ldr	r0, [pc, #244]	; (800aa64 <MX_GPIO_Init+0x1d8>)
 800a970:	f7f7 f9fc 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_OFF_GPIO_Port, POWER_OFF_Pin, GPIO_PIN_RESET);
 800a974:	2200      	movs	r2, #0
 800a976:	2104      	movs	r1, #4
 800a978:	483a      	ldr	r0, [pc, #232]	; (800aa64 <MX_GPIO_Init+0x1d8>)
 800a97a:	f7f7 f9f7 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_WP_GPIO_Port, SPI_WP_Pin, GPIO_PIN_RESET);
 800a97e:	2200      	movs	r2, #0
 800a980:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a984:	4838      	ldr	r0, [pc, #224]	; (800aa68 <MX_GPIO_Init+0x1dc>)
 800a986:	f7f7 f9f1 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : K1_OUT_Pin K2_OUT_Pin */
  GPIO_InitStruct.Pin = K1_OUT_Pin|K2_OUT_Pin;
 800a98a:	230c      	movs	r3, #12
 800a98c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a98e:	2301      	movs	r3, #1
 800a990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a992:	2300      	movs	r3, #0
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a996:	2300      	movs	r3, #0
 800a998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a99a:	f107 031c 	add.w	r3, r7, #28
 800a99e:	4619      	mov	r1, r3
 800a9a0:	482e      	ldr	r0, [pc, #184]	; (800aa5c <MX_GPIO_Init+0x1d0>)
 800a9a2:	f7f7 f84f 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : K3_Pin K4_Pin K5_Pin */
  GPIO_InitStruct.Pin = K3_Pin|K4_Pin|K5_Pin;
 800a9a6:	2370      	movs	r3, #112	; 0x70
 800a9a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a9b2:	f107 031c 	add.w	r3, r7, #28
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4828      	ldr	r0, [pc, #160]	; (800aa5c <MX_GPIO_Init+0x1d0>)
 800a9ba:	f7f7 f843 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_OFF_Pin */
  GPIO_InitStruct.Pin = OLED_OFF_Pin;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_OFF_GPIO_Port, &GPIO_InitStruct);
 800a9ce:	f107 031c 	add.w	r3, r7, #28
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4822      	ldr	r0, [pc, #136]	; (800aa60 <MX_GPIO_Init+0x1d4>)
 800a9d6:	f7f7 f835 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RESET_Pin OLED_D_C_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|OLED_D_C_Pin|OLED_CS_Pin;
 800a9da:	2354      	movs	r3, #84	; 0x54
 800a9dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9ea:	f107 031c 	add.w	r3, r7, #28
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	481b      	ldr	r0, [pc, #108]	; (800aa60 <MX_GPIO_Init+0x1d4>)
 800a9f2:	f7f7 f827 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin POWER_OFF_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|POWER_OFF_Pin;
 800a9f6:	2307      	movs	r3, #7
 800a9f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa02:	2300      	movs	r3, #0
 800aa04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa06:	f107 031c 	add.w	r3, r7, #28
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4815      	ldr	r0, [pc, #84]	; (800aa64 <MX_GPIO_Init+0x1d8>)
 800aa0e:	f7f7 f819 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800aa12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa20:	2303      	movs	r3, #3
 800aa22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800aa24:	f107 031c 	add.w	r3, r7, #28
 800aa28:	4619      	mov	r1, r3
 800aa2a:	480e      	ldr	r0, [pc, #56]	; (800aa64 <MX_GPIO_Init+0x1d8>)
 800aa2c:	f7f7 f80a 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_WP_Pin */
  GPIO_InitStruct.Pin = SPI_WP_Pin;
 800aa30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa36:	2301      	movs	r3, #1
 800aa38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_WP_GPIO_Port, &GPIO_InitStruct);
 800aa42:	f107 031c 	add.w	r3, r7, #28
 800aa46:	4619      	mov	r1, r3
 800aa48:	4807      	ldr	r0, [pc, #28]	; (800aa68 <MX_GPIO_Init+0x1dc>)
 800aa4a:	f7f6 fffb 	bl	8001a44 <HAL_GPIO_Init>

}
 800aa4e:	bf00      	nop
 800aa50:	3730      	adds	r7, #48	; 0x30
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	40023800 	.word	0x40023800
 800aa5c:	40021000 	.word	0x40021000
 800aa60:	40020000 	.word	0x40020000
 800aa64:	40020400 	.word	0x40020400
 800aa68:	40020c00 	.word	0x40020c00

0800aa6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6)	//50Hz refresh rate for keyboard - Runs every 20ms
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800aa74:	2201      	movs	r2, #1
 800aa76:	2101      	movs	r1, #1
 800aa78:	4816      	ldr	r0, [pc, #88]	; (800aad4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800aa7a:	f7f7 f977 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800aa7e:	2201      	movs	r2, #1
 800aa80:	2102      	movs	r1, #2
 800aa82:	4814      	ldr	r0, [pc, #80]	; (800aad4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800aa84:	f7f7 f972 	bl	8001d6c <HAL_GPIO_WritePin>


	TicksSinceLastRecordArrived++;
 800aa88:	4b13      	ldr	r3, [pc, #76]	; (800aad8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	4a12      	ldr	r2, [pc, #72]	; (800aad8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800aa90:	6013      	str	r3, [r2, #0]
	if(TicksSinceLastRecordArrived > 15)
 800aa92:	4b11      	ldr	r3, [pc, #68]	; (800aad8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b0f      	cmp	r3, #15
 800aa98:	d915      	bls.n	800aac6 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		memset(pomiarArray, 0, sizeof(pomiarArray));
 800aa9a:	22f0      	movs	r2, #240	; 0xf0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	480f      	ldr	r0, [pc, #60]	; (800aadc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800aaa0:	f000 fd0a 	bl	800b4b8 <memset>
		packetCounter = 0;
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
		pomiarArrayFull = 0;
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
		newPacketCount = 0;
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
		memset(&pomiar, 0, sizeof(pomiar));
 800aab6:	221c      	movs	r2, #28
 800aab8:	2100      	movs	r1, #0
 800aaba:	480c      	ldr	r0, [pc, #48]	; (800aaec <HAL_TIM_PeriodElapsedCallback+0x80>)
 800aabc:	f000 fcfc 	bl	800b4b8 <memset>

		TicksSinceLastRecordArrived = 0;
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
	}
	isr_kbd();
 800aac6:	f7fb fce7 	bl	8006498 <isr_kbd>
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	40020400 	.word	0x40020400
 800aad8:	200006a4 	.word	0x200006a4
 800aadc:	20001150 	.word	0x20001150
 800aae0:	200006af 	.word	0x200006af
 800aae4:	200006ac 	.word	0x200006ac
 800aae8:	200006ad 	.word	0x200006ad
 800aaec:	20000ce0 	.word	0x20000ce0

0800aaf0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	onesecondTick = 1;
 800aaf8:	4b41      	ldr	r3, [pc, #260]	; (800ac00 <HAL_RTC_AlarmAEventCallback+0x110>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	701a      	strb	r2, [r3, #0]
	if (frame.type == FRAME_BP)
 800aafe:	4b41      	ldr	r3, [pc, #260]	; (800ac04 <HAL_RTC_AlarmAEventCallback+0x114>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d11e      	bne.n	800ab44 <HAL_RTC_AlarmAEventCallback+0x54>
	{
		if (ssTimer == SCREEN_SAVER_BP_DELAY - 1)
 800ab06:	4b40      	ldr	r3, [pc, #256]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f240 122b 	movw	r2, #299	; 0x12b
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d109      	bne.n	800ab28 <HAL_RTC_AlarmAEventCallback+0x38>
		{
			settings.contrast = SS_CONTRAST;
 800ab14:	4b3d      	ldr	r3, [pc, #244]	; (800ac0c <HAL_RTC_AlarmAEventCallback+0x11c>)
 800ab16:	2207      	movs	r2, #7
 800ab18:	715a      	strb	r2, [r3, #5]
			ssStateChanged = 1;
 800ab1a:	4b3d      	ldr	r3, [pc, #244]	; (800ac10 <HAL_RTC_AlarmAEventCallback+0x120>)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	701a      	strb	r2, [r3, #0]
			ssTimer = 0xFF;
 800ab20:	4b39      	ldr	r3, [pc, #228]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab22:	22ff      	movs	r2, #255	; 0xff
 800ab24:	801a      	strh	r2, [r3, #0]
 800ab26:	e02b      	b.n	800ab80 <HAL_RTC_AlarmAEventCallback+0x90>
		}
		else if (ssTimer < SCREEN_SAVER_BP_DELAY - 1) ssTimer++;
 800ab28:	4b37      	ldr	r3, [pc, #220]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800ab32:	d825      	bhi.n	800ab80 <HAL_RTC_AlarmAEventCallback+0x90>
 800ab34:	4b34      	ldr	r3, [pc, #208]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	4b32      	ldr	r3, [pc, #200]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab40:	801a      	strh	r2, [r3, #0]
 800ab42:	e01d      	b.n	800ab80 <HAL_RTC_AlarmAEventCallback+0x90>
	}
	else
	{
		if (ssTimer == SCREEN_SAVER_DELAY - 1)
 800ab44:	4b30      	ldr	r3, [pc, #192]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab46:	881b      	ldrh	r3, [r3, #0]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	f240 122b 	movw	r2, #299	; 0x12b
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d109      	bne.n	800ab66 <HAL_RTC_AlarmAEventCallback+0x76>
		{
			settings.contrast = SS_CONTRAST;
 800ab52:	4b2e      	ldr	r3, [pc, #184]	; (800ac0c <HAL_RTC_AlarmAEventCallback+0x11c>)
 800ab54:	2207      	movs	r2, #7
 800ab56:	715a      	strb	r2, [r3, #5]
			ssStateChanged = 1;
 800ab58:	4b2d      	ldr	r3, [pc, #180]	; (800ac10 <HAL_RTC_AlarmAEventCallback+0x120>)
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	701a      	strb	r2, [r3, #0]
			ssTimer = 0xFF;
 800ab5e:	4b2a      	ldr	r3, [pc, #168]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab60:	22ff      	movs	r2, #255	; 0xff
 800ab62:	801a      	strh	r2, [r3, #0]
 800ab64:	e00c      	b.n	800ab80 <HAL_RTC_AlarmAEventCallback+0x90>
		}
		else if (ssTimer < SCREEN_SAVER_DELAY - 1) ssTimer++;
 800ab66:	4b28      	ldr	r3, [pc, #160]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800ab70:	d806      	bhi.n	800ab80 <HAL_RTC_AlarmAEventCallback+0x90>
 800ab72:	4b25      	ldr	r3, [pc, #148]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3301      	adds	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	4b22      	ldr	r3, [pc, #136]	; (800ac08 <HAL_RTC_AlarmAEventCallback+0x118>)
 800ab7e:	801a      	strh	r2, [r3, #0]
	}

	if (sampleDetected != 0 && sampleDetected != 3)
 800ab80:	4b24      	ldr	r3, [pc, #144]	; (800ac14 <HAL_RTC_AlarmAEventCallback+0x124>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d014      	beq.n	800abb4 <HAL_RTC_AlarmAEventCallback+0xc4>
 800ab8a:	4b22      	ldr	r3, [pc, #136]	; (800ac14 <HAL_RTC_AlarmAEventCallback+0x124>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d00f      	beq.n	800abb4 <HAL_RTC_AlarmAEventCallback+0xc4>
	{
		if (ledTimer == 0)
 800ab94:	4b20      	ldr	r3, [pc, #128]	; (800ac18 <HAL_RTC_AlarmAEventCallback+0x128>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d103      	bne.n	800aba6 <HAL_RTC_AlarmAEventCallback+0xb6>
		{
			sampleDetected = 3;
 800ab9e:	4b1d      	ldr	r3, [pc, #116]	; (800ac14 <HAL_RTC_AlarmAEventCallback+0x124>)
 800aba0:	2203      	movs	r2, #3
 800aba2:	701a      	strb	r2, [r3, #0]
 800aba4:	e006      	b.n	800abb4 <HAL_RTC_AlarmAEventCallback+0xc4>
			//UART_print("ledTimer=0\r\n");
		}
		else
		{
			//UART_print("ledTimer-\r\n");
			ledTimer--;
 800aba6:	4b1c      	ldr	r3, [pc, #112]	; (800ac18 <HAL_RTC_AlarmAEventCallback+0x128>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	3b01      	subs	r3, #1
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <HAL_RTC_AlarmAEventCallback+0x128>)
 800abb2:	701a      	strb	r2, [r3, #0]
		}
	}


	if (initDone)
 800abb4:	4b19      	ldr	r3, [pc, #100]	; (800ac1c <HAL_RTC_AlarmAEventCallback+0x12c>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d006      	beq.n	800abcc <HAL_RTC_AlarmAEventCallback+0xdc>
// 			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
// 			SendRecord(R_POMIAR_OUT, A_HEAD, A_MAINBOARD, NULL, 0);
// 		}
// 		else {pcConnectionTimeout++; HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);}
//
		if (settings.measurementType == MEASUREMENT_CONTINUOUS)			//umożliwia ponowny zapis do archiwum tej samej probki. sekunde po zapisaniu w archiwum napis AXXX znika i można dokonac kolejnego
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <HAL_RTC_AlarmAEventCallback+0x11c>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d102      	bne.n	800abcc <HAL_RTC_AlarmAEventCallback+0xdc>
		{
			newArchiveEntryAdded = 0;
 800abc6:	4b16      	ldr	r3, [pc, #88]	; (800ac20 <HAL_RTC_AlarmAEventCallback+0x130>)
 800abc8:	2200      	movs	r2, #0
 800abca:	701a      	strb	r2, [r3, #0]
		}
	}
	if (pomiarTimer > 0)
 800abcc:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <HAL_RTC_AlarmAEventCallback+0x134>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00e      	beq.n	800abf4 <HAL_RTC_AlarmAEventCallback+0x104>
	{
		pomiarTimer--;
 800abd6:	4b13      	ldr	r3, [pc, #76]	; (800ac24 <HAL_RTC_AlarmAEventCallback+0x134>)
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	3b01      	subs	r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	4b10      	ldr	r3, [pc, #64]	; (800ac24 <HAL_RTC_AlarmAEventCallback+0x134>)
 800abe2:	701a      	strb	r2, [r3, #0]
		if (pomiarTimer == 0) pomiarStatus = POMIAR_DONE;
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <HAL_RTC_AlarmAEventCallback+0x134>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <HAL_RTC_AlarmAEventCallback+0x104>
 800abee:	4b0e      	ldr	r3, [pc, #56]	; (800ac28 <HAL_RTC_AlarmAEventCallback+0x138>)
 800abf0:	2204      	movs	r2, #4
 800abf2:	701a      	strb	r2, [r3, #0]
	}


}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	200006ab 	.word	0x200006ab
 800ac04:	20001244 	.word	0x20001244
 800ac08:	20000c0e 	.word	0x20000c0e
 800ac0c:	200006c4 	.word	0x200006c4
 800ac10:	2000135c 	.word	0x2000135c
 800ac14:	200006a9 	.word	0x200006a9
 800ac18:	200006aa 	.word	0x200006aa
 800ac1c:	20000808 	.word	0x20000808
 800ac20:	20000bf4 	.word	0x20000bf4
 800ac24:	2000074c 	.word	0x2000074c
 800ac28:	20000bf5 	.word	0x20000bf5

0800ac2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ac30:	bf00      	nop
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
	...

0800ac3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
 800ac46:	4b10      	ldr	r3, [pc, #64]	; (800ac88 <HAL_MspInit+0x4c>)
 800ac48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4a:	4a0f      	ldr	r2, [pc, #60]	; (800ac88 <HAL_MspInit+0x4c>)
 800ac4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac50:	6453      	str	r3, [r2, #68]	; 0x44
 800ac52:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <HAL_MspInit+0x4c>)
 800ac54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac5a:	607b      	str	r3, [r7, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac5e:	2300      	movs	r3, #0
 800ac60:	603b      	str	r3, [r7, #0]
 800ac62:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <HAL_MspInit+0x4c>)
 800ac64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac66:	4a08      	ldr	r2, [pc, #32]	; (800ac88 <HAL_MspInit+0x4c>)
 800ac68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac6c:	6413      	str	r3, [r2, #64]	; 0x40
 800ac6e:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <HAL_MspInit+0x4c>)
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac76:	603b      	str	r3, [r7, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac7a:	bf00      	nop
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40023800 	.word	0x40023800

0800ac8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a08      	ldr	r2, [pc, #32]	; (800acbc <HAL_RTC_MspInit+0x30>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d10a      	bne.n	800acb4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ac9e:	4b08      	ldr	r3, [pc, #32]	; (800acc0 <HAL_RTC_MspInit+0x34>)
 800aca0:	2201      	movs	r2, #1
 800aca2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800aca4:	2200      	movs	r2, #0
 800aca6:	2100      	movs	r1, #0
 800aca8:	2029      	movs	r0, #41	; 0x29
 800acaa:	f7f6 fa92 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800acae:	2029      	movs	r0, #41	; 0x29
 800acb0:	f7f6 faab 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	40002800 	.word	0x40002800
 800acc0:	42470e3c 	.word	0x42470e3c

0800acc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b08c      	sub	sp, #48	; 0x30
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800accc:	f107 031c 	add.w	r3, r7, #28
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	609a      	str	r2, [r3, #8]
 800acd8:	60da      	str	r2, [r3, #12]
 800acda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a32      	ldr	r2, [pc, #200]	; (800adac <HAL_SPI_MspInit+0xe8>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d12c      	bne.n	800ad40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ace6:	2300      	movs	r3, #0
 800ace8:	61bb      	str	r3, [r7, #24]
 800acea:	4b31      	ldr	r3, [pc, #196]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800acec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acee:	4a30      	ldr	r2, [pc, #192]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800acf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800acf4:	6453      	str	r3, [r2, #68]	; 0x44
 800acf6:	4b2e      	ldr	r3, [pc, #184]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800acf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acfe:	61bb      	str	r3, [r7, #24]
 800ad00:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	4b2a      	ldr	r3, [pc, #168]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	4a29      	ldr	r2, [pc, #164]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad0c:	f043 0301 	orr.w	r3, r3, #1
 800ad10:	6313      	str	r3, [r2, #48]	; 0x30
 800ad12:	4b27      	ldr	r3, [pc, #156]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]
 800ad1c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = OLED_CLK_Pin|OLED_DATA_Pin;
 800ad1e:	23a0      	movs	r3, #160	; 0xa0
 800ad20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad22:	2302      	movs	r3, #2
 800ad24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ad2e:	2305      	movs	r3, #5
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad32:	f107 031c 	add.w	r3, r7, #28
 800ad36:	4619      	mov	r1, r3
 800ad38:	481e      	ldr	r0, [pc, #120]	; (800adb4 <HAL_SPI_MspInit+0xf0>)
 800ad3a:	f7f6 fe83 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ad3e:	e031      	b.n	800ada4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a1c      	ldr	r2, [pc, #112]	; (800adb8 <HAL_SPI_MspInit+0xf4>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d12c      	bne.n	800ada4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	613b      	str	r3, [r7, #16]
 800ad4e:	4b18      	ldr	r3, [pc, #96]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	4a17      	ldr	r2, [pc, #92]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad58:	6413      	str	r3, [r2, #64]	; 0x40
 800ad5a:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	4b11      	ldr	r3, [pc, #68]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6e:	4a10      	ldr	r2, [pc, #64]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad70:	f043 0302 	orr.w	r3, r3, #2
 800ad74:	6313      	str	r3, [r2, #48]	; 0x30
 800ad76:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <HAL_SPI_MspInit+0xec>)
 800ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 800ad82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800ad86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad88:	2302      	movs	r3, #2
 800ad8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad90:	2303      	movs	r3, #3
 800ad92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ad94:	2305      	movs	r3, #5
 800ad96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad98:	f107 031c 	add.w	r3, r7, #28
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4807      	ldr	r0, [pc, #28]	; (800adbc <HAL_SPI_MspInit+0xf8>)
 800ada0:	f7f6 fe50 	bl	8001a44 <HAL_GPIO_Init>
}
 800ada4:	bf00      	nop
 800ada6:	3730      	adds	r7, #48	; 0x30
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	40013000 	.word	0x40013000
 800adb0:	40023800 	.word	0x40023800
 800adb4:	40020000 	.word	0x40020000
 800adb8:	40003800 	.word	0x40003800
 800adbc:	40020400 	.word	0x40020400

0800adc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a0e      	ldr	r2, [pc, #56]	; (800ae08 <HAL_TIM_Base_MspInit+0x48>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d115      	bne.n	800adfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	4b0d      	ldr	r3, [pc, #52]	; (800ae0c <HAL_TIM_Base_MspInit+0x4c>)
 800add8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adda:	4a0c      	ldr	r2, [pc, #48]	; (800ae0c <HAL_TIM_Base_MspInit+0x4c>)
 800addc:	f043 0310 	orr.w	r3, r3, #16
 800ade0:	6413      	str	r3, [r2, #64]	; 0x40
 800ade2:	4b0a      	ldr	r3, [pc, #40]	; (800ae0c <HAL_TIM_Base_MspInit+0x4c>)
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	f003 0310 	and.w	r3, r3, #16
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800adee:	2200      	movs	r2, #0
 800adf0:	2100      	movs	r1, #0
 800adf2:	2036      	movs	r0, #54	; 0x36
 800adf4:	f7f6 f9ed 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800adf8:	2036      	movs	r0, #54	; 0x36
 800adfa:	f7f6 fa06 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800adfe:	bf00      	nop
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	40001000 	.word	0x40001000
 800ae0c:	40023800 	.word	0x40023800

0800ae10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08c      	sub	sp, #48	; 0x30
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae18:	f107 031c 	add.w	r3, r7, #28
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	605a      	str	r2, [r3, #4]
 800ae22:	609a      	str	r2, [r3, #8]
 800ae24:	60da      	str	r2, [r3, #12]
 800ae26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a97      	ldr	r2, [pc, #604]	; (800b08c <HAL_UART_MspInit+0x27c>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	f040 8091 	bne.w	800af56 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ae34:	2300      	movs	r3, #0
 800ae36:	61bb      	str	r3, [r7, #24]
 800ae38:	4b95      	ldr	r3, [pc, #596]	; (800b090 <HAL_UART_MspInit+0x280>)
 800ae3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3c:	4a94      	ldr	r2, [pc, #592]	; (800b090 <HAL_UART_MspInit+0x280>)
 800ae3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae42:	6413      	str	r3, [r2, #64]	; 0x40
 800ae44:	4b92      	ldr	r3, [pc, #584]	; (800b090 <HAL_UART_MspInit+0x280>)
 800ae46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae4c:	61bb      	str	r3, [r7, #24]
 800ae4e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]
 800ae54:	4b8e      	ldr	r3, [pc, #568]	; (800b090 <HAL_UART_MspInit+0x280>)
 800ae56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae58:	4a8d      	ldr	r2, [pc, #564]	; (800b090 <HAL_UART_MspInit+0x280>)
 800ae5a:	f043 0308 	orr.w	r3, r3, #8
 800ae5e:	6313      	str	r3, [r2, #48]	; 0x30
 800ae60:	4b8b      	ldr	r3, [pc, #556]	; (800b090 <HAL_UART_MspInit+0x280>)
 800ae62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae64:	f003 0308 	and.w	r3, r3, #8
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TXD_USB_Pin|RXD_USB_Pin;
 800ae6c:	2360      	movs	r3, #96	; 0x60
 800ae6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae70:	2302      	movs	r3, #2
 800ae72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae74:	2301      	movs	r3, #1
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ae7c:	2307      	movs	r3, #7
 800ae7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae80:	f107 031c 	add.w	r3, r7, #28
 800ae84:	4619      	mov	r1, r3
 800ae86:	4883      	ldr	r0, [pc, #524]	; (800b094 <HAL_UART_MspInit+0x284>)
 800ae88:	f7f6 fddc 	bl	8001a44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800ae8c:	4b82      	ldr	r3, [pc, #520]	; (800b098 <HAL_UART_MspInit+0x288>)
 800ae8e:	4a83      	ldr	r2, [pc, #524]	; (800b09c <HAL_UART_MspInit+0x28c>)
 800ae90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800ae92:	4b81      	ldr	r3, [pc, #516]	; (800b098 <HAL_UART_MspInit+0x288>)
 800ae94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae9a:	4b7f      	ldr	r3, [pc, #508]	; (800b098 <HAL_UART_MspInit+0x288>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aea0:	4b7d      	ldr	r3, [pc, #500]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aea6:	4b7c      	ldr	r3, [pc, #496]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aeac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aeae:	4b7a      	ldr	r3, [pc, #488]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aeb4:	4b78      	ldr	r3, [pc, #480]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800aeba:	4b77      	ldr	r3, [pc, #476]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aec0:	4b75      	ldr	r3, [pc, #468]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aec6:	4b74      	ldr	r3, [pc, #464]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800aecc:	4872      	ldr	r0, [pc, #456]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aece:	f7f6 f9b7 	bl	8001240 <HAL_DMA_Init>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800aed8:	f7ff fea8 	bl	800ac2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a6e      	ldr	r2, [pc, #440]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aee0:	635a      	str	r2, [r3, #52]	; 0x34
 800aee2:	4a6d      	ldr	r2, [pc, #436]	; (800b098 <HAL_UART_MspInit+0x288>)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800aee8:	4b6d      	ldr	r3, [pc, #436]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800aeea:	4a6e      	ldr	r2, [pc, #440]	; (800b0a4 <HAL_UART_MspInit+0x294>)
 800aeec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800aeee:	4b6c      	ldr	r3, [pc, #432]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800aef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aef4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aef6:	4b6a      	ldr	r3, [pc, #424]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800aef8:	2240      	movs	r2, #64	; 0x40
 800aefa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aefc:	4b68      	ldr	r3, [pc, #416]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800aefe:	2200      	movs	r2, #0
 800af00:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800af02:	4b67      	ldr	r3, [pc, #412]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af08:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af0a:	4b65      	ldr	r3, [pc, #404]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af10:	4b63      	ldr	r3, [pc, #396]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af12:	2200      	movs	r2, #0
 800af14:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800af16:	4b62      	ldr	r3, [pc, #392]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af18:	2200      	movs	r2, #0
 800af1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800af1c:	4b60      	ldr	r3, [pc, #384]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af1e:	2200      	movs	r2, #0
 800af20:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af22:	4b5f      	ldr	r3, [pc, #380]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af24:	2200      	movs	r2, #0
 800af26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800af28:	485d      	ldr	r0, [pc, #372]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af2a:	f7f6 f989 	bl	8001240 <HAL_DMA_Init>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800af34:	f7ff fe7a 	bl	800ac2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a59      	ldr	r2, [pc, #356]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af3c:	631a      	str	r2, [r3, #48]	; 0x30
 800af3e:	4a58      	ldr	r2, [pc, #352]	; (800b0a0 <HAL_UART_MspInit+0x290>)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800af44:	2200      	movs	r2, #0
 800af46:	2100      	movs	r1, #0
 800af48:	2026      	movs	r0, #38	; 0x26
 800af4a:	f7f6 f942 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800af4e:	2026      	movs	r0, #38	; 0x26
 800af50:	f7f6 f95b 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800af54:	e095      	b.n	800b082 <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART6)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a53      	ldr	r2, [pc, #332]	; (800b0a8 <HAL_UART_MspInit+0x298>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	f040 8090 	bne.w	800b082 <HAL_UART_MspInit+0x272>
    __HAL_RCC_USART6_CLK_ENABLE();
 800af62:	2300      	movs	r3, #0
 800af64:	613b      	str	r3, [r7, #16]
 800af66:	4b4a      	ldr	r3, [pc, #296]	; (800b090 <HAL_UART_MspInit+0x280>)
 800af68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6a:	4a49      	ldr	r2, [pc, #292]	; (800b090 <HAL_UART_MspInit+0x280>)
 800af6c:	f043 0320 	orr.w	r3, r3, #32
 800af70:	6453      	str	r3, [r2, #68]	; 0x44
 800af72:	4b47      	ldr	r3, [pc, #284]	; (800b090 <HAL_UART_MspInit+0x280>)
 800af74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	4b43      	ldr	r3, [pc, #268]	; (800b090 <HAL_UART_MspInit+0x280>)
 800af84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af86:	4a42      	ldr	r2, [pc, #264]	; (800b090 <HAL_UART_MspInit+0x280>)
 800af88:	f043 0304 	orr.w	r3, r3, #4
 800af8c:	6313      	str	r3, [r2, #48]	; 0x30
 800af8e:	4b40      	ldr	r3, [pc, #256]	; (800b090 <HAL_UART_MspInit+0x280>)
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	60fb      	str	r3, [r7, #12]
 800af98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TXD_CCD_Pin|RXD_CCD_Pin;
 800af9a:	23c0      	movs	r3, #192	; 0xc0
 800af9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af9e:	2302      	movs	r3, #2
 800afa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800afa2:	2301      	movs	r3, #1
 800afa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afa6:	2303      	movs	r3, #3
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800afaa:	2308      	movs	r3, #8
 800afac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800afae:	f107 031c 	add.w	r3, r7, #28
 800afb2:	4619      	mov	r1, r3
 800afb4:	483d      	ldr	r0, [pc, #244]	; (800b0ac <HAL_UART_MspInit+0x29c>)
 800afb6:	f7f6 fd45 	bl	8001a44 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800afba:	4b3d      	ldr	r3, [pc, #244]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afbc:	4a3d      	ldr	r2, [pc, #244]	; (800b0b4 <HAL_UART_MspInit+0x2a4>)
 800afbe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800afc0:	4b3b      	ldr	r3, [pc, #236]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afc2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800afc6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800afc8:	4b39      	ldr	r3, [pc, #228]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afca:	2200      	movs	r2, #0
 800afcc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800afce:	4b38      	ldr	r3, [pc, #224]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800afd4:	4b36      	ldr	r3, [pc, #216]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afda:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800afdc:	4b34      	ldr	r3, [pc, #208]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afde:	2200      	movs	r2, #0
 800afe0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800afe2:	4b33      	ldr	r3, [pc, #204]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800afe8:	4b31      	ldr	r3, [pc, #196]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800afea:	2200      	movs	r2, #0
 800afec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800afee:	4b30      	ldr	r3, [pc, #192]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aff4:	4b2e      	ldr	r3, [pc, #184]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800affa:	482d      	ldr	r0, [pc, #180]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800affc:	f7f6 f920 	bl	8001240 <HAL_DMA_Init>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800b006:	f7ff fe11 	bl	800ac2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a28      	ldr	r2, [pc, #160]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800b00e:	635a      	str	r2, [r3, #52]	; 0x34
 800b010:	4a27      	ldr	r2, [pc, #156]	; (800b0b0 <HAL_UART_MspInit+0x2a0>)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800b016:	4b28      	ldr	r3, [pc, #160]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b018:	4a28      	ldr	r2, [pc, #160]	; (800b0bc <HAL_UART_MspInit+0x2ac>)
 800b01a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800b01c:	4b26      	ldr	r3, [pc, #152]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b01e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800b022:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b024:	4b24      	ldr	r3, [pc, #144]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b026:	2240      	movs	r2, #64	; 0x40
 800b028:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b02a:	4b23      	ldr	r3, [pc, #140]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b030:	4b21      	ldr	r3, [pc, #132]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b036:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b038:	4b1f      	ldr	r3, [pc, #124]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b03e:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b040:	2200      	movs	r2, #0
 800b042:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800b044:	4b1c      	ldr	r3, [pc, #112]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b046:	2200      	movs	r2, #0
 800b048:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b04a:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b050:	4b19      	ldr	r3, [pc, #100]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b052:	2200      	movs	r2, #0
 800b054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800b056:	4818      	ldr	r0, [pc, #96]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b058:	f7f6 f8f2 	bl	8001240 <HAL_DMA_Init>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <HAL_UART_MspInit+0x256>
      Error_Handler();
 800b062:	f7ff fde3 	bl	800ac2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a13      	ldr	r2, [pc, #76]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b06a:	631a      	str	r2, [r3, #48]	; 0x30
 800b06c:	4a12      	ldr	r2, [pc, #72]	; (800b0b8 <HAL_UART_MspInit+0x2a8>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800b072:	2200      	movs	r2, #0
 800b074:	2100      	movs	r1, #0
 800b076:	2047      	movs	r0, #71	; 0x47
 800b078:	f7f6 f8ab 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800b07c:	2047      	movs	r0, #71	; 0x47
 800b07e:	f7f6 f8c4 	bl	800120a <HAL_NVIC_EnableIRQ>
}
 800b082:	bf00      	nop
 800b084:	3730      	adds	r7, #48	; 0x30
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	40004400 	.word	0x40004400
 800b090:	40023800 	.word	0x40023800
 800b094:	40020c00 	.word	0x40020c00
 800b098:	200006ec 	.word	0x200006ec
 800b09c:	40026088 	.word	0x40026088
 800b0a0:	20000c80 	.word	0x20000c80
 800b0a4:	400260a0 	.word	0x400260a0
 800b0a8:	40011400 	.word	0x40011400
 800b0ac:	40020800 	.word	0x40020800
 800b0b0:	20000750 	.word	0x20000750
 800b0b4:	40026428 	.word	0x40026428
 800b0b8:	20000c20 	.word	0x20000c20
 800b0bc:	400264a0 	.word	0x400264a0

0800b0c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b0c4:	bf00      	nop
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b0d2:	e7fe      	b.n	800b0d2 <HardFault_Handler+0x4>

0800b0d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b0d8:	e7fe      	b.n	800b0d8 <MemManage_Handler+0x4>

0800b0da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b0de:	e7fe      	b.n	800b0de <BusFault_Handler+0x4>

0800b0e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b0e4:	e7fe      	b.n	800b0e4 <UsageFault_Handler+0x4>

0800b0e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b0ea:	bf00      	nop
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b0f8:	bf00      	nop
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b102:	b480      	push	{r7}
 800b104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b106:	bf00      	nop
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b114:	f7f5 ff3e 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b118:	bf00      	nop
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800b120:	4802      	ldr	r0, [pc, #8]	; (800b12c <DMA1_Stream5_IRQHandler+0x10>)
 800b122:	f7f6 fa25 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800b126:	bf00      	nop
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	200006ec 	.word	0x200006ec

0800b130 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800b134:	4802      	ldr	r0, [pc, #8]	; (800b140 <DMA1_Stream6_IRQHandler+0x10>)
 800b136:	f7f6 fa1b 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800b13a:	bf00      	nop
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000c80 	.word	0x20000c80

0800b144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b148:	4803      	ldr	r0, [pc, #12]	; (800b158 <USART2_IRQHandler+0x14>)
 800b14a:	f7f9 fb1b 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 800b14e:	4802      	ldr	r0, [pc, #8]	; (800b158 <USART2_IRQHandler+0x14>)
 800b150:	f000 f838 	bl	800b1c4 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 800b154:	bf00      	nop
 800b156:	bd80      	pop	{r7, pc}
 800b158:	20001360 	.word	0x20001360

0800b15c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800b160:	4802      	ldr	r0, [pc, #8]	; (800b16c <RTC_Alarm_IRQHandler+0x10>)
 800b162:	f7f8 f895 	bl	8003290 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800b166:	bf00      	nop
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	200010e8 	.word	0x200010e8

0800b170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b174:	4802      	ldr	r0, [pc, #8]	; (800b180 <TIM6_DAC_IRQHandler+0x10>)
 800b176:	f7f8 ff0e 	bl	8003f96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b17a:	bf00      	nop
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	2000110c 	.word	0x2000110c

0800b184 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800b188:	4802      	ldr	r0, [pc, #8]	; (800b194 <DMA2_Stream1_IRQHandler+0x10>)
 800b18a:	f7f6 f9f1 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800b18e:	bf00      	nop
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000750 	.word	0x20000750

0800b198 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800b19c:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <DMA2_Stream6_IRQHandler+0x10>)
 800b19e:	f7f6 f9e7 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b1a2:	bf00      	nop
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20000c20 	.word	0x20000c20

0800b1ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800b1b0:	4803      	ldr	r0, [pc, #12]	; (800b1c0 <USART6_IRQHandler+0x14>)
 800b1b2:	f7f9 fae7 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  USER_UART_IRQHandler(&huart6);
 800b1b6:	4802      	ldr	r0, [pc, #8]	; (800b1c0 <USART6_IRQHandler+0x14>)
 800b1b8:	f000 f804 	bl	800b1c4 <USER_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 800b1bc:	bf00      	nop
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	200012c4 	.word	0x200012c4

0800b1c4 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
	   if(USART6 == huart6.Instance)                                   //Determine whether it is serial port 1
 800b1cc:	4b1c      	ldr	r3, [pc, #112]	; (800b240 <USER_UART_IRQHandler+0x7c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a1c      	ldr	r2, [pc, #112]	; (800b244 <USER_UART_IRQHandler+0x80>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d115      	bne.n	800b202 <USER_UART_IRQHandler+0x3e>
	    {
	        if(RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 800b1d6:	4b1a      	ldr	r3, [pc, #104]	; (800b240 <USER_UART_IRQHandler+0x7c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0310 	and.w	r3, r3, #16
 800b1e0:	2b10      	cmp	r3, #16
 800b1e2:	d10e      	bne.n	800b202 <USER_UART_IRQHandler+0x3e>
	        {
	            __HAL_UART_CLEAR_IDLEFLAG(&huart6);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	4b15      	ldr	r3, [pc, #84]	; (800b240 <USER_UART_IRQHandler+0x7c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	4b13      	ldr	r3, [pc, #76]	; (800b240 <USER_UART_IRQHandler+0x7c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	60fb      	str	r3, [r7, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
	            //printf("\r\nUART1 Idle IQR Detected\r\n");
	            USER_UART6_IDLE_Callback(&huart);                          //Call interrupt handler
 800b1fa:	1d3b      	adds	r3, r7, #4
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fe fa4d 	bl	800969c <USER_UART6_IDLE_Callback>
	        }
	    }

	   if(USART2 == huart2.Instance)                                   //Determine whether it is serial port 1
 800b202:	4b11      	ldr	r3, [pc, #68]	; (800b248 <USER_UART_IRQHandler+0x84>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a11      	ldr	r2, [pc, #68]	; (800b24c <USER_UART_IRQHandler+0x88>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d115      	bne.n	800b238 <USER_UART_IRQHandler+0x74>
	    {
	        if(RESET != __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 800b20c:	4b0e      	ldr	r3, [pc, #56]	; (800b248 <USER_UART_IRQHandler+0x84>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0310 	and.w	r3, r3, #16
 800b216:	2b10      	cmp	r3, #16
 800b218:	d10e      	bne.n	800b238 <USER_UART_IRQHandler+0x74>
	        {
	            __HAL_UART_CLEAR_IDLEFLAG(&huart2);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 800b21a:	2300      	movs	r3, #0
 800b21c:	60bb      	str	r3, [r7, #8]
 800b21e:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <USER_UART_IRQHandler+0x84>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	60bb      	str	r3, [r7, #8]
 800b226:	4b08      	ldr	r3, [pc, #32]	; (800b248 <USER_UART_IRQHandler+0x84>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	68bb      	ldr	r3, [r7, #8]
	            //printf("\r\nUART1 Idle IQR Detected\r\n");
	            USER_UART2_IDLE_Callback(&huart);                          //Call interrupt handler
 800b230:	1d3b      	adds	r3, r7, #4
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe f96c 	bl	8009510 <USER_UART2_IDLE_Callback>
	        }
	    }
}
 800b238:	bf00      	nop
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	200012c4 	.word	0x200012c4
 800b244:	40011400 	.word	0x40011400
 800b248:	20001360 	.word	0x20001360
 800b24c:	40004400 	.word	0x40004400

0800b250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
	return 1;
 800b254:	2301      	movs	r3, #1
}
 800b256:	4618      	mov	r0, r3
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <_kill>:

int _kill(int pid, int sig)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b26a:	f000 f8ed 	bl	800b448 <__errno>
 800b26e:	4603      	mov	r3, r0
 800b270:	2216      	movs	r2, #22
 800b272:	601a      	str	r2, [r3, #0]
	return -1;
 800b274:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <_exit>:

void _exit (int status)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b288:	f04f 31ff 	mov.w	r1, #4294967295
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff ffe7 	bl	800b260 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b292:	e7fe      	b.n	800b292 <_exit+0x12>

0800b294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e00a      	b.n	800b2bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b2a6:	f3af 8000 	nop.w
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	60ba      	str	r2, [r7, #8]
 800b2b2:	b2ca      	uxtb	r2, r1
 800b2b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	dbf0      	blt.n	800b2a6 <_read+0x12>
	}

return len;
 800b2c4:	687b      	ldr	r3, [r7, #4]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]
 800b2de:	e009      	b.n	800b2f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	60ba      	str	r2, [r7, #8]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	dbf1      	blt.n	800b2e0 <_write+0x12>
	}
	return len;
 800b2fc:	687b      	ldr	r3, [r7, #4]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3718      	adds	r7, #24
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
	...

0800b308 <_sbrk>:

caddr_t _sbrk(int incr)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <_sbrk+0x50>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d102      	bne.n	800b31e <_sbrk+0x16>
		heap_end = &end;
 800b318:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <_sbrk+0x50>)
 800b31a:	4a10      	ldr	r2, [pc, #64]	; (800b35c <_sbrk+0x54>)
 800b31c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b31e:	4b0e      	ldr	r3, [pc, #56]	; (800b358 <_sbrk+0x50>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b324:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <_sbrk+0x50>)
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4413      	add	r3, r2
 800b32c:	466a      	mov	r2, sp
 800b32e:	4293      	cmp	r3, r2
 800b330:	d907      	bls.n	800b342 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b332:	f000 f889 	bl	800b448 <__errno>
 800b336:	4603      	mov	r3, r0
 800b338:	220c      	movs	r2, #12
 800b33a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b33c:	f04f 33ff 	mov.w	r3, #4294967295
 800b340:	e006      	b.n	800b350 <_sbrk+0x48>
	}

	heap_end += incr;
 800b342:	4b05      	ldr	r3, [pc, #20]	; (800b358 <_sbrk+0x50>)
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4413      	add	r3, r2
 800b34a:	4a03      	ldr	r2, [pc, #12]	; (800b358 <_sbrk+0x50>)
 800b34c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b34e:	68fb      	ldr	r3, [r7, #12]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	200006b4 	.word	0x200006b4
 800b35c:	200013c8 	.word	0x200013c8

0800b360 <_close>:

int _close(int file)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	return -1;
 800b368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b388:	605a      	str	r2, [r3, #4]
	return 0;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <_isatty>:

int _isatty(int file)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	return 1;
 800b3a0:	2301      	movs	r3, #1
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	60b9      	str	r1, [r7, #8]
 800b3b8:	607a      	str	r2, [r7, #4]
	return 0;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3cc:	4b08      	ldr	r3, [pc, #32]	; (800b3f0 <SystemInit+0x28>)
 800b3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d2:	4a07      	ldr	r2, [pc, #28]	; (800b3f0 <SystemInit+0x28>)
 800b3d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b3dc:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <SystemInit+0x28>)
 800b3de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b3e2:	609a      	str	r2, [r3, #8]
#endif
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	e000ed00 	.word	0xe000ed00

0800b3f4 <Reset_Handler>:
 800b3f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b42c <LoopFillZerobss+0x14>
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	e003      	b.n	800b404 <LoopCopyDataInit>

0800b3fc <CopyDataInit>:
 800b3fc:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <LoopFillZerobss+0x18>)
 800b3fe:	585b      	ldr	r3, [r3, r1]
 800b400:	5043      	str	r3, [r0, r1]
 800b402:	3104      	adds	r1, #4

0800b404 <LoopCopyDataInit>:
 800b404:	480b      	ldr	r0, [pc, #44]	; (800b434 <LoopFillZerobss+0x1c>)
 800b406:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <LoopFillZerobss+0x20>)
 800b408:	1842      	adds	r2, r0, r1
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d3f6      	bcc.n	800b3fc <CopyDataInit>
 800b40e:	4a0b      	ldr	r2, [pc, #44]	; (800b43c <LoopFillZerobss+0x24>)
 800b410:	e002      	b.n	800b418 <LoopFillZerobss>

0800b412 <FillZerobss>:
 800b412:	2300      	movs	r3, #0
 800b414:	f842 3b04 	str.w	r3, [r2], #4

0800b418 <LoopFillZerobss>:
 800b418:	4b09      	ldr	r3, [pc, #36]	; (800b440 <LoopFillZerobss+0x28>)
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d3f9      	bcc.n	800b412 <FillZerobss>
 800b41e:	f7ff ffd3 	bl	800b3c8 <SystemInit>
 800b422:	f000 f817 	bl	800b454 <__libc_init_array>
 800b426:	f7fe fb19 	bl	8009a5c <main>
 800b42a:	4770      	bx	lr
 800b42c:	20050000 	.word	0x20050000
 800b430:	08013a84 	.word	0x08013a84
 800b434:	20000000 	.word	0x20000000
 800b438:	20000660 	.word	0x20000660
 800b43c:	20000660 	.word	0x20000660
 800b440:	200013c4 	.word	0x200013c4

0800b444 <ADC_IRQHandler>:
 800b444:	e7fe      	b.n	800b444 <ADC_IRQHandler>
	...

0800b448 <__errno>:
 800b448:	4b01      	ldr	r3, [pc, #4]	; (800b450 <__errno+0x8>)
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	20000490 	.word	0x20000490

0800b454 <__libc_init_array>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	4d0d      	ldr	r5, [pc, #52]	; (800b48c <__libc_init_array+0x38>)
 800b458:	4c0d      	ldr	r4, [pc, #52]	; (800b490 <__libc_init_array+0x3c>)
 800b45a:	1b64      	subs	r4, r4, r5
 800b45c:	10a4      	asrs	r4, r4, #2
 800b45e:	2600      	movs	r6, #0
 800b460:	42a6      	cmp	r6, r4
 800b462:	d109      	bne.n	800b478 <__libc_init_array+0x24>
 800b464:	4d0b      	ldr	r5, [pc, #44]	; (800b494 <__libc_init_array+0x40>)
 800b466:	4c0c      	ldr	r4, [pc, #48]	; (800b498 <__libc_init_array+0x44>)
 800b468:	f002 feb6 	bl	800e1d8 <_init>
 800b46c:	1b64      	subs	r4, r4, r5
 800b46e:	10a4      	asrs	r4, r4, #2
 800b470:	2600      	movs	r6, #0
 800b472:	42a6      	cmp	r6, r4
 800b474:	d105      	bne.n	800b482 <__libc_init_array+0x2e>
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	f855 3b04 	ldr.w	r3, [r5], #4
 800b47c:	4798      	blx	r3
 800b47e:	3601      	adds	r6, #1
 800b480:	e7ee      	b.n	800b460 <__libc_init_array+0xc>
 800b482:	f855 3b04 	ldr.w	r3, [r5], #4
 800b486:	4798      	blx	r3
 800b488:	3601      	adds	r6, #1
 800b48a:	e7f2      	b.n	800b472 <__libc_init_array+0x1e>
 800b48c:	08013a7c 	.word	0x08013a7c
 800b490:	08013a7c 	.word	0x08013a7c
 800b494:	08013a7c 	.word	0x08013a7c
 800b498:	08013a80 	.word	0x08013a80

0800b49c <memcpy>:
 800b49c:	440a      	add	r2, r1
 800b49e:	4291      	cmp	r1, r2
 800b4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4a4:	d100      	bne.n	800b4a8 <memcpy+0xc>
 800b4a6:	4770      	bx	lr
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4b2:	4291      	cmp	r1, r2
 800b4b4:	d1f9      	bne.n	800b4aa <memcpy+0xe>
 800b4b6:	bd10      	pop	{r4, pc}

0800b4b8 <memset>:
 800b4b8:	4402      	add	r2, r0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d100      	bne.n	800b4c2 <memset+0xa>
 800b4c0:	4770      	bx	lr
 800b4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c6:	e7f9      	b.n	800b4bc <memset+0x4>

0800b4c8 <__cvt>:
 800b4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	ec55 4b10 	vmov	r4, r5, d0
 800b4d0:	2d00      	cmp	r5, #0
 800b4d2:	460e      	mov	r6, r1
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	bfbb      	ittet	lt
 800b4da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4de:	461d      	movlt	r5, r3
 800b4e0:	2300      	movge	r3, #0
 800b4e2:	232d      	movlt	r3, #45	; 0x2d
 800b4e4:	700b      	strb	r3, [r1, #0]
 800b4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b4ec:	4691      	mov	r9, r2
 800b4ee:	f023 0820 	bic.w	r8, r3, #32
 800b4f2:	bfbc      	itt	lt
 800b4f4:	4622      	movlt	r2, r4
 800b4f6:	4614      	movlt	r4, r2
 800b4f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4fc:	d005      	beq.n	800b50a <__cvt+0x42>
 800b4fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b502:	d100      	bne.n	800b506 <__cvt+0x3e>
 800b504:	3601      	adds	r6, #1
 800b506:	2102      	movs	r1, #2
 800b508:	e000      	b.n	800b50c <__cvt+0x44>
 800b50a:	2103      	movs	r1, #3
 800b50c:	ab03      	add	r3, sp, #12
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	ab02      	add	r3, sp, #8
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	ec45 4b10 	vmov	d0, r4, r5
 800b518:	4653      	mov	r3, sl
 800b51a:	4632      	mov	r2, r6
 800b51c:	f000 fcec 	bl	800bef8 <_dtoa_r>
 800b520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b524:	4607      	mov	r7, r0
 800b526:	d102      	bne.n	800b52e <__cvt+0x66>
 800b528:	f019 0f01 	tst.w	r9, #1
 800b52c:	d022      	beq.n	800b574 <__cvt+0xac>
 800b52e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b532:	eb07 0906 	add.w	r9, r7, r6
 800b536:	d110      	bne.n	800b55a <__cvt+0x92>
 800b538:	783b      	ldrb	r3, [r7, #0]
 800b53a:	2b30      	cmp	r3, #48	; 0x30
 800b53c:	d10a      	bne.n	800b554 <__cvt+0x8c>
 800b53e:	2200      	movs	r2, #0
 800b540:	2300      	movs	r3, #0
 800b542:	4620      	mov	r0, r4
 800b544:	4629      	mov	r1, r5
 800b546:	f7f5 fae7 	bl	8000b18 <__aeabi_dcmpeq>
 800b54a:	b918      	cbnz	r0, 800b554 <__cvt+0x8c>
 800b54c:	f1c6 0601 	rsb	r6, r6, #1
 800b550:	f8ca 6000 	str.w	r6, [sl]
 800b554:	f8da 3000 	ldr.w	r3, [sl]
 800b558:	4499      	add	r9, r3
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f7f5 fad9 	bl	8000b18 <__aeabi_dcmpeq>
 800b566:	b108      	cbz	r0, 800b56c <__cvt+0xa4>
 800b568:	f8cd 900c 	str.w	r9, [sp, #12]
 800b56c:	2230      	movs	r2, #48	; 0x30
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	454b      	cmp	r3, r9
 800b572:	d307      	bcc.n	800b584 <__cvt+0xbc>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b578:	1bdb      	subs	r3, r3, r7
 800b57a:	4638      	mov	r0, r7
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	b004      	add	sp, #16
 800b580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b584:	1c59      	adds	r1, r3, #1
 800b586:	9103      	str	r1, [sp, #12]
 800b588:	701a      	strb	r2, [r3, #0]
 800b58a:	e7f0      	b.n	800b56e <__cvt+0xa6>

0800b58c <__exponent>:
 800b58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b58e:	4603      	mov	r3, r0
 800b590:	2900      	cmp	r1, #0
 800b592:	bfb8      	it	lt
 800b594:	4249      	neglt	r1, r1
 800b596:	f803 2b02 	strb.w	r2, [r3], #2
 800b59a:	bfb4      	ite	lt
 800b59c:	222d      	movlt	r2, #45	; 0x2d
 800b59e:	222b      	movge	r2, #43	; 0x2b
 800b5a0:	2909      	cmp	r1, #9
 800b5a2:	7042      	strb	r2, [r0, #1]
 800b5a4:	dd2a      	ble.n	800b5fc <__exponent+0x70>
 800b5a6:	f10d 0407 	add.w	r4, sp, #7
 800b5aa:	46a4      	mov	ip, r4
 800b5ac:	270a      	movs	r7, #10
 800b5ae:	46a6      	mov	lr, r4
 800b5b0:	460a      	mov	r2, r1
 800b5b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5b6:	fb07 1516 	mls	r5, r7, r6, r1
 800b5ba:	3530      	adds	r5, #48	; 0x30
 800b5bc:	2a63      	cmp	r2, #99	; 0x63
 800b5be:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	dcf1      	bgt.n	800b5ae <__exponent+0x22>
 800b5ca:	3130      	adds	r1, #48	; 0x30
 800b5cc:	f1ae 0502 	sub.w	r5, lr, #2
 800b5d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5d4:	1c44      	adds	r4, r0, #1
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4561      	cmp	r1, ip
 800b5da:	d30a      	bcc.n	800b5f2 <__exponent+0x66>
 800b5dc:	f10d 0209 	add.w	r2, sp, #9
 800b5e0:	eba2 020e 	sub.w	r2, r2, lr
 800b5e4:	4565      	cmp	r5, ip
 800b5e6:	bf88      	it	hi
 800b5e8:	2200      	movhi	r2, #0
 800b5ea:	4413      	add	r3, r2
 800b5ec:	1a18      	subs	r0, r3, r0
 800b5ee:	b003      	add	sp, #12
 800b5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5fa:	e7ed      	b.n	800b5d8 <__exponent+0x4c>
 800b5fc:	2330      	movs	r3, #48	; 0x30
 800b5fe:	3130      	adds	r1, #48	; 0x30
 800b600:	7083      	strb	r3, [r0, #2]
 800b602:	70c1      	strb	r1, [r0, #3]
 800b604:	1d03      	adds	r3, r0, #4
 800b606:	e7f1      	b.n	800b5ec <__exponent+0x60>

0800b608 <_printf_float>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	ed2d 8b02 	vpush	{d8}
 800b610:	b08d      	sub	sp, #52	; 0x34
 800b612:	460c      	mov	r4, r1
 800b614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b618:	4616      	mov	r6, r2
 800b61a:	461f      	mov	r7, r3
 800b61c:	4605      	mov	r5, r0
 800b61e:	f001 fa57 	bl	800cad0 <_localeconv_r>
 800b622:	f8d0 a000 	ldr.w	sl, [r0]
 800b626:	4650      	mov	r0, sl
 800b628:	f7f4 fdfa 	bl	8000220 <strlen>
 800b62c:	2300      	movs	r3, #0
 800b62e:	930a      	str	r3, [sp, #40]	; 0x28
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	f8d8 3000 	ldr.w	r3, [r8]
 800b638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b63c:	3307      	adds	r3, #7
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	f103 0208 	add.w	r2, r3, #8
 800b646:	f8c8 2000 	str.w	r2, [r8]
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b652:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b656:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b65a:	9307      	str	r3, [sp, #28]
 800b65c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b660:	ee08 0a10 	vmov	s16, r0
 800b664:	4b9f      	ldr	r3, [pc, #636]	; (800b8e4 <_printf_float+0x2dc>)
 800b666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b66a:	f04f 32ff 	mov.w	r2, #4294967295
 800b66e:	f7f5 fa85 	bl	8000b7c <__aeabi_dcmpun>
 800b672:	bb88      	cbnz	r0, 800b6d8 <_printf_float+0xd0>
 800b674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b678:	4b9a      	ldr	r3, [pc, #616]	; (800b8e4 <_printf_float+0x2dc>)
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295
 800b67e:	f7f5 fa5f 	bl	8000b40 <__aeabi_dcmple>
 800b682:	bb48      	cbnz	r0, 800b6d8 <_printf_float+0xd0>
 800b684:	2200      	movs	r2, #0
 800b686:	2300      	movs	r3, #0
 800b688:	4640      	mov	r0, r8
 800b68a:	4649      	mov	r1, r9
 800b68c:	f7f5 fa4e 	bl	8000b2c <__aeabi_dcmplt>
 800b690:	b110      	cbz	r0, 800b698 <_printf_float+0x90>
 800b692:	232d      	movs	r3, #45	; 0x2d
 800b694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b698:	4b93      	ldr	r3, [pc, #588]	; (800b8e8 <_printf_float+0x2e0>)
 800b69a:	4894      	ldr	r0, [pc, #592]	; (800b8ec <_printf_float+0x2e4>)
 800b69c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b6a0:	bf94      	ite	ls
 800b6a2:	4698      	movls	r8, r3
 800b6a4:	4680      	movhi	r8, r0
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	9b05      	ldr	r3, [sp, #20]
 800b6ac:	f023 0204 	bic.w	r2, r3, #4
 800b6b0:	6022      	str	r2, [r4, #0]
 800b6b2:	f04f 0900 	mov.w	r9, #0
 800b6b6:	9700      	str	r7, [sp, #0]
 800b6b8:	4633      	mov	r3, r6
 800b6ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f000 f9d8 	bl	800ba74 <_printf_common>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	f040 8090 	bne.w	800b7ea <_printf_float+0x1e2>
 800b6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ce:	b00d      	add	sp, #52	; 0x34
 800b6d0:	ecbd 8b02 	vpop	{d8}
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d8:	4642      	mov	r2, r8
 800b6da:	464b      	mov	r3, r9
 800b6dc:	4640      	mov	r0, r8
 800b6de:	4649      	mov	r1, r9
 800b6e0:	f7f5 fa4c 	bl	8000b7c <__aeabi_dcmpun>
 800b6e4:	b140      	cbz	r0, 800b6f8 <_printf_float+0xf0>
 800b6e6:	464b      	mov	r3, r9
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	bfbc      	itt	lt
 800b6ec:	232d      	movlt	r3, #45	; 0x2d
 800b6ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6f2:	487f      	ldr	r0, [pc, #508]	; (800b8f0 <_printf_float+0x2e8>)
 800b6f4:	4b7f      	ldr	r3, [pc, #508]	; (800b8f4 <_printf_float+0x2ec>)
 800b6f6:	e7d1      	b.n	800b69c <_printf_float+0x94>
 800b6f8:	6863      	ldr	r3, [r4, #4]
 800b6fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b6fe:	9206      	str	r2, [sp, #24]
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	d13f      	bne.n	800b784 <_printf_float+0x17c>
 800b704:	2306      	movs	r3, #6
 800b706:	6063      	str	r3, [r4, #4]
 800b708:	9b05      	ldr	r3, [sp, #20]
 800b70a:	6861      	ldr	r1, [r4, #4]
 800b70c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b710:	2300      	movs	r3, #0
 800b712:	9303      	str	r3, [sp, #12]
 800b714:	ab0a      	add	r3, sp, #40	; 0x28
 800b716:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b71a:	ab09      	add	r3, sp, #36	; 0x24
 800b71c:	ec49 8b10 	vmov	d0, r8, r9
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	6022      	str	r2, [r4, #0]
 800b724:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b728:	4628      	mov	r0, r5
 800b72a:	f7ff fecd 	bl	800b4c8 <__cvt>
 800b72e:	9b06      	ldr	r3, [sp, #24]
 800b730:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b732:	2b47      	cmp	r3, #71	; 0x47
 800b734:	4680      	mov	r8, r0
 800b736:	d108      	bne.n	800b74a <_printf_float+0x142>
 800b738:	1cc8      	adds	r0, r1, #3
 800b73a:	db02      	blt.n	800b742 <_printf_float+0x13a>
 800b73c:	6863      	ldr	r3, [r4, #4]
 800b73e:	4299      	cmp	r1, r3
 800b740:	dd41      	ble.n	800b7c6 <_printf_float+0x1be>
 800b742:	f1ab 0b02 	sub.w	fp, fp, #2
 800b746:	fa5f fb8b 	uxtb.w	fp, fp
 800b74a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b74e:	d820      	bhi.n	800b792 <_printf_float+0x18a>
 800b750:	3901      	subs	r1, #1
 800b752:	465a      	mov	r2, fp
 800b754:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b758:	9109      	str	r1, [sp, #36]	; 0x24
 800b75a:	f7ff ff17 	bl	800b58c <__exponent>
 800b75e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b760:	1813      	adds	r3, r2, r0
 800b762:	2a01      	cmp	r2, #1
 800b764:	4681      	mov	r9, r0
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	dc02      	bgt.n	800b770 <_printf_float+0x168>
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	07d2      	lsls	r2, r2, #31
 800b76e:	d501      	bpl.n	800b774 <_printf_float+0x16c>
 800b770:	3301      	adds	r3, #1
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d09c      	beq.n	800b6b6 <_printf_float+0xae>
 800b77c:	232d      	movs	r3, #45	; 0x2d
 800b77e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b782:	e798      	b.n	800b6b6 <_printf_float+0xae>
 800b784:	9a06      	ldr	r2, [sp, #24]
 800b786:	2a47      	cmp	r2, #71	; 0x47
 800b788:	d1be      	bne.n	800b708 <_printf_float+0x100>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1bc      	bne.n	800b708 <_printf_float+0x100>
 800b78e:	2301      	movs	r3, #1
 800b790:	e7b9      	b.n	800b706 <_printf_float+0xfe>
 800b792:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b796:	d118      	bne.n	800b7ca <_printf_float+0x1c2>
 800b798:	2900      	cmp	r1, #0
 800b79a:	6863      	ldr	r3, [r4, #4]
 800b79c:	dd0b      	ble.n	800b7b6 <_printf_float+0x1ae>
 800b79e:	6121      	str	r1, [r4, #16]
 800b7a0:	b913      	cbnz	r3, 800b7a8 <_printf_float+0x1a0>
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	07d0      	lsls	r0, r2, #31
 800b7a6:	d502      	bpl.n	800b7ae <_printf_float+0x1a6>
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	440b      	add	r3, r1
 800b7ac:	6123      	str	r3, [r4, #16]
 800b7ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7b0:	f04f 0900 	mov.w	r9, #0
 800b7b4:	e7de      	b.n	800b774 <_printf_float+0x16c>
 800b7b6:	b913      	cbnz	r3, 800b7be <_printf_float+0x1b6>
 800b7b8:	6822      	ldr	r2, [r4, #0]
 800b7ba:	07d2      	lsls	r2, r2, #31
 800b7bc:	d501      	bpl.n	800b7c2 <_printf_float+0x1ba>
 800b7be:	3302      	adds	r3, #2
 800b7c0:	e7f4      	b.n	800b7ac <_printf_float+0x1a4>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e7f2      	b.n	800b7ac <_printf_float+0x1a4>
 800b7c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7cc:	4299      	cmp	r1, r3
 800b7ce:	db05      	blt.n	800b7dc <_printf_float+0x1d4>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	6121      	str	r1, [r4, #16]
 800b7d4:	07d8      	lsls	r0, r3, #31
 800b7d6:	d5ea      	bpl.n	800b7ae <_printf_float+0x1a6>
 800b7d8:	1c4b      	adds	r3, r1, #1
 800b7da:	e7e7      	b.n	800b7ac <_printf_float+0x1a4>
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	bfd4      	ite	le
 800b7e0:	f1c1 0202 	rsble	r2, r1, #2
 800b7e4:	2201      	movgt	r2, #1
 800b7e6:	4413      	add	r3, r2
 800b7e8:	e7e0      	b.n	800b7ac <_printf_float+0x1a4>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	055a      	lsls	r2, r3, #21
 800b7ee:	d407      	bmi.n	800b800 <_printf_float+0x1f8>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	4642      	mov	r2, r8
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	47b8      	blx	r7
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	d12c      	bne.n	800b858 <_printf_float+0x250>
 800b7fe:	e764      	b.n	800b6ca <_printf_float+0xc2>
 800b800:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b804:	f240 80e0 	bls.w	800b9c8 <_printf_float+0x3c0>
 800b808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	f7f5 f982 	bl	8000b18 <__aeabi_dcmpeq>
 800b814:	2800      	cmp	r0, #0
 800b816:	d034      	beq.n	800b882 <_printf_float+0x27a>
 800b818:	4a37      	ldr	r2, [pc, #220]	; (800b8f8 <_printf_float+0x2f0>)
 800b81a:	2301      	movs	r3, #1
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	47b8      	blx	r7
 800b822:	3001      	adds	r0, #1
 800b824:	f43f af51 	beq.w	800b6ca <_printf_float+0xc2>
 800b828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b82c:	429a      	cmp	r2, r3
 800b82e:	db02      	blt.n	800b836 <_printf_float+0x22e>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	07d8      	lsls	r0, r3, #31
 800b834:	d510      	bpl.n	800b858 <_printf_float+0x250>
 800b836:	ee18 3a10 	vmov	r3, s16
 800b83a:	4652      	mov	r2, sl
 800b83c:	4631      	mov	r1, r6
 800b83e:	4628      	mov	r0, r5
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	f43f af41 	beq.w	800b6ca <_printf_float+0xc2>
 800b848:	f04f 0800 	mov.w	r8, #0
 800b84c:	f104 091a 	add.w	r9, r4, #26
 800b850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b852:	3b01      	subs	r3, #1
 800b854:	4543      	cmp	r3, r8
 800b856:	dc09      	bgt.n	800b86c <_printf_float+0x264>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	079b      	lsls	r3, r3, #30
 800b85c:	f100 8105 	bmi.w	800ba6a <_printf_float+0x462>
 800b860:	68e0      	ldr	r0, [r4, #12]
 800b862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b864:	4298      	cmp	r0, r3
 800b866:	bfb8      	it	lt
 800b868:	4618      	movlt	r0, r3
 800b86a:	e730      	b.n	800b6ce <_printf_float+0xc6>
 800b86c:	2301      	movs	r3, #1
 800b86e:	464a      	mov	r2, r9
 800b870:	4631      	mov	r1, r6
 800b872:	4628      	mov	r0, r5
 800b874:	47b8      	blx	r7
 800b876:	3001      	adds	r0, #1
 800b878:	f43f af27 	beq.w	800b6ca <_printf_float+0xc2>
 800b87c:	f108 0801 	add.w	r8, r8, #1
 800b880:	e7e6      	b.n	800b850 <_printf_float+0x248>
 800b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b884:	2b00      	cmp	r3, #0
 800b886:	dc39      	bgt.n	800b8fc <_printf_float+0x2f4>
 800b888:	4a1b      	ldr	r2, [pc, #108]	; (800b8f8 <_printf_float+0x2f0>)
 800b88a:	2301      	movs	r3, #1
 800b88c:	4631      	mov	r1, r6
 800b88e:	4628      	mov	r0, r5
 800b890:	47b8      	blx	r7
 800b892:	3001      	adds	r0, #1
 800b894:	f43f af19 	beq.w	800b6ca <_printf_float+0xc2>
 800b898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b89c:	4313      	orrs	r3, r2
 800b89e:	d102      	bne.n	800b8a6 <_printf_float+0x29e>
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	07d9      	lsls	r1, r3, #31
 800b8a4:	d5d8      	bpl.n	800b858 <_printf_float+0x250>
 800b8a6:	ee18 3a10 	vmov	r3, s16
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	47b8      	blx	r7
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f43f af09 	beq.w	800b6ca <_printf_float+0xc2>
 800b8b8:	f04f 0900 	mov.w	r9, #0
 800b8bc:	f104 0a1a 	add.w	sl, r4, #26
 800b8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c2:	425b      	negs	r3, r3
 800b8c4:	454b      	cmp	r3, r9
 800b8c6:	dc01      	bgt.n	800b8cc <_printf_float+0x2c4>
 800b8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ca:	e792      	b.n	800b7f2 <_printf_float+0x1ea>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	4652      	mov	r2, sl
 800b8d0:	4631      	mov	r1, r6
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	47b8      	blx	r7
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	f43f aef7 	beq.w	800b6ca <_printf_float+0xc2>
 800b8dc:	f109 0901 	add.w	r9, r9, #1
 800b8e0:	e7ee      	b.n	800b8c0 <_printf_float+0x2b8>
 800b8e2:	bf00      	nop
 800b8e4:	7fefffff 	.word	0x7fefffff
 800b8e8:	08013694 	.word	0x08013694
 800b8ec:	08013698 	.word	0x08013698
 800b8f0:	080136a0 	.word	0x080136a0
 800b8f4:	0801369c 	.word	0x0801369c
 800b8f8:	080136a4 	.word	0x080136a4
 800b8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b900:	429a      	cmp	r2, r3
 800b902:	bfa8      	it	ge
 800b904:	461a      	movge	r2, r3
 800b906:	2a00      	cmp	r2, #0
 800b908:	4691      	mov	r9, r2
 800b90a:	dc37      	bgt.n	800b97c <_printf_float+0x374>
 800b90c:	f04f 0b00 	mov.w	fp, #0
 800b910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b914:	f104 021a 	add.w	r2, r4, #26
 800b918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	eba3 0309 	sub.w	r3, r3, r9
 800b920:	455b      	cmp	r3, fp
 800b922:	dc33      	bgt.n	800b98c <_printf_float+0x384>
 800b924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b928:	429a      	cmp	r2, r3
 800b92a:	db3b      	blt.n	800b9a4 <_printf_float+0x39c>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	07da      	lsls	r2, r3, #31
 800b930:	d438      	bmi.n	800b9a4 <_printf_float+0x39c>
 800b932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b934:	9b05      	ldr	r3, [sp, #20]
 800b936:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	eba2 0901 	sub.w	r9, r2, r1
 800b93e:	4599      	cmp	r9, r3
 800b940:	bfa8      	it	ge
 800b942:	4699      	movge	r9, r3
 800b944:	f1b9 0f00 	cmp.w	r9, #0
 800b948:	dc35      	bgt.n	800b9b6 <_printf_float+0x3ae>
 800b94a:	f04f 0800 	mov.w	r8, #0
 800b94e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b952:	f104 0a1a 	add.w	sl, r4, #26
 800b956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b95a:	1a9b      	subs	r3, r3, r2
 800b95c:	eba3 0309 	sub.w	r3, r3, r9
 800b960:	4543      	cmp	r3, r8
 800b962:	f77f af79 	ble.w	800b858 <_printf_float+0x250>
 800b966:	2301      	movs	r3, #1
 800b968:	4652      	mov	r2, sl
 800b96a:	4631      	mov	r1, r6
 800b96c:	4628      	mov	r0, r5
 800b96e:	47b8      	blx	r7
 800b970:	3001      	adds	r0, #1
 800b972:	f43f aeaa 	beq.w	800b6ca <_printf_float+0xc2>
 800b976:	f108 0801 	add.w	r8, r8, #1
 800b97a:	e7ec      	b.n	800b956 <_printf_float+0x34e>
 800b97c:	4613      	mov	r3, r2
 800b97e:	4631      	mov	r1, r6
 800b980:	4642      	mov	r2, r8
 800b982:	4628      	mov	r0, r5
 800b984:	47b8      	blx	r7
 800b986:	3001      	adds	r0, #1
 800b988:	d1c0      	bne.n	800b90c <_printf_float+0x304>
 800b98a:	e69e      	b.n	800b6ca <_printf_float+0xc2>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4631      	mov	r1, r6
 800b990:	4628      	mov	r0, r5
 800b992:	9205      	str	r2, [sp, #20]
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	f43f ae97 	beq.w	800b6ca <_printf_float+0xc2>
 800b99c:	9a05      	ldr	r2, [sp, #20]
 800b99e:	f10b 0b01 	add.w	fp, fp, #1
 800b9a2:	e7b9      	b.n	800b918 <_printf_float+0x310>
 800b9a4:	ee18 3a10 	vmov	r3, s16
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	47b8      	blx	r7
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d1be      	bne.n	800b932 <_printf_float+0x32a>
 800b9b4:	e689      	b.n	800b6ca <_printf_float+0xc2>
 800b9b6:	9a05      	ldr	r2, [sp, #20]
 800b9b8:	464b      	mov	r3, r9
 800b9ba:	4442      	add	r2, r8
 800b9bc:	4631      	mov	r1, r6
 800b9be:	4628      	mov	r0, r5
 800b9c0:	47b8      	blx	r7
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d1c1      	bne.n	800b94a <_printf_float+0x342>
 800b9c6:	e680      	b.n	800b6ca <_printf_float+0xc2>
 800b9c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9ca:	2a01      	cmp	r2, #1
 800b9cc:	dc01      	bgt.n	800b9d2 <_printf_float+0x3ca>
 800b9ce:	07db      	lsls	r3, r3, #31
 800b9d0:	d538      	bpl.n	800ba44 <_printf_float+0x43c>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4628      	mov	r0, r5
 800b9da:	47b8      	blx	r7
 800b9dc:	3001      	adds	r0, #1
 800b9de:	f43f ae74 	beq.w	800b6ca <_printf_float+0xc2>
 800b9e2:	ee18 3a10 	vmov	r3, s16
 800b9e6:	4652      	mov	r2, sl
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b8      	blx	r7
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	f43f ae6b 	beq.w	800b6ca <_printf_float+0xc2>
 800b9f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f7f5 f88c 	bl	8000b18 <__aeabi_dcmpeq>
 800ba00:	b9d8      	cbnz	r0, 800ba3a <_printf_float+0x432>
 800ba02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba04:	f108 0201 	add.w	r2, r8, #1
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	47b8      	blx	r7
 800ba10:	3001      	adds	r0, #1
 800ba12:	d10e      	bne.n	800ba32 <_printf_float+0x42a>
 800ba14:	e659      	b.n	800b6ca <_printf_float+0xc2>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4652      	mov	r2, sl
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f ae52 	beq.w	800b6ca <_printf_float+0xc2>
 800ba26:	f108 0801 	add.w	r8, r8, #1
 800ba2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	4543      	cmp	r3, r8
 800ba30:	dcf1      	bgt.n	800ba16 <_printf_float+0x40e>
 800ba32:	464b      	mov	r3, r9
 800ba34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba38:	e6dc      	b.n	800b7f4 <_printf_float+0x1ec>
 800ba3a:	f04f 0800 	mov.w	r8, #0
 800ba3e:	f104 0a1a 	add.w	sl, r4, #26
 800ba42:	e7f2      	b.n	800ba2a <_printf_float+0x422>
 800ba44:	2301      	movs	r3, #1
 800ba46:	4642      	mov	r2, r8
 800ba48:	e7df      	b.n	800ba0a <_printf_float+0x402>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	464a      	mov	r2, r9
 800ba4e:	4631      	mov	r1, r6
 800ba50:	4628      	mov	r0, r5
 800ba52:	47b8      	blx	r7
 800ba54:	3001      	adds	r0, #1
 800ba56:	f43f ae38 	beq.w	800b6ca <_printf_float+0xc2>
 800ba5a:	f108 0801 	add.w	r8, r8, #1
 800ba5e:	68e3      	ldr	r3, [r4, #12]
 800ba60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba62:	1a5b      	subs	r3, r3, r1
 800ba64:	4543      	cmp	r3, r8
 800ba66:	dcf0      	bgt.n	800ba4a <_printf_float+0x442>
 800ba68:	e6fa      	b.n	800b860 <_printf_float+0x258>
 800ba6a:	f04f 0800 	mov.w	r8, #0
 800ba6e:	f104 0919 	add.w	r9, r4, #25
 800ba72:	e7f4      	b.n	800ba5e <_printf_float+0x456>

0800ba74 <_printf_common>:
 800ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba78:	4616      	mov	r6, r2
 800ba7a:	4699      	mov	r9, r3
 800ba7c:	688a      	ldr	r2, [r1, #8]
 800ba7e:	690b      	ldr	r3, [r1, #16]
 800ba80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba84:	4293      	cmp	r3, r2
 800ba86:	bfb8      	it	lt
 800ba88:	4613      	movlt	r3, r2
 800ba8a:	6033      	str	r3, [r6, #0]
 800ba8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba90:	4607      	mov	r7, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	b10a      	cbz	r2, 800ba9a <_printf_common+0x26>
 800ba96:	3301      	adds	r3, #1
 800ba98:	6033      	str	r3, [r6, #0]
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	0699      	lsls	r1, r3, #26
 800ba9e:	bf42      	ittt	mi
 800baa0:	6833      	ldrmi	r3, [r6, #0]
 800baa2:	3302      	addmi	r3, #2
 800baa4:	6033      	strmi	r3, [r6, #0]
 800baa6:	6825      	ldr	r5, [r4, #0]
 800baa8:	f015 0506 	ands.w	r5, r5, #6
 800baac:	d106      	bne.n	800babc <_printf_common+0x48>
 800baae:	f104 0a19 	add.w	sl, r4, #25
 800bab2:	68e3      	ldr	r3, [r4, #12]
 800bab4:	6832      	ldr	r2, [r6, #0]
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	42ab      	cmp	r3, r5
 800baba:	dc26      	bgt.n	800bb0a <_printf_common+0x96>
 800babc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bac0:	1e13      	subs	r3, r2, #0
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	bf18      	it	ne
 800bac6:	2301      	movne	r3, #1
 800bac8:	0692      	lsls	r2, r2, #26
 800baca:	d42b      	bmi.n	800bb24 <_printf_common+0xb0>
 800bacc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad0:	4649      	mov	r1, r9
 800bad2:	4638      	mov	r0, r7
 800bad4:	47c0      	blx	r8
 800bad6:	3001      	adds	r0, #1
 800bad8:	d01e      	beq.n	800bb18 <_printf_common+0xa4>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	68e5      	ldr	r5, [r4, #12]
 800bade:	6832      	ldr	r2, [r6, #0]
 800bae0:	f003 0306 	and.w	r3, r3, #6
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	bf08      	it	eq
 800bae8:	1aad      	subeq	r5, r5, r2
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	6922      	ldr	r2, [r4, #16]
 800baee:	bf0c      	ite	eq
 800baf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baf4:	2500      	movne	r5, #0
 800baf6:	4293      	cmp	r3, r2
 800baf8:	bfc4      	itt	gt
 800bafa:	1a9b      	subgt	r3, r3, r2
 800bafc:	18ed      	addgt	r5, r5, r3
 800bafe:	2600      	movs	r6, #0
 800bb00:	341a      	adds	r4, #26
 800bb02:	42b5      	cmp	r5, r6
 800bb04:	d11a      	bne.n	800bb3c <_printf_common+0xc8>
 800bb06:	2000      	movs	r0, #0
 800bb08:	e008      	b.n	800bb1c <_printf_common+0xa8>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4638      	mov	r0, r7
 800bb12:	47c0      	blx	r8
 800bb14:	3001      	adds	r0, #1
 800bb16:	d103      	bne.n	800bb20 <_printf_common+0xac>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb20:	3501      	adds	r5, #1
 800bb22:	e7c6      	b.n	800bab2 <_printf_common+0x3e>
 800bb24:	18e1      	adds	r1, r4, r3
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	2030      	movs	r0, #48	; 0x30
 800bb2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb2e:	4422      	add	r2, r4
 800bb30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb38:	3302      	adds	r3, #2
 800bb3a:	e7c7      	b.n	800bacc <_printf_common+0x58>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	4622      	mov	r2, r4
 800bb40:	4649      	mov	r1, r9
 800bb42:	4638      	mov	r0, r7
 800bb44:	47c0      	blx	r8
 800bb46:	3001      	adds	r0, #1
 800bb48:	d0e6      	beq.n	800bb18 <_printf_common+0xa4>
 800bb4a:	3601      	adds	r6, #1
 800bb4c:	e7d9      	b.n	800bb02 <_printf_common+0x8e>
	...

0800bb50 <_printf_i>:
 800bb50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb54:	460c      	mov	r4, r1
 800bb56:	4691      	mov	r9, r2
 800bb58:	7e27      	ldrb	r7, [r4, #24]
 800bb5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb5c:	2f78      	cmp	r7, #120	; 0x78
 800bb5e:	4680      	mov	r8, r0
 800bb60:	469a      	mov	sl, r3
 800bb62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb66:	d807      	bhi.n	800bb78 <_printf_i+0x28>
 800bb68:	2f62      	cmp	r7, #98	; 0x62
 800bb6a:	d80a      	bhi.n	800bb82 <_printf_i+0x32>
 800bb6c:	2f00      	cmp	r7, #0
 800bb6e:	f000 80d8 	beq.w	800bd22 <_printf_i+0x1d2>
 800bb72:	2f58      	cmp	r7, #88	; 0x58
 800bb74:	f000 80a3 	beq.w	800bcbe <_printf_i+0x16e>
 800bb78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb80:	e03a      	b.n	800bbf8 <_printf_i+0xa8>
 800bb82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb86:	2b15      	cmp	r3, #21
 800bb88:	d8f6      	bhi.n	800bb78 <_printf_i+0x28>
 800bb8a:	a001      	add	r0, pc, #4	; (adr r0, 800bb90 <_printf_i+0x40>)
 800bb8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb90:	0800bbe9 	.word	0x0800bbe9
 800bb94:	0800bbfd 	.word	0x0800bbfd
 800bb98:	0800bb79 	.word	0x0800bb79
 800bb9c:	0800bb79 	.word	0x0800bb79
 800bba0:	0800bb79 	.word	0x0800bb79
 800bba4:	0800bb79 	.word	0x0800bb79
 800bba8:	0800bbfd 	.word	0x0800bbfd
 800bbac:	0800bb79 	.word	0x0800bb79
 800bbb0:	0800bb79 	.word	0x0800bb79
 800bbb4:	0800bb79 	.word	0x0800bb79
 800bbb8:	0800bb79 	.word	0x0800bb79
 800bbbc:	0800bd09 	.word	0x0800bd09
 800bbc0:	0800bc2d 	.word	0x0800bc2d
 800bbc4:	0800bceb 	.word	0x0800bceb
 800bbc8:	0800bb79 	.word	0x0800bb79
 800bbcc:	0800bb79 	.word	0x0800bb79
 800bbd0:	0800bd2b 	.word	0x0800bd2b
 800bbd4:	0800bb79 	.word	0x0800bb79
 800bbd8:	0800bc2d 	.word	0x0800bc2d
 800bbdc:	0800bb79 	.word	0x0800bb79
 800bbe0:	0800bb79 	.word	0x0800bb79
 800bbe4:	0800bcf3 	.word	0x0800bcf3
 800bbe8:	680b      	ldr	r3, [r1, #0]
 800bbea:	1d1a      	adds	r2, r3, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	600a      	str	r2, [r1, #0]
 800bbf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e0a3      	b.n	800bd44 <_printf_i+0x1f4>
 800bbfc:	6825      	ldr	r5, [r4, #0]
 800bbfe:	6808      	ldr	r0, [r1, #0]
 800bc00:	062e      	lsls	r6, r5, #24
 800bc02:	f100 0304 	add.w	r3, r0, #4
 800bc06:	d50a      	bpl.n	800bc1e <_printf_i+0xce>
 800bc08:	6805      	ldr	r5, [r0, #0]
 800bc0a:	600b      	str	r3, [r1, #0]
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	da03      	bge.n	800bc18 <_printf_i+0xc8>
 800bc10:	232d      	movs	r3, #45	; 0x2d
 800bc12:	426d      	negs	r5, r5
 800bc14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc18:	485e      	ldr	r0, [pc, #376]	; (800bd94 <_printf_i+0x244>)
 800bc1a:	230a      	movs	r3, #10
 800bc1c:	e019      	b.n	800bc52 <_printf_i+0x102>
 800bc1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc22:	6805      	ldr	r5, [r0, #0]
 800bc24:	600b      	str	r3, [r1, #0]
 800bc26:	bf18      	it	ne
 800bc28:	b22d      	sxthne	r5, r5
 800bc2a:	e7ef      	b.n	800bc0c <_printf_i+0xbc>
 800bc2c:	680b      	ldr	r3, [r1, #0]
 800bc2e:	6825      	ldr	r5, [r4, #0]
 800bc30:	1d18      	adds	r0, r3, #4
 800bc32:	6008      	str	r0, [r1, #0]
 800bc34:	0628      	lsls	r0, r5, #24
 800bc36:	d501      	bpl.n	800bc3c <_printf_i+0xec>
 800bc38:	681d      	ldr	r5, [r3, #0]
 800bc3a:	e002      	b.n	800bc42 <_printf_i+0xf2>
 800bc3c:	0669      	lsls	r1, r5, #25
 800bc3e:	d5fb      	bpl.n	800bc38 <_printf_i+0xe8>
 800bc40:	881d      	ldrh	r5, [r3, #0]
 800bc42:	4854      	ldr	r0, [pc, #336]	; (800bd94 <_printf_i+0x244>)
 800bc44:	2f6f      	cmp	r7, #111	; 0x6f
 800bc46:	bf0c      	ite	eq
 800bc48:	2308      	moveq	r3, #8
 800bc4a:	230a      	movne	r3, #10
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc52:	6866      	ldr	r6, [r4, #4]
 800bc54:	60a6      	str	r6, [r4, #8]
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	bfa2      	ittt	ge
 800bc5a:	6821      	ldrge	r1, [r4, #0]
 800bc5c:	f021 0104 	bicge.w	r1, r1, #4
 800bc60:	6021      	strge	r1, [r4, #0]
 800bc62:	b90d      	cbnz	r5, 800bc68 <_printf_i+0x118>
 800bc64:	2e00      	cmp	r6, #0
 800bc66:	d04d      	beq.n	800bd04 <_printf_i+0x1b4>
 800bc68:	4616      	mov	r6, r2
 800bc6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc6e:	fb03 5711 	mls	r7, r3, r1, r5
 800bc72:	5dc7      	ldrb	r7, [r0, r7]
 800bc74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc78:	462f      	mov	r7, r5
 800bc7a:	42bb      	cmp	r3, r7
 800bc7c:	460d      	mov	r5, r1
 800bc7e:	d9f4      	bls.n	800bc6a <_printf_i+0x11a>
 800bc80:	2b08      	cmp	r3, #8
 800bc82:	d10b      	bne.n	800bc9c <_printf_i+0x14c>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	07df      	lsls	r7, r3, #31
 800bc88:	d508      	bpl.n	800bc9c <_printf_i+0x14c>
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	6861      	ldr	r1, [r4, #4]
 800bc8e:	4299      	cmp	r1, r3
 800bc90:	bfde      	ittt	le
 800bc92:	2330      	movle	r3, #48	; 0x30
 800bc94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc9c:	1b92      	subs	r2, r2, r6
 800bc9e:	6122      	str	r2, [r4, #16]
 800bca0:	f8cd a000 	str.w	sl, [sp]
 800bca4:	464b      	mov	r3, r9
 800bca6:	aa03      	add	r2, sp, #12
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4640      	mov	r0, r8
 800bcac:	f7ff fee2 	bl	800ba74 <_printf_common>
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	d14c      	bne.n	800bd4e <_printf_i+0x1fe>
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	b004      	add	sp, #16
 800bcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcbe:	4835      	ldr	r0, [pc, #212]	; (800bd94 <_printf_i+0x244>)
 800bcc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	680e      	ldr	r6, [r1, #0]
 800bcc8:	061f      	lsls	r7, r3, #24
 800bcca:	f856 5b04 	ldr.w	r5, [r6], #4
 800bcce:	600e      	str	r6, [r1, #0]
 800bcd0:	d514      	bpl.n	800bcfc <_printf_i+0x1ac>
 800bcd2:	07d9      	lsls	r1, r3, #31
 800bcd4:	bf44      	itt	mi
 800bcd6:	f043 0320 	orrmi.w	r3, r3, #32
 800bcda:	6023      	strmi	r3, [r4, #0]
 800bcdc:	b91d      	cbnz	r5, 800bce6 <_printf_i+0x196>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	f023 0320 	bic.w	r3, r3, #32
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	2310      	movs	r3, #16
 800bce8:	e7b0      	b.n	800bc4c <_printf_i+0xfc>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	f043 0320 	orr.w	r3, r3, #32
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	2378      	movs	r3, #120	; 0x78
 800bcf4:	4828      	ldr	r0, [pc, #160]	; (800bd98 <_printf_i+0x248>)
 800bcf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcfa:	e7e3      	b.n	800bcc4 <_printf_i+0x174>
 800bcfc:	065e      	lsls	r6, r3, #25
 800bcfe:	bf48      	it	mi
 800bd00:	b2ad      	uxthmi	r5, r5
 800bd02:	e7e6      	b.n	800bcd2 <_printf_i+0x182>
 800bd04:	4616      	mov	r6, r2
 800bd06:	e7bb      	b.n	800bc80 <_printf_i+0x130>
 800bd08:	680b      	ldr	r3, [r1, #0]
 800bd0a:	6826      	ldr	r6, [r4, #0]
 800bd0c:	6960      	ldr	r0, [r4, #20]
 800bd0e:	1d1d      	adds	r5, r3, #4
 800bd10:	600d      	str	r5, [r1, #0]
 800bd12:	0635      	lsls	r5, r6, #24
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	d501      	bpl.n	800bd1c <_printf_i+0x1cc>
 800bd18:	6018      	str	r0, [r3, #0]
 800bd1a:	e002      	b.n	800bd22 <_printf_i+0x1d2>
 800bd1c:	0671      	lsls	r1, r6, #25
 800bd1e:	d5fb      	bpl.n	800bd18 <_printf_i+0x1c8>
 800bd20:	8018      	strh	r0, [r3, #0]
 800bd22:	2300      	movs	r3, #0
 800bd24:	6123      	str	r3, [r4, #16]
 800bd26:	4616      	mov	r6, r2
 800bd28:	e7ba      	b.n	800bca0 <_printf_i+0x150>
 800bd2a:	680b      	ldr	r3, [r1, #0]
 800bd2c:	1d1a      	adds	r2, r3, #4
 800bd2e:	600a      	str	r2, [r1, #0]
 800bd30:	681e      	ldr	r6, [r3, #0]
 800bd32:	6862      	ldr	r2, [r4, #4]
 800bd34:	2100      	movs	r1, #0
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7f4 fa7a 	bl	8000230 <memchr>
 800bd3c:	b108      	cbz	r0, 800bd42 <_printf_i+0x1f2>
 800bd3e:	1b80      	subs	r0, r0, r6
 800bd40:	6060      	str	r0, [r4, #4]
 800bd42:	6863      	ldr	r3, [r4, #4]
 800bd44:	6123      	str	r3, [r4, #16]
 800bd46:	2300      	movs	r3, #0
 800bd48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd4c:	e7a8      	b.n	800bca0 <_printf_i+0x150>
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	4632      	mov	r2, r6
 800bd52:	4649      	mov	r1, r9
 800bd54:	4640      	mov	r0, r8
 800bd56:	47d0      	blx	sl
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d0ab      	beq.n	800bcb4 <_printf_i+0x164>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	079b      	lsls	r3, r3, #30
 800bd60:	d413      	bmi.n	800bd8a <_printf_i+0x23a>
 800bd62:	68e0      	ldr	r0, [r4, #12]
 800bd64:	9b03      	ldr	r3, [sp, #12]
 800bd66:	4298      	cmp	r0, r3
 800bd68:	bfb8      	it	lt
 800bd6a:	4618      	movlt	r0, r3
 800bd6c:	e7a4      	b.n	800bcb8 <_printf_i+0x168>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4632      	mov	r2, r6
 800bd72:	4649      	mov	r1, r9
 800bd74:	4640      	mov	r0, r8
 800bd76:	47d0      	blx	sl
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d09b      	beq.n	800bcb4 <_printf_i+0x164>
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	68e3      	ldr	r3, [r4, #12]
 800bd80:	9903      	ldr	r1, [sp, #12]
 800bd82:	1a5b      	subs	r3, r3, r1
 800bd84:	42ab      	cmp	r3, r5
 800bd86:	dcf2      	bgt.n	800bd6e <_printf_i+0x21e>
 800bd88:	e7eb      	b.n	800bd62 <_printf_i+0x212>
 800bd8a:	2500      	movs	r5, #0
 800bd8c:	f104 0619 	add.w	r6, r4, #25
 800bd90:	e7f5      	b.n	800bd7e <_printf_i+0x22e>
 800bd92:	bf00      	nop
 800bd94:	080136a6 	.word	0x080136a6
 800bd98:	080136b7 	.word	0x080136b7

0800bd9c <siprintf>:
 800bd9c:	b40e      	push	{r1, r2, r3}
 800bd9e:	b500      	push	{lr}
 800bda0:	b09c      	sub	sp, #112	; 0x70
 800bda2:	ab1d      	add	r3, sp, #116	; 0x74
 800bda4:	9002      	str	r0, [sp, #8]
 800bda6:	9006      	str	r0, [sp, #24]
 800bda8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdac:	4809      	ldr	r0, [pc, #36]	; (800bdd4 <siprintf+0x38>)
 800bdae:	9107      	str	r1, [sp, #28]
 800bdb0:	9104      	str	r1, [sp, #16]
 800bdb2:	4909      	ldr	r1, [pc, #36]	; (800bdd8 <siprintf+0x3c>)
 800bdb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb8:	9105      	str	r1, [sp, #20]
 800bdba:	6800      	ldr	r0, [r0, #0]
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	a902      	add	r1, sp, #8
 800bdc0:	f001 fb26 	bl	800d410 <_svfiprintf_r>
 800bdc4:	9b02      	ldr	r3, [sp, #8]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	b01c      	add	sp, #112	; 0x70
 800bdcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd0:	b003      	add	sp, #12
 800bdd2:	4770      	bx	lr
 800bdd4:	20000490 	.word	0x20000490
 800bdd8:	ffff0208 	.word	0xffff0208

0800bddc <quorem>:
 800bddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde0:	6903      	ldr	r3, [r0, #16]
 800bde2:	690c      	ldr	r4, [r1, #16]
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	4607      	mov	r7, r0
 800bde8:	f2c0 8081 	blt.w	800beee <quorem+0x112>
 800bdec:	3c01      	subs	r4, #1
 800bdee:	f101 0814 	add.w	r8, r1, #20
 800bdf2:	f100 0514 	add.w	r5, r0, #20
 800bdf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdfa:	9301      	str	r3, [sp, #4]
 800bdfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be04:	3301      	adds	r3, #1
 800be06:	429a      	cmp	r2, r3
 800be08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be10:	fbb2 f6f3 	udiv	r6, r2, r3
 800be14:	d331      	bcc.n	800be7a <quorem+0x9e>
 800be16:	f04f 0e00 	mov.w	lr, #0
 800be1a:	4640      	mov	r0, r8
 800be1c:	46ac      	mov	ip, r5
 800be1e:	46f2      	mov	sl, lr
 800be20:	f850 2b04 	ldr.w	r2, [r0], #4
 800be24:	b293      	uxth	r3, r2
 800be26:	fb06 e303 	mla	r3, r6, r3, lr
 800be2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800be2e:	b29b      	uxth	r3, r3
 800be30:	ebaa 0303 	sub.w	r3, sl, r3
 800be34:	0c12      	lsrs	r2, r2, #16
 800be36:	f8dc a000 	ldr.w	sl, [ip]
 800be3a:	fb06 e202 	mla	r2, r6, r2, lr
 800be3e:	fa13 f38a 	uxtah	r3, r3, sl
 800be42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be46:	fa1f fa82 	uxth.w	sl, r2
 800be4a:	f8dc 2000 	ldr.w	r2, [ip]
 800be4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800be52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be56:	b29b      	uxth	r3, r3
 800be58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be5c:	4581      	cmp	r9, r0
 800be5e:	f84c 3b04 	str.w	r3, [ip], #4
 800be62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be66:	d2db      	bcs.n	800be20 <quorem+0x44>
 800be68:	f855 300b 	ldr.w	r3, [r5, fp]
 800be6c:	b92b      	cbnz	r3, 800be7a <quorem+0x9e>
 800be6e:	9b01      	ldr	r3, [sp, #4]
 800be70:	3b04      	subs	r3, #4
 800be72:	429d      	cmp	r5, r3
 800be74:	461a      	mov	r2, r3
 800be76:	d32e      	bcc.n	800bed6 <quorem+0xfa>
 800be78:	613c      	str	r4, [r7, #16]
 800be7a:	4638      	mov	r0, r7
 800be7c:	f001 f8b2 	bl	800cfe4 <__mcmp>
 800be80:	2800      	cmp	r0, #0
 800be82:	db24      	blt.n	800bece <quorem+0xf2>
 800be84:	3601      	adds	r6, #1
 800be86:	4628      	mov	r0, r5
 800be88:	f04f 0c00 	mov.w	ip, #0
 800be8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be90:	f8d0 e000 	ldr.w	lr, [r0]
 800be94:	b293      	uxth	r3, r2
 800be96:	ebac 0303 	sub.w	r3, ip, r3
 800be9a:	0c12      	lsrs	r2, r2, #16
 800be9c:	fa13 f38e 	uxtah	r3, r3, lr
 800bea0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800beae:	45c1      	cmp	r9, r8
 800beb0:	f840 3b04 	str.w	r3, [r0], #4
 800beb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800beb8:	d2e8      	bcs.n	800be8c <quorem+0xb0>
 800beba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bec2:	b922      	cbnz	r2, 800bece <quorem+0xf2>
 800bec4:	3b04      	subs	r3, #4
 800bec6:	429d      	cmp	r5, r3
 800bec8:	461a      	mov	r2, r3
 800beca:	d30a      	bcc.n	800bee2 <quorem+0x106>
 800becc:	613c      	str	r4, [r7, #16]
 800bece:	4630      	mov	r0, r6
 800bed0:	b003      	add	sp, #12
 800bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed6:	6812      	ldr	r2, [r2, #0]
 800bed8:	3b04      	subs	r3, #4
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d1cc      	bne.n	800be78 <quorem+0x9c>
 800bede:	3c01      	subs	r4, #1
 800bee0:	e7c7      	b.n	800be72 <quorem+0x96>
 800bee2:	6812      	ldr	r2, [r2, #0]
 800bee4:	3b04      	subs	r3, #4
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	d1f0      	bne.n	800becc <quorem+0xf0>
 800beea:	3c01      	subs	r4, #1
 800beec:	e7eb      	b.n	800bec6 <quorem+0xea>
 800beee:	2000      	movs	r0, #0
 800bef0:	e7ee      	b.n	800bed0 <quorem+0xf4>
 800bef2:	0000      	movs	r0, r0
 800bef4:	0000      	movs	r0, r0
	...

0800bef8 <_dtoa_r>:
 800bef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	ed2d 8b02 	vpush	{d8}
 800bf00:	ec57 6b10 	vmov	r6, r7, d0
 800bf04:	b095      	sub	sp, #84	; 0x54
 800bf06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf0c:	9105      	str	r1, [sp, #20]
 800bf0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bf12:	4604      	mov	r4, r0
 800bf14:	9209      	str	r2, [sp, #36]	; 0x24
 800bf16:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf18:	b975      	cbnz	r5, 800bf38 <_dtoa_r+0x40>
 800bf1a:	2010      	movs	r0, #16
 800bf1c:	f000 fddc 	bl	800cad8 <malloc>
 800bf20:	4602      	mov	r2, r0
 800bf22:	6260      	str	r0, [r4, #36]	; 0x24
 800bf24:	b920      	cbnz	r0, 800bf30 <_dtoa_r+0x38>
 800bf26:	4bb2      	ldr	r3, [pc, #712]	; (800c1f0 <_dtoa_r+0x2f8>)
 800bf28:	21ea      	movs	r1, #234	; 0xea
 800bf2a:	48b2      	ldr	r0, [pc, #712]	; (800c1f4 <_dtoa_r+0x2fc>)
 800bf2c:	f001 fb80 	bl	800d630 <__assert_func>
 800bf30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf34:	6005      	str	r5, [r0, #0]
 800bf36:	60c5      	str	r5, [r0, #12]
 800bf38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf3a:	6819      	ldr	r1, [r3, #0]
 800bf3c:	b151      	cbz	r1, 800bf54 <_dtoa_r+0x5c>
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	604a      	str	r2, [r1, #4]
 800bf42:	2301      	movs	r3, #1
 800bf44:	4093      	lsls	r3, r2
 800bf46:	608b      	str	r3, [r1, #8]
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 fe0d 	bl	800cb68 <_Bfree>
 800bf4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf50:	2200      	movs	r2, #0
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	1e3b      	subs	r3, r7, #0
 800bf56:	bfb9      	ittee	lt
 800bf58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf5c:	9303      	strlt	r3, [sp, #12]
 800bf5e:	2300      	movge	r3, #0
 800bf60:	f8c8 3000 	strge.w	r3, [r8]
 800bf64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bf68:	4ba3      	ldr	r3, [pc, #652]	; (800c1f8 <_dtoa_r+0x300>)
 800bf6a:	bfbc      	itt	lt
 800bf6c:	2201      	movlt	r2, #1
 800bf6e:	f8c8 2000 	strlt.w	r2, [r8]
 800bf72:	ea33 0309 	bics.w	r3, r3, r9
 800bf76:	d11b      	bne.n	800bfb0 <_dtoa_r+0xb8>
 800bf78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf7e:	6013      	str	r3, [r2, #0]
 800bf80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf84:	4333      	orrs	r3, r6
 800bf86:	f000 857a 	beq.w	800ca7e <_dtoa_r+0xb86>
 800bf8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf8c:	b963      	cbnz	r3, 800bfa8 <_dtoa_r+0xb0>
 800bf8e:	4b9b      	ldr	r3, [pc, #620]	; (800c1fc <_dtoa_r+0x304>)
 800bf90:	e024      	b.n	800bfdc <_dtoa_r+0xe4>
 800bf92:	4b9b      	ldr	r3, [pc, #620]	; (800c200 <_dtoa_r+0x308>)
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	3308      	adds	r3, #8
 800bf98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	9800      	ldr	r0, [sp, #0]
 800bf9e:	b015      	add	sp, #84	; 0x54
 800bfa0:	ecbd 8b02 	vpop	{d8}
 800bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa8:	4b94      	ldr	r3, [pc, #592]	; (800c1fc <_dtoa_r+0x304>)
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	3303      	adds	r3, #3
 800bfae:	e7f3      	b.n	800bf98 <_dtoa_r+0xa0>
 800bfb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	ec51 0b17 	vmov	r0, r1, d7
 800bfba:	2300      	movs	r3, #0
 800bfbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bfc0:	f7f4 fdaa 	bl	8000b18 <__aeabi_dcmpeq>
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	b158      	cbz	r0, 800bfe0 <_dtoa_r+0xe8>
 800bfc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfca:	2301      	movs	r3, #1
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 8551 	beq.w	800ca78 <_dtoa_r+0xb80>
 800bfd6:	488b      	ldr	r0, [pc, #556]	; (800c204 <_dtoa_r+0x30c>)
 800bfd8:	6018      	str	r0, [r3, #0]
 800bfda:	1e43      	subs	r3, r0, #1
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	e7dd      	b.n	800bf9c <_dtoa_r+0xa4>
 800bfe0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bfe4:	aa12      	add	r2, sp, #72	; 0x48
 800bfe6:	a913      	add	r1, sp, #76	; 0x4c
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f001 f89f 	bl	800d12c <__d2b>
 800bfee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bff2:	4683      	mov	fp, r0
 800bff4:	2d00      	cmp	r5, #0
 800bff6:	d07c      	beq.n	800c0f2 <_dtoa_r+0x1fa>
 800bff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c002:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c006:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c00a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c00e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c012:	4b7d      	ldr	r3, [pc, #500]	; (800c208 <_dtoa_r+0x310>)
 800c014:	2200      	movs	r2, #0
 800c016:	4630      	mov	r0, r6
 800c018:	4639      	mov	r1, r7
 800c01a:	f7f4 f95d 	bl	80002d8 <__aeabi_dsub>
 800c01e:	a36e      	add	r3, pc, #440	; (adr r3, 800c1d8 <_dtoa_r+0x2e0>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 fb10 	bl	8000648 <__aeabi_dmul>
 800c028:	a36d      	add	r3, pc, #436	; (adr r3, 800c1e0 <_dtoa_r+0x2e8>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f7f4 f955 	bl	80002dc <__adddf3>
 800c032:	4606      	mov	r6, r0
 800c034:	4628      	mov	r0, r5
 800c036:	460f      	mov	r7, r1
 800c038:	f7f4 fa9c 	bl	8000574 <__aeabi_i2d>
 800c03c:	a36a      	add	r3, pc, #424	; (adr r3, 800c1e8 <_dtoa_r+0x2f0>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	f7f4 fb01 	bl	8000648 <__aeabi_dmul>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4630      	mov	r0, r6
 800c04c:	4639      	mov	r1, r7
 800c04e:	f7f4 f945 	bl	80002dc <__adddf3>
 800c052:	4606      	mov	r6, r0
 800c054:	460f      	mov	r7, r1
 800c056:	f7f4 fda7 	bl	8000ba8 <__aeabi_d2iz>
 800c05a:	2200      	movs	r2, #0
 800c05c:	4682      	mov	sl, r0
 800c05e:	2300      	movs	r3, #0
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 fd62 	bl	8000b2c <__aeabi_dcmplt>
 800c068:	b148      	cbz	r0, 800c07e <_dtoa_r+0x186>
 800c06a:	4650      	mov	r0, sl
 800c06c:	f7f4 fa82 	bl	8000574 <__aeabi_i2d>
 800c070:	4632      	mov	r2, r6
 800c072:	463b      	mov	r3, r7
 800c074:	f7f4 fd50 	bl	8000b18 <__aeabi_dcmpeq>
 800c078:	b908      	cbnz	r0, 800c07e <_dtoa_r+0x186>
 800c07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c07e:	f1ba 0f16 	cmp.w	sl, #22
 800c082:	d854      	bhi.n	800c12e <_dtoa_r+0x236>
 800c084:	4b61      	ldr	r3, [pc, #388]	; (800c20c <_dtoa_r+0x314>)
 800c086:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c092:	f7f4 fd4b 	bl	8000b2c <__aeabi_dcmplt>
 800c096:	2800      	cmp	r0, #0
 800c098:	d04b      	beq.n	800c132 <_dtoa_r+0x23a>
 800c09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c09e:	2300      	movs	r3, #0
 800c0a0:	930e      	str	r3, [sp, #56]	; 0x38
 800c0a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0a4:	1b5d      	subs	r5, r3, r5
 800c0a6:	1e6b      	subs	r3, r5, #1
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	bf43      	ittte	mi
 800c0ac:	2300      	movmi	r3, #0
 800c0ae:	f1c5 0801 	rsbmi	r8, r5, #1
 800c0b2:	9304      	strmi	r3, [sp, #16]
 800c0b4:	f04f 0800 	movpl.w	r8, #0
 800c0b8:	f1ba 0f00 	cmp.w	sl, #0
 800c0bc:	db3b      	blt.n	800c136 <_dtoa_r+0x23e>
 800c0be:	9b04      	ldr	r3, [sp, #16]
 800c0c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c0c4:	4453      	add	r3, sl
 800c0c6:	9304      	str	r3, [sp, #16]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9306      	str	r3, [sp, #24]
 800c0cc:	9b05      	ldr	r3, [sp, #20]
 800c0ce:	2b09      	cmp	r3, #9
 800c0d0:	d869      	bhi.n	800c1a6 <_dtoa_r+0x2ae>
 800c0d2:	2b05      	cmp	r3, #5
 800c0d4:	bfc4      	itt	gt
 800c0d6:	3b04      	subgt	r3, #4
 800c0d8:	9305      	strgt	r3, [sp, #20]
 800c0da:	9b05      	ldr	r3, [sp, #20]
 800c0dc:	f1a3 0302 	sub.w	r3, r3, #2
 800c0e0:	bfcc      	ite	gt
 800c0e2:	2500      	movgt	r5, #0
 800c0e4:	2501      	movle	r5, #1
 800c0e6:	2b03      	cmp	r3, #3
 800c0e8:	d869      	bhi.n	800c1be <_dtoa_r+0x2c6>
 800c0ea:	e8df f003 	tbb	[pc, r3]
 800c0ee:	4e2c      	.short	0x4e2c
 800c0f0:	5a4c      	.short	0x5a4c
 800c0f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c0f6:	441d      	add	r5, r3
 800c0f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c0fc:	2b20      	cmp	r3, #32
 800c0fe:	bfc1      	itttt	gt
 800c100:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c104:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c108:	fa09 f303 	lslgt.w	r3, r9, r3
 800c10c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c110:	bfda      	itte	le
 800c112:	f1c3 0320 	rsble	r3, r3, #32
 800c116:	fa06 f003 	lslle.w	r0, r6, r3
 800c11a:	4318      	orrgt	r0, r3
 800c11c:	f7f4 fa1a 	bl	8000554 <__aeabi_ui2d>
 800c120:	2301      	movs	r3, #1
 800c122:	4606      	mov	r6, r0
 800c124:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c128:	3d01      	subs	r5, #1
 800c12a:	9310      	str	r3, [sp, #64]	; 0x40
 800c12c:	e771      	b.n	800c012 <_dtoa_r+0x11a>
 800c12e:	2301      	movs	r3, #1
 800c130:	e7b6      	b.n	800c0a0 <_dtoa_r+0x1a8>
 800c132:	900e      	str	r0, [sp, #56]	; 0x38
 800c134:	e7b5      	b.n	800c0a2 <_dtoa_r+0x1aa>
 800c136:	f1ca 0300 	rsb	r3, sl, #0
 800c13a:	9306      	str	r3, [sp, #24]
 800c13c:	2300      	movs	r3, #0
 800c13e:	eba8 080a 	sub.w	r8, r8, sl
 800c142:	930d      	str	r3, [sp, #52]	; 0x34
 800c144:	e7c2      	b.n	800c0cc <_dtoa_r+0x1d4>
 800c146:	2300      	movs	r3, #0
 800c148:	9308      	str	r3, [sp, #32]
 800c14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	dc39      	bgt.n	800c1c4 <_dtoa_r+0x2cc>
 800c150:	f04f 0901 	mov.w	r9, #1
 800c154:	f8cd 9004 	str.w	r9, [sp, #4]
 800c158:	464b      	mov	r3, r9
 800c15a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c15e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c160:	2200      	movs	r2, #0
 800c162:	6042      	str	r2, [r0, #4]
 800c164:	2204      	movs	r2, #4
 800c166:	f102 0614 	add.w	r6, r2, #20
 800c16a:	429e      	cmp	r6, r3
 800c16c:	6841      	ldr	r1, [r0, #4]
 800c16e:	d92f      	bls.n	800c1d0 <_dtoa_r+0x2d8>
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fcb9 	bl	800cae8 <_Balloc>
 800c176:	9000      	str	r0, [sp, #0]
 800c178:	2800      	cmp	r0, #0
 800c17a:	d14b      	bne.n	800c214 <_dtoa_r+0x31c>
 800c17c:	4b24      	ldr	r3, [pc, #144]	; (800c210 <_dtoa_r+0x318>)
 800c17e:	4602      	mov	r2, r0
 800c180:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c184:	e6d1      	b.n	800bf2a <_dtoa_r+0x32>
 800c186:	2301      	movs	r3, #1
 800c188:	e7de      	b.n	800c148 <_dtoa_r+0x250>
 800c18a:	2300      	movs	r3, #0
 800c18c:	9308      	str	r3, [sp, #32]
 800c18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c190:	eb0a 0903 	add.w	r9, sl, r3
 800c194:	f109 0301 	add.w	r3, r9, #1
 800c198:	2b01      	cmp	r3, #1
 800c19a:	9301      	str	r3, [sp, #4]
 800c19c:	bfb8      	it	lt
 800c19e:	2301      	movlt	r3, #1
 800c1a0:	e7dd      	b.n	800c15e <_dtoa_r+0x266>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e7f2      	b.n	800c18c <_dtoa_r+0x294>
 800c1a6:	2501      	movs	r5, #1
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9305      	str	r3, [sp, #20]
 800c1ac:	9508      	str	r5, [sp, #32]
 800c1ae:	f04f 39ff 	mov.w	r9, #4294967295
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c1b8:	2312      	movs	r3, #18
 800c1ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c1bc:	e7cf      	b.n	800c15e <_dtoa_r+0x266>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	9308      	str	r3, [sp, #32]
 800c1c2:	e7f4      	b.n	800c1ae <_dtoa_r+0x2b6>
 800c1c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c1c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c1cc:	464b      	mov	r3, r9
 800c1ce:	e7c6      	b.n	800c15e <_dtoa_r+0x266>
 800c1d0:	3101      	adds	r1, #1
 800c1d2:	6041      	str	r1, [r0, #4]
 800c1d4:	0052      	lsls	r2, r2, #1
 800c1d6:	e7c6      	b.n	800c166 <_dtoa_r+0x26e>
 800c1d8:	636f4361 	.word	0x636f4361
 800c1dc:	3fd287a7 	.word	0x3fd287a7
 800c1e0:	8b60c8b3 	.word	0x8b60c8b3
 800c1e4:	3fc68a28 	.word	0x3fc68a28
 800c1e8:	509f79fb 	.word	0x509f79fb
 800c1ec:	3fd34413 	.word	0x3fd34413
 800c1f0:	080136d5 	.word	0x080136d5
 800c1f4:	080136ec 	.word	0x080136ec
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	080136d1 	.word	0x080136d1
 800c200:	080136c8 	.word	0x080136c8
 800c204:	080136a5 	.word	0x080136a5
 800c208:	3ff80000 	.word	0x3ff80000
 800c20c:	080137e8 	.word	0x080137e8
 800c210:	0801374b 	.word	0x0801374b
 800c214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c216:	9a00      	ldr	r2, [sp, #0]
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	9b01      	ldr	r3, [sp, #4]
 800c21c:	2b0e      	cmp	r3, #14
 800c21e:	f200 80ad 	bhi.w	800c37c <_dtoa_r+0x484>
 800c222:	2d00      	cmp	r5, #0
 800c224:	f000 80aa 	beq.w	800c37c <_dtoa_r+0x484>
 800c228:	f1ba 0f00 	cmp.w	sl, #0
 800c22c:	dd36      	ble.n	800c29c <_dtoa_r+0x3a4>
 800c22e:	4ac3      	ldr	r2, [pc, #780]	; (800c53c <_dtoa_r+0x644>)
 800c230:	f00a 030f 	and.w	r3, sl, #15
 800c234:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c238:	ed93 7b00 	vldr	d7, [r3]
 800c23c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c240:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c244:	eeb0 8a47 	vmov.f32	s16, s14
 800c248:	eef0 8a67 	vmov.f32	s17, s15
 800c24c:	d016      	beq.n	800c27c <_dtoa_r+0x384>
 800c24e:	4bbc      	ldr	r3, [pc, #752]	; (800c540 <_dtoa_r+0x648>)
 800c250:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c258:	f7f4 fb20 	bl	800089c <__aeabi_ddiv>
 800c25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c260:	f007 070f 	and.w	r7, r7, #15
 800c264:	2503      	movs	r5, #3
 800c266:	4eb6      	ldr	r6, [pc, #728]	; (800c540 <_dtoa_r+0x648>)
 800c268:	b957      	cbnz	r7, 800c280 <_dtoa_r+0x388>
 800c26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c26e:	ec53 2b18 	vmov	r2, r3, d8
 800c272:	f7f4 fb13 	bl	800089c <__aeabi_ddiv>
 800c276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c27a:	e029      	b.n	800c2d0 <_dtoa_r+0x3d8>
 800c27c:	2502      	movs	r5, #2
 800c27e:	e7f2      	b.n	800c266 <_dtoa_r+0x36e>
 800c280:	07f9      	lsls	r1, r7, #31
 800c282:	d508      	bpl.n	800c296 <_dtoa_r+0x39e>
 800c284:	ec51 0b18 	vmov	r0, r1, d8
 800c288:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c28c:	f7f4 f9dc 	bl	8000648 <__aeabi_dmul>
 800c290:	ec41 0b18 	vmov	d8, r0, r1
 800c294:	3501      	adds	r5, #1
 800c296:	107f      	asrs	r7, r7, #1
 800c298:	3608      	adds	r6, #8
 800c29a:	e7e5      	b.n	800c268 <_dtoa_r+0x370>
 800c29c:	f000 80a6 	beq.w	800c3ec <_dtoa_r+0x4f4>
 800c2a0:	f1ca 0600 	rsb	r6, sl, #0
 800c2a4:	4ba5      	ldr	r3, [pc, #660]	; (800c53c <_dtoa_r+0x644>)
 800c2a6:	4fa6      	ldr	r7, [pc, #664]	; (800c540 <_dtoa_r+0x648>)
 800c2a8:	f006 020f 	and.w	r2, r6, #15
 800c2ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2b8:	f7f4 f9c6 	bl	8000648 <__aeabi_dmul>
 800c2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2c0:	1136      	asrs	r6, r6, #4
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2502      	movs	r5, #2
 800c2c6:	2e00      	cmp	r6, #0
 800c2c8:	f040 8085 	bne.w	800c3d6 <_dtoa_r+0x4de>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1d2      	bne.n	800c276 <_dtoa_r+0x37e>
 800c2d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f000 808c 	beq.w	800c3f0 <_dtoa_r+0x4f8>
 800c2d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2dc:	4b99      	ldr	r3, [pc, #612]	; (800c544 <_dtoa_r+0x64c>)
 800c2de:	2200      	movs	r2, #0
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	f7f4 fc22 	bl	8000b2c <__aeabi_dcmplt>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	f000 8081 	beq.w	800c3f0 <_dtoa_r+0x4f8>
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d07d      	beq.n	800c3f0 <_dtoa_r+0x4f8>
 800c2f4:	f1b9 0f00 	cmp.w	r9, #0
 800c2f8:	dd3c      	ble.n	800c374 <_dtoa_r+0x47c>
 800c2fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c2fe:	9307      	str	r3, [sp, #28]
 800c300:	2200      	movs	r2, #0
 800c302:	4b91      	ldr	r3, [pc, #580]	; (800c548 <_dtoa_r+0x650>)
 800c304:	4630      	mov	r0, r6
 800c306:	4639      	mov	r1, r7
 800c308:	f7f4 f99e 	bl	8000648 <__aeabi_dmul>
 800c30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c310:	3501      	adds	r5, #1
 800c312:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c316:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c31a:	4628      	mov	r0, r5
 800c31c:	f7f4 f92a 	bl	8000574 <__aeabi_i2d>
 800c320:	4632      	mov	r2, r6
 800c322:	463b      	mov	r3, r7
 800c324:	f7f4 f990 	bl	8000648 <__aeabi_dmul>
 800c328:	4b88      	ldr	r3, [pc, #544]	; (800c54c <_dtoa_r+0x654>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	f7f3 ffd6 	bl	80002dc <__adddf3>
 800c330:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c338:	9303      	str	r3, [sp, #12]
 800c33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d15c      	bne.n	800c3fa <_dtoa_r+0x502>
 800c340:	4b83      	ldr	r3, [pc, #524]	; (800c550 <_dtoa_r+0x658>)
 800c342:	2200      	movs	r2, #0
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f7f3 ffc6 	bl	80002d8 <__aeabi_dsub>
 800c34c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c350:	4606      	mov	r6, r0
 800c352:	460f      	mov	r7, r1
 800c354:	f7f4 fc08 	bl	8000b68 <__aeabi_dcmpgt>
 800c358:	2800      	cmp	r0, #0
 800c35a:	f040 8296 	bne.w	800c88a <_dtoa_r+0x992>
 800c35e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c362:	4630      	mov	r0, r6
 800c364:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c368:	4639      	mov	r1, r7
 800c36a:	f7f4 fbdf 	bl	8000b2c <__aeabi_dcmplt>
 800c36e:	2800      	cmp	r0, #0
 800c370:	f040 8288 	bne.w	800c884 <_dtoa_r+0x98c>
 800c374:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c378:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c37c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f2c0 8158 	blt.w	800c634 <_dtoa_r+0x73c>
 800c384:	f1ba 0f0e 	cmp.w	sl, #14
 800c388:	f300 8154 	bgt.w	800c634 <_dtoa_r+0x73c>
 800c38c:	4b6b      	ldr	r3, [pc, #428]	; (800c53c <_dtoa_r+0x644>)
 800c38e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c392:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f280 80e3 	bge.w	800c564 <_dtoa_r+0x66c>
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f300 80df 	bgt.w	800c564 <_dtoa_r+0x66c>
 800c3a6:	f040 826d 	bne.w	800c884 <_dtoa_r+0x98c>
 800c3aa:	4b69      	ldr	r3, [pc, #420]	; (800c550 <_dtoa_r+0x658>)
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	f7f4 f949 	bl	8000648 <__aeabi_dmul>
 800c3b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3ba:	f7f4 fbcb 	bl	8000b54 <__aeabi_dcmpge>
 800c3be:	9e01      	ldr	r6, [sp, #4]
 800c3c0:	4637      	mov	r7, r6
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	f040 8243 	bne.w	800c84e <_dtoa_r+0x956>
 800c3c8:	9d00      	ldr	r5, [sp, #0]
 800c3ca:	2331      	movs	r3, #49	; 0x31
 800c3cc:	f805 3b01 	strb.w	r3, [r5], #1
 800c3d0:	f10a 0a01 	add.w	sl, sl, #1
 800c3d4:	e23f      	b.n	800c856 <_dtoa_r+0x95e>
 800c3d6:	07f2      	lsls	r2, r6, #31
 800c3d8:	d505      	bpl.n	800c3e6 <_dtoa_r+0x4ee>
 800c3da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3de:	f7f4 f933 	bl	8000648 <__aeabi_dmul>
 800c3e2:	3501      	adds	r5, #1
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	1076      	asrs	r6, r6, #1
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	e76c      	b.n	800c2c6 <_dtoa_r+0x3ce>
 800c3ec:	2502      	movs	r5, #2
 800c3ee:	e76f      	b.n	800c2d0 <_dtoa_r+0x3d8>
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c3f6:	930c      	str	r3, [sp, #48]	; 0x30
 800c3f8:	e78d      	b.n	800c316 <_dtoa_r+0x41e>
 800c3fa:	9900      	ldr	r1, [sp, #0]
 800c3fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c3fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c400:	4b4e      	ldr	r3, [pc, #312]	; (800c53c <_dtoa_r+0x644>)
 800c402:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c406:	4401      	add	r1, r0
 800c408:	9102      	str	r1, [sp, #8]
 800c40a:	9908      	ldr	r1, [sp, #32]
 800c40c:	eeb0 8a47 	vmov.f32	s16, s14
 800c410:	eef0 8a67 	vmov.f32	s17, s15
 800c414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c418:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c41c:	2900      	cmp	r1, #0
 800c41e:	d045      	beq.n	800c4ac <_dtoa_r+0x5b4>
 800c420:	494c      	ldr	r1, [pc, #304]	; (800c554 <_dtoa_r+0x65c>)
 800c422:	2000      	movs	r0, #0
 800c424:	f7f4 fa3a 	bl	800089c <__aeabi_ddiv>
 800c428:	ec53 2b18 	vmov	r2, r3, d8
 800c42c:	f7f3 ff54 	bl	80002d8 <__aeabi_dsub>
 800c430:	9d00      	ldr	r5, [sp, #0]
 800c432:	ec41 0b18 	vmov	d8, r0, r1
 800c436:	4639      	mov	r1, r7
 800c438:	4630      	mov	r0, r6
 800c43a:	f7f4 fbb5 	bl	8000ba8 <__aeabi_d2iz>
 800c43e:	900c      	str	r0, [sp, #48]	; 0x30
 800c440:	f7f4 f898 	bl	8000574 <__aeabi_i2d>
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	4630      	mov	r0, r6
 800c44a:	4639      	mov	r1, r7
 800c44c:	f7f3 ff44 	bl	80002d8 <__aeabi_dsub>
 800c450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c452:	3330      	adds	r3, #48	; 0x30
 800c454:	f805 3b01 	strb.w	r3, [r5], #1
 800c458:	ec53 2b18 	vmov	r2, r3, d8
 800c45c:	4606      	mov	r6, r0
 800c45e:	460f      	mov	r7, r1
 800c460:	f7f4 fb64 	bl	8000b2c <__aeabi_dcmplt>
 800c464:	2800      	cmp	r0, #0
 800c466:	d165      	bne.n	800c534 <_dtoa_r+0x63c>
 800c468:	4632      	mov	r2, r6
 800c46a:	463b      	mov	r3, r7
 800c46c:	4935      	ldr	r1, [pc, #212]	; (800c544 <_dtoa_r+0x64c>)
 800c46e:	2000      	movs	r0, #0
 800c470:	f7f3 ff32 	bl	80002d8 <__aeabi_dsub>
 800c474:	ec53 2b18 	vmov	r2, r3, d8
 800c478:	f7f4 fb58 	bl	8000b2c <__aeabi_dcmplt>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	f040 80b9 	bne.w	800c5f4 <_dtoa_r+0x6fc>
 800c482:	9b02      	ldr	r3, [sp, #8]
 800c484:	429d      	cmp	r5, r3
 800c486:	f43f af75 	beq.w	800c374 <_dtoa_r+0x47c>
 800c48a:	4b2f      	ldr	r3, [pc, #188]	; (800c548 <_dtoa_r+0x650>)
 800c48c:	ec51 0b18 	vmov	r0, r1, d8
 800c490:	2200      	movs	r2, #0
 800c492:	f7f4 f8d9 	bl	8000648 <__aeabi_dmul>
 800c496:	4b2c      	ldr	r3, [pc, #176]	; (800c548 <_dtoa_r+0x650>)
 800c498:	ec41 0b18 	vmov	d8, r0, r1
 800c49c:	2200      	movs	r2, #0
 800c49e:	4630      	mov	r0, r6
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	f7f4 f8d1 	bl	8000648 <__aeabi_dmul>
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	e7c4      	b.n	800c436 <_dtoa_r+0x53e>
 800c4ac:	ec51 0b17 	vmov	r0, r1, d7
 800c4b0:	f7f4 f8ca 	bl	8000648 <__aeabi_dmul>
 800c4b4:	9b02      	ldr	r3, [sp, #8]
 800c4b6:	9d00      	ldr	r5, [sp, #0]
 800c4b8:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ba:	ec41 0b18 	vmov	d8, r0, r1
 800c4be:	4639      	mov	r1, r7
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7f4 fb71 	bl	8000ba8 <__aeabi_d2iz>
 800c4c6:	9011      	str	r0, [sp, #68]	; 0x44
 800c4c8:	f7f4 f854 	bl	8000574 <__aeabi_i2d>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	4639      	mov	r1, r7
 800c4d4:	f7f3 ff00 	bl	80002d8 <__aeabi_dsub>
 800c4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4da:	3330      	adds	r3, #48	; 0x30
 800c4dc:	f805 3b01 	strb.w	r3, [r5], #1
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	429d      	cmp	r5, r3
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	f04f 0200 	mov.w	r2, #0
 800c4ec:	d134      	bne.n	800c558 <_dtoa_r+0x660>
 800c4ee:	4b19      	ldr	r3, [pc, #100]	; (800c554 <_dtoa_r+0x65c>)
 800c4f0:	ec51 0b18 	vmov	r0, r1, d8
 800c4f4:	f7f3 fef2 	bl	80002dc <__adddf3>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	4639      	mov	r1, r7
 800c500:	f7f4 fb32 	bl	8000b68 <__aeabi_dcmpgt>
 800c504:	2800      	cmp	r0, #0
 800c506:	d175      	bne.n	800c5f4 <_dtoa_r+0x6fc>
 800c508:	ec53 2b18 	vmov	r2, r3, d8
 800c50c:	4911      	ldr	r1, [pc, #68]	; (800c554 <_dtoa_r+0x65c>)
 800c50e:	2000      	movs	r0, #0
 800c510:	f7f3 fee2 	bl	80002d8 <__aeabi_dsub>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4630      	mov	r0, r6
 800c51a:	4639      	mov	r1, r7
 800c51c:	f7f4 fb06 	bl	8000b2c <__aeabi_dcmplt>
 800c520:	2800      	cmp	r0, #0
 800c522:	f43f af27 	beq.w	800c374 <_dtoa_r+0x47c>
 800c526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c528:	1e6b      	subs	r3, r5, #1
 800c52a:	930c      	str	r3, [sp, #48]	; 0x30
 800c52c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c530:	2b30      	cmp	r3, #48	; 0x30
 800c532:	d0f8      	beq.n	800c526 <_dtoa_r+0x62e>
 800c534:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c538:	e04a      	b.n	800c5d0 <_dtoa_r+0x6d8>
 800c53a:	bf00      	nop
 800c53c:	080137e8 	.word	0x080137e8
 800c540:	080137c0 	.word	0x080137c0
 800c544:	3ff00000 	.word	0x3ff00000
 800c548:	40240000 	.word	0x40240000
 800c54c:	401c0000 	.word	0x401c0000
 800c550:	40140000 	.word	0x40140000
 800c554:	3fe00000 	.word	0x3fe00000
 800c558:	4baf      	ldr	r3, [pc, #700]	; (800c818 <_dtoa_r+0x920>)
 800c55a:	f7f4 f875 	bl	8000648 <__aeabi_dmul>
 800c55e:	4606      	mov	r6, r0
 800c560:	460f      	mov	r7, r1
 800c562:	e7ac      	b.n	800c4be <_dtoa_r+0x5c6>
 800c564:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c568:	9d00      	ldr	r5, [sp, #0]
 800c56a:	4642      	mov	r2, r8
 800c56c:	464b      	mov	r3, r9
 800c56e:	4630      	mov	r0, r6
 800c570:	4639      	mov	r1, r7
 800c572:	f7f4 f993 	bl	800089c <__aeabi_ddiv>
 800c576:	f7f4 fb17 	bl	8000ba8 <__aeabi_d2iz>
 800c57a:	9002      	str	r0, [sp, #8]
 800c57c:	f7f3 fffa 	bl	8000574 <__aeabi_i2d>
 800c580:	4642      	mov	r2, r8
 800c582:	464b      	mov	r3, r9
 800c584:	f7f4 f860 	bl	8000648 <__aeabi_dmul>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4630      	mov	r0, r6
 800c58e:	4639      	mov	r1, r7
 800c590:	f7f3 fea2 	bl	80002d8 <__aeabi_dsub>
 800c594:	9e02      	ldr	r6, [sp, #8]
 800c596:	9f01      	ldr	r7, [sp, #4]
 800c598:	3630      	adds	r6, #48	; 0x30
 800c59a:	f805 6b01 	strb.w	r6, [r5], #1
 800c59e:	9e00      	ldr	r6, [sp, #0]
 800c5a0:	1bae      	subs	r6, r5, r6
 800c5a2:	42b7      	cmp	r7, r6
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	d137      	bne.n	800c61a <_dtoa_r+0x722>
 800c5aa:	f7f3 fe97 	bl	80002dc <__adddf3>
 800c5ae:	4642      	mov	r2, r8
 800c5b0:	464b      	mov	r3, r9
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	460f      	mov	r7, r1
 800c5b6:	f7f4 fad7 	bl	8000b68 <__aeabi_dcmpgt>
 800c5ba:	b9c8      	cbnz	r0, 800c5f0 <_dtoa_r+0x6f8>
 800c5bc:	4642      	mov	r2, r8
 800c5be:	464b      	mov	r3, r9
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	4639      	mov	r1, r7
 800c5c4:	f7f4 faa8 	bl	8000b18 <__aeabi_dcmpeq>
 800c5c8:	b110      	cbz	r0, 800c5d0 <_dtoa_r+0x6d8>
 800c5ca:	9b02      	ldr	r3, [sp, #8]
 800c5cc:	07d9      	lsls	r1, r3, #31
 800c5ce:	d40f      	bmi.n	800c5f0 <_dtoa_r+0x6f8>
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	4659      	mov	r1, fp
 800c5d4:	f000 fac8 	bl	800cb68 <_Bfree>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	702b      	strb	r3, [r5, #0]
 800c5dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5de:	f10a 0001 	add.w	r0, sl, #1
 800c5e2:	6018      	str	r0, [r3, #0]
 800c5e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f43f acd8 	beq.w	800bf9c <_dtoa_r+0xa4>
 800c5ec:	601d      	str	r5, [r3, #0]
 800c5ee:	e4d5      	b.n	800bf9c <_dtoa_r+0xa4>
 800c5f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	461d      	mov	r5, r3
 800c5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5fc:	2a39      	cmp	r2, #57	; 0x39
 800c5fe:	d108      	bne.n	800c612 <_dtoa_r+0x71a>
 800c600:	9a00      	ldr	r2, [sp, #0]
 800c602:	429a      	cmp	r2, r3
 800c604:	d1f7      	bne.n	800c5f6 <_dtoa_r+0x6fe>
 800c606:	9a07      	ldr	r2, [sp, #28]
 800c608:	9900      	ldr	r1, [sp, #0]
 800c60a:	3201      	adds	r2, #1
 800c60c:	9207      	str	r2, [sp, #28]
 800c60e:	2230      	movs	r2, #48	; 0x30
 800c610:	700a      	strb	r2, [r1, #0]
 800c612:	781a      	ldrb	r2, [r3, #0]
 800c614:	3201      	adds	r2, #1
 800c616:	701a      	strb	r2, [r3, #0]
 800c618:	e78c      	b.n	800c534 <_dtoa_r+0x63c>
 800c61a:	4b7f      	ldr	r3, [pc, #508]	; (800c818 <_dtoa_r+0x920>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	f7f4 f813 	bl	8000648 <__aeabi_dmul>
 800c622:	2200      	movs	r2, #0
 800c624:	2300      	movs	r3, #0
 800c626:	4606      	mov	r6, r0
 800c628:	460f      	mov	r7, r1
 800c62a:	f7f4 fa75 	bl	8000b18 <__aeabi_dcmpeq>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d09b      	beq.n	800c56a <_dtoa_r+0x672>
 800c632:	e7cd      	b.n	800c5d0 <_dtoa_r+0x6d8>
 800c634:	9a08      	ldr	r2, [sp, #32]
 800c636:	2a00      	cmp	r2, #0
 800c638:	f000 80c4 	beq.w	800c7c4 <_dtoa_r+0x8cc>
 800c63c:	9a05      	ldr	r2, [sp, #20]
 800c63e:	2a01      	cmp	r2, #1
 800c640:	f300 80a8 	bgt.w	800c794 <_dtoa_r+0x89c>
 800c644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c646:	2a00      	cmp	r2, #0
 800c648:	f000 80a0 	beq.w	800c78c <_dtoa_r+0x894>
 800c64c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c650:	9e06      	ldr	r6, [sp, #24]
 800c652:	4645      	mov	r5, r8
 800c654:	9a04      	ldr	r2, [sp, #16]
 800c656:	2101      	movs	r1, #1
 800c658:	441a      	add	r2, r3
 800c65a:	4620      	mov	r0, r4
 800c65c:	4498      	add	r8, r3
 800c65e:	9204      	str	r2, [sp, #16]
 800c660:	f000 fb3e 	bl	800cce0 <__i2b>
 800c664:	4607      	mov	r7, r0
 800c666:	2d00      	cmp	r5, #0
 800c668:	dd0b      	ble.n	800c682 <_dtoa_r+0x78a>
 800c66a:	9b04      	ldr	r3, [sp, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dd08      	ble.n	800c682 <_dtoa_r+0x78a>
 800c670:	42ab      	cmp	r3, r5
 800c672:	9a04      	ldr	r2, [sp, #16]
 800c674:	bfa8      	it	ge
 800c676:	462b      	movge	r3, r5
 800c678:	eba8 0803 	sub.w	r8, r8, r3
 800c67c:	1aed      	subs	r5, r5, r3
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	9304      	str	r3, [sp, #16]
 800c682:	9b06      	ldr	r3, [sp, #24]
 800c684:	b1fb      	cbz	r3, 800c6c6 <_dtoa_r+0x7ce>
 800c686:	9b08      	ldr	r3, [sp, #32]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f000 809f 	beq.w	800c7cc <_dtoa_r+0x8d4>
 800c68e:	2e00      	cmp	r6, #0
 800c690:	dd11      	ble.n	800c6b6 <_dtoa_r+0x7be>
 800c692:	4639      	mov	r1, r7
 800c694:	4632      	mov	r2, r6
 800c696:	4620      	mov	r0, r4
 800c698:	f000 fbde 	bl	800ce58 <__pow5mult>
 800c69c:	465a      	mov	r2, fp
 800c69e:	4601      	mov	r1, r0
 800c6a0:	4607      	mov	r7, r0
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 fb32 	bl	800cd0c <__multiply>
 800c6a8:	4659      	mov	r1, fp
 800c6aa:	9007      	str	r0, [sp, #28]
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f000 fa5b 	bl	800cb68 <_Bfree>
 800c6b2:	9b07      	ldr	r3, [sp, #28]
 800c6b4:	469b      	mov	fp, r3
 800c6b6:	9b06      	ldr	r3, [sp, #24]
 800c6b8:	1b9a      	subs	r2, r3, r6
 800c6ba:	d004      	beq.n	800c6c6 <_dtoa_r+0x7ce>
 800c6bc:	4659      	mov	r1, fp
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 fbca 	bl	800ce58 <__pow5mult>
 800c6c4:	4683      	mov	fp, r0
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 fb09 	bl	800cce0 <__i2b>
 800c6ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	dd7c      	ble.n	800c7d0 <_dtoa_r+0x8d8>
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	4601      	mov	r1, r0
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f000 fbbc 	bl	800ce58 <__pow5mult>
 800c6e0:	9b05      	ldr	r3, [sp, #20]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	dd76      	ble.n	800c7d6 <_dtoa_r+0x8de>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9306      	str	r3, [sp, #24]
 800c6ec:	6933      	ldr	r3, [r6, #16]
 800c6ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c6f2:	6918      	ldr	r0, [r3, #16]
 800c6f4:	f000 faa4 	bl	800cc40 <__hi0bits>
 800c6f8:	f1c0 0020 	rsb	r0, r0, #32
 800c6fc:	9b04      	ldr	r3, [sp, #16]
 800c6fe:	4418      	add	r0, r3
 800c700:	f010 001f 	ands.w	r0, r0, #31
 800c704:	f000 8086 	beq.w	800c814 <_dtoa_r+0x91c>
 800c708:	f1c0 0320 	rsb	r3, r0, #32
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	dd7f      	ble.n	800c810 <_dtoa_r+0x918>
 800c710:	f1c0 001c 	rsb	r0, r0, #28
 800c714:	9b04      	ldr	r3, [sp, #16]
 800c716:	4403      	add	r3, r0
 800c718:	4480      	add	r8, r0
 800c71a:	4405      	add	r5, r0
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	f1b8 0f00 	cmp.w	r8, #0
 800c722:	dd05      	ble.n	800c730 <_dtoa_r+0x838>
 800c724:	4659      	mov	r1, fp
 800c726:	4642      	mov	r2, r8
 800c728:	4620      	mov	r0, r4
 800c72a:	f000 fbef 	bl	800cf0c <__lshift>
 800c72e:	4683      	mov	fp, r0
 800c730:	9b04      	ldr	r3, [sp, #16]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dd05      	ble.n	800c742 <_dtoa_r+0x84a>
 800c736:	4631      	mov	r1, r6
 800c738:	461a      	mov	r2, r3
 800c73a:	4620      	mov	r0, r4
 800c73c:	f000 fbe6 	bl	800cf0c <__lshift>
 800c740:	4606      	mov	r6, r0
 800c742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c744:	2b00      	cmp	r3, #0
 800c746:	d069      	beq.n	800c81c <_dtoa_r+0x924>
 800c748:	4631      	mov	r1, r6
 800c74a:	4658      	mov	r0, fp
 800c74c:	f000 fc4a 	bl	800cfe4 <__mcmp>
 800c750:	2800      	cmp	r0, #0
 800c752:	da63      	bge.n	800c81c <_dtoa_r+0x924>
 800c754:	2300      	movs	r3, #0
 800c756:	4659      	mov	r1, fp
 800c758:	220a      	movs	r2, #10
 800c75a:	4620      	mov	r0, r4
 800c75c:	f000 fa26 	bl	800cbac <__multadd>
 800c760:	9b08      	ldr	r3, [sp, #32]
 800c762:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c766:	4683      	mov	fp, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 818f 	beq.w	800ca8c <_dtoa_r+0xb94>
 800c76e:	4639      	mov	r1, r7
 800c770:	2300      	movs	r3, #0
 800c772:	220a      	movs	r2, #10
 800c774:	4620      	mov	r0, r4
 800c776:	f000 fa19 	bl	800cbac <__multadd>
 800c77a:	f1b9 0f00 	cmp.w	r9, #0
 800c77e:	4607      	mov	r7, r0
 800c780:	f300 808e 	bgt.w	800c8a0 <_dtoa_r+0x9a8>
 800c784:	9b05      	ldr	r3, [sp, #20]
 800c786:	2b02      	cmp	r3, #2
 800c788:	dc50      	bgt.n	800c82c <_dtoa_r+0x934>
 800c78a:	e089      	b.n	800c8a0 <_dtoa_r+0x9a8>
 800c78c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c78e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c792:	e75d      	b.n	800c650 <_dtoa_r+0x758>
 800c794:	9b01      	ldr	r3, [sp, #4]
 800c796:	1e5e      	subs	r6, r3, #1
 800c798:	9b06      	ldr	r3, [sp, #24]
 800c79a:	42b3      	cmp	r3, r6
 800c79c:	bfbf      	itttt	lt
 800c79e:	9b06      	ldrlt	r3, [sp, #24]
 800c7a0:	9606      	strlt	r6, [sp, #24]
 800c7a2:	1af2      	sublt	r2, r6, r3
 800c7a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c7a6:	bfb6      	itet	lt
 800c7a8:	189b      	addlt	r3, r3, r2
 800c7aa:	1b9e      	subge	r6, r3, r6
 800c7ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c7ae:	9b01      	ldr	r3, [sp, #4]
 800c7b0:	bfb8      	it	lt
 800c7b2:	2600      	movlt	r6, #0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfb5      	itete	lt
 800c7b8:	eba8 0503 	sublt.w	r5, r8, r3
 800c7bc:	9b01      	ldrge	r3, [sp, #4]
 800c7be:	2300      	movlt	r3, #0
 800c7c0:	4645      	movge	r5, r8
 800c7c2:	e747      	b.n	800c654 <_dtoa_r+0x75c>
 800c7c4:	9e06      	ldr	r6, [sp, #24]
 800c7c6:	9f08      	ldr	r7, [sp, #32]
 800c7c8:	4645      	mov	r5, r8
 800c7ca:	e74c      	b.n	800c666 <_dtoa_r+0x76e>
 800c7cc:	9a06      	ldr	r2, [sp, #24]
 800c7ce:	e775      	b.n	800c6bc <_dtoa_r+0x7c4>
 800c7d0:	9b05      	ldr	r3, [sp, #20]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	dc18      	bgt.n	800c808 <_dtoa_r+0x910>
 800c7d6:	9b02      	ldr	r3, [sp, #8]
 800c7d8:	b9b3      	cbnz	r3, 800c808 <_dtoa_r+0x910>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7e0:	b9a3      	cbnz	r3, 800c80c <_dtoa_r+0x914>
 800c7e2:	9b03      	ldr	r3, [sp, #12]
 800c7e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7e8:	0d1b      	lsrs	r3, r3, #20
 800c7ea:	051b      	lsls	r3, r3, #20
 800c7ec:	b12b      	cbz	r3, 800c7fa <_dtoa_r+0x902>
 800c7ee:	9b04      	ldr	r3, [sp, #16]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	f108 0801 	add.w	r8, r8, #1
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	9306      	str	r3, [sp, #24]
 800c7fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f47f af74 	bne.w	800c6ec <_dtoa_r+0x7f4>
 800c804:	2001      	movs	r0, #1
 800c806:	e779      	b.n	800c6fc <_dtoa_r+0x804>
 800c808:	2300      	movs	r3, #0
 800c80a:	e7f6      	b.n	800c7fa <_dtoa_r+0x902>
 800c80c:	9b02      	ldr	r3, [sp, #8]
 800c80e:	e7f4      	b.n	800c7fa <_dtoa_r+0x902>
 800c810:	d085      	beq.n	800c71e <_dtoa_r+0x826>
 800c812:	4618      	mov	r0, r3
 800c814:	301c      	adds	r0, #28
 800c816:	e77d      	b.n	800c714 <_dtoa_r+0x81c>
 800c818:	40240000 	.word	0x40240000
 800c81c:	9b01      	ldr	r3, [sp, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	dc38      	bgt.n	800c894 <_dtoa_r+0x99c>
 800c822:	9b05      	ldr	r3, [sp, #20]
 800c824:	2b02      	cmp	r3, #2
 800c826:	dd35      	ble.n	800c894 <_dtoa_r+0x99c>
 800c828:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c82c:	f1b9 0f00 	cmp.w	r9, #0
 800c830:	d10d      	bne.n	800c84e <_dtoa_r+0x956>
 800c832:	4631      	mov	r1, r6
 800c834:	464b      	mov	r3, r9
 800c836:	2205      	movs	r2, #5
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 f9b7 	bl	800cbac <__multadd>
 800c83e:	4601      	mov	r1, r0
 800c840:	4606      	mov	r6, r0
 800c842:	4658      	mov	r0, fp
 800c844:	f000 fbce 	bl	800cfe4 <__mcmp>
 800c848:	2800      	cmp	r0, #0
 800c84a:	f73f adbd 	bgt.w	800c3c8 <_dtoa_r+0x4d0>
 800c84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c850:	9d00      	ldr	r5, [sp, #0]
 800c852:	ea6f 0a03 	mvn.w	sl, r3
 800c856:	f04f 0800 	mov.w	r8, #0
 800c85a:	4631      	mov	r1, r6
 800c85c:	4620      	mov	r0, r4
 800c85e:	f000 f983 	bl	800cb68 <_Bfree>
 800c862:	2f00      	cmp	r7, #0
 800c864:	f43f aeb4 	beq.w	800c5d0 <_dtoa_r+0x6d8>
 800c868:	f1b8 0f00 	cmp.w	r8, #0
 800c86c:	d005      	beq.n	800c87a <_dtoa_r+0x982>
 800c86e:	45b8      	cmp	r8, r7
 800c870:	d003      	beq.n	800c87a <_dtoa_r+0x982>
 800c872:	4641      	mov	r1, r8
 800c874:	4620      	mov	r0, r4
 800c876:	f000 f977 	bl	800cb68 <_Bfree>
 800c87a:	4639      	mov	r1, r7
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 f973 	bl	800cb68 <_Bfree>
 800c882:	e6a5      	b.n	800c5d0 <_dtoa_r+0x6d8>
 800c884:	2600      	movs	r6, #0
 800c886:	4637      	mov	r7, r6
 800c888:	e7e1      	b.n	800c84e <_dtoa_r+0x956>
 800c88a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c88c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c890:	4637      	mov	r7, r6
 800c892:	e599      	b.n	800c3c8 <_dtoa_r+0x4d0>
 800c894:	9b08      	ldr	r3, [sp, #32]
 800c896:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 80fd 	beq.w	800ca9a <_dtoa_r+0xba2>
 800c8a0:	2d00      	cmp	r5, #0
 800c8a2:	dd05      	ble.n	800c8b0 <_dtoa_r+0x9b8>
 800c8a4:	4639      	mov	r1, r7
 800c8a6:	462a      	mov	r2, r5
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f000 fb2f 	bl	800cf0c <__lshift>
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	9b06      	ldr	r3, [sp, #24]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d05c      	beq.n	800c970 <_dtoa_r+0xa78>
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f000 f915 	bl	800cae8 <_Balloc>
 800c8be:	4605      	mov	r5, r0
 800c8c0:	b928      	cbnz	r0, 800c8ce <_dtoa_r+0x9d6>
 800c8c2:	4b80      	ldr	r3, [pc, #512]	; (800cac4 <_dtoa_r+0xbcc>)
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c8ca:	f7ff bb2e 	b.w	800bf2a <_dtoa_r+0x32>
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	3202      	adds	r2, #2
 800c8d2:	0092      	lsls	r2, r2, #2
 800c8d4:	f107 010c 	add.w	r1, r7, #12
 800c8d8:	300c      	adds	r0, #12
 800c8da:	f7fe fddf 	bl	800b49c <memcpy>
 800c8de:	2201      	movs	r2, #1
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f000 fb12 	bl	800cf0c <__lshift>
 800c8e8:	9b00      	ldr	r3, [sp, #0]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	9301      	str	r3, [sp, #4]
 800c8ee:	9b00      	ldr	r3, [sp, #0]
 800c8f0:	444b      	add	r3, r9
 800c8f2:	9307      	str	r3, [sp, #28]
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	46b8      	mov	r8, r7
 800c8fc:	9306      	str	r3, [sp, #24]
 800c8fe:	4607      	mov	r7, r0
 800c900:	9b01      	ldr	r3, [sp, #4]
 800c902:	4631      	mov	r1, r6
 800c904:	3b01      	subs	r3, #1
 800c906:	4658      	mov	r0, fp
 800c908:	9302      	str	r3, [sp, #8]
 800c90a:	f7ff fa67 	bl	800bddc <quorem>
 800c90e:	4603      	mov	r3, r0
 800c910:	3330      	adds	r3, #48	; 0x30
 800c912:	9004      	str	r0, [sp, #16]
 800c914:	4641      	mov	r1, r8
 800c916:	4658      	mov	r0, fp
 800c918:	9308      	str	r3, [sp, #32]
 800c91a:	f000 fb63 	bl	800cfe4 <__mcmp>
 800c91e:	463a      	mov	r2, r7
 800c920:	4681      	mov	r9, r0
 800c922:	4631      	mov	r1, r6
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fb79 	bl	800d01c <__mdiff>
 800c92a:	68c2      	ldr	r2, [r0, #12]
 800c92c:	9b08      	ldr	r3, [sp, #32]
 800c92e:	4605      	mov	r5, r0
 800c930:	bb02      	cbnz	r2, 800c974 <_dtoa_r+0xa7c>
 800c932:	4601      	mov	r1, r0
 800c934:	4658      	mov	r0, fp
 800c936:	f000 fb55 	bl	800cfe4 <__mcmp>
 800c93a:	9b08      	ldr	r3, [sp, #32]
 800c93c:	4602      	mov	r2, r0
 800c93e:	4629      	mov	r1, r5
 800c940:	4620      	mov	r0, r4
 800c942:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c946:	f000 f90f 	bl	800cb68 <_Bfree>
 800c94a:	9b05      	ldr	r3, [sp, #20]
 800c94c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94e:	9d01      	ldr	r5, [sp, #4]
 800c950:	ea43 0102 	orr.w	r1, r3, r2
 800c954:	9b06      	ldr	r3, [sp, #24]
 800c956:	430b      	orrs	r3, r1
 800c958:	9b08      	ldr	r3, [sp, #32]
 800c95a:	d10d      	bne.n	800c978 <_dtoa_r+0xa80>
 800c95c:	2b39      	cmp	r3, #57	; 0x39
 800c95e:	d029      	beq.n	800c9b4 <_dtoa_r+0xabc>
 800c960:	f1b9 0f00 	cmp.w	r9, #0
 800c964:	dd01      	ble.n	800c96a <_dtoa_r+0xa72>
 800c966:	9b04      	ldr	r3, [sp, #16]
 800c968:	3331      	adds	r3, #49	; 0x31
 800c96a:	9a02      	ldr	r2, [sp, #8]
 800c96c:	7013      	strb	r3, [r2, #0]
 800c96e:	e774      	b.n	800c85a <_dtoa_r+0x962>
 800c970:	4638      	mov	r0, r7
 800c972:	e7b9      	b.n	800c8e8 <_dtoa_r+0x9f0>
 800c974:	2201      	movs	r2, #1
 800c976:	e7e2      	b.n	800c93e <_dtoa_r+0xa46>
 800c978:	f1b9 0f00 	cmp.w	r9, #0
 800c97c:	db06      	blt.n	800c98c <_dtoa_r+0xa94>
 800c97e:	9905      	ldr	r1, [sp, #20]
 800c980:	ea41 0909 	orr.w	r9, r1, r9
 800c984:	9906      	ldr	r1, [sp, #24]
 800c986:	ea59 0101 	orrs.w	r1, r9, r1
 800c98a:	d120      	bne.n	800c9ce <_dtoa_r+0xad6>
 800c98c:	2a00      	cmp	r2, #0
 800c98e:	ddec      	ble.n	800c96a <_dtoa_r+0xa72>
 800c990:	4659      	mov	r1, fp
 800c992:	2201      	movs	r2, #1
 800c994:	4620      	mov	r0, r4
 800c996:	9301      	str	r3, [sp, #4]
 800c998:	f000 fab8 	bl	800cf0c <__lshift>
 800c99c:	4631      	mov	r1, r6
 800c99e:	4683      	mov	fp, r0
 800c9a0:	f000 fb20 	bl	800cfe4 <__mcmp>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	9b01      	ldr	r3, [sp, #4]
 800c9a8:	dc02      	bgt.n	800c9b0 <_dtoa_r+0xab8>
 800c9aa:	d1de      	bne.n	800c96a <_dtoa_r+0xa72>
 800c9ac:	07da      	lsls	r2, r3, #31
 800c9ae:	d5dc      	bpl.n	800c96a <_dtoa_r+0xa72>
 800c9b0:	2b39      	cmp	r3, #57	; 0x39
 800c9b2:	d1d8      	bne.n	800c966 <_dtoa_r+0xa6e>
 800c9b4:	9a02      	ldr	r2, [sp, #8]
 800c9b6:	2339      	movs	r3, #57	; 0x39
 800c9b8:	7013      	strb	r3, [r2, #0]
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	461d      	mov	r5, r3
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c9c4:	2a39      	cmp	r2, #57	; 0x39
 800c9c6:	d050      	beq.n	800ca6a <_dtoa_r+0xb72>
 800c9c8:	3201      	adds	r2, #1
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	e745      	b.n	800c85a <_dtoa_r+0x962>
 800c9ce:	2a00      	cmp	r2, #0
 800c9d0:	dd03      	ble.n	800c9da <_dtoa_r+0xae2>
 800c9d2:	2b39      	cmp	r3, #57	; 0x39
 800c9d4:	d0ee      	beq.n	800c9b4 <_dtoa_r+0xabc>
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	e7c7      	b.n	800c96a <_dtoa_r+0xa72>
 800c9da:	9a01      	ldr	r2, [sp, #4]
 800c9dc:	9907      	ldr	r1, [sp, #28]
 800c9de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c9e2:	428a      	cmp	r2, r1
 800c9e4:	d02a      	beq.n	800ca3c <_dtoa_r+0xb44>
 800c9e6:	4659      	mov	r1, fp
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	220a      	movs	r2, #10
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f000 f8dd 	bl	800cbac <__multadd>
 800c9f2:	45b8      	cmp	r8, r7
 800c9f4:	4683      	mov	fp, r0
 800c9f6:	f04f 0300 	mov.w	r3, #0
 800c9fa:	f04f 020a 	mov.w	r2, #10
 800c9fe:	4641      	mov	r1, r8
 800ca00:	4620      	mov	r0, r4
 800ca02:	d107      	bne.n	800ca14 <_dtoa_r+0xb1c>
 800ca04:	f000 f8d2 	bl	800cbac <__multadd>
 800ca08:	4680      	mov	r8, r0
 800ca0a:	4607      	mov	r7, r0
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	e775      	b.n	800c900 <_dtoa_r+0xa08>
 800ca14:	f000 f8ca 	bl	800cbac <__multadd>
 800ca18:	4639      	mov	r1, r7
 800ca1a:	4680      	mov	r8, r0
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	220a      	movs	r2, #10
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 f8c3 	bl	800cbac <__multadd>
 800ca26:	4607      	mov	r7, r0
 800ca28:	e7f0      	b.n	800ca0c <_dtoa_r+0xb14>
 800ca2a:	f1b9 0f00 	cmp.w	r9, #0
 800ca2e:	9a00      	ldr	r2, [sp, #0]
 800ca30:	bfcc      	ite	gt
 800ca32:	464d      	movgt	r5, r9
 800ca34:	2501      	movle	r5, #1
 800ca36:	4415      	add	r5, r2
 800ca38:	f04f 0800 	mov.w	r8, #0
 800ca3c:	4659      	mov	r1, fp
 800ca3e:	2201      	movs	r2, #1
 800ca40:	4620      	mov	r0, r4
 800ca42:	9301      	str	r3, [sp, #4]
 800ca44:	f000 fa62 	bl	800cf0c <__lshift>
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4683      	mov	fp, r0
 800ca4c:	f000 faca 	bl	800cfe4 <__mcmp>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	dcb2      	bgt.n	800c9ba <_dtoa_r+0xac2>
 800ca54:	d102      	bne.n	800ca5c <_dtoa_r+0xb64>
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	07db      	lsls	r3, r3, #31
 800ca5a:	d4ae      	bmi.n	800c9ba <_dtoa_r+0xac2>
 800ca5c:	462b      	mov	r3, r5
 800ca5e:	461d      	mov	r5, r3
 800ca60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca64:	2a30      	cmp	r2, #48	; 0x30
 800ca66:	d0fa      	beq.n	800ca5e <_dtoa_r+0xb66>
 800ca68:	e6f7      	b.n	800c85a <_dtoa_r+0x962>
 800ca6a:	9a00      	ldr	r2, [sp, #0]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d1a5      	bne.n	800c9bc <_dtoa_r+0xac4>
 800ca70:	f10a 0a01 	add.w	sl, sl, #1
 800ca74:	2331      	movs	r3, #49	; 0x31
 800ca76:	e779      	b.n	800c96c <_dtoa_r+0xa74>
 800ca78:	4b13      	ldr	r3, [pc, #76]	; (800cac8 <_dtoa_r+0xbd0>)
 800ca7a:	f7ff baaf 	b.w	800bfdc <_dtoa_r+0xe4>
 800ca7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f47f aa86 	bne.w	800bf92 <_dtoa_r+0x9a>
 800ca86:	4b11      	ldr	r3, [pc, #68]	; (800cacc <_dtoa_r+0xbd4>)
 800ca88:	f7ff baa8 	b.w	800bfdc <_dtoa_r+0xe4>
 800ca8c:	f1b9 0f00 	cmp.w	r9, #0
 800ca90:	dc03      	bgt.n	800ca9a <_dtoa_r+0xba2>
 800ca92:	9b05      	ldr	r3, [sp, #20]
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	f73f aec9 	bgt.w	800c82c <_dtoa_r+0x934>
 800ca9a:	9d00      	ldr	r5, [sp, #0]
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	4658      	mov	r0, fp
 800caa0:	f7ff f99c 	bl	800bddc <quorem>
 800caa4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800caa8:	f805 3b01 	strb.w	r3, [r5], #1
 800caac:	9a00      	ldr	r2, [sp, #0]
 800caae:	1aaa      	subs	r2, r5, r2
 800cab0:	4591      	cmp	r9, r2
 800cab2:	ddba      	ble.n	800ca2a <_dtoa_r+0xb32>
 800cab4:	4659      	mov	r1, fp
 800cab6:	2300      	movs	r3, #0
 800cab8:	220a      	movs	r2, #10
 800caba:	4620      	mov	r0, r4
 800cabc:	f000 f876 	bl	800cbac <__multadd>
 800cac0:	4683      	mov	fp, r0
 800cac2:	e7eb      	b.n	800ca9c <_dtoa_r+0xba4>
 800cac4:	0801374b 	.word	0x0801374b
 800cac8:	080136a4 	.word	0x080136a4
 800cacc:	080136c8 	.word	0x080136c8

0800cad0 <_localeconv_r>:
 800cad0:	4800      	ldr	r0, [pc, #0]	; (800cad4 <_localeconv_r+0x4>)
 800cad2:	4770      	bx	lr
 800cad4:	200005e4 	.word	0x200005e4

0800cad8 <malloc>:
 800cad8:	4b02      	ldr	r3, [pc, #8]	; (800cae4 <malloc+0xc>)
 800cada:	4601      	mov	r1, r0
 800cadc:	6818      	ldr	r0, [r3, #0]
 800cade:	f000 bbe1 	b.w	800d2a4 <_malloc_r>
 800cae2:	bf00      	nop
 800cae4:	20000490 	.word	0x20000490

0800cae8 <_Balloc>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800caec:	4604      	mov	r4, r0
 800caee:	460d      	mov	r5, r1
 800caf0:	b976      	cbnz	r6, 800cb10 <_Balloc+0x28>
 800caf2:	2010      	movs	r0, #16
 800caf4:	f7ff fff0 	bl	800cad8 <malloc>
 800caf8:	4602      	mov	r2, r0
 800cafa:	6260      	str	r0, [r4, #36]	; 0x24
 800cafc:	b920      	cbnz	r0, 800cb08 <_Balloc+0x20>
 800cafe:	4b18      	ldr	r3, [pc, #96]	; (800cb60 <_Balloc+0x78>)
 800cb00:	4818      	ldr	r0, [pc, #96]	; (800cb64 <_Balloc+0x7c>)
 800cb02:	2166      	movs	r1, #102	; 0x66
 800cb04:	f000 fd94 	bl	800d630 <__assert_func>
 800cb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb0c:	6006      	str	r6, [r0, #0]
 800cb0e:	60c6      	str	r6, [r0, #12]
 800cb10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb12:	68f3      	ldr	r3, [r6, #12]
 800cb14:	b183      	cbz	r3, 800cb38 <_Balloc+0x50>
 800cb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb1e:	b9b8      	cbnz	r0, 800cb50 <_Balloc+0x68>
 800cb20:	2101      	movs	r1, #1
 800cb22:	fa01 f605 	lsl.w	r6, r1, r5
 800cb26:	1d72      	adds	r2, r6, #5
 800cb28:	0092      	lsls	r2, r2, #2
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 fb5a 	bl	800d1e4 <_calloc_r>
 800cb30:	b160      	cbz	r0, 800cb4c <_Balloc+0x64>
 800cb32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb36:	e00e      	b.n	800cb56 <_Balloc+0x6e>
 800cb38:	2221      	movs	r2, #33	; 0x21
 800cb3a:	2104      	movs	r1, #4
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f000 fb51 	bl	800d1e4 <_calloc_r>
 800cb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb44:	60f0      	str	r0, [r6, #12]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e4      	bne.n	800cb16 <_Balloc+0x2e>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	6802      	ldr	r2, [r0, #0]
 800cb52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb56:	2300      	movs	r3, #0
 800cb58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb5c:	e7f7      	b.n	800cb4e <_Balloc+0x66>
 800cb5e:	bf00      	nop
 800cb60:	080136d5 	.word	0x080136d5
 800cb64:	0801375c 	.word	0x0801375c

0800cb68 <_Bfree>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	b976      	cbnz	r6, 800cb90 <_Bfree+0x28>
 800cb72:	2010      	movs	r0, #16
 800cb74:	f7ff ffb0 	bl	800cad8 <malloc>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	6268      	str	r0, [r5, #36]	; 0x24
 800cb7c:	b920      	cbnz	r0, 800cb88 <_Bfree+0x20>
 800cb7e:	4b09      	ldr	r3, [pc, #36]	; (800cba4 <_Bfree+0x3c>)
 800cb80:	4809      	ldr	r0, [pc, #36]	; (800cba8 <_Bfree+0x40>)
 800cb82:	218a      	movs	r1, #138	; 0x8a
 800cb84:	f000 fd54 	bl	800d630 <__assert_func>
 800cb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb8c:	6006      	str	r6, [r0, #0]
 800cb8e:	60c6      	str	r6, [r0, #12]
 800cb90:	b13c      	cbz	r4, 800cba2 <_Bfree+0x3a>
 800cb92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb94:	6862      	ldr	r2, [r4, #4]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb9c:	6021      	str	r1, [r4, #0]
 800cb9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	080136d5 	.word	0x080136d5
 800cba8:	0801375c 	.word	0x0801375c

0800cbac <__multadd>:
 800cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb0:	690e      	ldr	r6, [r1, #16]
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	4698      	mov	r8, r3
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	f101 0014 	add.w	r0, r1, #20
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	6805      	ldr	r5, [r0, #0]
 800cbc0:	b2a9      	uxth	r1, r5
 800cbc2:	fb02 8101 	mla	r1, r2, r1, r8
 800cbc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cbca:	0c2d      	lsrs	r5, r5, #16
 800cbcc:	fb02 c505 	mla	r5, r2, r5, ip
 800cbd0:	b289      	uxth	r1, r1
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cbd8:	429e      	cmp	r6, r3
 800cbda:	f840 1b04 	str.w	r1, [r0], #4
 800cbde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cbe2:	dcec      	bgt.n	800cbbe <__multadd+0x12>
 800cbe4:	f1b8 0f00 	cmp.w	r8, #0
 800cbe8:	d022      	beq.n	800cc30 <__multadd+0x84>
 800cbea:	68a3      	ldr	r3, [r4, #8]
 800cbec:	42b3      	cmp	r3, r6
 800cbee:	dc19      	bgt.n	800cc24 <__multadd+0x78>
 800cbf0:	6861      	ldr	r1, [r4, #4]
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	3101      	adds	r1, #1
 800cbf6:	f7ff ff77 	bl	800cae8 <_Balloc>
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	b928      	cbnz	r0, 800cc0a <__multadd+0x5e>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	4b0d      	ldr	r3, [pc, #52]	; (800cc38 <__multadd+0x8c>)
 800cc02:	480e      	ldr	r0, [pc, #56]	; (800cc3c <__multadd+0x90>)
 800cc04:	21b5      	movs	r1, #181	; 0xb5
 800cc06:	f000 fd13 	bl	800d630 <__assert_func>
 800cc0a:	6922      	ldr	r2, [r4, #16]
 800cc0c:	3202      	adds	r2, #2
 800cc0e:	f104 010c 	add.w	r1, r4, #12
 800cc12:	0092      	lsls	r2, r2, #2
 800cc14:	300c      	adds	r0, #12
 800cc16:	f7fe fc41 	bl	800b49c <memcpy>
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	f7ff ffa3 	bl	800cb68 <_Bfree>
 800cc22:	462c      	mov	r4, r5
 800cc24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cc28:	3601      	adds	r6, #1
 800cc2a:	f8c3 8014 	str.w	r8, [r3, #20]
 800cc2e:	6126      	str	r6, [r4, #16]
 800cc30:	4620      	mov	r0, r4
 800cc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc36:	bf00      	nop
 800cc38:	0801374b 	.word	0x0801374b
 800cc3c:	0801375c 	.word	0x0801375c

0800cc40 <__hi0bits>:
 800cc40:	0c03      	lsrs	r3, r0, #16
 800cc42:	041b      	lsls	r3, r3, #16
 800cc44:	b9d3      	cbnz	r3, 800cc7c <__hi0bits+0x3c>
 800cc46:	0400      	lsls	r0, r0, #16
 800cc48:	2310      	movs	r3, #16
 800cc4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc4e:	bf04      	itt	eq
 800cc50:	0200      	lsleq	r0, r0, #8
 800cc52:	3308      	addeq	r3, #8
 800cc54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc58:	bf04      	itt	eq
 800cc5a:	0100      	lsleq	r0, r0, #4
 800cc5c:	3304      	addeq	r3, #4
 800cc5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc62:	bf04      	itt	eq
 800cc64:	0080      	lsleq	r0, r0, #2
 800cc66:	3302      	addeq	r3, #2
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	db05      	blt.n	800cc78 <__hi0bits+0x38>
 800cc6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc70:	f103 0301 	add.w	r3, r3, #1
 800cc74:	bf08      	it	eq
 800cc76:	2320      	moveq	r3, #32
 800cc78:	4618      	mov	r0, r3
 800cc7a:	4770      	bx	lr
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	e7e4      	b.n	800cc4a <__hi0bits+0xa>

0800cc80 <__lo0bits>:
 800cc80:	6803      	ldr	r3, [r0, #0]
 800cc82:	f013 0207 	ands.w	r2, r3, #7
 800cc86:	4601      	mov	r1, r0
 800cc88:	d00b      	beq.n	800cca2 <__lo0bits+0x22>
 800cc8a:	07da      	lsls	r2, r3, #31
 800cc8c:	d424      	bmi.n	800ccd8 <__lo0bits+0x58>
 800cc8e:	0798      	lsls	r0, r3, #30
 800cc90:	bf49      	itett	mi
 800cc92:	085b      	lsrmi	r3, r3, #1
 800cc94:	089b      	lsrpl	r3, r3, #2
 800cc96:	2001      	movmi	r0, #1
 800cc98:	600b      	strmi	r3, [r1, #0]
 800cc9a:	bf5c      	itt	pl
 800cc9c:	600b      	strpl	r3, [r1, #0]
 800cc9e:	2002      	movpl	r0, #2
 800cca0:	4770      	bx	lr
 800cca2:	b298      	uxth	r0, r3
 800cca4:	b9b0      	cbnz	r0, 800ccd4 <__lo0bits+0x54>
 800cca6:	0c1b      	lsrs	r3, r3, #16
 800cca8:	2010      	movs	r0, #16
 800ccaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ccae:	bf04      	itt	eq
 800ccb0:	0a1b      	lsreq	r3, r3, #8
 800ccb2:	3008      	addeq	r0, #8
 800ccb4:	071a      	lsls	r2, r3, #28
 800ccb6:	bf04      	itt	eq
 800ccb8:	091b      	lsreq	r3, r3, #4
 800ccba:	3004      	addeq	r0, #4
 800ccbc:	079a      	lsls	r2, r3, #30
 800ccbe:	bf04      	itt	eq
 800ccc0:	089b      	lsreq	r3, r3, #2
 800ccc2:	3002      	addeq	r0, #2
 800ccc4:	07da      	lsls	r2, r3, #31
 800ccc6:	d403      	bmi.n	800ccd0 <__lo0bits+0x50>
 800ccc8:	085b      	lsrs	r3, r3, #1
 800ccca:	f100 0001 	add.w	r0, r0, #1
 800ccce:	d005      	beq.n	800ccdc <__lo0bits+0x5c>
 800ccd0:	600b      	str	r3, [r1, #0]
 800ccd2:	4770      	bx	lr
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	e7e8      	b.n	800ccaa <__lo0bits+0x2a>
 800ccd8:	2000      	movs	r0, #0
 800ccda:	4770      	bx	lr
 800ccdc:	2020      	movs	r0, #32
 800ccde:	4770      	bx	lr

0800cce0 <__i2b>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	460c      	mov	r4, r1
 800cce4:	2101      	movs	r1, #1
 800cce6:	f7ff feff 	bl	800cae8 <_Balloc>
 800ccea:	4602      	mov	r2, r0
 800ccec:	b928      	cbnz	r0, 800ccfa <__i2b+0x1a>
 800ccee:	4b05      	ldr	r3, [pc, #20]	; (800cd04 <__i2b+0x24>)
 800ccf0:	4805      	ldr	r0, [pc, #20]	; (800cd08 <__i2b+0x28>)
 800ccf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccf6:	f000 fc9b 	bl	800d630 <__assert_func>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	6144      	str	r4, [r0, #20]
 800ccfe:	6103      	str	r3, [r0, #16]
 800cd00:	bd10      	pop	{r4, pc}
 800cd02:	bf00      	nop
 800cd04:	0801374b 	.word	0x0801374b
 800cd08:	0801375c 	.word	0x0801375c

0800cd0c <__multiply>:
 800cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	4614      	mov	r4, r2
 800cd12:	690a      	ldr	r2, [r1, #16]
 800cd14:	6923      	ldr	r3, [r4, #16]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	bfb8      	it	lt
 800cd1a:	460b      	movlt	r3, r1
 800cd1c:	460d      	mov	r5, r1
 800cd1e:	bfbc      	itt	lt
 800cd20:	4625      	movlt	r5, r4
 800cd22:	461c      	movlt	r4, r3
 800cd24:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cd28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cd2c:	68ab      	ldr	r3, [r5, #8]
 800cd2e:	6869      	ldr	r1, [r5, #4]
 800cd30:	eb0a 0709 	add.w	r7, sl, r9
 800cd34:	42bb      	cmp	r3, r7
 800cd36:	b085      	sub	sp, #20
 800cd38:	bfb8      	it	lt
 800cd3a:	3101      	addlt	r1, #1
 800cd3c:	f7ff fed4 	bl	800cae8 <_Balloc>
 800cd40:	b930      	cbnz	r0, 800cd50 <__multiply+0x44>
 800cd42:	4602      	mov	r2, r0
 800cd44:	4b42      	ldr	r3, [pc, #264]	; (800ce50 <__multiply+0x144>)
 800cd46:	4843      	ldr	r0, [pc, #268]	; (800ce54 <__multiply+0x148>)
 800cd48:	f240 115d 	movw	r1, #349	; 0x15d
 800cd4c:	f000 fc70 	bl	800d630 <__assert_func>
 800cd50:	f100 0614 	add.w	r6, r0, #20
 800cd54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cd58:	4633      	mov	r3, r6
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	4543      	cmp	r3, r8
 800cd5e:	d31e      	bcc.n	800cd9e <__multiply+0x92>
 800cd60:	f105 0c14 	add.w	ip, r5, #20
 800cd64:	f104 0314 	add.w	r3, r4, #20
 800cd68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cd6c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cd70:	9202      	str	r2, [sp, #8]
 800cd72:	ebac 0205 	sub.w	r2, ip, r5
 800cd76:	3a15      	subs	r2, #21
 800cd78:	f022 0203 	bic.w	r2, r2, #3
 800cd7c:	3204      	adds	r2, #4
 800cd7e:	f105 0115 	add.w	r1, r5, #21
 800cd82:	458c      	cmp	ip, r1
 800cd84:	bf38      	it	cc
 800cd86:	2204      	movcc	r2, #4
 800cd88:	9201      	str	r2, [sp, #4]
 800cd8a:	9a02      	ldr	r2, [sp, #8]
 800cd8c:	9303      	str	r3, [sp, #12]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d808      	bhi.n	800cda4 <__multiply+0x98>
 800cd92:	2f00      	cmp	r7, #0
 800cd94:	dc55      	bgt.n	800ce42 <__multiply+0x136>
 800cd96:	6107      	str	r7, [r0, #16]
 800cd98:	b005      	add	sp, #20
 800cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9e:	f843 2b04 	str.w	r2, [r3], #4
 800cda2:	e7db      	b.n	800cd5c <__multiply+0x50>
 800cda4:	f8b3 a000 	ldrh.w	sl, [r3]
 800cda8:	f1ba 0f00 	cmp.w	sl, #0
 800cdac:	d020      	beq.n	800cdf0 <__multiply+0xe4>
 800cdae:	f105 0e14 	add.w	lr, r5, #20
 800cdb2:	46b1      	mov	r9, r6
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cdba:	f8d9 b000 	ldr.w	fp, [r9]
 800cdbe:	b2a1      	uxth	r1, r4
 800cdc0:	fa1f fb8b 	uxth.w	fp, fp
 800cdc4:	fb0a b101 	mla	r1, sl, r1, fp
 800cdc8:	4411      	add	r1, r2
 800cdca:	f8d9 2000 	ldr.w	r2, [r9]
 800cdce:	0c24      	lsrs	r4, r4, #16
 800cdd0:	0c12      	lsrs	r2, r2, #16
 800cdd2:	fb0a 2404 	mla	r4, sl, r4, r2
 800cdd6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cdda:	b289      	uxth	r1, r1
 800cddc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cde0:	45f4      	cmp	ip, lr
 800cde2:	f849 1b04 	str.w	r1, [r9], #4
 800cde6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cdea:	d8e4      	bhi.n	800cdb6 <__multiply+0xaa>
 800cdec:	9901      	ldr	r1, [sp, #4]
 800cdee:	5072      	str	r2, [r6, r1]
 800cdf0:	9a03      	ldr	r2, [sp, #12]
 800cdf2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cdf6:	3304      	adds	r3, #4
 800cdf8:	f1b9 0f00 	cmp.w	r9, #0
 800cdfc:	d01f      	beq.n	800ce3e <__multiply+0x132>
 800cdfe:	6834      	ldr	r4, [r6, #0]
 800ce00:	f105 0114 	add.w	r1, r5, #20
 800ce04:	46b6      	mov	lr, r6
 800ce06:	f04f 0a00 	mov.w	sl, #0
 800ce0a:	880a      	ldrh	r2, [r1, #0]
 800ce0c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ce10:	fb09 b202 	mla	r2, r9, r2, fp
 800ce14:	4492      	add	sl, r2
 800ce16:	b2a4      	uxth	r4, r4
 800ce18:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ce1c:	f84e 4b04 	str.w	r4, [lr], #4
 800ce20:	f851 4b04 	ldr.w	r4, [r1], #4
 800ce24:	f8be 2000 	ldrh.w	r2, [lr]
 800ce28:	0c24      	lsrs	r4, r4, #16
 800ce2a:	fb09 2404 	mla	r4, r9, r4, r2
 800ce2e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ce32:	458c      	cmp	ip, r1
 800ce34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ce38:	d8e7      	bhi.n	800ce0a <__multiply+0xfe>
 800ce3a:	9a01      	ldr	r2, [sp, #4]
 800ce3c:	50b4      	str	r4, [r6, r2]
 800ce3e:	3604      	adds	r6, #4
 800ce40:	e7a3      	b.n	800cd8a <__multiply+0x7e>
 800ce42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1a5      	bne.n	800cd96 <__multiply+0x8a>
 800ce4a:	3f01      	subs	r7, #1
 800ce4c:	e7a1      	b.n	800cd92 <__multiply+0x86>
 800ce4e:	bf00      	nop
 800ce50:	0801374b 	.word	0x0801374b
 800ce54:	0801375c 	.word	0x0801375c

0800ce58 <__pow5mult>:
 800ce58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce5c:	4615      	mov	r5, r2
 800ce5e:	f012 0203 	ands.w	r2, r2, #3
 800ce62:	4606      	mov	r6, r0
 800ce64:	460f      	mov	r7, r1
 800ce66:	d007      	beq.n	800ce78 <__pow5mult+0x20>
 800ce68:	4c25      	ldr	r4, [pc, #148]	; (800cf00 <__pow5mult+0xa8>)
 800ce6a:	3a01      	subs	r2, #1
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce72:	f7ff fe9b 	bl	800cbac <__multadd>
 800ce76:	4607      	mov	r7, r0
 800ce78:	10ad      	asrs	r5, r5, #2
 800ce7a:	d03d      	beq.n	800cef8 <__pow5mult+0xa0>
 800ce7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce7e:	b97c      	cbnz	r4, 800cea0 <__pow5mult+0x48>
 800ce80:	2010      	movs	r0, #16
 800ce82:	f7ff fe29 	bl	800cad8 <malloc>
 800ce86:	4602      	mov	r2, r0
 800ce88:	6270      	str	r0, [r6, #36]	; 0x24
 800ce8a:	b928      	cbnz	r0, 800ce98 <__pow5mult+0x40>
 800ce8c:	4b1d      	ldr	r3, [pc, #116]	; (800cf04 <__pow5mult+0xac>)
 800ce8e:	481e      	ldr	r0, [pc, #120]	; (800cf08 <__pow5mult+0xb0>)
 800ce90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce94:	f000 fbcc 	bl	800d630 <__assert_func>
 800ce98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce9c:	6004      	str	r4, [r0, #0]
 800ce9e:	60c4      	str	r4, [r0, #12]
 800cea0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cea8:	b94c      	cbnz	r4, 800cebe <__pow5mult+0x66>
 800ceaa:	f240 2171 	movw	r1, #625	; 0x271
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f7ff ff16 	bl	800cce0 <__i2b>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ceba:	4604      	mov	r4, r0
 800cebc:	6003      	str	r3, [r0, #0]
 800cebe:	f04f 0900 	mov.w	r9, #0
 800cec2:	07eb      	lsls	r3, r5, #31
 800cec4:	d50a      	bpl.n	800cedc <__pow5mult+0x84>
 800cec6:	4639      	mov	r1, r7
 800cec8:	4622      	mov	r2, r4
 800ceca:	4630      	mov	r0, r6
 800cecc:	f7ff ff1e 	bl	800cd0c <__multiply>
 800ced0:	4639      	mov	r1, r7
 800ced2:	4680      	mov	r8, r0
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7ff fe47 	bl	800cb68 <_Bfree>
 800ceda:	4647      	mov	r7, r8
 800cedc:	106d      	asrs	r5, r5, #1
 800cede:	d00b      	beq.n	800cef8 <__pow5mult+0xa0>
 800cee0:	6820      	ldr	r0, [r4, #0]
 800cee2:	b938      	cbnz	r0, 800cef4 <__pow5mult+0x9c>
 800cee4:	4622      	mov	r2, r4
 800cee6:	4621      	mov	r1, r4
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7ff ff0f 	bl	800cd0c <__multiply>
 800ceee:	6020      	str	r0, [r4, #0]
 800cef0:	f8c0 9000 	str.w	r9, [r0]
 800cef4:	4604      	mov	r4, r0
 800cef6:	e7e4      	b.n	800cec2 <__pow5mult+0x6a>
 800cef8:	4638      	mov	r0, r7
 800cefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cefe:	bf00      	nop
 800cf00:	080138b0 	.word	0x080138b0
 800cf04:	080136d5 	.word	0x080136d5
 800cf08:	0801375c 	.word	0x0801375c

0800cf0c <__lshift>:
 800cf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf10:	460c      	mov	r4, r1
 800cf12:	6849      	ldr	r1, [r1, #4]
 800cf14:	6923      	ldr	r3, [r4, #16]
 800cf16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	4607      	mov	r7, r0
 800cf1e:	4691      	mov	r9, r2
 800cf20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf24:	f108 0601 	add.w	r6, r8, #1
 800cf28:	42b3      	cmp	r3, r6
 800cf2a:	db0b      	blt.n	800cf44 <__lshift+0x38>
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	f7ff fddb 	bl	800cae8 <_Balloc>
 800cf32:	4605      	mov	r5, r0
 800cf34:	b948      	cbnz	r0, 800cf4a <__lshift+0x3e>
 800cf36:	4602      	mov	r2, r0
 800cf38:	4b28      	ldr	r3, [pc, #160]	; (800cfdc <__lshift+0xd0>)
 800cf3a:	4829      	ldr	r0, [pc, #164]	; (800cfe0 <__lshift+0xd4>)
 800cf3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf40:	f000 fb76 	bl	800d630 <__assert_func>
 800cf44:	3101      	adds	r1, #1
 800cf46:	005b      	lsls	r3, r3, #1
 800cf48:	e7ee      	b.n	800cf28 <__lshift+0x1c>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f100 0114 	add.w	r1, r0, #20
 800cf50:	f100 0210 	add.w	r2, r0, #16
 800cf54:	4618      	mov	r0, r3
 800cf56:	4553      	cmp	r3, sl
 800cf58:	db33      	blt.n	800cfc2 <__lshift+0xb6>
 800cf5a:	6920      	ldr	r0, [r4, #16]
 800cf5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf60:	f104 0314 	add.w	r3, r4, #20
 800cf64:	f019 091f 	ands.w	r9, r9, #31
 800cf68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf70:	d02b      	beq.n	800cfca <__lshift+0xbe>
 800cf72:	f1c9 0e20 	rsb	lr, r9, #32
 800cf76:	468a      	mov	sl, r1
 800cf78:	2200      	movs	r2, #0
 800cf7a:	6818      	ldr	r0, [r3, #0]
 800cf7c:	fa00 f009 	lsl.w	r0, r0, r9
 800cf80:	4302      	orrs	r2, r0
 800cf82:	f84a 2b04 	str.w	r2, [sl], #4
 800cf86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8a:	459c      	cmp	ip, r3
 800cf8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf90:	d8f3      	bhi.n	800cf7a <__lshift+0x6e>
 800cf92:	ebac 0304 	sub.w	r3, ip, r4
 800cf96:	3b15      	subs	r3, #21
 800cf98:	f023 0303 	bic.w	r3, r3, #3
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	f104 0015 	add.w	r0, r4, #21
 800cfa2:	4584      	cmp	ip, r0
 800cfa4:	bf38      	it	cc
 800cfa6:	2304      	movcc	r3, #4
 800cfa8:	50ca      	str	r2, [r1, r3]
 800cfaa:	b10a      	cbz	r2, 800cfb0 <__lshift+0xa4>
 800cfac:	f108 0602 	add.w	r6, r8, #2
 800cfb0:	3e01      	subs	r6, #1
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	612e      	str	r6, [r5, #16]
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	f7ff fdd6 	bl	800cb68 <_Bfree>
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	e7c5      	b.n	800cf56 <__lshift+0x4a>
 800cfca:	3904      	subs	r1, #4
 800cfcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfd4:	459c      	cmp	ip, r3
 800cfd6:	d8f9      	bhi.n	800cfcc <__lshift+0xc0>
 800cfd8:	e7ea      	b.n	800cfb0 <__lshift+0xa4>
 800cfda:	bf00      	nop
 800cfdc:	0801374b 	.word	0x0801374b
 800cfe0:	0801375c 	.word	0x0801375c

0800cfe4 <__mcmp>:
 800cfe4:	b530      	push	{r4, r5, lr}
 800cfe6:	6902      	ldr	r2, [r0, #16]
 800cfe8:	690c      	ldr	r4, [r1, #16]
 800cfea:	1b12      	subs	r2, r2, r4
 800cfec:	d10e      	bne.n	800d00c <__mcmp+0x28>
 800cfee:	f100 0314 	add.w	r3, r0, #20
 800cff2:	3114      	adds	r1, #20
 800cff4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cff8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cffc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d000:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d004:	42a5      	cmp	r5, r4
 800d006:	d003      	beq.n	800d010 <__mcmp+0x2c>
 800d008:	d305      	bcc.n	800d016 <__mcmp+0x32>
 800d00a:	2201      	movs	r2, #1
 800d00c:	4610      	mov	r0, r2
 800d00e:	bd30      	pop	{r4, r5, pc}
 800d010:	4283      	cmp	r3, r0
 800d012:	d3f3      	bcc.n	800cffc <__mcmp+0x18>
 800d014:	e7fa      	b.n	800d00c <__mcmp+0x28>
 800d016:	f04f 32ff 	mov.w	r2, #4294967295
 800d01a:	e7f7      	b.n	800d00c <__mcmp+0x28>

0800d01c <__mdiff>:
 800d01c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	460c      	mov	r4, r1
 800d022:	4606      	mov	r6, r0
 800d024:	4611      	mov	r1, r2
 800d026:	4620      	mov	r0, r4
 800d028:	4617      	mov	r7, r2
 800d02a:	f7ff ffdb 	bl	800cfe4 <__mcmp>
 800d02e:	1e05      	subs	r5, r0, #0
 800d030:	d110      	bne.n	800d054 <__mdiff+0x38>
 800d032:	4629      	mov	r1, r5
 800d034:	4630      	mov	r0, r6
 800d036:	f7ff fd57 	bl	800cae8 <_Balloc>
 800d03a:	b930      	cbnz	r0, 800d04a <__mdiff+0x2e>
 800d03c:	4b39      	ldr	r3, [pc, #228]	; (800d124 <__mdiff+0x108>)
 800d03e:	4602      	mov	r2, r0
 800d040:	f240 2132 	movw	r1, #562	; 0x232
 800d044:	4838      	ldr	r0, [pc, #224]	; (800d128 <__mdiff+0x10c>)
 800d046:	f000 faf3 	bl	800d630 <__assert_func>
 800d04a:	2301      	movs	r3, #1
 800d04c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d054:	bfa4      	itt	ge
 800d056:	463b      	movge	r3, r7
 800d058:	4627      	movge	r7, r4
 800d05a:	4630      	mov	r0, r6
 800d05c:	6879      	ldr	r1, [r7, #4]
 800d05e:	bfa6      	itte	ge
 800d060:	461c      	movge	r4, r3
 800d062:	2500      	movge	r5, #0
 800d064:	2501      	movlt	r5, #1
 800d066:	f7ff fd3f 	bl	800cae8 <_Balloc>
 800d06a:	b920      	cbnz	r0, 800d076 <__mdiff+0x5a>
 800d06c:	4b2d      	ldr	r3, [pc, #180]	; (800d124 <__mdiff+0x108>)
 800d06e:	4602      	mov	r2, r0
 800d070:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d074:	e7e6      	b.n	800d044 <__mdiff+0x28>
 800d076:	693e      	ldr	r6, [r7, #16]
 800d078:	60c5      	str	r5, [r0, #12]
 800d07a:	6925      	ldr	r5, [r4, #16]
 800d07c:	f107 0114 	add.w	r1, r7, #20
 800d080:	f104 0914 	add.w	r9, r4, #20
 800d084:	f100 0e14 	add.w	lr, r0, #20
 800d088:	f107 0210 	add.w	r2, r7, #16
 800d08c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d090:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d094:	46f2      	mov	sl, lr
 800d096:	2700      	movs	r7, #0
 800d098:	f859 3b04 	ldr.w	r3, [r9], #4
 800d09c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0a0:	fa1f f883 	uxth.w	r8, r3
 800d0a4:	fa17 f78b 	uxtah	r7, r7, fp
 800d0a8:	0c1b      	lsrs	r3, r3, #16
 800d0aa:	eba7 0808 	sub.w	r8, r7, r8
 800d0ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0b6:	fa1f f888 	uxth.w	r8, r8
 800d0ba:	141f      	asrs	r7, r3, #16
 800d0bc:	454d      	cmp	r5, r9
 800d0be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0c2:	f84a 3b04 	str.w	r3, [sl], #4
 800d0c6:	d8e7      	bhi.n	800d098 <__mdiff+0x7c>
 800d0c8:	1b2b      	subs	r3, r5, r4
 800d0ca:	3b15      	subs	r3, #21
 800d0cc:	f023 0303 	bic.w	r3, r3, #3
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	3415      	adds	r4, #21
 800d0d4:	42a5      	cmp	r5, r4
 800d0d6:	bf38      	it	cc
 800d0d8:	2304      	movcc	r3, #4
 800d0da:	4419      	add	r1, r3
 800d0dc:	4473      	add	r3, lr
 800d0de:	469e      	mov	lr, r3
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	4565      	cmp	r5, ip
 800d0e4:	d30e      	bcc.n	800d104 <__mdiff+0xe8>
 800d0e6:	f10c 0203 	add.w	r2, ip, #3
 800d0ea:	1a52      	subs	r2, r2, r1
 800d0ec:	f022 0203 	bic.w	r2, r2, #3
 800d0f0:	3903      	subs	r1, #3
 800d0f2:	458c      	cmp	ip, r1
 800d0f4:	bf38      	it	cc
 800d0f6:	2200      	movcc	r2, #0
 800d0f8:	441a      	add	r2, r3
 800d0fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d0fe:	b17b      	cbz	r3, 800d120 <__mdiff+0x104>
 800d100:	6106      	str	r6, [r0, #16]
 800d102:	e7a5      	b.n	800d050 <__mdiff+0x34>
 800d104:	f855 8b04 	ldr.w	r8, [r5], #4
 800d108:	fa17 f488 	uxtah	r4, r7, r8
 800d10c:	1422      	asrs	r2, r4, #16
 800d10e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d112:	b2a4      	uxth	r4, r4
 800d114:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d118:	f84e 4b04 	str.w	r4, [lr], #4
 800d11c:	1417      	asrs	r7, r2, #16
 800d11e:	e7e0      	b.n	800d0e2 <__mdiff+0xc6>
 800d120:	3e01      	subs	r6, #1
 800d122:	e7ea      	b.n	800d0fa <__mdiff+0xde>
 800d124:	0801374b 	.word	0x0801374b
 800d128:	0801375c 	.word	0x0801375c

0800d12c <__d2b>:
 800d12c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d130:	4689      	mov	r9, r1
 800d132:	2101      	movs	r1, #1
 800d134:	ec57 6b10 	vmov	r6, r7, d0
 800d138:	4690      	mov	r8, r2
 800d13a:	f7ff fcd5 	bl	800cae8 <_Balloc>
 800d13e:	4604      	mov	r4, r0
 800d140:	b930      	cbnz	r0, 800d150 <__d2b+0x24>
 800d142:	4602      	mov	r2, r0
 800d144:	4b25      	ldr	r3, [pc, #148]	; (800d1dc <__d2b+0xb0>)
 800d146:	4826      	ldr	r0, [pc, #152]	; (800d1e0 <__d2b+0xb4>)
 800d148:	f240 310a 	movw	r1, #778	; 0x30a
 800d14c:	f000 fa70 	bl	800d630 <__assert_func>
 800d150:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d154:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d158:	bb35      	cbnz	r5, 800d1a8 <__d2b+0x7c>
 800d15a:	2e00      	cmp	r6, #0
 800d15c:	9301      	str	r3, [sp, #4]
 800d15e:	d028      	beq.n	800d1b2 <__d2b+0x86>
 800d160:	4668      	mov	r0, sp
 800d162:	9600      	str	r6, [sp, #0]
 800d164:	f7ff fd8c 	bl	800cc80 <__lo0bits>
 800d168:	9900      	ldr	r1, [sp, #0]
 800d16a:	b300      	cbz	r0, 800d1ae <__d2b+0x82>
 800d16c:	9a01      	ldr	r2, [sp, #4]
 800d16e:	f1c0 0320 	rsb	r3, r0, #32
 800d172:	fa02 f303 	lsl.w	r3, r2, r3
 800d176:	430b      	orrs	r3, r1
 800d178:	40c2      	lsrs	r2, r0
 800d17a:	6163      	str	r3, [r4, #20]
 800d17c:	9201      	str	r2, [sp, #4]
 800d17e:	9b01      	ldr	r3, [sp, #4]
 800d180:	61a3      	str	r3, [r4, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	bf14      	ite	ne
 800d186:	2202      	movne	r2, #2
 800d188:	2201      	moveq	r2, #1
 800d18a:	6122      	str	r2, [r4, #16]
 800d18c:	b1d5      	cbz	r5, 800d1c4 <__d2b+0x98>
 800d18e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d192:	4405      	add	r5, r0
 800d194:	f8c9 5000 	str.w	r5, [r9]
 800d198:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d19c:	f8c8 0000 	str.w	r0, [r8]
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	b003      	add	sp, #12
 800d1a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1ac:	e7d5      	b.n	800d15a <__d2b+0x2e>
 800d1ae:	6161      	str	r1, [r4, #20]
 800d1b0:	e7e5      	b.n	800d17e <__d2b+0x52>
 800d1b2:	a801      	add	r0, sp, #4
 800d1b4:	f7ff fd64 	bl	800cc80 <__lo0bits>
 800d1b8:	9b01      	ldr	r3, [sp, #4]
 800d1ba:	6163      	str	r3, [r4, #20]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	6122      	str	r2, [r4, #16]
 800d1c0:	3020      	adds	r0, #32
 800d1c2:	e7e3      	b.n	800d18c <__d2b+0x60>
 800d1c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d1cc:	f8c9 0000 	str.w	r0, [r9]
 800d1d0:	6918      	ldr	r0, [r3, #16]
 800d1d2:	f7ff fd35 	bl	800cc40 <__hi0bits>
 800d1d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1da:	e7df      	b.n	800d19c <__d2b+0x70>
 800d1dc:	0801374b 	.word	0x0801374b
 800d1e0:	0801375c 	.word	0x0801375c

0800d1e4 <_calloc_r>:
 800d1e4:	b513      	push	{r0, r1, r4, lr}
 800d1e6:	434a      	muls	r2, r1
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	9201      	str	r2, [sp, #4]
 800d1ec:	f000 f85a 	bl	800d2a4 <_malloc_r>
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	b118      	cbz	r0, 800d1fc <_calloc_r+0x18>
 800d1f4:	9a01      	ldr	r2, [sp, #4]
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	f7fe f95e 	bl	800b4b8 <memset>
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	b002      	add	sp, #8
 800d200:	bd10      	pop	{r4, pc}
	...

0800d204 <_free_r>:
 800d204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d206:	2900      	cmp	r1, #0
 800d208:	d048      	beq.n	800d29c <_free_r+0x98>
 800d20a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d20e:	9001      	str	r0, [sp, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	f1a1 0404 	sub.w	r4, r1, #4
 800d216:	bfb8      	it	lt
 800d218:	18e4      	addlt	r4, r4, r3
 800d21a:	f000 fa65 	bl	800d6e8 <__malloc_lock>
 800d21e:	4a20      	ldr	r2, [pc, #128]	; (800d2a0 <_free_r+0x9c>)
 800d220:	9801      	ldr	r0, [sp, #4]
 800d222:	6813      	ldr	r3, [r2, #0]
 800d224:	4615      	mov	r5, r2
 800d226:	b933      	cbnz	r3, 800d236 <_free_r+0x32>
 800d228:	6063      	str	r3, [r4, #4]
 800d22a:	6014      	str	r4, [r2, #0]
 800d22c:	b003      	add	sp, #12
 800d22e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d232:	f000 ba5f 	b.w	800d6f4 <__malloc_unlock>
 800d236:	42a3      	cmp	r3, r4
 800d238:	d90b      	bls.n	800d252 <_free_r+0x4e>
 800d23a:	6821      	ldr	r1, [r4, #0]
 800d23c:	1862      	adds	r2, r4, r1
 800d23e:	4293      	cmp	r3, r2
 800d240:	bf04      	itt	eq
 800d242:	681a      	ldreq	r2, [r3, #0]
 800d244:	685b      	ldreq	r3, [r3, #4]
 800d246:	6063      	str	r3, [r4, #4]
 800d248:	bf04      	itt	eq
 800d24a:	1852      	addeq	r2, r2, r1
 800d24c:	6022      	streq	r2, [r4, #0]
 800d24e:	602c      	str	r4, [r5, #0]
 800d250:	e7ec      	b.n	800d22c <_free_r+0x28>
 800d252:	461a      	mov	r2, r3
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	b10b      	cbz	r3, 800d25c <_free_r+0x58>
 800d258:	42a3      	cmp	r3, r4
 800d25a:	d9fa      	bls.n	800d252 <_free_r+0x4e>
 800d25c:	6811      	ldr	r1, [r2, #0]
 800d25e:	1855      	adds	r5, r2, r1
 800d260:	42a5      	cmp	r5, r4
 800d262:	d10b      	bne.n	800d27c <_free_r+0x78>
 800d264:	6824      	ldr	r4, [r4, #0]
 800d266:	4421      	add	r1, r4
 800d268:	1854      	adds	r4, r2, r1
 800d26a:	42a3      	cmp	r3, r4
 800d26c:	6011      	str	r1, [r2, #0]
 800d26e:	d1dd      	bne.n	800d22c <_free_r+0x28>
 800d270:	681c      	ldr	r4, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	6053      	str	r3, [r2, #4]
 800d276:	4421      	add	r1, r4
 800d278:	6011      	str	r1, [r2, #0]
 800d27a:	e7d7      	b.n	800d22c <_free_r+0x28>
 800d27c:	d902      	bls.n	800d284 <_free_r+0x80>
 800d27e:	230c      	movs	r3, #12
 800d280:	6003      	str	r3, [r0, #0]
 800d282:	e7d3      	b.n	800d22c <_free_r+0x28>
 800d284:	6825      	ldr	r5, [r4, #0]
 800d286:	1961      	adds	r1, r4, r5
 800d288:	428b      	cmp	r3, r1
 800d28a:	bf04      	itt	eq
 800d28c:	6819      	ldreq	r1, [r3, #0]
 800d28e:	685b      	ldreq	r3, [r3, #4]
 800d290:	6063      	str	r3, [r4, #4]
 800d292:	bf04      	itt	eq
 800d294:	1949      	addeq	r1, r1, r5
 800d296:	6021      	streq	r1, [r4, #0]
 800d298:	6054      	str	r4, [r2, #4]
 800d29a:	e7c7      	b.n	800d22c <_free_r+0x28>
 800d29c:	b003      	add	sp, #12
 800d29e:	bd30      	pop	{r4, r5, pc}
 800d2a0:	200006b8 	.word	0x200006b8

0800d2a4 <_malloc_r>:
 800d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a6:	1ccd      	adds	r5, r1, #3
 800d2a8:	f025 0503 	bic.w	r5, r5, #3
 800d2ac:	3508      	adds	r5, #8
 800d2ae:	2d0c      	cmp	r5, #12
 800d2b0:	bf38      	it	cc
 800d2b2:	250c      	movcc	r5, #12
 800d2b4:	2d00      	cmp	r5, #0
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	db01      	blt.n	800d2be <_malloc_r+0x1a>
 800d2ba:	42a9      	cmp	r1, r5
 800d2bc:	d903      	bls.n	800d2c6 <_malloc_r+0x22>
 800d2be:	230c      	movs	r3, #12
 800d2c0:	6033      	str	r3, [r6, #0]
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2c6:	f000 fa0f 	bl	800d6e8 <__malloc_lock>
 800d2ca:	4921      	ldr	r1, [pc, #132]	; (800d350 <_malloc_r+0xac>)
 800d2cc:	680a      	ldr	r2, [r1, #0]
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	b99c      	cbnz	r4, 800d2fa <_malloc_r+0x56>
 800d2d2:	4f20      	ldr	r7, [pc, #128]	; (800d354 <_malloc_r+0xb0>)
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	b923      	cbnz	r3, 800d2e2 <_malloc_r+0x3e>
 800d2d8:	4621      	mov	r1, r4
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f000 f998 	bl	800d610 <_sbrk_r>
 800d2e0:	6038      	str	r0, [r7, #0]
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f000 f993 	bl	800d610 <_sbrk_r>
 800d2ea:	1c43      	adds	r3, r0, #1
 800d2ec:	d123      	bne.n	800d336 <_malloc_r+0x92>
 800d2ee:	230c      	movs	r3, #12
 800d2f0:	6033      	str	r3, [r6, #0]
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f000 f9fe 	bl	800d6f4 <__malloc_unlock>
 800d2f8:	e7e3      	b.n	800d2c2 <_malloc_r+0x1e>
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	1b5b      	subs	r3, r3, r5
 800d2fe:	d417      	bmi.n	800d330 <_malloc_r+0x8c>
 800d300:	2b0b      	cmp	r3, #11
 800d302:	d903      	bls.n	800d30c <_malloc_r+0x68>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	441c      	add	r4, r3
 800d308:	6025      	str	r5, [r4, #0]
 800d30a:	e004      	b.n	800d316 <_malloc_r+0x72>
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	42a2      	cmp	r2, r4
 800d310:	bf0c      	ite	eq
 800d312:	600b      	streq	r3, [r1, #0]
 800d314:	6053      	strne	r3, [r2, #4]
 800d316:	4630      	mov	r0, r6
 800d318:	f000 f9ec 	bl	800d6f4 <__malloc_unlock>
 800d31c:	f104 000b 	add.w	r0, r4, #11
 800d320:	1d23      	adds	r3, r4, #4
 800d322:	f020 0007 	bic.w	r0, r0, #7
 800d326:	1ac2      	subs	r2, r0, r3
 800d328:	d0cc      	beq.n	800d2c4 <_malloc_r+0x20>
 800d32a:	1a1b      	subs	r3, r3, r0
 800d32c:	50a3      	str	r3, [r4, r2]
 800d32e:	e7c9      	b.n	800d2c4 <_malloc_r+0x20>
 800d330:	4622      	mov	r2, r4
 800d332:	6864      	ldr	r4, [r4, #4]
 800d334:	e7cc      	b.n	800d2d0 <_malloc_r+0x2c>
 800d336:	1cc4      	adds	r4, r0, #3
 800d338:	f024 0403 	bic.w	r4, r4, #3
 800d33c:	42a0      	cmp	r0, r4
 800d33e:	d0e3      	beq.n	800d308 <_malloc_r+0x64>
 800d340:	1a21      	subs	r1, r4, r0
 800d342:	4630      	mov	r0, r6
 800d344:	f000 f964 	bl	800d610 <_sbrk_r>
 800d348:	3001      	adds	r0, #1
 800d34a:	d1dd      	bne.n	800d308 <_malloc_r+0x64>
 800d34c:	e7cf      	b.n	800d2ee <_malloc_r+0x4a>
 800d34e:	bf00      	nop
 800d350:	200006b8 	.word	0x200006b8
 800d354:	200006bc 	.word	0x200006bc

0800d358 <__ssputs_r>:
 800d358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d35c:	688e      	ldr	r6, [r1, #8]
 800d35e:	429e      	cmp	r6, r3
 800d360:	4682      	mov	sl, r0
 800d362:	460c      	mov	r4, r1
 800d364:	4690      	mov	r8, r2
 800d366:	461f      	mov	r7, r3
 800d368:	d838      	bhi.n	800d3dc <__ssputs_r+0x84>
 800d36a:	898a      	ldrh	r2, [r1, #12]
 800d36c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d370:	d032      	beq.n	800d3d8 <__ssputs_r+0x80>
 800d372:	6825      	ldr	r5, [r4, #0]
 800d374:	6909      	ldr	r1, [r1, #16]
 800d376:	eba5 0901 	sub.w	r9, r5, r1
 800d37a:	6965      	ldr	r5, [r4, #20]
 800d37c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d384:	3301      	adds	r3, #1
 800d386:	444b      	add	r3, r9
 800d388:	106d      	asrs	r5, r5, #1
 800d38a:	429d      	cmp	r5, r3
 800d38c:	bf38      	it	cc
 800d38e:	461d      	movcc	r5, r3
 800d390:	0553      	lsls	r3, r2, #21
 800d392:	d531      	bpl.n	800d3f8 <__ssputs_r+0xa0>
 800d394:	4629      	mov	r1, r5
 800d396:	f7ff ff85 	bl	800d2a4 <_malloc_r>
 800d39a:	4606      	mov	r6, r0
 800d39c:	b950      	cbnz	r0, 800d3b4 <__ssputs_r+0x5c>
 800d39e:	230c      	movs	r3, #12
 800d3a0:	f8ca 3000 	str.w	r3, [sl]
 800d3a4:	89a3      	ldrh	r3, [r4, #12]
 800d3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3aa:	81a3      	strh	r3, [r4, #12]
 800d3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b4:	6921      	ldr	r1, [r4, #16]
 800d3b6:	464a      	mov	r2, r9
 800d3b8:	f7fe f870 	bl	800b49c <memcpy>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	6126      	str	r6, [r4, #16]
 800d3ca:	6165      	str	r5, [r4, #20]
 800d3cc:	444e      	add	r6, r9
 800d3ce:	eba5 0509 	sub.w	r5, r5, r9
 800d3d2:	6026      	str	r6, [r4, #0]
 800d3d4:	60a5      	str	r5, [r4, #8]
 800d3d6:	463e      	mov	r6, r7
 800d3d8:	42be      	cmp	r6, r7
 800d3da:	d900      	bls.n	800d3de <__ssputs_r+0x86>
 800d3dc:	463e      	mov	r6, r7
 800d3de:	4632      	mov	r2, r6
 800d3e0:	6820      	ldr	r0, [r4, #0]
 800d3e2:	4641      	mov	r1, r8
 800d3e4:	f000 f966 	bl	800d6b4 <memmove>
 800d3e8:	68a3      	ldr	r3, [r4, #8]
 800d3ea:	6822      	ldr	r2, [r4, #0]
 800d3ec:	1b9b      	subs	r3, r3, r6
 800d3ee:	4432      	add	r2, r6
 800d3f0:	60a3      	str	r3, [r4, #8]
 800d3f2:	6022      	str	r2, [r4, #0]
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e7db      	b.n	800d3b0 <__ssputs_r+0x58>
 800d3f8:	462a      	mov	r2, r5
 800d3fa:	f000 f981 	bl	800d700 <_realloc_r>
 800d3fe:	4606      	mov	r6, r0
 800d400:	2800      	cmp	r0, #0
 800d402:	d1e1      	bne.n	800d3c8 <__ssputs_r+0x70>
 800d404:	6921      	ldr	r1, [r4, #16]
 800d406:	4650      	mov	r0, sl
 800d408:	f7ff fefc 	bl	800d204 <_free_r>
 800d40c:	e7c7      	b.n	800d39e <__ssputs_r+0x46>
	...

0800d410 <_svfiprintf_r>:
 800d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	4698      	mov	r8, r3
 800d416:	898b      	ldrh	r3, [r1, #12]
 800d418:	061b      	lsls	r3, r3, #24
 800d41a:	b09d      	sub	sp, #116	; 0x74
 800d41c:	4607      	mov	r7, r0
 800d41e:	460d      	mov	r5, r1
 800d420:	4614      	mov	r4, r2
 800d422:	d50e      	bpl.n	800d442 <_svfiprintf_r+0x32>
 800d424:	690b      	ldr	r3, [r1, #16]
 800d426:	b963      	cbnz	r3, 800d442 <_svfiprintf_r+0x32>
 800d428:	2140      	movs	r1, #64	; 0x40
 800d42a:	f7ff ff3b 	bl	800d2a4 <_malloc_r>
 800d42e:	6028      	str	r0, [r5, #0]
 800d430:	6128      	str	r0, [r5, #16]
 800d432:	b920      	cbnz	r0, 800d43e <_svfiprintf_r+0x2e>
 800d434:	230c      	movs	r3, #12
 800d436:	603b      	str	r3, [r7, #0]
 800d438:	f04f 30ff 	mov.w	r0, #4294967295
 800d43c:	e0d1      	b.n	800d5e2 <_svfiprintf_r+0x1d2>
 800d43e:	2340      	movs	r3, #64	; 0x40
 800d440:	616b      	str	r3, [r5, #20]
 800d442:	2300      	movs	r3, #0
 800d444:	9309      	str	r3, [sp, #36]	; 0x24
 800d446:	2320      	movs	r3, #32
 800d448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d44c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d450:	2330      	movs	r3, #48	; 0x30
 800d452:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d5fc <_svfiprintf_r+0x1ec>
 800d456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d45a:	f04f 0901 	mov.w	r9, #1
 800d45e:	4623      	mov	r3, r4
 800d460:	469a      	mov	sl, r3
 800d462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d466:	b10a      	cbz	r2, 800d46c <_svfiprintf_r+0x5c>
 800d468:	2a25      	cmp	r2, #37	; 0x25
 800d46a:	d1f9      	bne.n	800d460 <_svfiprintf_r+0x50>
 800d46c:	ebba 0b04 	subs.w	fp, sl, r4
 800d470:	d00b      	beq.n	800d48a <_svfiprintf_r+0x7a>
 800d472:	465b      	mov	r3, fp
 800d474:	4622      	mov	r2, r4
 800d476:	4629      	mov	r1, r5
 800d478:	4638      	mov	r0, r7
 800d47a:	f7ff ff6d 	bl	800d358 <__ssputs_r>
 800d47e:	3001      	adds	r0, #1
 800d480:	f000 80aa 	beq.w	800d5d8 <_svfiprintf_r+0x1c8>
 800d484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d486:	445a      	add	r2, fp
 800d488:	9209      	str	r2, [sp, #36]	; 0x24
 800d48a:	f89a 3000 	ldrb.w	r3, [sl]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f000 80a2 	beq.w	800d5d8 <_svfiprintf_r+0x1c8>
 800d494:	2300      	movs	r3, #0
 800d496:	f04f 32ff 	mov.w	r2, #4294967295
 800d49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d49e:	f10a 0a01 	add.w	sl, sl, #1
 800d4a2:	9304      	str	r3, [sp, #16]
 800d4a4:	9307      	str	r3, [sp, #28]
 800d4a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4aa:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ac:	4654      	mov	r4, sl
 800d4ae:	2205      	movs	r2, #5
 800d4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b4:	4851      	ldr	r0, [pc, #324]	; (800d5fc <_svfiprintf_r+0x1ec>)
 800d4b6:	f7f2 febb 	bl	8000230 <memchr>
 800d4ba:	9a04      	ldr	r2, [sp, #16]
 800d4bc:	b9d8      	cbnz	r0, 800d4f6 <_svfiprintf_r+0xe6>
 800d4be:	06d0      	lsls	r0, r2, #27
 800d4c0:	bf44      	itt	mi
 800d4c2:	2320      	movmi	r3, #32
 800d4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4c8:	0711      	lsls	r1, r2, #28
 800d4ca:	bf44      	itt	mi
 800d4cc:	232b      	movmi	r3, #43	; 0x2b
 800d4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d8:	d015      	beq.n	800d506 <_svfiprintf_r+0xf6>
 800d4da:	9a07      	ldr	r2, [sp, #28]
 800d4dc:	4654      	mov	r4, sl
 800d4de:	2000      	movs	r0, #0
 800d4e0:	f04f 0c0a 	mov.w	ip, #10
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4ea:	3b30      	subs	r3, #48	; 0x30
 800d4ec:	2b09      	cmp	r3, #9
 800d4ee:	d94e      	bls.n	800d58e <_svfiprintf_r+0x17e>
 800d4f0:	b1b0      	cbz	r0, 800d520 <_svfiprintf_r+0x110>
 800d4f2:	9207      	str	r2, [sp, #28]
 800d4f4:	e014      	b.n	800d520 <_svfiprintf_r+0x110>
 800d4f6:	eba0 0308 	sub.w	r3, r0, r8
 800d4fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d4fe:	4313      	orrs	r3, r2
 800d500:	9304      	str	r3, [sp, #16]
 800d502:	46a2      	mov	sl, r4
 800d504:	e7d2      	b.n	800d4ac <_svfiprintf_r+0x9c>
 800d506:	9b03      	ldr	r3, [sp, #12]
 800d508:	1d19      	adds	r1, r3, #4
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	9103      	str	r1, [sp, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	bfbb      	ittet	lt
 800d512:	425b      	neglt	r3, r3
 800d514:	f042 0202 	orrlt.w	r2, r2, #2
 800d518:	9307      	strge	r3, [sp, #28]
 800d51a:	9307      	strlt	r3, [sp, #28]
 800d51c:	bfb8      	it	lt
 800d51e:	9204      	strlt	r2, [sp, #16]
 800d520:	7823      	ldrb	r3, [r4, #0]
 800d522:	2b2e      	cmp	r3, #46	; 0x2e
 800d524:	d10c      	bne.n	800d540 <_svfiprintf_r+0x130>
 800d526:	7863      	ldrb	r3, [r4, #1]
 800d528:	2b2a      	cmp	r3, #42	; 0x2a
 800d52a:	d135      	bne.n	800d598 <_svfiprintf_r+0x188>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	1d1a      	adds	r2, r3, #4
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	9203      	str	r2, [sp, #12]
 800d534:	2b00      	cmp	r3, #0
 800d536:	bfb8      	it	lt
 800d538:	f04f 33ff 	movlt.w	r3, #4294967295
 800d53c:	3402      	adds	r4, #2
 800d53e:	9305      	str	r3, [sp, #20]
 800d540:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d60c <_svfiprintf_r+0x1fc>
 800d544:	7821      	ldrb	r1, [r4, #0]
 800d546:	2203      	movs	r2, #3
 800d548:	4650      	mov	r0, sl
 800d54a:	f7f2 fe71 	bl	8000230 <memchr>
 800d54e:	b140      	cbz	r0, 800d562 <_svfiprintf_r+0x152>
 800d550:	2340      	movs	r3, #64	; 0x40
 800d552:	eba0 000a 	sub.w	r0, r0, sl
 800d556:	fa03 f000 	lsl.w	r0, r3, r0
 800d55a:	9b04      	ldr	r3, [sp, #16]
 800d55c:	4303      	orrs	r3, r0
 800d55e:	3401      	adds	r4, #1
 800d560:	9304      	str	r3, [sp, #16]
 800d562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d566:	4826      	ldr	r0, [pc, #152]	; (800d600 <_svfiprintf_r+0x1f0>)
 800d568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d56c:	2206      	movs	r2, #6
 800d56e:	f7f2 fe5f 	bl	8000230 <memchr>
 800d572:	2800      	cmp	r0, #0
 800d574:	d038      	beq.n	800d5e8 <_svfiprintf_r+0x1d8>
 800d576:	4b23      	ldr	r3, [pc, #140]	; (800d604 <_svfiprintf_r+0x1f4>)
 800d578:	bb1b      	cbnz	r3, 800d5c2 <_svfiprintf_r+0x1b2>
 800d57a:	9b03      	ldr	r3, [sp, #12]
 800d57c:	3307      	adds	r3, #7
 800d57e:	f023 0307 	bic.w	r3, r3, #7
 800d582:	3308      	adds	r3, #8
 800d584:	9303      	str	r3, [sp, #12]
 800d586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d588:	4433      	add	r3, r6
 800d58a:	9309      	str	r3, [sp, #36]	; 0x24
 800d58c:	e767      	b.n	800d45e <_svfiprintf_r+0x4e>
 800d58e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d592:	460c      	mov	r4, r1
 800d594:	2001      	movs	r0, #1
 800d596:	e7a5      	b.n	800d4e4 <_svfiprintf_r+0xd4>
 800d598:	2300      	movs	r3, #0
 800d59a:	3401      	adds	r4, #1
 800d59c:	9305      	str	r3, [sp, #20]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	f04f 0c0a 	mov.w	ip, #10
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5aa:	3a30      	subs	r2, #48	; 0x30
 800d5ac:	2a09      	cmp	r2, #9
 800d5ae:	d903      	bls.n	800d5b8 <_svfiprintf_r+0x1a8>
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d0c5      	beq.n	800d540 <_svfiprintf_r+0x130>
 800d5b4:	9105      	str	r1, [sp, #20]
 800d5b6:	e7c3      	b.n	800d540 <_svfiprintf_r+0x130>
 800d5b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5bc:	4604      	mov	r4, r0
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e7f0      	b.n	800d5a4 <_svfiprintf_r+0x194>
 800d5c2:	ab03      	add	r3, sp, #12
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	462a      	mov	r2, r5
 800d5c8:	4b0f      	ldr	r3, [pc, #60]	; (800d608 <_svfiprintf_r+0x1f8>)
 800d5ca:	a904      	add	r1, sp, #16
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	f7fe f81b 	bl	800b608 <_printf_float>
 800d5d2:	1c42      	adds	r2, r0, #1
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	d1d6      	bne.n	800d586 <_svfiprintf_r+0x176>
 800d5d8:	89ab      	ldrh	r3, [r5, #12]
 800d5da:	065b      	lsls	r3, r3, #25
 800d5dc:	f53f af2c 	bmi.w	800d438 <_svfiprintf_r+0x28>
 800d5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5e2:	b01d      	add	sp, #116	; 0x74
 800d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e8:	ab03      	add	r3, sp, #12
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	462a      	mov	r2, r5
 800d5ee:	4b06      	ldr	r3, [pc, #24]	; (800d608 <_svfiprintf_r+0x1f8>)
 800d5f0:	a904      	add	r1, sp, #16
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	f7fe faac 	bl	800bb50 <_printf_i>
 800d5f8:	e7eb      	b.n	800d5d2 <_svfiprintf_r+0x1c2>
 800d5fa:	bf00      	nop
 800d5fc:	080138bc 	.word	0x080138bc
 800d600:	080138c6 	.word	0x080138c6
 800d604:	0800b609 	.word	0x0800b609
 800d608:	0800d359 	.word	0x0800d359
 800d60c:	080138c2 	.word	0x080138c2

0800d610 <_sbrk_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d06      	ldr	r5, [pc, #24]	; (800d62c <_sbrk_r+0x1c>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	f7fd fe74 	bl	800b308 <_sbrk>
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	d102      	bne.n	800d62a <_sbrk_r+0x1a>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	b103      	cbz	r3, 800d62a <_sbrk_r+0x1a>
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	200013b4 	.word	0x200013b4

0800d630 <__assert_func>:
 800d630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d632:	4614      	mov	r4, r2
 800d634:	461a      	mov	r2, r3
 800d636:	4b09      	ldr	r3, [pc, #36]	; (800d65c <__assert_func+0x2c>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4605      	mov	r5, r0
 800d63c:	68d8      	ldr	r0, [r3, #12]
 800d63e:	b14c      	cbz	r4, 800d654 <__assert_func+0x24>
 800d640:	4b07      	ldr	r3, [pc, #28]	; (800d660 <__assert_func+0x30>)
 800d642:	9100      	str	r1, [sp, #0]
 800d644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d648:	4906      	ldr	r1, [pc, #24]	; (800d664 <__assert_func+0x34>)
 800d64a:	462b      	mov	r3, r5
 800d64c:	f000 f80e 	bl	800d66c <fiprintf>
 800d650:	f000 faa4 	bl	800db9c <abort>
 800d654:	4b04      	ldr	r3, [pc, #16]	; (800d668 <__assert_func+0x38>)
 800d656:	461c      	mov	r4, r3
 800d658:	e7f3      	b.n	800d642 <__assert_func+0x12>
 800d65a:	bf00      	nop
 800d65c:	20000490 	.word	0x20000490
 800d660:	080138cd 	.word	0x080138cd
 800d664:	080138da 	.word	0x080138da
 800d668:	08013908 	.word	0x08013908

0800d66c <fiprintf>:
 800d66c:	b40e      	push	{r1, r2, r3}
 800d66e:	b503      	push	{r0, r1, lr}
 800d670:	4601      	mov	r1, r0
 800d672:	ab03      	add	r3, sp, #12
 800d674:	4805      	ldr	r0, [pc, #20]	; (800d68c <fiprintf+0x20>)
 800d676:	f853 2b04 	ldr.w	r2, [r3], #4
 800d67a:	6800      	ldr	r0, [r0, #0]
 800d67c:	9301      	str	r3, [sp, #4]
 800d67e:	f000 f88f 	bl	800d7a0 <_vfiprintf_r>
 800d682:	b002      	add	sp, #8
 800d684:	f85d eb04 	ldr.w	lr, [sp], #4
 800d688:	b003      	add	sp, #12
 800d68a:	4770      	bx	lr
 800d68c:	20000490 	.word	0x20000490

0800d690 <__ascii_mbtowc>:
 800d690:	b082      	sub	sp, #8
 800d692:	b901      	cbnz	r1, 800d696 <__ascii_mbtowc+0x6>
 800d694:	a901      	add	r1, sp, #4
 800d696:	b142      	cbz	r2, 800d6aa <__ascii_mbtowc+0x1a>
 800d698:	b14b      	cbz	r3, 800d6ae <__ascii_mbtowc+0x1e>
 800d69a:	7813      	ldrb	r3, [r2, #0]
 800d69c:	600b      	str	r3, [r1, #0]
 800d69e:	7812      	ldrb	r2, [r2, #0]
 800d6a0:	1e10      	subs	r0, r2, #0
 800d6a2:	bf18      	it	ne
 800d6a4:	2001      	movne	r0, #1
 800d6a6:	b002      	add	sp, #8
 800d6a8:	4770      	bx	lr
 800d6aa:	4610      	mov	r0, r2
 800d6ac:	e7fb      	b.n	800d6a6 <__ascii_mbtowc+0x16>
 800d6ae:	f06f 0001 	mvn.w	r0, #1
 800d6b2:	e7f8      	b.n	800d6a6 <__ascii_mbtowc+0x16>

0800d6b4 <memmove>:
 800d6b4:	4288      	cmp	r0, r1
 800d6b6:	b510      	push	{r4, lr}
 800d6b8:	eb01 0402 	add.w	r4, r1, r2
 800d6bc:	d902      	bls.n	800d6c4 <memmove+0x10>
 800d6be:	4284      	cmp	r4, r0
 800d6c0:	4623      	mov	r3, r4
 800d6c2:	d807      	bhi.n	800d6d4 <memmove+0x20>
 800d6c4:	1e43      	subs	r3, r0, #1
 800d6c6:	42a1      	cmp	r1, r4
 800d6c8:	d008      	beq.n	800d6dc <memmove+0x28>
 800d6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6d2:	e7f8      	b.n	800d6c6 <memmove+0x12>
 800d6d4:	4402      	add	r2, r0
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	428a      	cmp	r2, r1
 800d6da:	d100      	bne.n	800d6de <memmove+0x2a>
 800d6dc:	bd10      	pop	{r4, pc}
 800d6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6e6:	e7f7      	b.n	800d6d8 <memmove+0x24>

0800d6e8 <__malloc_lock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	; (800d6f0 <__malloc_lock+0x8>)
 800d6ea:	f000 bc17 	b.w	800df1c <__retarget_lock_acquire_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	200013bc 	.word	0x200013bc

0800d6f4 <__malloc_unlock>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	; (800d6fc <__malloc_unlock+0x8>)
 800d6f6:	f000 bc12 	b.w	800df1e <__retarget_lock_release_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	200013bc 	.word	0x200013bc

0800d700 <_realloc_r>:
 800d700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d702:	4607      	mov	r7, r0
 800d704:	4614      	mov	r4, r2
 800d706:	460e      	mov	r6, r1
 800d708:	b921      	cbnz	r1, 800d714 <_realloc_r+0x14>
 800d70a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d70e:	4611      	mov	r1, r2
 800d710:	f7ff bdc8 	b.w	800d2a4 <_malloc_r>
 800d714:	b922      	cbnz	r2, 800d720 <_realloc_r+0x20>
 800d716:	f7ff fd75 	bl	800d204 <_free_r>
 800d71a:	4625      	mov	r5, r4
 800d71c:	4628      	mov	r0, r5
 800d71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d720:	f000 fc62 	bl	800dfe8 <_malloc_usable_size_r>
 800d724:	42a0      	cmp	r0, r4
 800d726:	d20f      	bcs.n	800d748 <_realloc_r+0x48>
 800d728:	4621      	mov	r1, r4
 800d72a:	4638      	mov	r0, r7
 800d72c:	f7ff fdba 	bl	800d2a4 <_malloc_r>
 800d730:	4605      	mov	r5, r0
 800d732:	2800      	cmp	r0, #0
 800d734:	d0f2      	beq.n	800d71c <_realloc_r+0x1c>
 800d736:	4631      	mov	r1, r6
 800d738:	4622      	mov	r2, r4
 800d73a:	f7fd feaf 	bl	800b49c <memcpy>
 800d73e:	4631      	mov	r1, r6
 800d740:	4638      	mov	r0, r7
 800d742:	f7ff fd5f 	bl	800d204 <_free_r>
 800d746:	e7e9      	b.n	800d71c <_realloc_r+0x1c>
 800d748:	4635      	mov	r5, r6
 800d74a:	e7e7      	b.n	800d71c <_realloc_r+0x1c>

0800d74c <__sfputc_r>:
 800d74c:	6893      	ldr	r3, [r2, #8]
 800d74e:	3b01      	subs	r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	b410      	push	{r4}
 800d754:	6093      	str	r3, [r2, #8]
 800d756:	da08      	bge.n	800d76a <__sfputc_r+0x1e>
 800d758:	6994      	ldr	r4, [r2, #24]
 800d75a:	42a3      	cmp	r3, r4
 800d75c:	db01      	blt.n	800d762 <__sfputc_r+0x16>
 800d75e:	290a      	cmp	r1, #10
 800d760:	d103      	bne.n	800d76a <__sfputc_r+0x1e>
 800d762:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d766:	f000 b94b 	b.w	800da00 <__swbuf_r>
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	1c58      	adds	r0, r3, #1
 800d76e:	6010      	str	r0, [r2, #0]
 800d770:	7019      	strb	r1, [r3, #0]
 800d772:	4608      	mov	r0, r1
 800d774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <__sfputs_r>:
 800d77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77c:	4606      	mov	r6, r0
 800d77e:	460f      	mov	r7, r1
 800d780:	4614      	mov	r4, r2
 800d782:	18d5      	adds	r5, r2, r3
 800d784:	42ac      	cmp	r4, r5
 800d786:	d101      	bne.n	800d78c <__sfputs_r+0x12>
 800d788:	2000      	movs	r0, #0
 800d78a:	e007      	b.n	800d79c <__sfputs_r+0x22>
 800d78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d790:	463a      	mov	r2, r7
 800d792:	4630      	mov	r0, r6
 800d794:	f7ff ffda 	bl	800d74c <__sfputc_r>
 800d798:	1c43      	adds	r3, r0, #1
 800d79a:	d1f3      	bne.n	800d784 <__sfputs_r+0xa>
 800d79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7a0 <_vfiprintf_r>:
 800d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	460d      	mov	r5, r1
 800d7a6:	b09d      	sub	sp, #116	; 0x74
 800d7a8:	4614      	mov	r4, r2
 800d7aa:	4698      	mov	r8, r3
 800d7ac:	4606      	mov	r6, r0
 800d7ae:	b118      	cbz	r0, 800d7b8 <_vfiprintf_r+0x18>
 800d7b0:	6983      	ldr	r3, [r0, #24]
 800d7b2:	b90b      	cbnz	r3, 800d7b8 <_vfiprintf_r+0x18>
 800d7b4:	f000 fb14 	bl	800dde0 <__sinit>
 800d7b8:	4b89      	ldr	r3, [pc, #548]	; (800d9e0 <_vfiprintf_r+0x240>)
 800d7ba:	429d      	cmp	r5, r3
 800d7bc:	d11b      	bne.n	800d7f6 <_vfiprintf_r+0x56>
 800d7be:	6875      	ldr	r5, [r6, #4]
 800d7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7c2:	07d9      	lsls	r1, r3, #31
 800d7c4:	d405      	bmi.n	800d7d2 <_vfiprintf_r+0x32>
 800d7c6:	89ab      	ldrh	r3, [r5, #12]
 800d7c8:	059a      	lsls	r2, r3, #22
 800d7ca:	d402      	bmi.n	800d7d2 <_vfiprintf_r+0x32>
 800d7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ce:	f000 fba5 	bl	800df1c <__retarget_lock_acquire_recursive>
 800d7d2:	89ab      	ldrh	r3, [r5, #12]
 800d7d4:	071b      	lsls	r3, r3, #28
 800d7d6:	d501      	bpl.n	800d7dc <_vfiprintf_r+0x3c>
 800d7d8:	692b      	ldr	r3, [r5, #16]
 800d7da:	b9eb      	cbnz	r3, 800d818 <_vfiprintf_r+0x78>
 800d7dc:	4629      	mov	r1, r5
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f000 f96e 	bl	800dac0 <__swsetup_r>
 800d7e4:	b1c0      	cbz	r0, 800d818 <_vfiprintf_r+0x78>
 800d7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7e8:	07dc      	lsls	r4, r3, #31
 800d7ea:	d50e      	bpl.n	800d80a <_vfiprintf_r+0x6a>
 800d7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f0:	b01d      	add	sp, #116	; 0x74
 800d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f6:	4b7b      	ldr	r3, [pc, #492]	; (800d9e4 <_vfiprintf_r+0x244>)
 800d7f8:	429d      	cmp	r5, r3
 800d7fa:	d101      	bne.n	800d800 <_vfiprintf_r+0x60>
 800d7fc:	68b5      	ldr	r5, [r6, #8]
 800d7fe:	e7df      	b.n	800d7c0 <_vfiprintf_r+0x20>
 800d800:	4b79      	ldr	r3, [pc, #484]	; (800d9e8 <_vfiprintf_r+0x248>)
 800d802:	429d      	cmp	r5, r3
 800d804:	bf08      	it	eq
 800d806:	68f5      	ldreq	r5, [r6, #12]
 800d808:	e7da      	b.n	800d7c0 <_vfiprintf_r+0x20>
 800d80a:	89ab      	ldrh	r3, [r5, #12]
 800d80c:	0598      	lsls	r0, r3, #22
 800d80e:	d4ed      	bmi.n	800d7ec <_vfiprintf_r+0x4c>
 800d810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d812:	f000 fb84 	bl	800df1e <__retarget_lock_release_recursive>
 800d816:	e7e9      	b.n	800d7ec <_vfiprintf_r+0x4c>
 800d818:	2300      	movs	r3, #0
 800d81a:	9309      	str	r3, [sp, #36]	; 0x24
 800d81c:	2320      	movs	r3, #32
 800d81e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d822:	f8cd 800c 	str.w	r8, [sp, #12]
 800d826:	2330      	movs	r3, #48	; 0x30
 800d828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d9ec <_vfiprintf_r+0x24c>
 800d82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d830:	f04f 0901 	mov.w	r9, #1
 800d834:	4623      	mov	r3, r4
 800d836:	469a      	mov	sl, r3
 800d838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d83c:	b10a      	cbz	r2, 800d842 <_vfiprintf_r+0xa2>
 800d83e:	2a25      	cmp	r2, #37	; 0x25
 800d840:	d1f9      	bne.n	800d836 <_vfiprintf_r+0x96>
 800d842:	ebba 0b04 	subs.w	fp, sl, r4
 800d846:	d00b      	beq.n	800d860 <_vfiprintf_r+0xc0>
 800d848:	465b      	mov	r3, fp
 800d84a:	4622      	mov	r2, r4
 800d84c:	4629      	mov	r1, r5
 800d84e:	4630      	mov	r0, r6
 800d850:	f7ff ff93 	bl	800d77a <__sfputs_r>
 800d854:	3001      	adds	r0, #1
 800d856:	f000 80aa 	beq.w	800d9ae <_vfiprintf_r+0x20e>
 800d85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d85c:	445a      	add	r2, fp
 800d85e:	9209      	str	r2, [sp, #36]	; 0x24
 800d860:	f89a 3000 	ldrb.w	r3, [sl]
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 80a2 	beq.w	800d9ae <_vfiprintf_r+0x20e>
 800d86a:	2300      	movs	r3, #0
 800d86c:	f04f 32ff 	mov.w	r2, #4294967295
 800d870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d874:	f10a 0a01 	add.w	sl, sl, #1
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	9307      	str	r3, [sp, #28]
 800d87c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d880:	931a      	str	r3, [sp, #104]	; 0x68
 800d882:	4654      	mov	r4, sl
 800d884:	2205      	movs	r2, #5
 800d886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d88a:	4858      	ldr	r0, [pc, #352]	; (800d9ec <_vfiprintf_r+0x24c>)
 800d88c:	f7f2 fcd0 	bl	8000230 <memchr>
 800d890:	9a04      	ldr	r2, [sp, #16]
 800d892:	b9d8      	cbnz	r0, 800d8cc <_vfiprintf_r+0x12c>
 800d894:	06d1      	lsls	r1, r2, #27
 800d896:	bf44      	itt	mi
 800d898:	2320      	movmi	r3, #32
 800d89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d89e:	0713      	lsls	r3, r2, #28
 800d8a0:	bf44      	itt	mi
 800d8a2:	232b      	movmi	r3, #43	; 0x2b
 800d8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ae:	d015      	beq.n	800d8dc <_vfiprintf_r+0x13c>
 800d8b0:	9a07      	ldr	r2, [sp, #28]
 800d8b2:	4654      	mov	r4, sl
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	f04f 0c0a 	mov.w	ip, #10
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8c0:	3b30      	subs	r3, #48	; 0x30
 800d8c2:	2b09      	cmp	r3, #9
 800d8c4:	d94e      	bls.n	800d964 <_vfiprintf_r+0x1c4>
 800d8c6:	b1b0      	cbz	r0, 800d8f6 <_vfiprintf_r+0x156>
 800d8c8:	9207      	str	r2, [sp, #28]
 800d8ca:	e014      	b.n	800d8f6 <_vfiprintf_r+0x156>
 800d8cc:	eba0 0308 	sub.w	r3, r0, r8
 800d8d0:	fa09 f303 	lsl.w	r3, r9, r3
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	9304      	str	r3, [sp, #16]
 800d8d8:	46a2      	mov	sl, r4
 800d8da:	e7d2      	b.n	800d882 <_vfiprintf_r+0xe2>
 800d8dc:	9b03      	ldr	r3, [sp, #12]
 800d8de:	1d19      	adds	r1, r3, #4
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	9103      	str	r1, [sp, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bfbb      	ittet	lt
 800d8e8:	425b      	neglt	r3, r3
 800d8ea:	f042 0202 	orrlt.w	r2, r2, #2
 800d8ee:	9307      	strge	r3, [sp, #28]
 800d8f0:	9307      	strlt	r3, [sp, #28]
 800d8f2:	bfb8      	it	lt
 800d8f4:	9204      	strlt	r2, [sp, #16]
 800d8f6:	7823      	ldrb	r3, [r4, #0]
 800d8f8:	2b2e      	cmp	r3, #46	; 0x2e
 800d8fa:	d10c      	bne.n	800d916 <_vfiprintf_r+0x176>
 800d8fc:	7863      	ldrb	r3, [r4, #1]
 800d8fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d900:	d135      	bne.n	800d96e <_vfiprintf_r+0x1ce>
 800d902:	9b03      	ldr	r3, [sp, #12]
 800d904:	1d1a      	adds	r2, r3, #4
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	9203      	str	r2, [sp, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	bfb8      	it	lt
 800d90e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d912:	3402      	adds	r4, #2
 800d914:	9305      	str	r3, [sp, #20]
 800d916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9fc <_vfiprintf_r+0x25c>
 800d91a:	7821      	ldrb	r1, [r4, #0]
 800d91c:	2203      	movs	r2, #3
 800d91e:	4650      	mov	r0, sl
 800d920:	f7f2 fc86 	bl	8000230 <memchr>
 800d924:	b140      	cbz	r0, 800d938 <_vfiprintf_r+0x198>
 800d926:	2340      	movs	r3, #64	; 0x40
 800d928:	eba0 000a 	sub.w	r0, r0, sl
 800d92c:	fa03 f000 	lsl.w	r0, r3, r0
 800d930:	9b04      	ldr	r3, [sp, #16]
 800d932:	4303      	orrs	r3, r0
 800d934:	3401      	adds	r4, #1
 800d936:	9304      	str	r3, [sp, #16]
 800d938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d93c:	482c      	ldr	r0, [pc, #176]	; (800d9f0 <_vfiprintf_r+0x250>)
 800d93e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d942:	2206      	movs	r2, #6
 800d944:	f7f2 fc74 	bl	8000230 <memchr>
 800d948:	2800      	cmp	r0, #0
 800d94a:	d03f      	beq.n	800d9cc <_vfiprintf_r+0x22c>
 800d94c:	4b29      	ldr	r3, [pc, #164]	; (800d9f4 <_vfiprintf_r+0x254>)
 800d94e:	bb1b      	cbnz	r3, 800d998 <_vfiprintf_r+0x1f8>
 800d950:	9b03      	ldr	r3, [sp, #12]
 800d952:	3307      	adds	r3, #7
 800d954:	f023 0307 	bic.w	r3, r3, #7
 800d958:	3308      	adds	r3, #8
 800d95a:	9303      	str	r3, [sp, #12]
 800d95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d95e:	443b      	add	r3, r7
 800d960:	9309      	str	r3, [sp, #36]	; 0x24
 800d962:	e767      	b.n	800d834 <_vfiprintf_r+0x94>
 800d964:	fb0c 3202 	mla	r2, ip, r2, r3
 800d968:	460c      	mov	r4, r1
 800d96a:	2001      	movs	r0, #1
 800d96c:	e7a5      	b.n	800d8ba <_vfiprintf_r+0x11a>
 800d96e:	2300      	movs	r3, #0
 800d970:	3401      	adds	r4, #1
 800d972:	9305      	str	r3, [sp, #20]
 800d974:	4619      	mov	r1, r3
 800d976:	f04f 0c0a 	mov.w	ip, #10
 800d97a:	4620      	mov	r0, r4
 800d97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d980:	3a30      	subs	r2, #48	; 0x30
 800d982:	2a09      	cmp	r2, #9
 800d984:	d903      	bls.n	800d98e <_vfiprintf_r+0x1ee>
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0c5      	beq.n	800d916 <_vfiprintf_r+0x176>
 800d98a:	9105      	str	r1, [sp, #20]
 800d98c:	e7c3      	b.n	800d916 <_vfiprintf_r+0x176>
 800d98e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d992:	4604      	mov	r4, r0
 800d994:	2301      	movs	r3, #1
 800d996:	e7f0      	b.n	800d97a <_vfiprintf_r+0x1da>
 800d998:	ab03      	add	r3, sp, #12
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	462a      	mov	r2, r5
 800d99e:	4b16      	ldr	r3, [pc, #88]	; (800d9f8 <_vfiprintf_r+0x258>)
 800d9a0:	a904      	add	r1, sp, #16
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f7fd fe30 	bl	800b608 <_printf_float>
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	1c78      	adds	r0, r7, #1
 800d9ac:	d1d6      	bne.n	800d95c <_vfiprintf_r+0x1bc>
 800d9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9b0:	07d9      	lsls	r1, r3, #31
 800d9b2:	d405      	bmi.n	800d9c0 <_vfiprintf_r+0x220>
 800d9b4:	89ab      	ldrh	r3, [r5, #12]
 800d9b6:	059a      	lsls	r2, r3, #22
 800d9b8:	d402      	bmi.n	800d9c0 <_vfiprintf_r+0x220>
 800d9ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9bc:	f000 faaf 	bl	800df1e <__retarget_lock_release_recursive>
 800d9c0:	89ab      	ldrh	r3, [r5, #12]
 800d9c2:	065b      	lsls	r3, r3, #25
 800d9c4:	f53f af12 	bmi.w	800d7ec <_vfiprintf_r+0x4c>
 800d9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9ca:	e711      	b.n	800d7f0 <_vfiprintf_r+0x50>
 800d9cc:	ab03      	add	r3, sp, #12
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	4b09      	ldr	r3, [pc, #36]	; (800d9f8 <_vfiprintf_r+0x258>)
 800d9d4:	a904      	add	r1, sp, #16
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	f7fe f8ba 	bl	800bb50 <_printf_i>
 800d9dc:	e7e4      	b.n	800d9a8 <_vfiprintf_r+0x208>
 800d9de:	bf00      	nop
 800d9e0:	08013a34 	.word	0x08013a34
 800d9e4:	08013a54 	.word	0x08013a54
 800d9e8:	08013a14 	.word	0x08013a14
 800d9ec:	080138bc 	.word	0x080138bc
 800d9f0:	080138c6 	.word	0x080138c6
 800d9f4:	0800b609 	.word	0x0800b609
 800d9f8:	0800d77b 	.word	0x0800d77b
 800d9fc:	080138c2 	.word	0x080138c2

0800da00 <__swbuf_r>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	460e      	mov	r6, r1
 800da04:	4614      	mov	r4, r2
 800da06:	4605      	mov	r5, r0
 800da08:	b118      	cbz	r0, 800da12 <__swbuf_r+0x12>
 800da0a:	6983      	ldr	r3, [r0, #24]
 800da0c:	b90b      	cbnz	r3, 800da12 <__swbuf_r+0x12>
 800da0e:	f000 f9e7 	bl	800dde0 <__sinit>
 800da12:	4b21      	ldr	r3, [pc, #132]	; (800da98 <__swbuf_r+0x98>)
 800da14:	429c      	cmp	r4, r3
 800da16:	d12b      	bne.n	800da70 <__swbuf_r+0x70>
 800da18:	686c      	ldr	r4, [r5, #4]
 800da1a:	69a3      	ldr	r3, [r4, #24]
 800da1c:	60a3      	str	r3, [r4, #8]
 800da1e:	89a3      	ldrh	r3, [r4, #12]
 800da20:	071a      	lsls	r2, r3, #28
 800da22:	d52f      	bpl.n	800da84 <__swbuf_r+0x84>
 800da24:	6923      	ldr	r3, [r4, #16]
 800da26:	b36b      	cbz	r3, 800da84 <__swbuf_r+0x84>
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	6820      	ldr	r0, [r4, #0]
 800da2c:	1ac0      	subs	r0, r0, r3
 800da2e:	6963      	ldr	r3, [r4, #20]
 800da30:	b2f6      	uxtb	r6, r6
 800da32:	4283      	cmp	r3, r0
 800da34:	4637      	mov	r7, r6
 800da36:	dc04      	bgt.n	800da42 <__swbuf_r+0x42>
 800da38:	4621      	mov	r1, r4
 800da3a:	4628      	mov	r0, r5
 800da3c:	f000 f93c 	bl	800dcb8 <_fflush_r>
 800da40:	bb30      	cbnz	r0, 800da90 <__swbuf_r+0x90>
 800da42:	68a3      	ldr	r3, [r4, #8]
 800da44:	3b01      	subs	r3, #1
 800da46:	60a3      	str	r3, [r4, #8]
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	6022      	str	r2, [r4, #0]
 800da4e:	701e      	strb	r6, [r3, #0]
 800da50:	6963      	ldr	r3, [r4, #20]
 800da52:	3001      	adds	r0, #1
 800da54:	4283      	cmp	r3, r0
 800da56:	d004      	beq.n	800da62 <__swbuf_r+0x62>
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	07db      	lsls	r3, r3, #31
 800da5c:	d506      	bpl.n	800da6c <__swbuf_r+0x6c>
 800da5e:	2e0a      	cmp	r6, #10
 800da60:	d104      	bne.n	800da6c <__swbuf_r+0x6c>
 800da62:	4621      	mov	r1, r4
 800da64:	4628      	mov	r0, r5
 800da66:	f000 f927 	bl	800dcb8 <_fflush_r>
 800da6a:	b988      	cbnz	r0, 800da90 <__swbuf_r+0x90>
 800da6c:	4638      	mov	r0, r7
 800da6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da70:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <__swbuf_r+0x9c>)
 800da72:	429c      	cmp	r4, r3
 800da74:	d101      	bne.n	800da7a <__swbuf_r+0x7a>
 800da76:	68ac      	ldr	r4, [r5, #8]
 800da78:	e7cf      	b.n	800da1a <__swbuf_r+0x1a>
 800da7a:	4b09      	ldr	r3, [pc, #36]	; (800daa0 <__swbuf_r+0xa0>)
 800da7c:	429c      	cmp	r4, r3
 800da7e:	bf08      	it	eq
 800da80:	68ec      	ldreq	r4, [r5, #12]
 800da82:	e7ca      	b.n	800da1a <__swbuf_r+0x1a>
 800da84:	4621      	mov	r1, r4
 800da86:	4628      	mov	r0, r5
 800da88:	f000 f81a 	bl	800dac0 <__swsetup_r>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d0cb      	beq.n	800da28 <__swbuf_r+0x28>
 800da90:	f04f 37ff 	mov.w	r7, #4294967295
 800da94:	e7ea      	b.n	800da6c <__swbuf_r+0x6c>
 800da96:	bf00      	nop
 800da98:	08013a34 	.word	0x08013a34
 800da9c:	08013a54 	.word	0x08013a54
 800daa0:	08013a14 	.word	0x08013a14

0800daa4 <__ascii_wctomb>:
 800daa4:	b149      	cbz	r1, 800daba <__ascii_wctomb+0x16>
 800daa6:	2aff      	cmp	r2, #255	; 0xff
 800daa8:	bf85      	ittet	hi
 800daaa:	238a      	movhi	r3, #138	; 0x8a
 800daac:	6003      	strhi	r3, [r0, #0]
 800daae:	700a      	strbls	r2, [r1, #0]
 800dab0:	f04f 30ff 	movhi.w	r0, #4294967295
 800dab4:	bf98      	it	ls
 800dab6:	2001      	movls	r0, #1
 800dab8:	4770      	bx	lr
 800daba:	4608      	mov	r0, r1
 800dabc:	4770      	bx	lr
	...

0800dac0 <__swsetup_r>:
 800dac0:	4b32      	ldr	r3, [pc, #200]	; (800db8c <__swsetup_r+0xcc>)
 800dac2:	b570      	push	{r4, r5, r6, lr}
 800dac4:	681d      	ldr	r5, [r3, #0]
 800dac6:	4606      	mov	r6, r0
 800dac8:	460c      	mov	r4, r1
 800daca:	b125      	cbz	r5, 800dad6 <__swsetup_r+0x16>
 800dacc:	69ab      	ldr	r3, [r5, #24]
 800dace:	b913      	cbnz	r3, 800dad6 <__swsetup_r+0x16>
 800dad0:	4628      	mov	r0, r5
 800dad2:	f000 f985 	bl	800dde0 <__sinit>
 800dad6:	4b2e      	ldr	r3, [pc, #184]	; (800db90 <__swsetup_r+0xd0>)
 800dad8:	429c      	cmp	r4, r3
 800dada:	d10f      	bne.n	800dafc <__swsetup_r+0x3c>
 800dadc:	686c      	ldr	r4, [r5, #4]
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dae4:	0719      	lsls	r1, r3, #28
 800dae6:	d42c      	bmi.n	800db42 <__swsetup_r+0x82>
 800dae8:	06dd      	lsls	r5, r3, #27
 800daea:	d411      	bmi.n	800db10 <__swsetup_r+0x50>
 800daec:	2309      	movs	r3, #9
 800daee:	6033      	str	r3, [r6, #0]
 800daf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800daf4:	81a3      	strh	r3, [r4, #12]
 800daf6:	f04f 30ff 	mov.w	r0, #4294967295
 800dafa:	e03e      	b.n	800db7a <__swsetup_r+0xba>
 800dafc:	4b25      	ldr	r3, [pc, #148]	; (800db94 <__swsetup_r+0xd4>)
 800dafe:	429c      	cmp	r4, r3
 800db00:	d101      	bne.n	800db06 <__swsetup_r+0x46>
 800db02:	68ac      	ldr	r4, [r5, #8]
 800db04:	e7eb      	b.n	800dade <__swsetup_r+0x1e>
 800db06:	4b24      	ldr	r3, [pc, #144]	; (800db98 <__swsetup_r+0xd8>)
 800db08:	429c      	cmp	r4, r3
 800db0a:	bf08      	it	eq
 800db0c:	68ec      	ldreq	r4, [r5, #12]
 800db0e:	e7e6      	b.n	800dade <__swsetup_r+0x1e>
 800db10:	0758      	lsls	r0, r3, #29
 800db12:	d512      	bpl.n	800db3a <__swsetup_r+0x7a>
 800db14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db16:	b141      	cbz	r1, 800db2a <__swsetup_r+0x6a>
 800db18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db1c:	4299      	cmp	r1, r3
 800db1e:	d002      	beq.n	800db26 <__swsetup_r+0x66>
 800db20:	4630      	mov	r0, r6
 800db22:	f7ff fb6f 	bl	800d204 <_free_r>
 800db26:	2300      	movs	r3, #0
 800db28:	6363      	str	r3, [r4, #52]	; 0x34
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db30:	81a3      	strh	r3, [r4, #12]
 800db32:	2300      	movs	r3, #0
 800db34:	6063      	str	r3, [r4, #4]
 800db36:	6923      	ldr	r3, [r4, #16]
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	f043 0308 	orr.w	r3, r3, #8
 800db40:	81a3      	strh	r3, [r4, #12]
 800db42:	6923      	ldr	r3, [r4, #16]
 800db44:	b94b      	cbnz	r3, 800db5a <__swsetup_r+0x9a>
 800db46:	89a3      	ldrh	r3, [r4, #12]
 800db48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db50:	d003      	beq.n	800db5a <__swsetup_r+0x9a>
 800db52:	4621      	mov	r1, r4
 800db54:	4630      	mov	r0, r6
 800db56:	f000 fa07 	bl	800df68 <__smakebuf_r>
 800db5a:	89a0      	ldrh	r0, [r4, #12]
 800db5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db60:	f010 0301 	ands.w	r3, r0, #1
 800db64:	d00a      	beq.n	800db7c <__swsetup_r+0xbc>
 800db66:	2300      	movs	r3, #0
 800db68:	60a3      	str	r3, [r4, #8]
 800db6a:	6963      	ldr	r3, [r4, #20]
 800db6c:	425b      	negs	r3, r3
 800db6e:	61a3      	str	r3, [r4, #24]
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	b943      	cbnz	r3, 800db86 <__swsetup_r+0xc6>
 800db74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db78:	d1ba      	bne.n	800daf0 <__swsetup_r+0x30>
 800db7a:	bd70      	pop	{r4, r5, r6, pc}
 800db7c:	0781      	lsls	r1, r0, #30
 800db7e:	bf58      	it	pl
 800db80:	6963      	ldrpl	r3, [r4, #20]
 800db82:	60a3      	str	r3, [r4, #8]
 800db84:	e7f4      	b.n	800db70 <__swsetup_r+0xb0>
 800db86:	2000      	movs	r0, #0
 800db88:	e7f7      	b.n	800db7a <__swsetup_r+0xba>
 800db8a:	bf00      	nop
 800db8c:	20000490 	.word	0x20000490
 800db90:	08013a34 	.word	0x08013a34
 800db94:	08013a54 	.word	0x08013a54
 800db98:	08013a14 	.word	0x08013a14

0800db9c <abort>:
 800db9c:	b508      	push	{r3, lr}
 800db9e:	2006      	movs	r0, #6
 800dba0:	f000 fa52 	bl	800e048 <raise>
 800dba4:	2001      	movs	r0, #1
 800dba6:	f7fd fb6b 	bl	800b280 <_exit>
	...

0800dbac <__sflush_r>:
 800dbac:	898a      	ldrh	r2, [r1, #12]
 800dbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	0710      	lsls	r0, r2, #28
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	d458      	bmi.n	800dc6c <__sflush_r+0xc0>
 800dbba:	684b      	ldr	r3, [r1, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dc05      	bgt.n	800dbcc <__sflush_r+0x20>
 800dbc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	dc02      	bgt.n	800dbcc <__sflush_r+0x20>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbce:	2e00      	cmp	r6, #0
 800dbd0:	d0f9      	beq.n	800dbc6 <__sflush_r+0x1a>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbd8:	682f      	ldr	r7, [r5, #0]
 800dbda:	602b      	str	r3, [r5, #0]
 800dbdc:	d032      	beq.n	800dc44 <__sflush_r+0x98>
 800dbde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	075a      	lsls	r2, r3, #29
 800dbe4:	d505      	bpl.n	800dbf2 <__sflush_r+0x46>
 800dbe6:	6863      	ldr	r3, [r4, #4]
 800dbe8:	1ac0      	subs	r0, r0, r3
 800dbea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbec:	b10b      	cbz	r3, 800dbf2 <__sflush_r+0x46>
 800dbee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbf0:	1ac0      	subs	r0, r0, r3
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbf8:	6a21      	ldr	r1, [r4, #32]
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	47b0      	blx	r6
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	d106      	bne.n	800dc12 <__sflush_r+0x66>
 800dc04:	6829      	ldr	r1, [r5, #0]
 800dc06:	291d      	cmp	r1, #29
 800dc08:	d82c      	bhi.n	800dc64 <__sflush_r+0xb8>
 800dc0a:	4a2a      	ldr	r2, [pc, #168]	; (800dcb4 <__sflush_r+0x108>)
 800dc0c:	40ca      	lsrs	r2, r1
 800dc0e:	07d6      	lsls	r6, r2, #31
 800dc10:	d528      	bpl.n	800dc64 <__sflush_r+0xb8>
 800dc12:	2200      	movs	r2, #0
 800dc14:	6062      	str	r2, [r4, #4]
 800dc16:	04d9      	lsls	r1, r3, #19
 800dc18:	6922      	ldr	r2, [r4, #16]
 800dc1a:	6022      	str	r2, [r4, #0]
 800dc1c:	d504      	bpl.n	800dc28 <__sflush_r+0x7c>
 800dc1e:	1c42      	adds	r2, r0, #1
 800dc20:	d101      	bne.n	800dc26 <__sflush_r+0x7a>
 800dc22:	682b      	ldr	r3, [r5, #0]
 800dc24:	b903      	cbnz	r3, 800dc28 <__sflush_r+0x7c>
 800dc26:	6560      	str	r0, [r4, #84]	; 0x54
 800dc28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc2a:	602f      	str	r7, [r5, #0]
 800dc2c:	2900      	cmp	r1, #0
 800dc2e:	d0ca      	beq.n	800dbc6 <__sflush_r+0x1a>
 800dc30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc34:	4299      	cmp	r1, r3
 800dc36:	d002      	beq.n	800dc3e <__sflush_r+0x92>
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f7ff fae3 	bl	800d204 <_free_r>
 800dc3e:	2000      	movs	r0, #0
 800dc40:	6360      	str	r0, [r4, #52]	; 0x34
 800dc42:	e7c1      	b.n	800dbc8 <__sflush_r+0x1c>
 800dc44:	6a21      	ldr	r1, [r4, #32]
 800dc46:	2301      	movs	r3, #1
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b0      	blx	r6
 800dc4c:	1c41      	adds	r1, r0, #1
 800dc4e:	d1c7      	bne.n	800dbe0 <__sflush_r+0x34>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0c4      	beq.n	800dbe0 <__sflush_r+0x34>
 800dc56:	2b1d      	cmp	r3, #29
 800dc58:	d001      	beq.n	800dc5e <__sflush_r+0xb2>
 800dc5a:	2b16      	cmp	r3, #22
 800dc5c:	d101      	bne.n	800dc62 <__sflush_r+0xb6>
 800dc5e:	602f      	str	r7, [r5, #0]
 800dc60:	e7b1      	b.n	800dbc6 <__sflush_r+0x1a>
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	e7ad      	b.n	800dbc8 <__sflush_r+0x1c>
 800dc6c:	690f      	ldr	r7, [r1, #16]
 800dc6e:	2f00      	cmp	r7, #0
 800dc70:	d0a9      	beq.n	800dbc6 <__sflush_r+0x1a>
 800dc72:	0793      	lsls	r3, r2, #30
 800dc74:	680e      	ldr	r6, [r1, #0]
 800dc76:	bf08      	it	eq
 800dc78:	694b      	ldreq	r3, [r1, #20]
 800dc7a:	600f      	str	r7, [r1, #0]
 800dc7c:	bf18      	it	ne
 800dc7e:	2300      	movne	r3, #0
 800dc80:	eba6 0807 	sub.w	r8, r6, r7
 800dc84:	608b      	str	r3, [r1, #8]
 800dc86:	f1b8 0f00 	cmp.w	r8, #0
 800dc8a:	dd9c      	ble.n	800dbc6 <__sflush_r+0x1a>
 800dc8c:	6a21      	ldr	r1, [r4, #32]
 800dc8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc90:	4643      	mov	r3, r8
 800dc92:	463a      	mov	r2, r7
 800dc94:	4628      	mov	r0, r5
 800dc96:	47b0      	blx	r6
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	dc06      	bgt.n	800dcaa <__sflush_r+0xfe>
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca2:	81a3      	strh	r3, [r4, #12]
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295
 800dca8:	e78e      	b.n	800dbc8 <__sflush_r+0x1c>
 800dcaa:	4407      	add	r7, r0
 800dcac:	eba8 0800 	sub.w	r8, r8, r0
 800dcb0:	e7e9      	b.n	800dc86 <__sflush_r+0xda>
 800dcb2:	bf00      	nop
 800dcb4:	20400001 	.word	0x20400001

0800dcb8 <_fflush_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	690b      	ldr	r3, [r1, #16]
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	b913      	cbnz	r3, 800dcc8 <_fflush_r+0x10>
 800dcc2:	2500      	movs	r5, #0
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	b118      	cbz	r0, 800dcd2 <_fflush_r+0x1a>
 800dcca:	6983      	ldr	r3, [r0, #24]
 800dccc:	b90b      	cbnz	r3, 800dcd2 <_fflush_r+0x1a>
 800dcce:	f000 f887 	bl	800dde0 <__sinit>
 800dcd2:	4b14      	ldr	r3, [pc, #80]	; (800dd24 <_fflush_r+0x6c>)
 800dcd4:	429c      	cmp	r4, r3
 800dcd6:	d11b      	bne.n	800dd10 <_fflush_r+0x58>
 800dcd8:	686c      	ldr	r4, [r5, #4]
 800dcda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d0ef      	beq.n	800dcc2 <_fflush_r+0xa>
 800dce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dce4:	07d0      	lsls	r0, r2, #31
 800dce6:	d404      	bmi.n	800dcf2 <_fflush_r+0x3a>
 800dce8:	0599      	lsls	r1, r3, #22
 800dcea:	d402      	bmi.n	800dcf2 <_fflush_r+0x3a>
 800dcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcee:	f000 f915 	bl	800df1c <__retarget_lock_acquire_recursive>
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	f7ff ff59 	bl	800dbac <__sflush_r>
 800dcfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcfc:	07da      	lsls	r2, r3, #31
 800dcfe:	4605      	mov	r5, r0
 800dd00:	d4e0      	bmi.n	800dcc4 <_fflush_r+0xc>
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	059b      	lsls	r3, r3, #22
 800dd06:	d4dd      	bmi.n	800dcc4 <_fflush_r+0xc>
 800dd08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd0a:	f000 f908 	bl	800df1e <__retarget_lock_release_recursive>
 800dd0e:	e7d9      	b.n	800dcc4 <_fflush_r+0xc>
 800dd10:	4b05      	ldr	r3, [pc, #20]	; (800dd28 <_fflush_r+0x70>)
 800dd12:	429c      	cmp	r4, r3
 800dd14:	d101      	bne.n	800dd1a <_fflush_r+0x62>
 800dd16:	68ac      	ldr	r4, [r5, #8]
 800dd18:	e7df      	b.n	800dcda <_fflush_r+0x22>
 800dd1a:	4b04      	ldr	r3, [pc, #16]	; (800dd2c <_fflush_r+0x74>)
 800dd1c:	429c      	cmp	r4, r3
 800dd1e:	bf08      	it	eq
 800dd20:	68ec      	ldreq	r4, [r5, #12]
 800dd22:	e7da      	b.n	800dcda <_fflush_r+0x22>
 800dd24:	08013a34 	.word	0x08013a34
 800dd28:	08013a54 	.word	0x08013a54
 800dd2c:	08013a14 	.word	0x08013a14

0800dd30 <std>:
 800dd30:	2300      	movs	r3, #0
 800dd32:	b510      	push	{r4, lr}
 800dd34:	4604      	mov	r4, r0
 800dd36:	e9c0 3300 	strd	r3, r3, [r0]
 800dd3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd3e:	6083      	str	r3, [r0, #8]
 800dd40:	8181      	strh	r1, [r0, #12]
 800dd42:	6643      	str	r3, [r0, #100]	; 0x64
 800dd44:	81c2      	strh	r2, [r0, #14]
 800dd46:	6183      	str	r3, [r0, #24]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	2208      	movs	r2, #8
 800dd4c:	305c      	adds	r0, #92	; 0x5c
 800dd4e:	f7fd fbb3 	bl	800b4b8 <memset>
 800dd52:	4b05      	ldr	r3, [pc, #20]	; (800dd68 <std+0x38>)
 800dd54:	6263      	str	r3, [r4, #36]	; 0x24
 800dd56:	4b05      	ldr	r3, [pc, #20]	; (800dd6c <std+0x3c>)
 800dd58:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd5a:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <std+0x40>)
 800dd5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd5e:	4b05      	ldr	r3, [pc, #20]	; (800dd74 <std+0x44>)
 800dd60:	6224      	str	r4, [r4, #32]
 800dd62:	6323      	str	r3, [r4, #48]	; 0x30
 800dd64:	bd10      	pop	{r4, pc}
 800dd66:	bf00      	nop
 800dd68:	0800e081 	.word	0x0800e081
 800dd6c:	0800e0a3 	.word	0x0800e0a3
 800dd70:	0800e0db 	.word	0x0800e0db
 800dd74:	0800e0ff 	.word	0x0800e0ff

0800dd78 <_cleanup_r>:
 800dd78:	4901      	ldr	r1, [pc, #4]	; (800dd80 <_cleanup_r+0x8>)
 800dd7a:	f000 b8af 	b.w	800dedc <_fwalk_reent>
 800dd7e:	bf00      	nop
 800dd80:	0800dcb9 	.word	0x0800dcb9

0800dd84 <__sfmoreglue>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	1e4a      	subs	r2, r1, #1
 800dd88:	2568      	movs	r5, #104	; 0x68
 800dd8a:	4355      	muls	r5, r2
 800dd8c:	460e      	mov	r6, r1
 800dd8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd92:	f7ff fa87 	bl	800d2a4 <_malloc_r>
 800dd96:	4604      	mov	r4, r0
 800dd98:	b140      	cbz	r0, 800ddac <__sfmoreglue+0x28>
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	e9c0 1600 	strd	r1, r6, [r0]
 800dda0:	300c      	adds	r0, #12
 800dda2:	60a0      	str	r0, [r4, #8]
 800dda4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dda8:	f7fd fb86 	bl	800b4b8 <memset>
 800ddac:	4620      	mov	r0, r4
 800ddae:	bd70      	pop	{r4, r5, r6, pc}

0800ddb0 <__sfp_lock_acquire>:
 800ddb0:	4801      	ldr	r0, [pc, #4]	; (800ddb8 <__sfp_lock_acquire+0x8>)
 800ddb2:	f000 b8b3 	b.w	800df1c <__retarget_lock_acquire_recursive>
 800ddb6:	bf00      	nop
 800ddb8:	200013c0 	.word	0x200013c0

0800ddbc <__sfp_lock_release>:
 800ddbc:	4801      	ldr	r0, [pc, #4]	; (800ddc4 <__sfp_lock_release+0x8>)
 800ddbe:	f000 b8ae 	b.w	800df1e <__retarget_lock_release_recursive>
 800ddc2:	bf00      	nop
 800ddc4:	200013c0 	.word	0x200013c0

0800ddc8 <__sinit_lock_acquire>:
 800ddc8:	4801      	ldr	r0, [pc, #4]	; (800ddd0 <__sinit_lock_acquire+0x8>)
 800ddca:	f000 b8a7 	b.w	800df1c <__retarget_lock_acquire_recursive>
 800ddce:	bf00      	nop
 800ddd0:	200013bb 	.word	0x200013bb

0800ddd4 <__sinit_lock_release>:
 800ddd4:	4801      	ldr	r0, [pc, #4]	; (800dddc <__sinit_lock_release+0x8>)
 800ddd6:	f000 b8a2 	b.w	800df1e <__retarget_lock_release_recursive>
 800ddda:	bf00      	nop
 800dddc:	200013bb 	.word	0x200013bb

0800dde0 <__sinit>:
 800dde0:	b510      	push	{r4, lr}
 800dde2:	4604      	mov	r4, r0
 800dde4:	f7ff fff0 	bl	800ddc8 <__sinit_lock_acquire>
 800dde8:	69a3      	ldr	r3, [r4, #24]
 800ddea:	b11b      	cbz	r3, 800ddf4 <__sinit+0x14>
 800ddec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddf0:	f7ff bff0 	b.w	800ddd4 <__sinit_lock_release>
 800ddf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddf8:	6523      	str	r3, [r4, #80]	; 0x50
 800ddfa:	4b13      	ldr	r3, [pc, #76]	; (800de48 <__sinit+0x68>)
 800ddfc:	4a13      	ldr	r2, [pc, #76]	; (800de4c <__sinit+0x6c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	62a2      	str	r2, [r4, #40]	; 0x28
 800de02:	42a3      	cmp	r3, r4
 800de04:	bf04      	itt	eq
 800de06:	2301      	moveq	r3, #1
 800de08:	61a3      	streq	r3, [r4, #24]
 800de0a:	4620      	mov	r0, r4
 800de0c:	f000 f820 	bl	800de50 <__sfp>
 800de10:	6060      	str	r0, [r4, #4]
 800de12:	4620      	mov	r0, r4
 800de14:	f000 f81c 	bl	800de50 <__sfp>
 800de18:	60a0      	str	r0, [r4, #8]
 800de1a:	4620      	mov	r0, r4
 800de1c:	f000 f818 	bl	800de50 <__sfp>
 800de20:	2200      	movs	r2, #0
 800de22:	60e0      	str	r0, [r4, #12]
 800de24:	2104      	movs	r1, #4
 800de26:	6860      	ldr	r0, [r4, #4]
 800de28:	f7ff ff82 	bl	800dd30 <std>
 800de2c:	68a0      	ldr	r0, [r4, #8]
 800de2e:	2201      	movs	r2, #1
 800de30:	2109      	movs	r1, #9
 800de32:	f7ff ff7d 	bl	800dd30 <std>
 800de36:	68e0      	ldr	r0, [r4, #12]
 800de38:	2202      	movs	r2, #2
 800de3a:	2112      	movs	r1, #18
 800de3c:	f7ff ff78 	bl	800dd30 <std>
 800de40:	2301      	movs	r3, #1
 800de42:	61a3      	str	r3, [r4, #24]
 800de44:	e7d2      	b.n	800ddec <__sinit+0xc>
 800de46:	bf00      	nop
 800de48:	08013690 	.word	0x08013690
 800de4c:	0800dd79 	.word	0x0800dd79

0800de50 <__sfp>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	4607      	mov	r7, r0
 800de54:	f7ff ffac 	bl	800ddb0 <__sfp_lock_acquire>
 800de58:	4b1e      	ldr	r3, [pc, #120]	; (800ded4 <__sfp+0x84>)
 800de5a:	681e      	ldr	r6, [r3, #0]
 800de5c:	69b3      	ldr	r3, [r6, #24]
 800de5e:	b913      	cbnz	r3, 800de66 <__sfp+0x16>
 800de60:	4630      	mov	r0, r6
 800de62:	f7ff ffbd 	bl	800dde0 <__sinit>
 800de66:	3648      	adds	r6, #72	; 0x48
 800de68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de6c:	3b01      	subs	r3, #1
 800de6e:	d503      	bpl.n	800de78 <__sfp+0x28>
 800de70:	6833      	ldr	r3, [r6, #0]
 800de72:	b30b      	cbz	r3, 800deb8 <__sfp+0x68>
 800de74:	6836      	ldr	r6, [r6, #0]
 800de76:	e7f7      	b.n	800de68 <__sfp+0x18>
 800de78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de7c:	b9d5      	cbnz	r5, 800deb4 <__sfp+0x64>
 800de7e:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <__sfp+0x88>)
 800de80:	60e3      	str	r3, [r4, #12]
 800de82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de86:	6665      	str	r5, [r4, #100]	; 0x64
 800de88:	f000 f847 	bl	800df1a <__retarget_lock_init_recursive>
 800de8c:	f7ff ff96 	bl	800ddbc <__sfp_lock_release>
 800de90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de98:	6025      	str	r5, [r4, #0]
 800de9a:	61a5      	str	r5, [r4, #24]
 800de9c:	2208      	movs	r2, #8
 800de9e:	4629      	mov	r1, r5
 800dea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dea4:	f7fd fb08 	bl	800b4b8 <memset>
 800dea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800deac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800deb0:	4620      	mov	r0, r4
 800deb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb4:	3468      	adds	r4, #104	; 0x68
 800deb6:	e7d9      	b.n	800de6c <__sfp+0x1c>
 800deb8:	2104      	movs	r1, #4
 800deba:	4638      	mov	r0, r7
 800debc:	f7ff ff62 	bl	800dd84 <__sfmoreglue>
 800dec0:	4604      	mov	r4, r0
 800dec2:	6030      	str	r0, [r6, #0]
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d1d5      	bne.n	800de74 <__sfp+0x24>
 800dec8:	f7ff ff78 	bl	800ddbc <__sfp_lock_release>
 800decc:	230c      	movs	r3, #12
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	e7ee      	b.n	800deb0 <__sfp+0x60>
 800ded2:	bf00      	nop
 800ded4:	08013690 	.word	0x08013690
 800ded8:	ffff0001 	.word	0xffff0001

0800dedc <_fwalk_reent>:
 800dedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee0:	4606      	mov	r6, r0
 800dee2:	4688      	mov	r8, r1
 800dee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dee8:	2700      	movs	r7, #0
 800deea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800deee:	f1b9 0901 	subs.w	r9, r9, #1
 800def2:	d505      	bpl.n	800df00 <_fwalk_reent+0x24>
 800def4:	6824      	ldr	r4, [r4, #0]
 800def6:	2c00      	cmp	r4, #0
 800def8:	d1f7      	bne.n	800deea <_fwalk_reent+0xe>
 800defa:	4638      	mov	r0, r7
 800defc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df00:	89ab      	ldrh	r3, [r5, #12]
 800df02:	2b01      	cmp	r3, #1
 800df04:	d907      	bls.n	800df16 <_fwalk_reent+0x3a>
 800df06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df0a:	3301      	adds	r3, #1
 800df0c:	d003      	beq.n	800df16 <_fwalk_reent+0x3a>
 800df0e:	4629      	mov	r1, r5
 800df10:	4630      	mov	r0, r6
 800df12:	47c0      	blx	r8
 800df14:	4307      	orrs	r7, r0
 800df16:	3568      	adds	r5, #104	; 0x68
 800df18:	e7e9      	b.n	800deee <_fwalk_reent+0x12>

0800df1a <__retarget_lock_init_recursive>:
 800df1a:	4770      	bx	lr

0800df1c <__retarget_lock_acquire_recursive>:
 800df1c:	4770      	bx	lr

0800df1e <__retarget_lock_release_recursive>:
 800df1e:	4770      	bx	lr

0800df20 <__swhatbuf_r>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	460e      	mov	r6, r1
 800df24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df28:	2900      	cmp	r1, #0
 800df2a:	b096      	sub	sp, #88	; 0x58
 800df2c:	4614      	mov	r4, r2
 800df2e:	461d      	mov	r5, r3
 800df30:	da07      	bge.n	800df42 <__swhatbuf_r+0x22>
 800df32:	2300      	movs	r3, #0
 800df34:	602b      	str	r3, [r5, #0]
 800df36:	89b3      	ldrh	r3, [r6, #12]
 800df38:	061a      	lsls	r2, r3, #24
 800df3a:	d410      	bmi.n	800df5e <__swhatbuf_r+0x3e>
 800df3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df40:	e00e      	b.n	800df60 <__swhatbuf_r+0x40>
 800df42:	466a      	mov	r2, sp
 800df44:	f000 f902 	bl	800e14c <_fstat_r>
 800df48:	2800      	cmp	r0, #0
 800df4a:	dbf2      	blt.n	800df32 <__swhatbuf_r+0x12>
 800df4c:	9a01      	ldr	r2, [sp, #4]
 800df4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df56:	425a      	negs	r2, r3
 800df58:	415a      	adcs	r2, r3
 800df5a:	602a      	str	r2, [r5, #0]
 800df5c:	e7ee      	b.n	800df3c <__swhatbuf_r+0x1c>
 800df5e:	2340      	movs	r3, #64	; 0x40
 800df60:	2000      	movs	r0, #0
 800df62:	6023      	str	r3, [r4, #0]
 800df64:	b016      	add	sp, #88	; 0x58
 800df66:	bd70      	pop	{r4, r5, r6, pc}

0800df68 <__smakebuf_r>:
 800df68:	898b      	ldrh	r3, [r1, #12]
 800df6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df6c:	079d      	lsls	r5, r3, #30
 800df6e:	4606      	mov	r6, r0
 800df70:	460c      	mov	r4, r1
 800df72:	d507      	bpl.n	800df84 <__smakebuf_r+0x1c>
 800df74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	6123      	str	r3, [r4, #16]
 800df7c:	2301      	movs	r3, #1
 800df7e:	6163      	str	r3, [r4, #20]
 800df80:	b002      	add	sp, #8
 800df82:	bd70      	pop	{r4, r5, r6, pc}
 800df84:	ab01      	add	r3, sp, #4
 800df86:	466a      	mov	r2, sp
 800df88:	f7ff ffca 	bl	800df20 <__swhatbuf_r>
 800df8c:	9900      	ldr	r1, [sp, #0]
 800df8e:	4605      	mov	r5, r0
 800df90:	4630      	mov	r0, r6
 800df92:	f7ff f987 	bl	800d2a4 <_malloc_r>
 800df96:	b948      	cbnz	r0, 800dfac <__smakebuf_r+0x44>
 800df98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9c:	059a      	lsls	r2, r3, #22
 800df9e:	d4ef      	bmi.n	800df80 <__smakebuf_r+0x18>
 800dfa0:	f023 0303 	bic.w	r3, r3, #3
 800dfa4:	f043 0302 	orr.w	r3, r3, #2
 800dfa8:	81a3      	strh	r3, [r4, #12]
 800dfaa:	e7e3      	b.n	800df74 <__smakebuf_r+0xc>
 800dfac:	4b0d      	ldr	r3, [pc, #52]	; (800dfe4 <__smakebuf_r+0x7c>)
 800dfae:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfb0:	89a3      	ldrh	r3, [r4, #12]
 800dfb2:	6020      	str	r0, [r4, #0]
 800dfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfb8:	81a3      	strh	r3, [r4, #12]
 800dfba:	9b00      	ldr	r3, [sp, #0]
 800dfbc:	6163      	str	r3, [r4, #20]
 800dfbe:	9b01      	ldr	r3, [sp, #4]
 800dfc0:	6120      	str	r0, [r4, #16]
 800dfc2:	b15b      	cbz	r3, 800dfdc <__smakebuf_r+0x74>
 800dfc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f000 f8d1 	bl	800e170 <_isatty_r>
 800dfce:	b128      	cbz	r0, 800dfdc <__smakebuf_r+0x74>
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	f023 0303 	bic.w	r3, r3, #3
 800dfd6:	f043 0301 	orr.w	r3, r3, #1
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	89a0      	ldrh	r0, [r4, #12]
 800dfde:	4305      	orrs	r5, r0
 800dfe0:	81a5      	strh	r5, [r4, #12]
 800dfe2:	e7cd      	b.n	800df80 <__smakebuf_r+0x18>
 800dfe4:	0800dd79 	.word	0x0800dd79

0800dfe8 <_malloc_usable_size_r>:
 800dfe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfec:	1f18      	subs	r0, r3, #4
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	bfbc      	itt	lt
 800dff2:	580b      	ldrlt	r3, [r1, r0]
 800dff4:	18c0      	addlt	r0, r0, r3
 800dff6:	4770      	bx	lr

0800dff8 <_raise_r>:
 800dff8:	291f      	cmp	r1, #31
 800dffa:	b538      	push	{r3, r4, r5, lr}
 800dffc:	4604      	mov	r4, r0
 800dffe:	460d      	mov	r5, r1
 800e000:	d904      	bls.n	800e00c <_raise_r+0x14>
 800e002:	2316      	movs	r3, #22
 800e004:	6003      	str	r3, [r0, #0]
 800e006:	f04f 30ff 	mov.w	r0, #4294967295
 800e00a:	bd38      	pop	{r3, r4, r5, pc}
 800e00c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e00e:	b112      	cbz	r2, 800e016 <_raise_r+0x1e>
 800e010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e014:	b94b      	cbnz	r3, 800e02a <_raise_r+0x32>
 800e016:	4620      	mov	r0, r4
 800e018:	f000 f830 	bl	800e07c <_getpid_r>
 800e01c:	462a      	mov	r2, r5
 800e01e:	4601      	mov	r1, r0
 800e020:	4620      	mov	r0, r4
 800e022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e026:	f000 b817 	b.w	800e058 <_kill_r>
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d00a      	beq.n	800e044 <_raise_r+0x4c>
 800e02e:	1c59      	adds	r1, r3, #1
 800e030:	d103      	bne.n	800e03a <_raise_r+0x42>
 800e032:	2316      	movs	r3, #22
 800e034:	6003      	str	r3, [r0, #0]
 800e036:	2001      	movs	r0, #1
 800e038:	e7e7      	b.n	800e00a <_raise_r+0x12>
 800e03a:	2400      	movs	r4, #0
 800e03c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e040:	4628      	mov	r0, r5
 800e042:	4798      	blx	r3
 800e044:	2000      	movs	r0, #0
 800e046:	e7e0      	b.n	800e00a <_raise_r+0x12>

0800e048 <raise>:
 800e048:	4b02      	ldr	r3, [pc, #8]	; (800e054 <raise+0xc>)
 800e04a:	4601      	mov	r1, r0
 800e04c:	6818      	ldr	r0, [r3, #0]
 800e04e:	f7ff bfd3 	b.w	800dff8 <_raise_r>
 800e052:	bf00      	nop
 800e054:	20000490 	.word	0x20000490

0800e058 <_kill_r>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4d07      	ldr	r5, [pc, #28]	; (800e078 <_kill_r+0x20>)
 800e05c:	2300      	movs	r3, #0
 800e05e:	4604      	mov	r4, r0
 800e060:	4608      	mov	r0, r1
 800e062:	4611      	mov	r1, r2
 800e064:	602b      	str	r3, [r5, #0]
 800e066:	f7fd f8fb 	bl	800b260 <_kill>
 800e06a:	1c43      	adds	r3, r0, #1
 800e06c:	d102      	bne.n	800e074 <_kill_r+0x1c>
 800e06e:	682b      	ldr	r3, [r5, #0]
 800e070:	b103      	cbz	r3, 800e074 <_kill_r+0x1c>
 800e072:	6023      	str	r3, [r4, #0]
 800e074:	bd38      	pop	{r3, r4, r5, pc}
 800e076:	bf00      	nop
 800e078:	200013b4 	.word	0x200013b4

0800e07c <_getpid_r>:
 800e07c:	f7fd b8e8 	b.w	800b250 <_getpid>

0800e080 <__sread>:
 800e080:	b510      	push	{r4, lr}
 800e082:	460c      	mov	r4, r1
 800e084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e088:	f000 f894 	bl	800e1b4 <_read_r>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	bfab      	itete	ge
 800e090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e092:	89a3      	ldrhlt	r3, [r4, #12]
 800e094:	181b      	addge	r3, r3, r0
 800e096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e09a:	bfac      	ite	ge
 800e09c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e09e:	81a3      	strhlt	r3, [r4, #12]
 800e0a0:	bd10      	pop	{r4, pc}

0800e0a2 <__swrite>:
 800e0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a6:	461f      	mov	r7, r3
 800e0a8:	898b      	ldrh	r3, [r1, #12]
 800e0aa:	05db      	lsls	r3, r3, #23
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	4616      	mov	r6, r2
 800e0b2:	d505      	bpl.n	800e0c0 <__swrite+0x1e>
 800e0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f000 f868 	bl	800e190 <_lseek_r>
 800e0c0:	89a3      	ldrh	r3, [r4, #12]
 800e0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ca:	81a3      	strh	r3, [r4, #12]
 800e0cc:	4632      	mov	r2, r6
 800e0ce:	463b      	mov	r3, r7
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d6:	f000 b817 	b.w	800e108 <_write_r>

0800e0da <__sseek>:
 800e0da:	b510      	push	{r4, lr}
 800e0dc:	460c      	mov	r4, r1
 800e0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e2:	f000 f855 	bl	800e190 <_lseek_r>
 800e0e6:	1c43      	adds	r3, r0, #1
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	bf15      	itete	ne
 800e0ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0f6:	81a3      	strheq	r3, [r4, #12]
 800e0f8:	bf18      	it	ne
 800e0fa:	81a3      	strhne	r3, [r4, #12]
 800e0fc:	bd10      	pop	{r4, pc}

0800e0fe <__sclose>:
 800e0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e102:	f000 b813 	b.w	800e12c <_close_r>
	...

0800e108 <_write_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4d07      	ldr	r5, [pc, #28]	; (800e128 <_write_r+0x20>)
 800e10c:	4604      	mov	r4, r0
 800e10e:	4608      	mov	r0, r1
 800e110:	4611      	mov	r1, r2
 800e112:	2200      	movs	r2, #0
 800e114:	602a      	str	r2, [r5, #0]
 800e116:	461a      	mov	r2, r3
 800e118:	f7fd f8d9 	bl	800b2ce <_write>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <_write_r+0x1e>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	b103      	cbz	r3, 800e126 <_write_r+0x1e>
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	200013b4 	.word	0x200013b4

0800e12c <_close_r>:
 800e12c:	b538      	push	{r3, r4, r5, lr}
 800e12e:	4d06      	ldr	r5, [pc, #24]	; (800e148 <_close_r+0x1c>)
 800e130:	2300      	movs	r3, #0
 800e132:	4604      	mov	r4, r0
 800e134:	4608      	mov	r0, r1
 800e136:	602b      	str	r3, [r5, #0]
 800e138:	f7fd f912 	bl	800b360 <_close>
 800e13c:	1c43      	adds	r3, r0, #1
 800e13e:	d102      	bne.n	800e146 <_close_r+0x1a>
 800e140:	682b      	ldr	r3, [r5, #0]
 800e142:	b103      	cbz	r3, 800e146 <_close_r+0x1a>
 800e144:	6023      	str	r3, [r4, #0]
 800e146:	bd38      	pop	{r3, r4, r5, pc}
 800e148:	200013b4 	.word	0x200013b4

0800e14c <_fstat_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	4d07      	ldr	r5, [pc, #28]	; (800e16c <_fstat_r+0x20>)
 800e150:	2300      	movs	r3, #0
 800e152:	4604      	mov	r4, r0
 800e154:	4608      	mov	r0, r1
 800e156:	4611      	mov	r1, r2
 800e158:	602b      	str	r3, [r5, #0]
 800e15a:	f7fd f90d 	bl	800b378 <_fstat>
 800e15e:	1c43      	adds	r3, r0, #1
 800e160:	d102      	bne.n	800e168 <_fstat_r+0x1c>
 800e162:	682b      	ldr	r3, [r5, #0]
 800e164:	b103      	cbz	r3, 800e168 <_fstat_r+0x1c>
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	bd38      	pop	{r3, r4, r5, pc}
 800e16a:	bf00      	nop
 800e16c:	200013b4 	.word	0x200013b4

0800e170 <_isatty_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4d06      	ldr	r5, [pc, #24]	; (800e18c <_isatty_r+0x1c>)
 800e174:	2300      	movs	r3, #0
 800e176:	4604      	mov	r4, r0
 800e178:	4608      	mov	r0, r1
 800e17a:	602b      	str	r3, [r5, #0]
 800e17c:	f7fd f90c 	bl	800b398 <_isatty>
 800e180:	1c43      	adds	r3, r0, #1
 800e182:	d102      	bne.n	800e18a <_isatty_r+0x1a>
 800e184:	682b      	ldr	r3, [r5, #0]
 800e186:	b103      	cbz	r3, 800e18a <_isatty_r+0x1a>
 800e188:	6023      	str	r3, [r4, #0]
 800e18a:	bd38      	pop	{r3, r4, r5, pc}
 800e18c:	200013b4 	.word	0x200013b4

0800e190 <_lseek_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4d07      	ldr	r5, [pc, #28]	; (800e1b0 <_lseek_r+0x20>)
 800e194:	4604      	mov	r4, r0
 800e196:	4608      	mov	r0, r1
 800e198:	4611      	mov	r1, r2
 800e19a:	2200      	movs	r2, #0
 800e19c:	602a      	str	r2, [r5, #0]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	f7fd f905 	bl	800b3ae <_lseek>
 800e1a4:	1c43      	adds	r3, r0, #1
 800e1a6:	d102      	bne.n	800e1ae <_lseek_r+0x1e>
 800e1a8:	682b      	ldr	r3, [r5, #0]
 800e1aa:	b103      	cbz	r3, 800e1ae <_lseek_r+0x1e>
 800e1ac:	6023      	str	r3, [r4, #0]
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	200013b4 	.word	0x200013b4

0800e1b4 <_read_r>:
 800e1b4:	b538      	push	{r3, r4, r5, lr}
 800e1b6:	4d07      	ldr	r5, [pc, #28]	; (800e1d4 <_read_r+0x20>)
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	4608      	mov	r0, r1
 800e1bc:	4611      	mov	r1, r2
 800e1be:	2200      	movs	r2, #0
 800e1c0:	602a      	str	r2, [r5, #0]
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	f7fd f866 	bl	800b294 <_read>
 800e1c8:	1c43      	adds	r3, r0, #1
 800e1ca:	d102      	bne.n	800e1d2 <_read_r+0x1e>
 800e1cc:	682b      	ldr	r3, [r5, #0]
 800e1ce:	b103      	cbz	r3, 800e1d2 <_read_r+0x1e>
 800e1d0:	6023      	str	r3, [r4, #0]
 800e1d2:	bd38      	pop	{r3, r4, r5, pc}
 800e1d4:	200013b4 	.word	0x200013b4

0800e1d8 <_init>:
 800e1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1da:	bf00      	nop
 800e1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1de:	bc08      	pop	{r3}
 800e1e0:	469e      	mov	lr, r3
 800e1e2:	4770      	bx	lr

0800e1e4 <_fini>:
 800e1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e6:	bf00      	nop
 800e1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ea:	bc08      	pop	{r3}
 800e1ec:	469e      	mov	lr, r3
 800e1ee:	4770      	bx	lr
